// Generated by Haxe 4.0.0+ef18b627e
(function ($global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Assets = function() { };
$hxClasses["Assets"] = Assets;
Assets.__name__ = "Assets";
Assets.init = function() {
	if(Assets.initDone) {
		return;
	}
	Assets.initDone = true;
	var this1 = hxd_Res.get_loader();
	Assets.fontSmall = this1.loadCache("fonts/barlow_condensed_regular_12.fnt",hxd_res_BitmapFont).toFont();
	var this2 = hxd_Res.get_loader();
	Assets.fontMedium = this2.loadCache("fonts/barlow_condensed_regular_17.fnt",hxd_res_BitmapFont).toFont();
	var this3 = hxd_Res.get_loader();
	Assets.fontLarge = this3.loadCache("fonts/barlow_condensed_regular_32.fnt",hxd_res_BitmapFont).toFont();
	Assets.tiles = dn_heaps_assets_Atlas.load("atlas/tiles.atlas");
};
var h3d_IDrawable = function() { };
$hxClasses["h3d.IDrawable"] = h3d_IDrawable;
h3d_IDrawable.__name__ = "h3d.IDrawable";
h3d_IDrawable.__isInterface__ = true;
var hxd_App = function() {
	var _gthis = this;
	var engine = h3d_Engine.CURRENT;
	if(engine != null) {
		this.engine = engine;
		engine.onReady = $bind(this,this.setup);
		haxe_Timer.delay($bind(this,this.setup),0);
	} else {
		hxd_System.start(function() {
			engine = new h3d_Engine();
			_gthis.engine = engine;
			engine.onReady = $bind(_gthis,_gthis.setup);
			engine.init();
		});
	}
};
$hxClasses["hxd.App"] = hxd_App;
hxd_App.__name__ = "hxd.App";
hxd_App.__interfaces__ = [h3d_IDrawable];
hxd_App.staticHandler = function() {
};
hxd_App.prototype = {
	engine: null
	,s3d: null
	,s2d: null
	,sevents: null
	,isDisposed: null
	,onResize: function() {
	}
	,render: function(e) {
		this.s3d.render(e);
		this.s2d.render(e);
	}
	,setup: function() {
		var _gthis = this;
		var initDone = false;
		this.engine.onReady = hxd_App.staticHandler;
		this.engine.onResized = function() {
			if(_gthis.s2d == null) {
				return;
			}
			_gthis.s2d.checkResize();
			if(initDone) {
				_gthis.onResize();
			}
		};
		this.s3d = new h3d_scene_Scene();
		this.s2d = new h2d_Scene();
		this.sevents = new hxd_SceneEvents();
		this.sevents.addScene(this.s2d);
		this.sevents.addScene(this.s3d);
		this.loadAssets(function() {
			initDone = true;
			_gthis.init();
			hxd_Timer.skip();
			_gthis.mainLoop();
			hxd_System.setLoop($bind(_gthis,_gthis.mainLoop));
			hxd_Key.initialize();
		});
	}
	,loadAssets: function(onLoaded) {
		onLoaded();
	}
	,init: function() {
	}
	,mainLoop: function() {
		hxd_Timer.update();
		this.sevents.checkEvents();
		if(this.isDisposed) {
			return;
		}
		this.update(hxd_Timer.dt);
		if(this.isDisposed) {
			return;
		}
		var dt = hxd_Timer.dt;
		this.s2d.setElapsedTime(dt);
		this.s3d.setElapsedTime(dt);
		this.engine.render(this);
	}
	,update: function(dt) {
	}
	,__class__: hxd_App
};
var Boot = function() {
	this.speed = 1.0;
	hxd_App.call(this);
};
$hxClasses["Boot"] = Boot;
Boot.__name__ = "Boot";
Boot.main = function() {
	new Boot();
};
Boot.__super__ = hxd_App;
Boot.prototype = $extend(hxd_App.prototype,{
	init: function() {
		Boot.ME = this;
		new Main(this.s2d);
		this.onResize();
	}
	,onResize: function() {
		hxd_App.prototype.onResize.call(this);
		dn_Process.resizeAll();
	}
	,speed: null
	,update: function(deltaTime) {
		hxd_App.prototype.update.call(this,deltaTime);
		var tmod = hxd_Timer.dt * hxd_Timer.wantedFPS * this.speed;
		dn_heaps_Controller.beforeUpdate();
		dn_Process.updateAll(tmod);
	}
	,__class__: Boot
});
var dn_Process = function(parent) {
	this.init();
	if(parent == null) {
		dn_Process.ROOTS.push(this);
	} else {
		parent.addChild(this);
	}
};
$hxClasses["dn.Process"] = dn_Process;
dn_Process.__name__ = "dn.Process";
dn_Process.updateAll = function(tmod,rendering) {
	if(rendering == null) {
		rendering = true;
	}
	var _g = 0;
	var _g1 = dn_Process.ROOTS;
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		dn_Process._update(p,tmod,rendering);
	}
	var _g2 = 0;
	var _g3 = dn_Process.ROOTS;
	while(_g2 < _g3.length) {
		var p1 = _g3[_g2];
		++_g2;
		if(!(p1.paused || p1.destroyed)) {
			p1.postUpdate();
			if(!p1.destroyed) {
				var _g4 = 0;
				var _g11 = p1.children;
				while(_g4 < _g11.length) {
					var c = _g11[_g4];
					++_g4;
					if(!(c.paused || c.destroyed)) {
						c.postUpdate();
						if(!c.destroyed) {
							var _g5 = 0;
							var _g12 = c.children;
							while(_g5 < _g12.length) {
								var c1 = _g12[_g5];
								++_g5;
								dn_Process._postUpdate(c1);
							}
						}
					}
				}
			}
		}
	}
	dn_Process._checkDestroyeds(dn_Process.ROOTS);
};
dn_Process.resizeAll = function() {
	var _g = 0;
	var _g1 = dn_Process.ROOTS;
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		if(!p.destroyed) {
			p.onResize();
			var _g2 = 0;
			var _g11 = p.children;
			while(_g2 < _g11.length) {
				var p1 = _g11[_g2];
				++_g2;
				if(!p1.destroyed) {
					p1.onResize();
					var _g3 = 0;
					var _g12 = p1.children;
					while(_g3 < _g12.length) {
						var p2 = _g12[_g3];
						++_g3;
						dn_Process._resize(p2);
					}
				}
			}
		}
	}
};
dn_Process._resize = function(p) {
	if(!p.destroyed) {
		p.onResize();
		var _g = 0;
		var _g1 = p.children;
		while(_g < _g1.length) {
			var p1 = _g1[_g];
			++_g;
			dn_Process._resize(p1);
		}
	}
};
dn_Process._update = function(p,tmod,rendering) {
	if(rendering == null) {
		rendering = true;
	}
	if(p.paused || p.destroyed) {
		return;
	}
	tmod *= p.speedMod;
	p.rendering = rendering;
	p.tmod = tmod;
	p.ftime += tmod;
	p.delayer.update(tmod);
	p.cd.update(tmod);
	p.tw.update(tmod);
	if(!p.paused && !p.destroyed) {
		p.update();
		if(p.onUpdateCb != null) {
			p.onUpdateCb();
		}
	}
	if(!p.paused && !p.destroyed) {
		var _g = 0;
		var _g1 = p.children;
		while(_g < _g1.length) {
			var p1 = _g1[_g];
			++_g;
			dn_Process._update(p1,tmod,rendering);
		}
	}
};
dn_Process._postUpdate = function(p) {
	if(p.paused || p.destroyed) {
		return;
	}
	p.postUpdate();
	if(!p.destroyed) {
		var _g = 0;
		var _g1 = p.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			dn_Process._postUpdate(c);
		}
	}
};
dn_Process._checkDestroyeds = function(plist) {
	var i = 0;
	while(i < plist.length) {
		var p = plist[i];
		if(p.destroyed) {
			dn_Process._dispose(p);
		} else {
			dn_Process._checkDestroyeds(p.children);
			++i;
		}
	}
};
dn_Process._dispose = function(p) {
	var _g = 0;
	var _g1 = p.children;
	while(_g < _g1.length) {
		var p1 = _g1[_g];
		++_g;
		p1.destroyed = true;
	}
	dn_Process._checkDestroyeds(p.children);
	p.delayer.destroy();
	p.cd.destroy();
	p.tw.destroy();
	if(p.parent != null) {
		HxOverrides.remove(p.parent.children,p);
	} else {
		HxOverrides.remove(dn_Process.ROOTS,p);
	}
	if(p.root != null) {
		var _this = p.root;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
	}
	p.onDispose();
	if(p.onDisposeCb != null) {
		p.onDisposeCb();
	}
	p.parent = null;
	p.children = null;
	p.delayer = null;
	p.cd = null;
	p.tw = null;
	p.root = null;
};
dn_Process.prototype = {
	rendering: null
	,uniqId: null
	,ftime: null
	,paused: null
	,destroyed: null
	,speedMod: null
	,parent: null
	,tmod: null
	,name: null
	,children: null
	,delayer: null
	,cd: null
	,tw: null
	,root: null
	,init: function() {
		this.name = "process";
		this.uniqId = dn_Process.UNIQ_ID++;
		this.children = [];
		this.paused = false;
		this.destroyed = false;
		this.ftime = 0;
		this.tmod = 1;
		this.speedMod = 1.0;
		this.delayer = new dn_Delayer(this.getDefaultFrameRate());
		this.cd = new dn_Cooldown(this.getDefaultFrameRate());
		this.tw = new dn_Tweenie(this.getDefaultFrameRate());
	}
	,createRoot: function(ctx) {
		if(this.root != null) {
			throw new js__$Boot_HaxeError(Std.string(this) + ": root already created!");
		}
		if(ctx == null) {
			if(this.parent == null || this.parent.root == null) {
				throw new js__$Boot_HaxeError(Std.string(this) + ": context required");
			}
			ctx = this.parent.root;
		}
		this.root = new h2d_Layers(ctx);
	}
	,createRootInLayers: function(ctx,plan) {
		if(this.root != null) {
			throw new js__$Boot_HaxeError(Std.string(this) + ": root already exists");
		}
		this.root = new h2d_Layers();
		ctx.addChildAt(this.root,plan);
	}
	,update: function() {
	}
	,postUpdate: function() {
	}
	,onResize: function() {
	}
	,onDispose: function() {
	}
	,onUpdateCb: function() {
	}
	,onDisposeCb: function() {
	}
	,toString: function() {
		return this.name + ":" + this.uniqId;
	}
	,getDefaultFrameRate: function() {
		return hxd_Timer.wantedFPS;
	}
	,pause: function() {
		this.paused = true;
	}
	,resume: function() {
		this.paused = false;
	}
	,addChild: function(p) {
		if(p.parent == null) {
			HxOverrides.remove(dn_Process.ROOTS,p);
		} else {
			HxOverrides.remove(p.parent.children,p);
		}
		p.parent = this;
		this.children.push(p);
	}
	,__class__: dn_Process
};
var Camera = function() {
	this.shakePower = 1.0;
	this.zoom = 1.;
	this.bumpOffY = 0.;
	this.bumpOffX = 0.;
	dn_Process.call(this,Game.ME);
	this.x = this.y = 0;
	this.dx = this.dy = 0;
};
$hxClasses["Camera"] = Camera;
Camera.__name__ = "Camera";
Camera.__super__ = dn_Process;
Camera.prototype = $extend(dn_Process.prototype,{
	target: null
	,x: null
	,y: null
	,dx: null
	,dy: null
	,bumpOffX: null
	,bumpOffY: null
	,zoom: null
	,get_screenWid: function() {
		var _this = Game.ME;
		var x = (dn_Process.CUSTOM_STAGE_WIDTH > 0 ? dn_Process.CUSTOM_STAGE_WIDTH : hxd_Window.getInstance().get_width()) / Const.SCALE;
		if(x > .0) {
			var t = x + .5 | 0;
			if(t < x) {
				return t + 1;
			} else {
				return t;
			}
		} else if(x < .0) {
			var t1 = x - .5 | 0;
			if(t1 < x) {
				return t1 + 1;
			} else {
				return t1;
			}
		} else {
			return 0;
		}
	}
	,get_screenHei: function() {
		var _this = Game.ME;
		var x = (dn_Process.CUSTOM_STAGE_HEIGHT > 0 ? dn_Process.CUSTOM_STAGE_HEIGHT : hxd_Window.getInstance().get_height()) / Const.SCALE;
		if(x > .0) {
			var t = x + .5 | 0;
			if(t < x) {
				return t + 1;
			} else {
				return t;
			}
		} else if(x < .0) {
			var t1 = x - .5 | 0;
			if(t1 < x) {
				return t1 + 1;
			} else {
				return t1;
			}
		} else {
			return 0;
		}
	}
	,setPosition: function(tx,ty) {
		this.x = tx;
		this.y = ty;
		this.target = null;
	}
	,shakePower: null
	,shakeS: function(t,pow) {
		if(pow == null) {
			pow = 1.0;
		}
		var _this = this.cd;
		var frames = t * this.cd.baseFps;
		var allowLower = false;
		var onComplete = null;
		if(allowLower == null) {
			allowLower = true;
		}
		frames = Math.floor(frames * 1000) / 1000;
		var cur = _this._getCdObject(16777216);
		if(!(cur != null && frames < cur.frames && !allowLower)) {
			if(frames <= 0) {
				if(cur != null) {
					HxOverrides.remove(_this.cdList,cur);
					cur.frames = 0;
					cur.cb = null;
					_this.fastCheck.remove(cur.k);
				}
			} else {
				_this.fastCheck.h[16777216] = true;
				if(cur != null) {
					cur.frames = frames;
				} else {
					_this.cdList.push(new dn__$Cooldown_CdInst(16777216,frames));
				}
			}
			if(onComplete != null) {
				if(frames <= 0) {
					onComplete();
				} else {
					var cd = _this._getCdObject(16777216);
					if(cd == null) {
						throw new js__$Boot_HaxeError("cannot bind onComplete(" + 16777216 + "): cooldown " + 16777216 + " isn't running");
					}
					cd.cb = onComplete;
				}
			}
		}
		this.shakePower = pow;
	}
	,postUpdate: function() {
		dn_Process.prototype.postUpdate.call(this);
		if(!ui_Console.ME.hasFlag("scroll")) {
			var level = Game.ME.level;
			var scroller = Game.ME.scroller;
			var v = this.zoom;
			scroller.posChanged = true;
			scroller.scaleX = v;
			scroller.posChanged = true;
			scroller.scaleY = v;
			var tmp = this.get_screenWid();
			var _this = level.data.layersByName;
			var _this1 = __map_reserved["collisions"] != null ? _this.getReserved("collisions") : _this.h["collisions"];
			var x = _this1.level.pxWid / _this1.gridWid;
			var tmp1;
			if(x > .0) {
				var t = x + .5 | 0;
				tmp1 = t < x ? t + 1 : t;
			} else if(x < .0) {
				var t1 = x - .5 | 0;
				tmp1 = t1 < x ? t1 + 1 : t1;
			} else {
				tmp1 = 0;
			}
			if(tmp < tmp1 * Const.GRID * this.zoom) {
				var v1 = -this.x * this.zoom + this.get_screenWid() * 0.5;
				scroller.posChanged = true;
				scroller.x = v1;
			} else {
				var v2 = this.get_screenWid() * 0.5;
				var _this2 = level.data.layersByName;
				var _this3 = __map_reserved["collisions"] != null ? _this2.getReserved("collisions") : _this2.h["collisions"];
				var x1 = _this3.level.pxWid / _this3.gridWid;
				var v3;
				if(x1 > .0) {
					var t2 = x1 + .5 | 0;
					v3 = t2 < x1 ? t2 + 1 : t2;
				} else if(x1 < .0) {
					var t3 = x1 - .5 | 0;
					v3 = t3 < x1 ? t3 + 1 : t3;
				} else {
					v3 = 0;
				}
				scroller.posChanged = true;
				scroller.x = v2 - v3 * 0.5 * Const.GRID * this.zoom;
			}
			var tmp2 = this.get_screenHei();
			var _this4 = level.data.layersByName;
			var _this5 = __map_reserved["collisions"] != null ? _this4.getReserved("collisions") : _this4.h["collisions"];
			var x2 = _this5.level.pxHei / _this5.gridHei;
			var tmp3;
			if(x2 > .0) {
				var t4 = x2 + .5 | 0;
				tmp3 = t4 < x2 ? t4 + 1 : t4;
			} else if(x2 < .0) {
				var t5 = x2 - .5 | 0;
				tmp3 = t5 < x2 ? t5 + 1 : t5;
			} else {
				tmp3 = 0;
			}
			if(tmp2 < tmp3 * Const.GRID * this.zoom) {
				var v4 = -this.y * this.zoom + this.get_screenHei() * 0.5;
				scroller.posChanged = true;
				scroller.y = v4;
			} else {
				var v5 = this.get_screenHei() * 0.5;
				var _this6 = level.data.layersByName;
				var _this7 = __map_reserved["collisions"] != null ? _this6.getReserved("collisions") : _this6.h["collisions"];
				var x3 = _this7.level.pxHei / _this7.gridHei;
				var v6;
				if(x3 > .0) {
					var t6 = x3 + .5 | 0;
					v6 = t6 < x3 ? t6 + 1 : t6;
				} else if(x3 < .0) {
					var t7 = x3 - .5 | 0;
					v6 = t7 < x3 ? t7 + 1 : t7;
				} else {
					v6 = 0;
				}
				scroller.posChanged = true;
				scroller.y = v5 - v6 * 0.5 * Const.GRID * this.zoom;
			}
			var tmp4 = this.get_screenWid();
			var _this8 = level.data.layersByName;
			var _this9 = __map_reserved["collisions"] != null ? _this8.getReserved("collisions") : _this8.h["collisions"];
			var x4 = _this9.level.pxWid / _this9.gridWid;
			var tmp5;
			if(x4 > .0) {
				var t8 = x4 + .5 | 0;
				tmp5 = t8 < x4 ? t8 + 1 : t8;
			} else if(x4 < .0) {
				var t9 = x4 - .5 | 0;
				tmp5 = t9 < x4 ? t9 + 1 : t9;
			} else {
				tmp5 = 0;
			}
			if(tmp4 < tmp5 * Const.GRID * this.zoom) {
				var x5 = scroller.x;
				var min = this.get_screenWid();
				var _this10 = level.data.layersByName;
				var _this11 = __map_reserved["collisions"] != null ? _this10.getReserved("collisions") : _this10.h["collisions"];
				var x6 = _this11.level.pxWid / _this11.gridWid;
				var min1;
				if(x6 > .0) {
					var t10 = x6 + .5 | 0;
					min1 = t10 < x6 ? t10 + 1 : t10;
				} else if(x6 < .0) {
					var t11 = x6 - .5 | 0;
					min1 = t11 < x6 ? t11 + 1 : t11;
				} else {
					min1 = 0;
				}
				var min2 = min - min1 * Const.GRID * this.zoom;
				scroller.posChanged = true;
				scroller.x = x5 < min2 ? min2 : x5 > 0 ? 0 : x5;
			}
			var tmp6 = this.get_screenHei();
			var _this12 = level.data.layersByName;
			var _this13 = __map_reserved["collisions"] != null ? _this12.getReserved("collisions") : _this12.h["collisions"];
			var x7 = _this13.level.pxHei / _this13.gridHei;
			var tmp7;
			if(x7 > .0) {
				var t12 = x7 + .5 | 0;
				tmp7 = t12 < x7 ? t12 + 1 : t12;
			} else if(x7 < .0) {
				var t13 = x7 - .5 | 0;
				tmp7 = t13 < x7 ? t13 + 1 : t13;
			} else {
				tmp7 = 0;
			}
			if(tmp6 < tmp7 * Const.GRID * this.zoom) {
				var x8 = scroller.y;
				var min3 = this.get_screenHei();
				var _this14 = level.data.layersByName;
				var _this15 = __map_reserved["collisions"] != null ? _this14.getReserved("collisions") : _this14.h["collisions"];
				var x9 = _this15.level.pxHei / _this15.gridHei;
				var min4;
				if(x9 > .0) {
					var t14 = x9 + .5 | 0;
					min4 = t14 < x9 ? t14 + 1 : t14;
				} else if(x9 < .0) {
					var t15 = x9 - .5 | 0;
					min4 = t15 < x9 ? t15 + 1 : t15;
				} else {
					min4 = 0;
				}
				var min5 = min3 - min4 * Const.GRID * this.zoom;
				scroller.posChanged = true;
				scroller.y = x8 < min5 ? min5 : x8 > 0 ? 0 : x8;
			}
			if(this.cd.fastCheck.h.hasOwnProperty(16777216)) {
				var _g = scroller;
				var v7 = _g.x + Math.cos(this.ftime * 1.10) * Const.SCALE * this.shakePower * this.zoom * this.cd._getRatio(16777216);
				_g.posChanged = true;
				_g.x = v7;
				var _g1 = scroller;
				var v8 = _g1.y + Math.sin(0.3 + this.ftime * 1.33) * Const.SCALE * this.shakePower * this.zoom * this.cd._getRatio(16777216);
				_g1.posChanged = true;
				_g1.y = v8;
			}
			this.bumpOffX *= Math.pow(0.75,this.tmod);
			this.bumpOffY *= Math.pow(0.75,this.tmod);
			scroller.posChanged = true;
			scroller.x = scroller.x + this.bumpOffX * this.zoom | 0;
			scroller.posChanged = true;
			scroller.y = scroller.y + this.bumpOffY * this.zoom | 0;
		}
	}
	,update: function() {
		dn_Process.prototype.update.call(this);
		if(this.target != null) {
			var s = 0.006;
			var deadZone = 5;
			var _this = this.target;
			var tx = (_this.cx + _this.xr) * Const.GRID;
			var _this1 = this.target;
			var ty = (_this1.cy + _this1.yr) * Const.GRID - Const.GRID * 3;
			var ax = this.x;
			var ay = this.y;
			var d = Math.sqrt((ax - tx) * (ax - tx) + (ay - ty) * (ay - ty));
			if(d >= deadZone) {
				var a = Math.atan2(ty - this.y,tx - this.x);
				this.dx += Math.cos(a) * (d - deadZone) * s * this.tmod;
				this.dy += Math.sin(a) * (d - deadZone) * s * this.tmod;
			}
		}
		var frict = 0.89;
		this.x += this.dx * this.tmod;
		this.dx *= Math.pow(frict,this.tmod);
		this.y += this.dy * this.tmod;
		this.dy *= Math.pow(frict,this.tmod);
	}
	,__class__: Camera
});
var Const = function() { };
$hxClasses["Const"] = Const;
Const.__name__ = "Const";
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	,__class__: EReg
};
var Entity = function(x,y) {
	this.fallStartY = Const.INFINITE;
	this.actions = [];
	this.animOffsetY = 0.;
	this.animOffsetX = 0.;
	this.skewY = 1.;
	this.skewX = 1.;
	this.hasCollisions = true;
	this.entityVisible = true;
	this.sprScaleY = 1.0;
	this.sprScaleX = 1.0;
	this.dir = 1;
	this.radius = Const.GRID * 0.5;
	this.hei = Const.GRID;
	this.gravity = 0.025;
	this.bumpFrict = 0.93;
	this.frict = 0.89;
	this.bdy = 0.;
	this.bdx = 0.;
	this.dy = 0.;
	this.dx = 0.;
	this.yr = 1.0;
	this.xr = 0.5;
	this.cy = 0;
	this.cx = 0;
	this.destroyed = false;
	this.uid = Const._uniq++;
	Entity.ALL.push(this);
	this.cd = new dn_Cooldown(Const.FPS);
	this.setPosCase(x,y);
	this.spr = new dn_heaps_slib_HSprite(Assets.tiles);
	Game.ME.scroller.addChildAt(this.spr,Const.DP_MAIN);
	this.spr.set_colorAdd(this.colorAdd = new h3d_Vector());
	this.colorMatrix = h3d_Matrix.I();
	this.spr.set_filter(new h2d_filter_ColorMatrix(this.colorMatrix));
	var _this = this.spr.pivot;
	_this.centerFactorX = 0.5;
	_this.centerFactorY = 1;
	_this.usingFactor = true;
	_this.isUndefined = false;
	var _this1 = this.spr;
	var l = null;
	if(l != null) {
		if(l.pages == null || l.pages.length == 0) {
			throw new js__$Boot_HaxeError("sprite sheet has no backing texture, please generate one");
		}
		if(_this1.allocated && _this1.lib != null) {
			_this1.lib.removeChild(_this1);
		}
		_this1.lib = l;
		if(_this1.allocated) {
			_this1.lib.addChild(_this1);
		}
		if(_this1.pivot.isUndefined) {
			var _this2 = _this1.pivot;
			_this2.centerFactorX = _this1.lib.defaultCenterX;
			_this2.centerFactorY = _this1.lib.defaultCenterY;
			_this2.usingFactor = true;
			_this2.isUndefined = false;
		}
	}
	if("pixel" != _this1.groupName) {
		_this1.groupName = "pixel";
	}
	if(!_this1.destroyed && _this1.lib != null && _this1.groupName != null) {
		var _this3 = _this1.lib;
		var k = _this1.groupName;
		var tmp;
		if(k == null) {
			tmp = _this3.currentGroup;
		} else {
			var _this4 = _this3.groups;
			tmp = __map_reserved[k] != null ? _this4.getReserved(k) : _this4.h[k];
		}
		_this1.group = tmp;
		var _this5 = _this1.lib;
		var k1 = _this1.groupName;
		var frame = 0;
		if(frame == null) {
			frame = 0;
		}
		var g;
		if(k1 == null) {
			g = _this5.currentGroup;
		} else {
			var _this6 = _this5.groups;
			g = __map_reserved[k1] != null ? _this6.getReserved(k1) : _this6.h[k1];
		}
		_this1.frameData = g == null ? null : g.frames[frame];
		if(_this1.frameData == null) {
			throw new js__$Boot_HaxeError("Unknown frame: " + _this1.groupName + "(" + 0 + ")");
		}
		if(_this1.rawTile == null) {
			_this1.rawTile = _this1.lib.pages[_this1.frameData.page].clone();
		} else {
			_this1.rawTile.setTexture(_this1.lib.pages[_this1.frameData.page].innerTex);
		}
		_this1.lastPage = _this1.frameData.page;
		_this1.setFrame(0);
	} else {
		_this1.setEmptyTexture();
	}
};
$hxClasses["Entity"] = Entity;
Entity.__name__ = "Entity";
Entity.prototype = {
	destroyed: null
	,cd: null
	,uid: null
	,cx: null
	,cy: null
	,xr: null
	,yr: null
	,dx: null
	,dy: null
	,bdx: null
	,bdy: null
	,frict: null
	,bumpFrict: null
	,gravity: null
	,hei: null
	,radius: null
	,dir: null
	,sprScaleX: null
	,sprScaleY: null
	,entityVisible: null
	,hasCollisions: null
	,skewX: null
	,skewY: null
	,animOffsetX: null
	,animOffsetY: null
	,spr: null
	,colorAdd: null
	,colorMatrix: null
	,debugLabel: null
	,actions: null
	,isAlive: function() {
		return !this.destroyed;
	}
	,setPosCase: function(x,y) {
		this.cx = x;
		this.cy = y;
		this.xr = 0.5;
		this.yr = 1;
	}
	,setPosPixel: function(x,y) {
		this.cx = x / Const.GRID | 0;
		this.cy = y / Const.GRID | 0;
		this.xr = (x - this.cx * Const.GRID) / Const.GRID;
		this.yr = (y - this.cy * Const.GRID) / Const.GRID;
	}
	,bump: function(x,y) {
		this.bdx += x;
		this.bdy += y;
	}
	,dispose: function() {
		HxOverrides.remove(Entity.ALL,this);
		this.colorAdd = null;
		var _this = this.spr;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
		this.spr = null;
		if(this.debugLabel != null) {
			var _this1 = this.debugLabel;
			if(_this1 != null && _this1.parent != null) {
				_this1.parent.removeChild(_this1);
			}
			this.debugLabel = null;
		}
		this.cd.destroy();
		this.cd = null;
	}
	,chargeAction: function(id,sec,cb) {
		if(this.isChargingAction(id)) {
			this.cancelAction(id);
		}
		if(sec <= 0) {
			cb();
		} else {
			this.actions.push({ id : id, cb : cb, startT : sec, curT : sec});
		}
	}
	,getChargeRatio: function(id) {
		var _g = 0;
		var _g1 = this.actions;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.id == id) {
				return 1 - a.curT / a.startT;
			}
		}
		return 0.;
	}
	,isChargingAction: function(id) {
		if(id == null) {
			return this.actions.length > 0;
		}
		var _g = 0;
		var _g1 = this.actions;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.id == id) {
				return true;
			}
		}
		return false;
	}
	,cancelAction: function(id) {
		if(id == null) {
			this.actions = [];
		} else {
			var i = 0;
			while(i < this.actions.length) if(this.actions[i].id == id) {
				this.actions.splice(i,1);
			} else {
				++i;
			}
		}
	}
	,updateActions: function() {
		var i = 0;
		while(i < this.actions.length) {
			var a = this.actions[i];
			a.curT -= Game.ME.tmod / Const.FPS;
			if(a.curT <= 0) {
				this.actions.splice(i,1);
				if(this.isAlive()) {
					a.cb();
				}
			} else {
				++i;
			}
		}
	}
	,lockS: function(t,allowLower) {
		if(allowLower == null) {
			allowLower = false;
		}
		if(!this.isAlive()) {
			return;
		}
		if(allowLower) {
			var _this = this.cd;
			var frames = t * this.cd.baseFps;
			var allowLower1 = true;
			var onComplete = null;
			if(allowLower1 == null) {
				allowLower1 = true;
			}
			frames = Math.floor(frames * 1000) / 1000;
			var cur = _this._getCdObject(20971520);
			if(!(cur != null && frames < cur.frames && !allowLower1)) {
				if(frames <= 0) {
					if(cur != null) {
						HxOverrides.remove(_this.cdList,cur);
						cur.frames = 0;
						cur.cb = null;
						_this.fastCheck.remove(cur.k);
					}
				} else {
					_this.fastCheck.h[20971520] = true;
					if(cur != null) {
						cur.frames = frames;
					} else {
						_this.cdList.push(new dn__$Cooldown_CdInst(20971520,frames));
					}
				}
				if(onComplete != null) {
					if(frames <= 0) {
						onComplete();
					} else {
						var cd = _this._getCdObject(20971520);
						if(cd == null) {
							throw new js__$Boot_HaxeError("cannot bind onComplete(" + 20971520 + "): cooldown " + 20971520 + " isn't running");
						}
						cd.cb = onComplete;
					}
				}
			}
		} else {
			var _this1 = this.cd;
			var frames1 = t * this.cd.baseFps;
			var allowLower2 = false;
			var onComplete1 = null;
			if(allowLower2 == null) {
				allowLower2 = true;
			}
			frames1 = Math.floor(frames1 * 1000) / 1000;
			var cur1 = _this1._getCdObject(20971520);
			if(!(cur1 != null && frames1 < cur1.frames && !allowLower2)) {
				if(frames1 <= 0) {
					if(cur1 != null) {
						HxOverrides.remove(_this1.cdList,cur1);
						cur1.frames = 0;
						cur1.cb = null;
						_this1.fastCheck.remove(cur1.k);
					}
				} else {
					_this1.fastCheck.h[20971520] = true;
					if(cur1 != null) {
						cur1.frames = frames1;
					} else {
						_this1.cdList.push(new dn__$Cooldown_CdInst(20971520,frames1));
					}
				}
				if(onComplete1 != null) {
					if(frames1 <= 0) {
						onComplete1();
					} else {
						var cd1 = _this1._getCdObject(20971520);
						if(cd1 == null) {
							throw new js__$Boot_HaxeError("cannot bind onComplete(" + 20971520 + "): cooldown " + 20971520 + " isn't running");
						}
						cd1.cb = onComplete1;
					}
				}
			}
		}
	}
	,isLocked: function() {
		if(this.isAlive()) {
			return this.cd.fastCheck.h.hasOwnProperty(20971520);
		} else {
			return true;
		}
	}
	,canAct: function() {
		if(this.isAlive() && !this.isLocked()) {
			return !this.isChargingAction();
		} else {
			return false;
		}
	}
	,blink: function(c) {
		var _this = this.colorMatrix;
		var c1 = (255. | 0) << 24 | c;
		_this._41 += (c1 >> 16 & 255) / 255;
		_this._42 += (c1 >> 8 & 255) / 255;
		_this._43 += (c1 & 255) / 255;
		var _this1 = this.cd;
		var frames = 1;
		var allowLower = true;
		var onComplete = null;
		if(allowLower == null) {
			allowLower = true;
		}
		frames = Math.floor(frames * 1000) / 1000;
		var cur = _this1._getCdObject(4194304);
		if(!(cur != null && frames < cur.frames && !allowLower)) {
			if(frames <= 0) {
				if(cur != null) {
					HxOverrides.remove(_this1.cdList,cur);
					cur.frames = 0;
					cur.cb = null;
					_this1.fastCheck.remove(cur.k);
				}
			} else {
				_this1.fastCheck.h[4194304] = true;
				if(cur != null) {
					cur.frames = frames;
				} else {
					_this1.cdList.push(new dn__$Cooldown_CdInst(4194304,frames));
				}
			}
			if(onComplete != null) {
				if(frames <= 0) {
					onComplete();
				} else {
					var cd = _this1._getCdObject(4194304);
					if(cd == null) {
						throw new js__$Boot_HaxeError("cannot bind onComplete(" + 4194304 + "): cooldown " + 4194304 + " isn't running");
					}
					cd.cb = onComplete;
				}
			}
		}
	}
	,preUpdate: function() {
		this.cd.update(Game.ME.tmod);
		this.updateActions();
	}
	,postUpdate: function() {
		var _this = this.spr;
		_this.posChanged = true;
		_this.x = (this.cx + this.xr) * Const.GRID | 0;
		var _this1 = this.spr;
		_this1.posChanged = true;
		_this1.y = (this.cy + this.yr) * Const.GRID | 0;
		var _this2 = this.spr;
		_this2.posChanged = true;
		_this2.scaleX = this.dir * this.sprScaleX;
		var _this3 = this.spr;
		_this3.posChanged = true;
		_this3.scaleY = this.sprScaleY;
		this.spr.set_visible(this.entityVisible);
		var _g = this.spr;
		_g.posChanged = true;
		_g.scaleX *= this.skewX;
		var _g1 = this.spr;
		_g1.posChanged = true;
		_g1.scaleY *= this.skewY;
		this.skewX += (1 - this.skewX) * 0.2;
		this.skewY += (1 - this.skewY) * 0.2;
		var _g2 = this.spr;
		_g2.posChanged = true;
		_g2.x += this.animOffsetX;
		var _g3 = this.spr;
		_g3.posChanged = true;
		_g3.y += this.animOffsetY;
		this.animOffsetX *= Math.pow(0.8,Game.ME.tmod);
		this.animOffsetY *= Math.pow(0.8,Game.ME.tmod);
		if(!this.cd.fastCheck.h.hasOwnProperty(4194304)) {
			var spd = 0.3;
			this.colorMatrix._11 += (1 - this.colorMatrix._11) * spd;
			this.colorMatrix._12 += (0 - this.colorMatrix._12) * spd;
			this.colorMatrix._13 += (0 - this.colorMatrix._13) * spd;
			this.colorMatrix._14 += (0 - this.colorMatrix._14) * spd;
			this.colorMatrix._21 += (0 - this.colorMatrix._21) * spd;
			this.colorMatrix._22 += (1 - this.colorMatrix._22) * spd;
			this.colorMatrix._23 += (0 - this.colorMatrix._23) * spd;
			this.colorMatrix._24 += (0 - this.colorMatrix._24) * spd;
			this.colorMatrix._31 += (0 - this.colorMatrix._31) * spd;
			this.colorMatrix._32 += (0 - this.colorMatrix._32) * spd;
			this.colorMatrix._33 += (1 - this.colorMatrix._33) * spd;
			this.colorMatrix._34 += (0 - this.colorMatrix._34) * spd;
			this.colorMatrix._41 += (0 - this.colorMatrix._41) * spd;
			this.colorMatrix._42 += (0 - this.colorMatrix._42) * spd;
			this.colorMatrix._43 += (0 - this.colorMatrix._43) * spd;
			this.colorMatrix._44 += (1 - this.colorMatrix._44) * spd;
		}
		if(this.debugLabel != null) {
			var _this4 = this.debugLabel;
			var v = (this.cx + this.xr) * Const.GRID - this.debugLabel.get_textWidth() * 0.5 | 0;
			_this4.posChanged = true;
			_this4.x = v;
			var _this5 = this.debugLabel;
			_this5.posChanged = true;
			_this5.y = (this.cy + this.yr) * Const.GRID + 1 | 0;
		}
	}
	,onLand: function(cHei) {
	}
	,fallStartY: null
	,update: function() {
		var x = (this.dx + this.bdx) * Game.ME.tmod;
		var x1 = x < 0 ? -x : x;
		var steps;
		if(x1 > .0) {
			var t = x1 + .5 | 0;
			steps = t < x1 ? t + 1 : t;
		} else if(x1 < .0) {
			var t1 = x1 - .5 | 0;
			steps = t1 < x1 ? t1 + 1 : t1;
		} else {
			steps = 0;
		}
		var step = (this.dx + this.bdx) * Game.ME.tmod / steps;
		while(steps > 0) {
			this.xr += step;
			var tmp;
			if(this.hasCollisions && this.xr >= 0.6) {
				var _this = Game.ME.level;
				var cx = this.cx + 1;
				var cy = this.cy;
				var tmp1;
				var tmp2;
				if(cx >= 0) {
					var _this1 = _this.data.layersByName;
					var _this2 = __map_reserved["collisions"] != null ? _this1.getReserved("collisions") : _this1.h["collisions"];
					var x2 = _this2.level.pxWid / _this2.gridWid;
					var tmp3;
					if(x2 > .0) {
						var t2 = x2 + .5 | 0;
						tmp3 = t2 < x2 ? t2 + 1 : t2;
					} else if(x2 < .0) {
						var t3 = x2 - .5 | 0;
						tmp3 = t3 < x2 ? t3 + 1 : t3;
					} else {
						tmp3 = 0;
					}
					tmp2 = cx < tmp3;
				} else {
					tmp2 = false;
				}
				if(tmp2 && cy >= 0) {
					var _this3 = _this.data.layersByName;
					var _this4 = __map_reserved["collisions"] != null ? _this3.getReserved("collisions") : _this3.h["collisions"];
					var x3 = _this4.level.pxHei / _this4.gridHei;
					var tmp4;
					if(x3 > .0) {
						var t4 = x3 + .5 | 0;
						tmp4 = t4 < x3 ? t4 + 1 : t4;
					} else if(x3 < .0) {
						var t5 = x3 - .5 | 0;
						tmp4 = t5 < x3 ? t5 + 1 : t5;
					} else {
						tmp4 = 0;
					}
					tmp1 = cy < tmp4;
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					var this1 = _this.collMap;
					var _this5 = _this.data.layersByName;
					var _this6 = __map_reserved["collisions"] != null ? _this5.getReserved("collisions") : _this5.h["collisions"];
					var x4 = _this6.level.pxWid / _this6.gridWid;
					var key;
					if(x4 > .0) {
						var t6 = x4 + .5 | 0;
						key = t6 < x4 ? t6 + 1 : t6;
					} else if(x4 < .0) {
						var t7 = x4 - .5 | 0;
						key = t7 < x4 ? t7 + 1 : t7;
					} else {
						key = 0;
					}
					tmp = this1.h[cx + cy * key] == true;
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				this.xr = 0.6;
			}
			var tmp5;
			if(this.hasCollisions && this.xr <= 0.4) {
				var _this7 = Game.ME.level;
				var cx1 = this.cx - 1;
				var cy1 = this.cy;
				var tmp6;
				var tmp7;
				if(cx1 >= 0) {
					var _this8 = _this7.data.layersByName;
					var _this9 = __map_reserved["collisions"] != null ? _this8.getReserved("collisions") : _this8.h["collisions"];
					var x5 = _this9.level.pxWid / _this9.gridWid;
					var tmp8;
					if(x5 > .0) {
						var t8 = x5 + .5 | 0;
						tmp8 = t8 < x5 ? t8 + 1 : t8;
					} else if(x5 < .0) {
						var t9 = x5 - .5 | 0;
						tmp8 = t9 < x5 ? t9 + 1 : t9;
					} else {
						tmp8 = 0;
					}
					tmp7 = cx1 < tmp8;
				} else {
					tmp7 = false;
				}
				if(tmp7 && cy1 >= 0) {
					var _this10 = _this7.data.layersByName;
					var _this11 = __map_reserved["collisions"] != null ? _this10.getReserved("collisions") : _this10.h["collisions"];
					var x6 = _this11.level.pxHei / _this11.gridHei;
					var tmp9;
					if(x6 > .0) {
						var t10 = x6 + .5 | 0;
						tmp9 = t10 < x6 ? t10 + 1 : t10;
					} else if(x6 < .0) {
						var t11 = x6 - .5 | 0;
						tmp9 = t11 < x6 ? t11 + 1 : t11;
					} else {
						tmp9 = 0;
					}
					tmp6 = cy1 < tmp9;
				} else {
					tmp6 = false;
				}
				if(tmp6) {
					var this2 = _this7.collMap;
					var _this12 = _this7.data.layersByName;
					var _this13 = __map_reserved["collisions"] != null ? _this12.getReserved("collisions") : _this12.h["collisions"];
					var x7 = _this13.level.pxWid / _this13.gridWid;
					var key1;
					if(x7 > .0) {
						var t12 = x7 + .5 | 0;
						key1 = t12 < x7 ? t12 + 1 : t12;
					} else if(x7 < .0) {
						var t13 = x7 - .5 | 0;
						key1 = t13 < x7 ? t13 + 1 : t13;
					} else {
						key1 = 0;
					}
					tmp5 = this2.h[cx1 + cy1 * key1] == true;
				} else {
					tmp5 = true;
				}
			} else {
				tmp5 = false;
			}
			if(tmp5) {
				this.xr = 0.4;
			}
			while(this.xr > 1) {
				this.xr--;
				this.cx++;
			}
			while(this.xr < 0) {
				this.xr++;
				this.cx--;
			}
			--steps;
		}
		this.dx *= Math.pow(this.frict,Game.ME.tmod);
		this.bdx *= Math.pow(this.bumpFrict,Game.ME.tmod);
		var x8 = this.dx;
		if((x8 < 0 ? -x8 : x8) <= 0.0005 * Game.ME.tmod) {
			this.dx = 0;
		}
		var x9 = this.bdx;
		if((x9 < 0 ? -x9 : x9) <= 0.0005 * Game.ME.tmod) {
			this.bdx = 0;
		}
		var _this14 = Game.ME.level;
		var cx2 = this.cx;
		var cy2 = this.cy + 1;
		var tmp10;
		var tmp11;
		var tmp12;
		if(cx2 >= 0) {
			var _this15 = _this14.data.layersByName;
			var _this16 = __map_reserved["collisions"] != null ? _this15.getReserved("collisions") : _this15.h["collisions"];
			var x10 = _this16.level.pxWid / _this16.gridWid;
			var tmp13;
			if(x10 > .0) {
				var t14 = x10 + .5 | 0;
				tmp13 = t14 < x10 ? t14 + 1 : t14;
			} else if(x10 < .0) {
				var t15 = x10 - .5 | 0;
				tmp13 = t15 < x10 ? t15 + 1 : t15;
			} else {
				tmp13 = 0;
			}
			tmp12 = cx2 < tmp13;
		} else {
			tmp12 = false;
		}
		if(tmp12 && cy2 >= 0) {
			var _this17 = _this14.data.layersByName;
			var _this18 = __map_reserved["collisions"] != null ? _this17.getReserved("collisions") : _this17.h["collisions"];
			var x11 = _this18.level.pxHei / _this18.gridHei;
			var tmp14;
			if(x11 > .0) {
				var t16 = x11 + .5 | 0;
				tmp14 = t16 < x11 ? t16 + 1 : t16;
			} else if(x11 < .0) {
				var t17 = x11 - .5 | 0;
				tmp14 = t17 < x11 ? t17 + 1 : t17;
			} else {
				tmp14 = 0;
			}
			tmp11 = cy2 < tmp14;
		} else {
			tmp11 = false;
		}
		if(tmp11) {
			var this3 = _this14.collMap;
			var _this19 = _this14.data.layersByName;
			var _this20 = __map_reserved["collisions"] != null ? _this19.getReserved("collisions") : _this19.h["collisions"];
			var x12 = _this20.level.pxWid / _this20.gridWid;
			var key2;
			if(x12 > .0) {
				var t18 = x12 + .5 | 0;
				key2 = t18 < x12 ? t18 + 1 : t18;
			} else if(x12 < .0) {
				var t19 = x12 - .5 | 0;
				key2 = t19 < x12 ? t19 + 1 : t19;
			} else {
				key2 = 0;
			}
			tmp10 = this3.h[cx2 + cy2 * key2] == true;
		} else {
			tmp10 = true;
		}
		if(!(tmp10 && this.yr == 1 && this.dy >= 0)) {
			this.dy += this.gravity * Game.ME.tmod;
		}
		var _this21 = Game.ME.level;
		var cx3 = this.cx;
		var cy3 = this.cy + 1;
		var tmp15;
		var tmp16;
		var tmp17;
		if(cx3 >= 0) {
			var _this22 = _this21.data.layersByName;
			var _this23 = __map_reserved["collisions"] != null ? _this22.getReserved("collisions") : _this22.h["collisions"];
			var x13 = _this23.level.pxWid / _this23.gridWid;
			var tmp18;
			if(x13 > .0) {
				var t20 = x13 + .5 | 0;
				tmp18 = t20 < x13 ? t20 + 1 : t20;
			} else if(x13 < .0) {
				var t21 = x13 - .5 | 0;
				tmp18 = t21 < x13 ? t21 + 1 : t21;
			} else {
				tmp18 = 0;
			}
			tmp17 = cx3 < tmp18;
		} else {
			tmp17 = false;
		}
		if(tmp17 && cy3 >= 0) {
			var _this24 = _this21.data.layersByName;
			var _this25 = __map_reserved["collisions"] != null ? _this24.getReserved("collisions") : _this24.h["collisions"];
			var x14 = _this25.level.pxHei / _this25.gridHei;
			var tmp19;
			if(x14 > .0) {
				var t22 = x14 + .5 | 0;
				tmp19 = t22 < x14 ? t22 + 1 : t22;
			} else if(x14 < .0) {
				var t23 = x14 - .5 | 0;
				tmp19 = t23 < x14 ? t23 + 1 : t23;
			} else {
				tmp19 = 0;
			}
			tmp16 = cy3 < tmp19;
		} else {
			tmp16 = false;
		}
		if(tmp16) {
			var this4 = _this21.collMap;
			var _this26 = _this21.data.layersByName;
			var _this27 = __map_reserved["collisions"] != null ? _this26.getReserved("collisions") : _this26.h["collisions"];
			var x15 = _this27.level.pxWid / _this27.gridWid;
			var key3;
			if(x15 > .0) {
				var t24 = x15 + .5 | 0;
				key3 = t24 < x15 ? t24 + 1 : t24;
			} else if(x15 < .0) {
				var t25 = x15 - .5 | 0;
				key3 = t25 < x15 ? t25 + 1 : t25;
			} else {
				key3 = 0;
			}
			tmp15 = this4.h[cx3 + cy3 * key3] == true;
		} else {
			tmp15 = true;
		}
		if(tmp15 && this.yr == 1 && this.dy >= 0 || this.dy < 0) {
			this.fallStartY = (this.cy + this.yr) * Const.GRID;
		}
		var x16 = (this.dy + this.bdy) * Game.ME.tmod;
		var x17 = x16 < 0 ? -x16 : x16;
		var steps1;
		if(x17 > .0) {
			var t26 = x17 + .5 | 0;
			steps1 = t26 < x17 ? t26 + 1 : t26;
		} else if(x17 < .0) {
			var t27 = x17 - .5 | 0;
			steps1 = t27 < x17 ? t27 + 1 : t27;
		} else {
			steps1 = 0;
		}
		var step1 = (this.dy + this.bdy) * Game.ME.tmod / steps1;
		while(steps1 > 0) {
			this.yr += step1;
			var tmp20;
			if(this.hasCollisions && this.yr > 1) {
				var _this28 = Game.ME.level;
				var cx4 = this.cx;
				var cy4 = this.cy + 1;
				var tmp21;
				var tmp22;
				if(cx4 >= 0) {
					var _this29 = _this28.data.layersByName;
					var _this30 = __map_reserved["collisions"] != null ? _this29.getReserved("collisions") : _this29.h["collisions"];
					var x18 = _this30.level.pxWid / _this30.gridWid;
					var tmp23;
					if(x18 > .0) {
						var t28 = x18 + .5 | 0;
						tmp23 = t28 < x18 ? t28 + 1 : t28;
					} else if(x18 < .0) {
						var t29 = x18 - .5 | 0;
						tmp23 = t29 < x18 ? t29 + 1 : t29;
					} else {
						tmp23 = 0;
					}
					tmp22 = cx4 < tmp23;
				} else {
					tmp22 = false;
				}
				if(tmp22 && cy4 >= 0) {
					var _this31 = _this28.data.layersByName;
					var _this32 = __map_reserved["collisions"] != null ? _this31.getReserved("collisions") : _this31.h["collisions"];
					var x19 = _this32.level.pxHei / _this32.gridHei;
					var tmp24;
					if(x19 > .0) {
						var t30 = x19 + .5 | 0;
						tmp24 = t30 < x19 ? t30 + 1 : t30;
					} else if(x19 < .0) {
						var t31 = x19 - .5 | 0;
						tmp24 = t31 < x19 ? t31 + 1 : t31;
					} else {
						tmp24 = 0;
					}
					tmp21 = cy4 < tmp24;
				} else {
					tmp21 = false;
				}
				if(tmp21) {
					var this5 = _this28.collMap;
					var _this33 = _this28.data.layersByName;
					var _this34 = __map_reserved["collisions"] != null ? _this33.getReserved("collisions") : _this33.h["collisions"];
					var x20 = _this34.level.pxWid / _this34.gridWid;
					var key4;
					if(x20 > .0) {
						var t32 = x20 + .5 | 0;
						key4 = t32 < x20 ? t32 + 1 : t32;
					} else if(x20 < .0) {
						var t33 = x20 - .5 | 0;
						key4 = t33 < x20 ? t33 + 1 : t33;
					} else {
						key4 = 0;
					}
					tmp20 = this5.h[cx4 + cy4 * key4] == true;
				} else {
					tmp20 = true;
				}
			} else {
				tmp20 = false;
			}
			if(tmp20) {
				this.dy = 0;
				this.yr = 1;
				this.bdy = 0;
				this.onLand(((this.cy + this.yr) * Const.GRID - this.fallStartY) / Const.GRID);
			}
			var tmp25;
			if(this.hasCollisions && this.yr < 0.5) {
				var _this35 = Game.ME.level;
				var cx5 = this.cx;
				var cy5 = this.cy - 1;
				var tmp26;
				var tmp27;
				if(cx5 >= 0) {
					var _this36 = _this35.data.layersByName;
					var _this37 = __map_reserved["collisions"] != null ? _this36.getReserved("collisions") : _this36.h["collisions"];
					var x21 = _this37.level.pxWid / _this37.gridWid;
					var tmp28;
					if(x21 > .0) {
						var t34 = x21 + .5 | 0;
						tmp28 = t34 < x21 ? t34 + 1 : t34;
					} else if(x21 < .0) {
						var t35 = x21 - .5 | 0;
						tmp28 = t35 < x21 ? t35 + 1 : t35;
					} else {
						tmp28 = 0;
					}
					tmp27 = cx5 < tmp28;
				} else {
					tmp27 = false;
				}
				if(tmp27 && cy5 >= 0) {
					var _this38 = _this35.data.layersByName;
					var _this39 = __map_reserved["collisions"] != null ? _this38.getReserved("collisions") : _this38.h["collisions"];
					var x22 = _this39.level.pxHei / _this39.gridHei;
					var tmp29;
					if(x22 > .0) {
						var t36 = x22 + .5 | 0;
						tmp29 = t36 < x22 ? t36 + 1 : t36;
					} else if(x22 < .0) {
						var t37 = x22 - .5 | 0;
						tmp29 = t37 < x22 ? t37 + 1 : t37;
					} else {
						tmp29 = 0;
					}
					tmp26 = cy5 < tmp29;
				} else {
					tmp26 = false;
				}
				if(tmp26) {
					var this6 = _this35.collMap;
					var _this40 = _this35.data.layersByName;
					var _this41 = __map_reserved["collisions"] != null ? _this40.getReserved("collisions") : _this40.h["collisions"];
					var x23 = _this41.level.pxWid / _this41.gridWid;
					var key5;
					if(x23 > .0) {
						var t38 = x23 + .5 | 0;
						key5 = t38 < x23 ? t38 + 1 : t38;
					} else if(x23 < .0) {
						var t39 = x23 - .5 | 0;
						key5 = t39 < x23 ? t39 + 1 : t39;
					} else {
						key5 = 0;
					}
					tmp25 = this6.h[cx5 + cy5 * key5] == true;
				} else {
					tmp25 = true;
				}
			} else {
				tmp25 = false;
			}
			if(tmp25) {
				this.yr = 0.5;
			}
			while(this.yr > 1) {
				this.yr--;
				this.cy++;
			}
			while(this.yr < 0) {
				this.yr++;
				this.cy--;
			}
			--steps1;
		}
		this.dy *= Math.pow(this.frict,Game.ME.tmod);
		this.bdy *= Math.pow(this.bumpFrict,Game.ME.tmod);
		var x24 = this.dy;
		if((x24 < 0 ? -x24 : x24) <= 0.0005 * Game.ME.tmod) {
			this.dy = 0;
		}
		var x25 = this.bdy;
		if((x25 < 0 ? -x25 : x25) <= 0.0005 * Game.ME.tmod) {
			this.bdy = 0;
		}
	}
	,__class__: Entity
};
var Fx = function() {
	dn_Process.call(this,Game.ME);
	var _this = Assets.tiles;
	if(_this.pages.length > 1) {
		throw new js__$Boot_HaxeError("Cannot access tile when there is multiple pages");
	}
	this.pool = new dn_heaps_ParticlePool(_this.pages[0],2048,Const.FPS);
	var _this1 = Assets.tiles;
	if(_this1.pages.length > 1) {
		throw new js__$Boot_HaxeError("Cannot access tile when there is multiple pages");
	}
	this.bgAddSb = new h2d_SpriteBatch(_this1.pages[0]);
	Game.ME.scroller.addChildAt(this.bgAddSb,Const.DP_FX_BG);
	this.bgAddSb.blendMode = h2d_BlendMode.Add;
	this.bgAddSb.hasRotationScale = true;
	var _this2 = Assets.tiles;
	if(_this2.pages.length > 1) {
		throw new js__$Boot_HaxeError("Cannot access tile when there is multiple pages");
	}
	this.bgNormalSb = new h2d_SpriteBatch(_this2.pages[0]);
	Game.ME.scroller.addChildAt(this.bgNormalSb,Const.DP_FX_BG);
	this.bgNormalSb.hasRotationScale = true;
	var _this3 = Assets.tiles;
	if(_this3.pages.length > 1) {
		throw new js__$Boot_HaxeError("Cannot access tile when there is multiple pages");
	}
	this.topNormalSb = new h2d_SpriteBatch(_this3.pages[0]);
	Game.ME.scroller.addChildAt(this.topNormalSb,Const.DP_FX_FRONT);
	this.topNormalSb.hasRotationScale = true;
	var _this4 = Assets.tiles;
	if(_this4.pages.length > 1) {
		throw new js__$Boot_HaxeError("Cannot access tile when there is multiple pages");
	}
	this.topAddSb = new h2d_SpriteBatch(_this4.pages[0]);
	Game.ME.scroller.addChildAt(this.topAddSb,Const.DP_FX_FRONT);
	this.topAddSb.blendMode = h2d_BlendMode.Add;
	this.topAddSb.hasRotationScale = true;
};
$hxClasses["Fx"] = Fx;
Fx.__name__ = "Fx";
Fx.__super__ = dn_Process;
Fx.prototype = $extend(dn_Process.prototype,{
	pool: null
	,bgAddSb: null
	,bgNormalSb: null
	,topAddSb: null
	,topNormalSb: null
	,onDispose: function() {
		dn_Process.prototype.onDispose.call(this);
		this.pool.dispose();
		var _this = this.bgAddSb;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
		var _this1 = this.bgNormalSb;
		if(_this1 != null && _this1.parent != null) {
			_this1.parent.removeChild(_this1);
		}
		var _this2 = this.topAddSb;
		if(_this2 != null && _this2.parent != null) {
			_this2.parent.removeChild(_this2);
		}
		var _this3 = this.topNormalSb;
		if(_this3 != null && _this3.parent != null) {
			_this3.parent.removeChild(_this3);
		}
	}
	,flashBangS: function(c,a,t) {
		if(t == null) {
			t = 0.1;
		}
		var e = new h2d_Bitmap(h2d_Tile.fromColor(c,1,1,a));
		Game.ME.root.addChildAt(e,Const.DP_FX_FRONT);
		var _this = Game.ME;
		var v = dn_Process.CUSTOM_STAGE_WIDTH > 0 ? dn_Process.CUSTOM_STAGE_WIDTH : hxd_Window.getInstance().get_width();
		e.posChanged = true;
		e.scaleX = v;
		var _this1 = Game.ME;
		var v1 = dn_Process.CUSTOM_STAGE_HEIGHT > 0 ? dn_Process.CUSTOM_STAGE_HEIGHT : hxd_Window.getInstance().get_height();
		e.posChanged = true;
		e.scaleY = v1;
		e.blendMode = h2d_BlendMode.Add;
		var _tween = Game.ME.tw.create_(function() {
			return e.alpha;
		},function(_setV) {
			e.alpha = _setV;
		},null,0,null,t * 1000);
		_tween.end(function() {
			if(e != null && e.parent != null) {
				e.parent.removeChild(e);
			}
		});
	}
	,_physics: function(p) {
		if(isNaN(p.data0)) {
			var sign = null;
			if(sign == null) {
				sign = false;
			}
			p.data0 = sign ? (1 + Std.random(2)) * (Std.random(2) * 2 - 1) : 1 + Std.random(2);
		}
		var offX = 0;
		var offY = 1;
		if(offY == null) {
			offY = 0.;
		}
		if(offX == null) {
			offX = 0.;
		}
		var _this = Game.ME.level;
		var cx = (p.x + offX) / Const.GRID | 0;
		var cy = (p.y + offY) / Const.GRID | 0;
		var tmp;
		var tmp1;
		var tmp2;
		if(cx >= 0) {
			var _this1 = _this.data.layersByName;
			var _this2 = __map_reserved["collisions"] != null ? _this1.getReserved("collisions") : _this1.h["collisions"];
			var x = _this2.level.pxWid / _this2.gridWid;
			var tmp3;
			if(x > .0) {
				var t = x + .5 | 0;
				tmp3 = t < x ? t + 1 : t;
			} else if(x < .0) {
				var t1 = x - .5 | 0;
				tmp3 = t1 < x ? t1 + 1 : t1;
			} else {
				tmp3 = 0;
			}
			tmp2 = cx < tmp3;
		} else {
			tmp2 = false;
		}
		if(tmp2 && cy >= 0) {
			var _this3 = _this.data.layersByName;
			var _this4 = __map_reserved["collisions"] != null ? _this3.getReserved("collisions") : _this3.h["collisions"];
			var x1 = _this4.level.pxHei / _this4.gridHei;
			var tmp4;
			if(x1 > .0) {
				var t2 = x1 + .5 | 0;
				tmp4 = t2 < x1 ? t2 + 1 : t2;
			} else if(x1 < .0) {
				var t3 = x1 - .5 | 0;
				tmp4 = t3 < x1 ? t3 + 1 : t3;
			} else {
				tmp4 = 0;
			}
			tmp1 = cy < tmp4;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			var this1 = _this.collMap;
			var _this5 = _this.data.layersByName;
			var _this6 = __map_reserved["collisions"] != null ? _this5.getReserved("collisions") : _this5.h["collisions"];
			var x2 = _this6.level.pxWid / _this6.gridWid;
			var key;
			if(x2 > .0) {
				var t4 = x2 + .5 | 0;
				key = t4 < x2 ? t4 + 1 : t4;
			} else if(x2 < .0) {
				var t5 = x2 - .5 | 0;
				key = t5 < x2 ? t5 + 1 : t5;
			} else {
				key = 0;
			}
			tmp = this1.h[cx + cy * key] == true;
		} else {
			tmp = true;
		}
		if(tmp && p.dy > 0) {
			if(p.data0-- > 0) {
				var x3 = p.dy * 0.7;
				p.dy = -(x3 < 0 ? -x3 : x3);
			} else {
				p.rotation = 0;
				p.frictX = p.frictY = 0.8;
				p.dy = p.gy = 0;
				p.dr = 0;
			}
		} else {
			var offX1 = 0;
			var offY1 = 2;
			if(offY1 == null) {
				offY1 = 0.;
			}
			if(offX1 == null) {
				offX1 = 0.;
			}
			var _this7 = Game.ME.level;
			var cx1 = (p.x + offX1) / Const.GRID | 0;
			var cy1 = (p.y + offY1) / Const.GRID | 0;
			var tmp5;
			var tmp6;
			var tmp7;
			if(cx1 >= 0) {
				var _this8 = _this7.data.layersByName;
				var _this9 = __map_reserved["collisions"] != null ? _this8.getReserved("collisions") : _this8.h["collisions"];
				var x4 = _this9.level.pxWid / _this9.gridWid;
				var tmp8;
				if(x4 > .0) {
					var t6 = x4 + .5 | 0;
					tmp8 = t6 < x4 ? t6 + 1 : t6;
				} else if(x4 < .0) {
					var t7 = x4 - .5 | 0;
					tmp8 = t7 < x4 ? t7 + 1 : t7;
				} else {
					tmp8 = 0;
				}
				tmp7 = cx1 < tmp8;
			} else {
				tmp7 = false;
			}
			if(tmp7 && cy1 >= 0) {
				var _this10 = _this7.data.layersByName;
				var _this11 = __map_reserved["collisions"] != null ? _this10.getReserved("collisions") : _this10.h["collisions"];
				var x5 = _this11.level.pxHei / _this11.gridHei;
				var tmp9;
				if(x5 > .0) {
					var t8 = x5 + .5 | 0;
					tmp9 = t8 < x5 ? t8 + 1 : t8;
				} else if(x5 < .0) {
					var t9 = x5 - .5 | 0;
					tmp9 = t9 < x5 ? t9 + 1 : t9;
				} else {
					tmp9 = 0;
				}
				tmp6 = cy1 < tmp9;
			} else {
				tmp6 = false;
			}
			if(tmp6) {
				var this2 = _this7.collMap;
				var _this12 = _this7.data.layersByName;
				var _this13 = __map_reserved["collisions"] != null ? _this12.getReserved("collisions") : _this12.h["collisions"];
				var x6 = _this13.level.pxWid / _this13.gridWid;
				var key1;
				if(x6 > .0) {
					var t10 = x6 + .5 | 0;
					key1 = t10 < x6 ? t10 + 1 : t10;
				} else if(x6 < .0) {
					var t11 = x6 - .5 | 0;
					key1 = t11 < x6 ? t11 + 1 : t11;
				} else {
					key1 = 0;
				}
				tmp5 = this2.h[cx1 + cy1 * key1] == true;
			} else {
				tmp5 = true;
			}
			if(!tmp5) {
				var offX2 = 2;
				var offY2 = 0;
				if(offY2 == null) {
					offY2 = 0.;
				}
				if(offX2 == null) {
					offX2 = 0.;
				}
				var _this14 = Game.ME.level;
				var cx2 = (p.x + offX2) / Const.GRID | 0;
				var cy2 = (p.y + offY2) / Const.GRID | 0;
				var tmp10;
				var tmp11;
				var tmp12;
				if(cx2 >= 0) {
					var _this15 = _this14.data.layersByName;
					var _this16 = __map_reserved["collisions"] != null ? _this15.getReserved("collisions") : _this15.h["collisions"];
					var x7 = _this16.level.pxWid / _this16.gridWid;
					var tmp13;
					if(x7 > .0) {
						var t12 = x7 + .5 | 0;
						tmp13 = t12 < x7 ? t12 + 1 : t12;
					} else if(x7 < .0) {
						var t13 = x7 - .5 | 0;
						tmp13 = t13 < x7 ? t13 + 1 : t13;
					} else {
						tmp13 = 0;
					}
					tmp12 = cx2 < tmp13;
				} else {
					tmp12 = false;
				}
				if(tmp12 && cy2 >= 0) {
					var _this17 = _this14.data.layersByName;
					var _this18 = __map_reserved["collisions"] != null ? _this17.getReserved("collisions") : _this17.h["collisions"];
					var x8 = _this18.level.pxHei / _this18.gridHei;
					var tmp14;
					if(x8 > .0) {
						var t14 = x8 + .5 | 0;
						tmp14 = t14 < x8 ? t14 + 1 : t14;
					} else if(x8 < .0) {
						var t15 = x8 - .5 | 0;
						tmp14 = t15 < x8 ? t15 + 1 : t15;
					} else {
						tmp14 = 0;
					}
					tmp11 = cy2 < tmp14;
				} else {
					tmp11 = false;
				}
				if(tmp11) {
					var this3 = _this14.collMap;
					var _this19 = _this14.data.layersByName;
					var _this20 = __map_reserved["collisions"] != null ? _this19.getReserved("collisions") : _this19.h["collisions"];
					var x9 = _this20.level.pxWid / _this20.gridWid;
					var key2;
					if(x9 > .0) {
						var t16 = x9 + .5 | 0;
						key2 = t16 < x9 ? t16 + 1 : t16;
					} else if(x9 < .0) {
						var t17 = x9 - .5 | 0;
						key2 = t17 < x9 ? t17 + 1 : t17;
					} else {
						key2 = 0;
					}
					tmp10 = this3.h[cx2 + cy2 * key2] == true;
				} else {
					tmp10 = true;
				}
				if(tmp10) {
					var x10 = p.dx * 0.9;
					p.dx = -(x10 < 0 ? -x10 : x10);
				} else {
					var offX3 = -2;
					var offY3 = 0;
					if(offY3 == null) {
						offY3 = 0.;
					}
					if(offX3 == null) {
						offX3 = 0.;
					}
					var _this21 = Game.ME.level;
					var cx3 = (p.x + offX3) / Const.GRID | 0;
					var cy3 = (p.y + offY3) / Const.GRID | 0;
					var tmp15;
					var tmp16;
					var tmp17;
					if(cx3 >= 0) {
						var _this22 = _this21.data.layersByName;
						var _this23 = __map_reserved["collisions"] != null ? _this22.getReserved("collisions") : _this22.h["collisions"];
						var x11 = _this23.level.pxWid / _this23.gridWid;
						var tmp18;
						if(x11 > .0) {
							var t18 = x11 + .5 | 0;
							tmp18 = t18 < x11 ? t18 + 1 : t18;
						} else if(x11 < .0) {
							var t19 = x11 - .5 | 0;
							tmp18 = t19 < x11 ? t19 + 1 : t19;
						} else {
							tmp18 = 0;
						}
						tmp17 = cx3 < tmp18;
					} else {
						tmp17 = false;
					}
					if(tmp17 && cy3 >= 0) {
						var _this24 = _this21.data.layersByName;
						var _this25 = __map_reserved["collisions"] != null ? _this24.getReserved("collisions") : _this24.h["collisions"];
						var x12 = _this25.level.pxHei / _this25.gridHei;
						var tmp19;
						if(x12 > .0) {
							var t20 = x12 + .5 | 0;
							tmp19 = t20 < x12 ? t20 + 1 : t20;
						} else if(x12 < .0) {
							var t21 = x12 - .5 | 0;
							tmp19 = t21 < x12 ? t21 + 1 : t21;
						} else {
							tmp19 = 0;
						}
						tmp16 = cy3 < tmp19;
					} else {
						tmp16 = false;
					}
					if(tmp16) {
						var this4 = _this21.collMap;
						var _this26 = _this21.data.layersByName;
						var _this27 = __map_reserved["collisions"] != null ? _this26.getReserved("collisions") : _this26.h["collisions"];
						var x13 = _this27.level.pxWid / _this27.gridWid;
						var key3;
						if(x13 > .0) {
							var t22 = x13 + .5 | 0;
							key3 = t22 < x13 ? t22 + 1 : t22;
						} else if(x13 < .0) {
							var t23 = x13 - .5 | 0;
							key3 = t23 < x13 ? t23 + 1 : t23;
						} else {
							key3 = 0;
						}
						tmp15 = this4.h[cx3 + cy3 * key3] == true;
					} else {
						tmp15 = true;
					}
					if(tmp15) {
						var x14 = p.dx * 0.9;
						p.dx = x14 < 0 ? -x14 : x14;
					}
				}
			}
		}
	}
	,hitWall: function(x,y,normalDir) {
		var t = Assets.tiles.getTileRandom("fxShoot");
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		var x1 = x - normalDir * (sign ? (1 + Math.random() * 2) * (Std.random(2) * 2 - 1) : 1 + Math.random() * 2);
		var sign1 = true;
		if(sign1 == null) {
			sign1 = false;
		}
		var y1 = y + (sign1 ? Math.random() * 2 * (Std.random(2) * 2 - 1) : Math.random() * 2);
		var _this = this.pool;
		var sb = this.topAddSb;
		var p;
		if(_this.nalloc < _this.all.length) {
			var p1 = _this.all[_this.nalloc];
			p1.reset(sb,t,x1,y1);
			p1.poolIdx = _this.nalloc;
			_this.nalloc++;
			p = p1;
		} else {
			var best = null;
			var _g = 0;
			var _g1 = _this.all;
			while(_g < _g1.length) {
				var p2 = _g1[_g];
				++_g;
				if(best == null || p2.stamp <= best.stamp) {
					best = p2;
				}
			}
			if(best.onKill != null) {
				best.onKill();
			}
			best.reset(sb,t,x1,y1);
			p = best;
		}
		var _this1 = p.t;
		var px = 0;
		var py = 0.5;
		if(py == null) {
			py = 0.5;
		}
		if(px == null) {
			px = 0.5;
		}
		_this1.dx = -(px * _this1.width);
		_this1.dy = -(py * _this1.height);
		p.animXr = 0;
		p.animYr = 0.5;
		p.setFadeS(1,0,0.03);
		p.colorAnimS(16758272,16730624,0.06);
		var sign2 = null;
		if(sign2 == null) {
			sign2 = false;
		}
		p.scaleX = normalDir * (sign2 ? (0.7 + Math.random() * 0.30000000000000004) * (Std.random(2) * 2 - 1) : 0.7 + Math.random() * 0.30000000000000004);
		var sign3 = true;
		if(sign3 == null) {
			sign3 = false;
		}
		p.scaleY = sign3 ? (2 + Math.random()) * (Std.random(2) * 2 - 1) : 2 + Math.random();
		p.scaleXMul = 0.94;
		p.scaleYMul = 0.91;
		p.set_lifeS(0.12);
		var _g2 = 0;
		while(_g2 < 5) {
			var i = _g2++;
			var t1 = Assets.tiles.getTileRandom("pixel");
			var sign4 = true;
			if(sign4 == null) {
				sign4 = false;
			}
			var y2 = y + (sign4 ? Math.random() * 2 * (Std.random(2) * 2 - 1) : Math.random() * 2);
			var _this2 = this.pool;
			var sb1 = this.topAddSb;
			var p3;
			if(_this2.nalloc < _this2.all.length) {
				var p4 = _this2.all[_this2.nalloc];
				p4.reset(sb1,t1,x,y2);
				p4.poolIdx = _this2.nalloc;
				_this2.nalloc++;
				p3 = p4;
			} else {
				var best1 = null;
				var _g3 = 0;
				var _g11 = _this2.all;
				while(_g3 < _g11.length) {
					var p5 = _g11[_g3];
					++_g3;
					if(best1 == null || p5.stamp <= best1.stamp) {
						best1 = p5;
					}
				}
				if(best1.onKill != null) {
					best1.onKill();
				}
				best1.reset(sb1,t1,x,y2);
				p3 = best1;
			}
			var sign5 = null;
			if(sign5 == null) {
				sign5 = false;
			}
			var tmp = sign5 ? (0.5 + Math.random() * 0.4) * (Std.random(2) * 2 - 1) : 0.5 + Math.random() * 0.4;
			var sign6 = null;
			if(sign6 == null) {
				sign6 = false;
			}
			p3.setFadeS(tmp,0,sign6 ? (0.2 + Math.random() * 0.3) * (Std.random(2) * 2 - 1) : 0.2 + Math.random() * 0.3);
			p3.alphaFlicker = 0.4;
			var sign7 = null;
			if(sign7 == null) {
				sign7 = false;
			}
			var ratio = sign7 ? Math.random() * (Std.random(2) * 2 - 1) : Math.random();
			var a = _$UInt_UInt_$Impl_$.toFloat(16766244 >>> 16);
			var x2 = a + (_$UInt_UInt_$Impl_$.toFloat(16737798 >>> 16) - a) * ratio;
			var a1 = _$UInt_UInt_$Impl_$.toFloat(16766244 >>> 8 & 255);
			var x3 = a1 + (_$UInt_UInt_$Impl_$.toFloat(16737798 >>> 8 & 255) - a1) * ratio;
			var a2 = _$UInt_UInt_$Impl_$.toFloat(16766244 & 255);
			var x4 = a2 + (_$UInt_UInt_$Impl_$.toFloat(16737798 & 255) - a2) * ratio;
			var sign8 = null;
			if(sign8 == null) {
				sign8 = false;
			}
			var tmp1 = sign8 ? (0.3 + Math.random() * 1.7) * (Std.random(2) * 2 - 1) : 0.3 + Math.random() * 1.7;
			p3.colorAnimS(((x2 > 0 ? x2 + .5 : x2 < 0 ? x2 - .5 : 0) | 0) << 16 | ((x3 > 0 ? x3 + .5 : x3 < 0 ? x3 - .5 : 0) | 0) << 8 | ((x4 > 0 ? x4 + .5 : x4 < 0 ? x4 - .5 : 0) | 0),10027008,tmp1);
			var sign9 = null;
			if(sign9 == null) {
				sign9 = false;
			}
			p3.dx = normalDir * (sign9 ? (0.3 + Math.random() * 1.7) * (Std.random(2) * 2 - 1) : 0.3 + Math.random() * 1.7);
			var sign10 = null;
			if(sign10 == null) {
				sign10 = false;
			}
			p3.dy = sign10 ? (-1 + Math.random() * 1.5) * (Std.random(2) * 2 - 1) : -1 + Math.random() * 1.5;
			var sign11 = null;
			if(sign11 == null) {
				sign11 = false;
			}
			p3.gy = sign11 ? (0.1 + Math.random() * 0.1) * (Std.random(2) * 2 - 1) : 0.1 + Math.random() * 0.1;
			var sign12 = null;
			if(sign12 == null) {
				sign12 = false;
			}
			p3.frictX = p3.frictY = sign12 ? (0.92 + Math.random() * 0.029999999999999916) * (Std.random(2) * 2 - 1) : 0.92 + Math.random() * 0.029999999999999916;
			var sign13 = null;
			if(sign13 == null) {
				sign13 = false;
			}
			p3.set_lifeS(sign13 ? (0.4 + Math.random() * 1.6) * (Std.random(2) * 2 - 1) : 0.4 + Math.random() * 1.6);
			p3.onUpdate = $bind(this,this._physics);
		}
		var _g12 = 0;
		while(_g12 < 7) {
			var i1 = _g12++;
			var t2 = Assets.tiles.getTileRandom("pixel");
			var sign14 = true;
			if(sign14 == null) {
				sign14 = false;
			}
			var x5 = x + (sign14 ? Math.random() * (Std.random(2) * 2 - 1) : Math.random()) * -normalDir;
			var sign15 = true;
			if(sign15 == null) {
				sign15 = false;
			}
			var y3 = y + (sign15 ? Math.random() * 6 * (Std.random(2) * 2 - 1) : Math.random() * 6);
			var _this3 = this.pool;
			var sb2 = this.topAddSb;
			var p6;
			if(_this3.nalloc < _this3.all.length) {
				var p7 = _this3.all[_this3.nalloc];
				p7.reset(sb2,t2,x5,y3);
				p7.poolIdx = _this3.nalloc;
				_this3.nalloc++;
				p6 = p7;
			} else {
				var best2 = null;
				var _g4 = 0;
				var _g13 = _this3.all;
				while(_g4 < _g13.length) {
					var p8 = _g13[_g4];
					++_g4;
					if(best2 == null || p8.stamp <= best2.stamp) {
						best2 = p8;
					}
				}
				if(best2.onKill != null) {
					best2.onKill();
				}
				best2.reset(sb2,t2,x5,y3);
				p6 = best2;
			}
			var sign16 = null;
			if(sign16 == null) {
				sign16 = false;
			}
			var ratio1 = sign16 ? Math.random() * (Std.random(2) * 2 - 1) : Math.random();
			var a3 = _$UInt_UInt_$Impl_$.toFloat(16766244 >>> 16);
			var x6 = a3 + (_$UInt_UInt_$Impl_$.toFloat(16737798 >>> 16) - a3) * ratio1;
			var a4 = _$UInt_UInt_$Impl_$.toFloat(16766244 >>> 8 & 255);
			var x7 = a4 + (_$UInt_UInt_$Impl_$.toFloat(16737798 >>> 8 & 255) - a4) * ratio1;
			var a5 = _$UInt_UInt_$Impl_$.toFloat(16766244 & 255);
			var x8 = a5 + (_$UInt_UInt_$Impl_$.toFloat(16737798 & 255) - a5) * ratio1;
			var sign17 = null;
			if(sign17 == null) {
				sign17 = false;
			}
			var tmp2 = sign17 ? (0.3 + Math.random() * 1.7) * (Std.random(2) * 2 - 1) : 0.3 + Math.random() * 1.7;
			p6.colorAnimS(((x6 > 0 ? x6 + .5 : x6 < 0 ? x6 - .5 : 0) | 0) << 16 | ((x7 > 0 ? x7 + .5 : x7 < 0 ? x7 - .5 : 0) | 0) << 8 | ((x8 > 0 ? x8 + .5 : x8 < 0 ? x8 - .5 : 0) | 0),10027008,tmp2);
			var sign18 = null;
			if(sign18 == null) {
				sign18 = false;
			}
			var tmp3 = sign18 ? (0.5 + Math.random() * 0.4) * (Std.random(2) * 2 - 1) : 0.5 + Math.random() * 0.4;
			var sign19 = null;
			if(sign19 == null) {
				sign19 = false;
			}
			var tmp4 = sign19 ? (0.2 + Math.random() * 0.2) * (Std.random(2) * 2 - 1) : 0.2 + Math.random() * 0.2;
			var sign20 = null;
			if(sign20 == null) {
				sign20 = false;
			}
			p6.setFadeS(tmp3,tmp4,sign20 ? (1 + Math.random()) * (Std.random(2) * 2 - 1) : 1 + Math.random());
			p6.alphaFlicker = 0.4;
			var sign21 = null;
			if(sign21 == null) {
				sign21 = false;
			}
			p6.set_lifeS(sign21 ? (2 + Math.random()) * (Std.random(2) * 2 - 1) : 2 + Math.random());
		}
	}
	,hitEntity: function(x,y,normalDir) {
		var t = Assets.tiles.getTileRandom("fxShoot");
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		var x1 = x - normalDir * (sign ? (1 + Math.random() * 2) * (Std.random(2) * 2 - 1) : 1 + Math.random() * 2);
		var sign1 = true;
		if(sign1 == null) {
			sign1 = false;
		}
		var y1 = y + (sign1 ? Math.random() * 2 * (Std.random(2) * 2 - 1) : Math.random() * 2);
		var _this = this.pool;
		var sb = this.topAddSb;
		var p;
		if(_this.nalloc < _this.all.length) {
			var p1 = _this.all[_this.nalloc];
			p1.reset(sb,t,x1,y1);
			p1.poolIdx = _this.nalloc;
			_this.nalloc++;
			p = p1;
		} else {
			var best = null;
			var _g = 0;
			var _g1 = _this.all;
			while(_g < _g1.length) {
				var p2 = _g1[_g];
				++_g;
				if(best == null || p2.stamp <= best.stamp) {
					best = p2;
				}
			}
			if(best.onKill != null) {
				best.onKill();
			}
			best.reset(sb,t,x1,y1);
			p = best;
		}
		var _this1 = p.t;
		var px = 0;
		var py = 0.5;
		if(py == null) {
			py = 0.5;
		}
		if(px == null) {
			px = 0.5;
		}
		_this1.dx = -(px * _this1.width);
		_this1.dy = -(py * _this1.height);
		p.animXr = 0;
		p.animYr = 0.5;
		p.setFadeS(1,0,0.03);
		p.colorAnimS(16758272,16730624,0.06);
		var sign2 = null;
		if(sign2 == null) {
			sign2 = false;
		}
		p.scaleX = normalDir * (sign2 ? (0.7 + Math.random() * 0.30000000000000004) * (Std.random(2) * 2 - 1) : 0.7 + Math.random() * 0.30000000000000004);
		var sign3 = true;
		if(sign3 == null) {
			sign3 = false;
		}
		p.scaleY = sign3 ? (2 + Math.random()) * (Std.random(2) * 2 - 1) : 2 + Math.random();
		p.scaleXMul = 0.94;
		p.scaleYMul = 0.91;
		p.set_lifeS(0.12);
		var _g2 = 0;
		while(_g2 < 5) {
			var i = _g2++;
			var t1 = Assets.tiles.getTileRandom("pixel");
			var sign4 = true;
			if(sign4 == null) {
				sign4 = false;
			}
			var y2 = y + (sign4 ? Math.random() * 2 * (Std.random(2) * 2 - 1) : Math.random() * 2);
			var _this2 = this.pool;
			var sb1 = this.topAddSb;
			var p3;
			if(_this2.nalloc < _this2.all.length) {
				var p4 = _this2.all[_this2.nalloc];
				p4.reset(sb1,t1,x,y2);
				p4.poolIdx = _this2.nalloc;
				_this2.nalloc++;
				p3 = p4;
			} else {
				var best1 = null;
				var _g3 = 0;
				var _g11 = _this2.all;
				while(_g3 < _g11.length) {
					var p5 = _g11[_g3];
					++_g3;
					if(best1 == null || p5.stamp <= best1.stamp) {
						best1 = p5;
					}
				}
				if(best1.onKill != null) {
					best1.onKill();
				}
				best1.reset(sb1,t1,x,y2);
				p3 = best1;
			}
			var sign5 = null;
			if(sign5 == null) {
				sign5 = false;
			}
			var tmp = sign5 ? (0.5 + Math.random() * 0.4) * (Std.random(2) * 2 - 1) : 0.5 + Math.random() * 0.4;
			var sign6 = null;
			if(sign6 == null) {
				sign6 = false;
			}
			p3.setFadeS(tmp,0,sign6 ? (0.2 + Math.random() * 0.3) * (Std.random(2) * 2 - 1) : 0.2 + Math.random() * 0.3);
			p3.alphaFlicker = 0.4;
			var sign7 = null;
			if(sign7 == null) {
				sign7 = false;
			}
			var ratio = sign7 ? Math.random() * (Std.random(2) * 2 - 1) : Math.random();
			var a = _$UInt_UInt_$Impl_$.toFloat(16766244 >>> 16);
			var x2 = a + (_$UInt_UInt_$Impl_$.toFloat(16737798 >>> 16) - a) * ratio;
			var a1 = _$UInt_UInt_$Impl_$.toFloat(16766244 >>> 8 & 255);
			var x3 = a1 + (_$UInt_UInt_$Impl_$.toFloat(16737798 >>> 8 & 255) - a1) * ratio;
			var a2 = _$UInt_UInt_$Impl_$.toFloat(16766244 & 255);
			var x4 = a2 + (_$UInt_UInt_$Impl_$.toFloat(16737798 & 255) - a2) * ratio;
			var sign8 = null;
			if(sign8 == null) {
				sign8 = false;
			}
			var tmp1 = sign8 ? (0.3 + Math.random() * 1.7) * (Std.random(2) * 2 - 1) : 0.3 + Math.random() * 1.7;
			p3.colorAnimS(((x2 > 0 ? x2 + .5 : x2 < 0 ? x2 - .5 : 0) | 0) << 16 | ((x3 > 0 ? x3 + .5 : x3 < 0 ? x3 - .5 : 0) | 0) << 8 | ((x4 > 0 ? x4 + .5 : x4 < 0 ? x4 - .5 : 0) | 0),10027008,tmp1);
			var sign9 = null;
			if(sign9 == null) {
				sign9 = false;
			}
			p3.dx = normalDir * (sign9 ? (0.3 + Math.random() * 1.7) * (Std.random(2) * 2 - 1) : 0.3 + Math.random() * 1.7);
			var sign10 = null;
			if(sign10 == null) {
				sign10 = false;
			}
			p3.dy = sign10 ? (-1 + Math.random() * 1.5) * (Std.random(2) * 2 - 1) : -1 + Math.random() * 1.5;
			var sign11 = null;
			if(sign11 == null) {
				sign11 = false;
			}
			p3.gy = sign11 ? (0.1 + Math.random() * 0.1) * (Std.random(2) * 2 - 1) : 0.1 + Math.random() * 0.1;
			var sign12 = null;
			if(sign12 == null) {
				sign12 = false;
			}
			p3.frictX = p3.frictY = sign12 ? (0.92 + Math.random() * 0.029999999999999916) * (Std.random(2) * 2 - 1) : 0.92 + Math.random() * 0.029999999999999916;
			var sign13 = null;
			if(sign13 == null) {
				sign13 = false;
			}
			p3.set_lifeS(sign13 ? (0.4 + Math.random() * 1.6) * (Std.random(2) * 2 - 1) : 0.4 + Math.random() * 1.6);
			p3.onUpdate = $bind(this,this._physics);
		}
	}
	,gunShot: function(x,y,dir) {
		var t = Assets.tiles.getTileRandom("fxShoot");
		var _this = this.pool;
		var sb = this.topAddSb;
		var p;
		if(_this.nalloc < _this.all.length) {
			var p1 = _this.all[_this.nalloc];
			p1.reset(sb,t,x,y);
			p1.poolIdx = _this.nalloc;
			_this.nalloc++;
			p = p1;
		} else {
			var best = null;
			var _g = 0;
			var _g1 = _this.all;
			while(_g < _g1.length) {
				var p2 = _g1[_g];
				++_g;
				if(best == null || p2.stamp <= best.stamp) {
					best = p2;
				}
			}
			if(best.onKill != null) {
				best.onKill();
			}
			best.reset(sb,t,x,y);
			p = best;
		}
		var _this1 = p.t;
		var px = 0;
		var py = 0.5;
		if(py == null) {
			py = 0.5;
		}
		if(px == null) {
			px = 0.5;
		}
		_this1.dx = -(px * _this1.width);
		_this1.dy = -(py * _this1.height);
		p.animXr = 0;
		p.animYr = 0.5;
		p.setFadeS(1,0,0.03);
		p.colorAnimS(16758272,16730624,0.06);
		var sign = null;
		if(sign == null) {
			sign = false;
		}
		p.scaleX = dir * (sign ? (1.5 + Math.random() * 0.5) * (Std.random(2) * 2 - 1) : 1.5 + Math.random() * 0.5);
		var sign1 = true;
		if(sign1 == null) {
			sign1 = false;
		}
		p.scaleY = sign1 ? (1.2 + Math.random() * 0.19999999999999996) * (Std.random(2) * 2 - 1) : 1.2 + Math.random() * 0.19999999999999996;
		p.set_lifeS(0.12);
		var _g2 = 0;
		while(_g2 < 6) {
			var i = _g2++;
			var t1 = Assets.tiles.getTileRandom("fxShoot");
			var sign2 = true;
			if(sign2 == null) {
				sign2 = false;
			}
			var x1 = x + (sign2 ? Math.random() * (Std.random(2) * 2 - 1) : Math.random());
			var sign3 = true;
			if(sign3 == null) {
				sign3 = false;
			}
			var y1 = y + (sign3 ? Math.random() * (Std.random(2) * 2 - 1) : Math.random());
			var _this2 = this.pool;
			var sb1 = this.topAddSb;
			var p3;
			if(_this2.nalloc < _this2.all.length) {
				var p4 = _this2.all[_this2.nalloc];
				p4.reset(sb1,t1,x1,y1);
				p4.poolIdx = _this2.nalloc;
				_this2.nalloc++;
				p3 = p4;
			} else {
				var best1 = null;
				var _g3 = 0;
				var _g11 = _this2.all;
				while(_g3 < _g11.length) {
					var p5 = _g11[_g3];
					++_g3;
					if(best1 == null || p5.stamp <= best1.stamp) {
						best1 = p5;
					}
				}
				if(best1.onKill != null) {
					best1.onKill();
				}
				best1.reset(sb1,t1,x1,y1);
				p3 = best1;
			}
			var _this3 = p3.t;
			var px1 = 0;
			var py1 = 0.5;
			if(py1 == null) {
				py1 = 0.5;
			}
			if(px1 == null) {
				px1 = 0.5;
			}
			_this3.dx = -(px1 * _this3.width);
			_this3.dy = -(py1 * _this3.height);
			p3.animXr = 0;
			p3.animYr = 0.5;
			var sign4 = null;
			if(sign4 == null) {
				sign4 = false;
			}
			p3.setFadeS(sign4 ? (0.8 + Math.random() * 0.19999999999999996) * (Std.random(2) * 2 - 1) : 0.8 + Math.random() * 0.19999999999999996,0,0.03);
			var sign5 = null;
			if(sign5 == null) {
				sign5 = false;
			}
			p3.colorAnimS(16758272,16730624,sign5 ? Math.random() * 0.06 * (Std.random(2) * 2 - 1) : Math.random() * 0.06);
			var sign6 = null;
			if(sign6 == null) {
				sign6 = false;
			}
			p3.scaleX = dir * (sign6 ? (0.7 + Math.random() * 0.8) * (Std.random(2) * 2 - 1) : 0.7 + Math.random() * 0.8);
			var sign7 = true;
			if(sign7 == null) {
				sign7 = false;
			}
			p3.scaleY = sign7 ? (1.5 + Math.random()) * (Std.random(2) * 2 - 1) : 1.5 + Math.random();
			var sign8 = null;
			if(sign8 == null) {
				sign8 = false;
			}
			p3.set_lifeS(sign8 ? (0.03 + Math.random() * 0.03) * (Std.random(2) * 2 - 1) : 0.03 + Math.random() * 0.03);
		}
		var sign9 = null;
		if(sign9 == null) {
			sign9 = false;
		}
		var n = sign9 ? (9 + Std.random(2)) * (Std.random(2) * 2 - 1) : 9 + Std.random(2);
		var _g12 = 0;
		var _g21 = n;
		while(_g12 < _g21) {
			var i1 = _g12++;
			var sign10 = true;
			if(sign10 == null) {
				sign10 = false;
			}
			var ang = -0.9 + 1.8 * (i1 + 1) / n + (sign10 ? Math.random() * 0.1 * (Std.random(2) * 2 - 1) : Math.random() * 0.1);
			var t2 = Assets.tiles.getTileRandom("fxLineDir");
			var _this4 = this.pool;
			var sb2 = this.topAddSb;
			var p6;
			if(_this4.nalloc < _this4.all.length) {
				var p7 = _this4.all[_this4.nalloc];
				p7.reset(sb2,t2,x,y);
				p7.poolIdx = _this4.nalloc;
				_this4.nalloc++;
				p6 = p7;
			} else {
				var best2 = null;
				var _g4 = 0;
				var _g13 = _this4.all;
				while(_g4 < _g13.length) {
					var p8 = _g13[_g4];
					++_g4;
					if(best2 == null || p8.stamp <= best2.stamp) {
						best2 = p8;
					}
				}
				if(best2.onKill != null) {
					best2.onKill();
				}
				best2.reset(sb2,t2,x,y);
				p6 = best2;
			}
			var sign11 = null;
			if(sign11 == null) {
				sign11 = false;
			}
			p6.setFadeS(sign11 ? (0.6 + Math.random() * 0.30000000000000004) * (Std.random(2) * 2 - 1) : 0.6 + Math.random() * 0.30000000000000004,0,0.05);
			p6.rotation = ang;
			var sign12 = null;
			if(sign12 == null) {
				sign12 = false;
			}
			var spd = sign12 ? (4 + Math.random() * 4) * (Std.random(2) * 2 - 1) : 4 + Math.random() * 4;
			p6.dx = Math.cos(ang) * spd;
			p6.dy = Math.sin(ang) * spd;
			var ratio = 1.0;
			if(ratio == null) {
				ratio = 1.0;
			}
			var a = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 16);
			var x2 = a + (_$UInt_UInt_$Impl_$.toFloat(15683840 >>> 16) - a) * ratio;
			p6.r = ((x2 > 0 ? x2 + .5 : x2 < 0 ? x2 - .5 : 0) | 0) / 255;
			var a1 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 8 & 255);
			var x3 = a1 + (_$UInt_UInt_$Impl_$.toFloat(15683840 >>> 8 & 255) - a1) * ratio;
			p6.g = ((x3 > 0 ? x3 + .5 : x3 < 0 ? x3 - .5 : 0) | 0) / 255;
			var a2 = _$UInt_UInt_$Impl_$.toFloat(16777215 & 255);
			var x4 = a2 + (_$UInt_UInt_$Impl_$.toFloat(15683840 & 255) - a2) * ratio;
			p6.b = ((x4 > 0 ? x4 + .5 : x4 < 0 ? x4 - .5 : 0) | 0) / 255;
			var sign13 = null;
			if(sign13 == null) {
				sign13 = false;
			}
			p6.scaleX = sign13 ? (0.2 + Math.random() * 0.2) * (Std.random(2) * 2 - 1) : 0.2 + Math.random() * 0.2;
			var sign14 = true;
			if(sign14 == null) {
				sign14 = false;
			}
			p6.scaleY = sign14 ? (1 + Math.random()) * (Std.random(2) * 2 - 1) : 1 + Math.random();
			var sign15 = null;
			if(sign15 == null) {
				sign15 = false;
			}
			p6.scaleXMul = sign15 ? (0.97 + Math.random() * 0.020000000000000018) * (Std.random(2) * 2 - 1) : 0.97 + Math.random() * 0.020000000000000018;
			var sign16 = null;
			if(sign16 == null) {
				sign16 = false;
			}
			p6.frictX = p6.frictY = sign16 ? (0.82 + Math.random() * 0.020000000000000018) * (Std.random(2) * 2 - 1) : 0.82 + Math.random() * 0.020000000000000018;
			var sign17 = null;
			if(sign17 == null) {
				sign17 = false;
			}
			p6.set_lifeS(sign17 ? (0.03 + Math.random() * 0.03) * (Std.random(2) * 2 - 1) : 0.03 + Math.random() * 0.03);
		}
	}
	,cartridge: function(x,y,dir) {
		var t = Assets.tiles.getTileRandom("fxCartridge");
		var sign = true;
		if(sign == null) {
			sign = false;
		}
		var x1 = x + (sign ? Math.random() * (Std.random(2) * 2 - 1) : Math.random());
		var _this = this.pool;
		var sb = this.topNormalSb;
		var p;
		if(_this.nalloc < _this.all.length) {
			var p1 = _this.all[_this.nalloc];
			p1.reset(sb,t,x1,y);
			p1.poolIdx = _this.nalloc;
			_this.nalloc++;
			p = p1;
		} else {
			var best = null;
			var _g = 0;
			var _g1 = _this.all;
			while(_g < _g1.length) {
				var p2 = _g1[_g];
				++_g;
				if(best == null || p2.stamp <= best.stamp) {
					best = p2;
				}
			}
			if(best.onKill != null) {
				best.onKill();
			}
			best.reset(sb,t,x1,y);
			p = best;
		}
		var sign1 = null;
		if(sign1 == null) {
			sign1 = false;
		}
		p.setFadeS(1,0,sign1 ? (5 + Math.random() * 2) * (Std.random(2) * 2 - 1) : 5 + Math.random() * 2);
		var ratio = 1.0;
		if(ratio == null) {
			ratio = 1.0;
		}
		var a = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 16);
		var x2 = a + (_$UInt_UInt_$Impl_$.toFloat(15712331 >>> 16) - a) * ratio;
		p.r = ((x2 > 0 ? x2 + .5 : x2 < 0 ? x2 - .5 : 0) | 0) / 255;
		var a1 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 8 & 255);
		var x3 = a1 + (_$UInt_UInt_$Impl_$.toFloat(15712331 >>> 8 & 255) - a1) * ratio;
		p.g = ((x3 > 0 ? x3 + .5 : x3 < 0 ? x3 - .5 : 0) | 0) / 255;
		var a2 = _$UInt_UInt_$Impl_$.toFloat(16777215 & 255);
		var x4 = a2 + (_$UInt_UInt_$Impl_$.toFloat(15712331 & 255) - a2) * ratio;
		p.b = ((x4 > 0 ? x4 + .5 : x4 < 0 ? x4 - .5 : 0) | 0) / 255;
		var sign2 = null;
		if(sign2 == null) {
			sign2 = false;
		}
		p.dx = dir * (sign2 ? (0.7 + Math.random() * 2.0999999999999996) * (Std.random(2) * 2 - 1) : 0.7 + Math.random() * 2.0999999999999996);
		var sign3 = null;
		if(sign3 == null) {
			sign3 = false;
		}
		p.dy = -(sign3 ? (3 + Math.random()) * (Std.random(2) * 2 - 1) : 3 + Math.random());
		var sign4 = null;
		if(sign4 == null) {
			sign4 = false;
		}
		p.scaleX = sign4 ? (1 + Math.random() * 0.5) * (Std.random(2) * 2 - 1) : 1 + Math.random() * 0.5;
		p.gy = 0.25;
		p.frictX = p.frictY = 0.96;
		var sign5 = null;
		if(sign5 == null) {
			sign5 = false;
		}
		p.dr = dir * (sign5 ? (0.1 + Math.random() * 0.1) * (Std.random(2) * 2 - 1) : 0.1 + Math.random() * 0.1);
		p.onUpdate = $bind(this,this._physics);
		var sign6 = null;
		if(sign6 == null) {
			sign6 = false;
		}
		p.set_lifeS(sign6 ? (12 + Math.random() * 3) * (Std.random(2) * 2 - 1) : 12 + Math.random() * 3);
	}
	,update: function() {
		dn_Process.prototype.update.call(this);
		this.pool.update(Game.ME.tmod);
	}
	,__class__: Fx
});
var Game = function() {
	dn_Process.call(this,Main.ME);
	Game.ME = this;
	this.ca = Main.ME.controller.createAccess("game");
	var _this = this.ca;
	_this.leftDeadZone = 0.2;
	var _this1 = this.ca;
	_this1.rightDeadZone = 0.2;
	this.createRootInLayers(Main.ME.root,Const.DP_BG);
	this.bg = new h2d_Bitmap(h2d_Tile.fromColor(Const.BG_COLOR),this.root);
	this.scroller = new h2d_Layers();
	this.root.addChildAt(this.scroller,Const.DP_BG);
	this.camera = new Camera();
	this.level = new Level();
	this.fx = new Fx();
	var _this2 = this.level.data.layersByName;
	var _this3 = __map_reserved["entities"] != null ? _this2.getReserved("entities") : _this2.h["entities"];
	var oe;
	var _this4 = _this3.entitiesByName;
	if(__map_reserved["hero"] != null ? _this4.existsReserved("hero") : _this4.h.hasOwnProperty("hero")) {
		var _this5 = _this3.entitiesByName;
		oe = __map_reserved["hero"] != null ? _this5.getReserved("hero") : _this5.h["hero"];
	} else {
		oe = [];
	}
	var oe1 = oe[0];
	this.hero = new en_Hero(oe1.x / (oe1.gridWidOverride == null ? oe1.layer.gridWid : oe1.gridWidOverride) | 0,oe1.y / (oe1.gridHeiOverride == null ? oe1.layer.gridHei : oe1.gridHeiOverride) | 0);
	var _this6 = this.level.data.layersByName;
	var _this7 = __map_reserved["entities"] != null ? _this6.getReserved("entities") : _this6.h["entities"];
	var camLock;
	var _this8 = _this7.entitiesByName;
	if(__map_reserved["cam"] != null ? _this8.existsReserved("cam") : _this8.h.hasOwnProperty("cam")) {
		var _this9 = _this7.entitiesByName;
		camLock = __map_reserved["cam"] != null ? _this9.getReserved("cam") : _this9.h["cam"];
	} else {
		camLock = [];
	}
	var camLock1 = camLock[0];
	if(camLock1 == null) {
		this.camera.target = this.hero;
	} else {
		this.camera.setPosition(camLock1.x,camLock1.y);
	}
	var _g = 0;
	var _this10 = this.level.data.layersByName;
	var _this11 = __map_reserved["entities"] != null ? _this10.getReserved("entities") : _this10.h["entities"];
	var _g1;
	var _this12 = _this11.entitiesByName;
	if(__map_reserved["mob"] != null ? _this12.existsReserved("mob") : _this12.h.hasOwnProperty("mob")) {
		var _this13 = _this11.entitiesByName;
		_g1 = __map_reserved["mob"] != null ? _this13.getReserved("mob") : _this13.h["mob"];
	} else {
		_g1 = [];
	}
	while(_g < _g1.length) {
		var oe2 = _g1[_g];
		++_g;
		new en_Mob(oe2.x / (oe2.gridWidOverride == null ? oe2.layer.gridWid : oe2.gridWidOverride) | 0,oe2.y / (oe2.gridHeiOverride == null ? oe2.layer.gridHei : oe2.gridHeiOverride) | 0);
	}
	dn_Process.resizeAll();
};
$hxClasses["Game"] = Game;
Game.__name__ = "Game";
Game.__super__ = dn_Process;
Game.prototype = $extend(dn_Process.prototype,{
	ca: null
	,fx: null
	,camera: null
	,scroller: null
	,level: null
	,hero: null
	,bg: null
	,gc: function() {
		if(Entity.GC == null || Entity.GC.length == 0) {
			return;
		}
		var _g = 0;
		var _g1 = Entity.GC;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			e.dispose();
		}
		Entity.GC = [];
	}
	,onDispose: function() {
		dn_Process.prototype.onDispose.call(this);
		this.fx.destroyed = true;
		var _g = 0;
		var _g1 = Entity.ALL;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(!e.destroyed) {
				e.destroyed = true;
				Entity.GC.push(e);
			}
		}
		this.gc();
	}
	,onResize: function() {
		dn_Process.prototype.onResize.call(this);
		var _this = this.bg;
		var v = dn_Process.CUSTOM_STAGE_WIDTH > 0 ? dn_Process.CUSTOM_STAGE_WIDTH : hxd_Window.getInstance().get_width();
		_this.posChanged = true;
		_this.scaleX = v / Const.SCALE;
		var _this1 = this.bg;
		var v1 = dn_Process.CUSTOM_STAGE_HEIGHT > 0 ? dn_Process.CUSTOM_STAGE_HEIGHT : hxd_Window.getInstance().get_height();
		_this1.posChanged = true;
		_this1.scaleY = v1 / Const.SCALE;
	}
	,update: function() {
		dn_Process.prototype.update.call(this);
		var _g = 0;
		var _g1 = Entity.ALL;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(!e.destroyed) {
				e.preUpdate();
			}
		}
		var _g2 = 0;
		var _g3 = Entity.ALL;
		while(_g2 < _g3.length) {
			var e1 = _g3[_g2];
			++_g2;
			if(!e1.destroyed) {
				e1.update();
			}
		}
		var _g4 = 0;
		var _g5 = Entity.ALL;
		while(_g4 < _g5.length) {
			var e2 = _g5[_g4];
			++_g4;
			if(!e2.destroyed) {
				e2.postUpdate();
			}
		}
		this.gc();
		if(!ui_Console.ME.isActive() && !ui_Modal.hasAny()) {
			var _this = this.ca;
			var k = 5;
			var tmp;
			if(!(_this.manualLock || _this.parent.isLocked() || _this.parent.exclusiveId != null && _this.parent.exclusiveId != _this.id || Date.now() / 1000 < _this.parent.suspendTimer)) {
				var tmp1;
				var tmp2;
				var k1 = _this.parent.primary.h[k];
				if(!(k1 != null && !(_this.manualLock || _this.parent.isLocked() || _this.parent.exclusiveId != null && _this.parent.exclusiveId != _this.id || Date.now() / 1000 < _this.parent.suspendTimer) && hxd_Key.isPressed(k1))) {
					var k2 = _this.parent.secondary.h[k];
					tmp2 = k2 != null && !(_this.manualLock || _this.parent.isLocked() || _this.parent.exclusiveId != null && _this.parent.exclusiveId != _this.id || Date.now() / 1000 < _this.parent.suspendTimer) && hxd_Key.isPressed(k2);
				} else {
					tmp2 = true;
				}
				if(!tmp2) {
					var k3 = _this.parent.third.h[k];
					tmp1 = k3 != null && !(_this.manualLock || _this.parent.isLocked() || _this.parent.exclusiveId != null && _this.parent.exclusiveId != _this.id || Date.now() / 1000 < _this.parent.suspendTimer) && hxd_Key.isPressed(k3);
				} else {
					tmp1 = true;
				}
				tmp = tmp1 || _this.parent.gc.isPressed(k);
			} else {
				tmp = false;
			}
			if(tmp) {
				new ui_OptionsModal();
			}
			var _this1 = this.ca;
			var k4 = 4;
			var tmp3;
			if(!(_this1.manualLock || _this1.parent.isLocked() || _this1.parent.exclusiveId != null && _this1.parent.exclusiveId != _this1.id || Date.now() / 1000 < _this1.parent.suspendTimer)) {
				var tmp4;
				var tmp5;
				var k5 = _this1.parent.primary.h[k4];
				if(!(k5 != null && !(_this1.manualLock || _this1.parent.isLocked() || _this1.parent.exclusiveId != null && _this1.parent.exclusiveId != _this1.id || Date.now() / 1000 < _this1.parent.suspendTimer) && hxd_Key.isPressed(k5))) {
					var k6 = _this1.parent.secondary.h[k4];
					tmp5 = k6 != null && !(_this1.manualLock || _this1.parent.isLocked() || _this1.parent.exclusiveId != null && _this1.parent.exclusiveId != _this1.id || Date.now() / 1000 < _this1.parent.suspendTimer) && hxd_Key.isPressed(k6);
				} else {
					tmp5 = true;
				}
				if(!tmp5) {
					var k7 = _this1.parent.third.h[k4];
					tmp4 = k7 != null && !(_this1.manualLock || _this1.parent.isLocked() || _this1.parent.exclusiveId != null && _this1.parent.exclusiveId != _this1.id || Date.now() / 1000 < _this1.parent.suspendTimer) && hxd_Key.isPressed(k7);
				} else {
					tmp4 = true;
				}
				tmp3 = tmp4 || _this1.parent.gc.isPressed(k4);
			} else {
				tmp3 = false;
			}
			if(tmp3) {
				Main.ME.startGame();
			}
		}
	}
	,__class__: Game
});
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.indexOf = function(it,v) {
	var i = 0;
	var v2 = $getIterator(it);
	while(v2.hasNext()) {
		var v21 = v2.next();
		if(v == v21) {
			return i;
		}
		++i;
	}
	return -1;
};
var Level = function() {
	this.collMap = new haxe_ds_IntMap();
	this.invalidated = true;
	dn_Process.call(this,Game.ME);
	this.createRootInLayers(Game.ME.scroller,Const.DP_BG);
	var this1 = hxd_Res.get_loader();
	this.project = new ogmo_Project(this1.loadCache("map/feel.ogmo",hxd_res_Resource),false);
	this.data = this.project.getLevelByName("level");
	var _this = this.data.layersByName;
	var l = __map_reserved["collisions"] != null ? _this.getReserved("collisions") : _this.h["collisions"];
	var _g = 0;
	var x = l.level.pxHei / l.gridHei;
	var _g1;
	if(x > .0) {
		var t = x + .5 | 0;
		_g1 = t < x ? t + 1 : t;
	} else if(x < .0) {
		var t1 = x - .5 | 0;
		_g1 = t1 < x ? t1 + 1 : t1;
	} else {
		_g1 = 0;
	}
	while(_g < _g1) {
		var cy = _g++;
		var _g2 = 0;
		var x1 = l.level.pxWid / l.gridWid;
		var _g11;
		if(x1 > .0) {
			var t2 = x1 + .5 | 0;
			_g11 = t2 < x1 ? t2 + 1 : t2;
		} else if(x1 < .0) {
			var t3 = x1 - .5 | 0;
			_g11 = t3 < x1 ? t3 + 1 : t3;
		} else {
			_g11 = 0;
		}
		while(_g2 < _g11) {
			var cx = _g2++;
			var tmp;
			var tmp1;
			var tmp2;
			var tmp3;
			if(cx >= 0) {
				var x2 = l.level.pxWid / l.gridWid;
				var tmp4;
				if(x2 > .0) {
					var t4 = x2 + .5 | 0;
					tmp4 = t4 < x2 ? t4 + 1 : t4;
				} else if(x2 < .0) {
					var t5 = x2 - .5 | 0;
					tmp4 = t5 < x2 ? t5 + 1 : t5;
				} else {
					tmp4 = 0;
				}
				tmp3 = cx < tmp4;
			} else {
				tmp3 = false;
			}
			if(tmp3 && cy >= 0) {
				var x3 = l.level.pxHei / l.gridHei;
				var tmp5;
				if(x3 > .0) {
					var t6 = x3 + .5 | 0;
					tmp5 = t6 < x3 ? t6 + 1 : t6;
				} else if(x3 < .0) {
					var t7 = x3 - .5 | 0;
					tmp5 = t7 < x3 ? t7 + 1 : t7;
				} else {
					tmp5 = 0;
				}
				tmp2 = cy < tmp5;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				var key;
				var key1;
				var key2;
				if(cx >= 0) {
					var x4 = l.level.pxWid / l.gridWid;
					var key3;
					if(x4 > .0) {
						var t8 = x4 + .5 | 0;
						key3 = t8 < x4 ? t8 + 1 : t8;
					} else if(x4 < .0) {
						var t9 = x4 - .5 | 0;
						key3 = t9 < x4 ? t9 + 1 : t9;
					} else {
						key3 = 0;
					}
					key2 = cx < key3;
				} else {
					key2 = false;
				}
				if(key2 && cy >= 0) {
					var x5 = l.level.pxHei / l.gridHei;
					var key4;
					if(x5 > .0) {
						var t10 = x5 + .5 | 0;
						key4 = t10 < x5 ? t10 + 1 : t10;
					} else if(x5 < .0) {
						var t11 = x5 - .5 | 0;
						key4 = t11 < x5 ? t11 + 1 : t11;
					} else {
						key4 = 0;
					}
					key1 = cy < key4;
				} else {
					key1 = false;
				}
				if(key1) {
					var x6 = l.level.pxWid / l.gridWid;
					var key5;
					if(x6 > .0) {
						var t12 = x6 + .5 | 0;
						key5 = t12 < x6 ? t12 + 1 : t12;
					} else if(x6 < .0) {
						var t13 = x6 - .5 | 0;
						key5 = t13 < x6 ? t13 + 1 : t13;
					} else {
						key5 = 0;
					}
					key = cx + cy * key5;
				} else {
					key = 0;
				}
				tmp1 = l.intGridIds.h.hasOwnProperty(key);
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var key6;
				var key7;
				var key8;
				if(cx >= 0) {
					var x7 = l.level.pxWid / l.gridWid;
					var key9;
					if(x7 > .0) {
						var t14 = x7 + .5 | 0;
						key9 = t14 < x7 ? t14 + 1 : t14;
					} else if(x7 < .0) {
						var t15 = x7 - .5 | 0;
						key9 = t15 < x7 ? t15 + 1 : t15;
					} else {
						key9 = 0;
					}
					key8 = cx < key9;
				} else {
					key8 = false;
				}
				if(key8 && cy >= 0) {
					var x8 = l.level.pxHei / l.gridHei;
					var key10;
					if(x8 > .0) {
						var t16 = x8 + .5 | 0;
						key10 = t16 < x8 ? t16 + 1 : t16;
					} else if(x8 < .0) {
						var t17 = x8 - .5 | 0;
						key10 = t17 < x8 ? t17 + 1 : t17;
					} else {
						key10 = 0;
					}
					key7 = cy < key10;
				} else {
					key7 = false;
				}
				if(key7) {
					var x9 = l.level.pxWid / l.gridWid;
					var key11;
					if(x9 > .0) {
						var t18 = x9 + .5 | 0;
						key11 = t18 < x9 ? t18 + 1 : t18;
					} else if(x9 < .0) {
						var t19 = x9 - .5 | 0;
						key11 = t19 < x9 ? t19 + 1 : t19;
					} else {
						key11 = 0;
					}
					key6 = cx + cy * key11;
				} else {
					key6 = 0;
				}
				tmp = l.intGridIds.h[key6];
			} else {
				tmp = 0;
			}
			if(tmp == 1) {
				var tmp6;
				var tmp7;
				if(cx >= 0) {
					var _this1 = this.data.layersByName;
					var _this2 = __map_reserved["collisions"] != null ? _this1.getReserved("collisions") : _this1.h["collisions"];
					var x10 = _this2.level.pxWid / _this2.gridWid;
					var tmp8;
					if(x10 > .0) {
						var t20 = x10 + .5 | 0;
						tmp8 = t20 < x10 ? t20 + 1 : t20;
					} else if(x10 < .0) {
						var t21 = x10 - .5 | 0;
						tmp8 = t21 < x10 ? t21 + 1 : t21;
					} else {
						tmp8 = 0;
					}
					tmp7 = cx < tmp8;
				} else {
					tmp7 = false;
				}
				if(tmp7 && cy >= 0) {
					var _this3 = this.data.layersByName;
					var _this4 = __map_reserved["collisions"] != null ? _this3.getReserved("collisions") : _this3.h["collisions"];
					var x11 = _this4.level.pxHei / _this4.gridHei;
					var tmp9;
					if(x11 > .0) {
						var t22 = x11 + .5 | 0;
						tmp9 = t22 < x11 ? t22 + 1 : t22;
					} else if(x11 < .0) {
						var t23 = x11 - .5 | 0;
						tmp9 = t23 < x11 ? t23 + 1 : t23;
					} else {
						tmp9 = 0;
					}
					tmp6 = cy < tmp9;
				} else {
					tmp6 = false;
				}
				if(tmp6) {
					var this2 = this.collMap;
					var _this5 = this.data.layersByName;
					var _this6 = __map_reserved["collisions"] != null ? _this5.getReserved("collisions") : _this5.h["collisions"];
					var x12 = _this6.level.pxWid / _this6.gridWid;
					var key12;
					if(x12 > .0) {
						var t24 = x12 + .5 | 0;
						key12 = t24 < x12 ? t24 + 1 : t24;
					} else if(x12 < .0) {
						var t25 = x12 - .5 | 0;
						key12 = t25 < x12 ? t25 + 1 : t25;
					} else {
						key12 = 0;
					}
					this2.h[cx + cy * key12] = true;
				}
			}
		}
	}
};
$hxClasses["Level"] = Level;
Level.__name__ = "Level";
Level.__super__ = dn_Process;
Level.prototype = $extend(dn_Process.prototype,{
	invalidated: null
	,project: null
	,data: null
	,collMap: null
	,render: function() {
		this.root.removeChildren();
		var bg = new h2d_Bitmap(h2d_Tile.fromColor(Const.BG_COLOR),this.root);
		bg.posChanged = true;
		bg.scaleX = this.data.pxWid;
		bg.posChanged = true;
		bg.scaleY = this.data.pxHei;
		if(!Main.ME.options.levelTextures) {
			var _g = 0;
			var _g1 = this.data.layersReversed;
			while(_g < _g1.length) {
				var l = _g1[_g];
				++_g;
				if(l.name == "collisions") {
					l.render(this.root);
				}
			}
		} else {
			var _g2 = 0;
			var _g11 = this.data.layersReversed;
			while(_g2 < _g11.length) {
				var l1 = _g11[_g2];
				++_g2;
				switch(l1.name) {
				case "collisions":case "entities":
					break;
				case "front":
					var e = l1.render(this.root);
					e.set_filter(new h2d_filter_Glow(0,0.4,32,2,2,true));
					break;
				default:
					l1.render(this.root);
				}
			}
		}
	}
	,postUpdate: function() {
		dn_Process.prototype.postUpdate.call(this);
		if(this.invalidated) {
			this.invalidated = false;
			this.render();
		}
	}
	,__class__: Level
});
var Main = function(s) {
	dn_Process.call(this);
	Main.ME = this;
	this.createRoot(s);
	this.root.set_filter(new h2d_filter_ColorMatrix());
	hxd_Timer.wantedFPS = Const.FPS;
	h3d_Engine.CURRENT.backgroundColor = -16777216 | Const.BG_COLOR;
	hxd_Res.set_loader(new hxd_res_Loader(new hxd_fs_EmbedFileSystem(haxe_Unserializer.run("oy10:props.jsonty5:atlasoy9:tiles.pngty11:tiles.atlastgy3:mapoy8:tilesetsoy13:inca_back.pngty14:inca_back2.pngty14:inca_front.pngtgy10:level.jsonty9:feel.ogmotgy5:fontsoy31:barlow_condensed_regular_32.pngty31:barlow_condensed_regular_17.fntty31:barlow_condensed_regular_12.fntty31:barlow_condensed_regular_12.pngty22:minecraftiaOutline.pngty22:minecraftiaOutline.fntty31:barlow_condensed_regular_32.fntty31:barlow_condensed_regular_17.pngtgy4:langoy5:en.poty5:en.moty15:sourceTexts.pottgg"))));
	Assets.init();
	new ui_Console(Assets.fontSmall,s);
	this.controller = new dn_heaps_Controller(s);
	this.ca = this.controller.createAccess("main");
	this.controller.bind(17,37,81,65);
	this.controller.bind(18,39,68);
	this.controller.bind(2,88,17,16);
	this.controller.bind(0,32);
	this.controller.bind(4,82);
	this.controller.bind(5,78);
	this.options = new Options();
	this.startGame();
};
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.__super__ = dn_Process;
Main.prototype = $extend(dn_Process.prototype,{
	controller: null
	,ca: null
	,options: null
	,startGame: function() {
		if(Game.ME != null) {
			Game.ME.destroyed = true;
			this.delayer.addF(null,function() {
				new Game();
			},1);
		} else {
			new Game();
		}
	}
	,onResize: function() {
		dn_Process.prototype.onResize.call(this);
		if(Const.AUTO_SCALE_TARGET_WID > 0) {
			var x = (dn_Process.CUSTOM_STAGE_HEIGHT > 0 ? dn_Process.CUSTOM_STAGE_HEIGHT : hxd_Window.getInstance().get_height()) / Const.AUTO_SCALE_TARGET_WID;
			var tmp;
			if(x > .0) {
				var t = x + .5 | 0;
				tmp = t < x ? t + 1 : t;
			} else if(x < .0) {
				var t1 = x - .5 | 0;
				tmp = t1 < x ? t1 + 1 : t1;
			} else {
				tmp = 0;
			}
			Const.SCALE = tmp;
		} else if(Const.AUTO_SCALE_TARGET_HEI > 0) {
			var x1 = (dn_Process.CUSTOM_STAGE_HEIGHT > 0 ? dn_Process.CUSTOM_STAGE_HEIGHT : hxd_Window.getInstance().get_height()) / Const.AUTO_SCALE_TARGET_HEI;
			var tmp1;
			if(x1 > .0) {
				var t2 = x1 + .5 | 0;
				tmp1 = t2 < x1 ? t2 + 1 : t2;
			} else if(x1 < .0) {
				var t3 = x1 - .5 | 0;
				tmp1 = t3 < x1 ? t3 + 1 : t3;
			} else {
				tmp1 = 0;
			}
			Const.SCALE = tmp1;
		}
		var y = Const.SCALE - 1;
		Const.UI_SCALE = 1 > y ? 1 : y;
		var _this = this.root;
		var v = Const.SCALE;
		_this.posChanged = true;
		_this.scaleX = v;
		_this.posChanged = true;
		_this.scaleY = v;
	}
	,update: function() {
		dn_heaps_slib_SpriteLib.TMOD = this.tmod;
		dn_Process.prototype.update.call(this);
	}
	,__class__: Main
});
Math.__name__ = "Math";
var Options = function() {
	this.levelTextures = false;
	this.mobSquashAndStrech = true;
	this.blinkImpact = false;
	this.bulletImpactFx = false;
	this.physicalReactions = false;
	this.heroSquashAndStrech = false;
	this.gunShotFx = false;
	this.cartridges = false;
	this.gunAiming = false;
	this.basicAnimations = false;
	this.controlLocks = false;
	this.camShakes = false;
	this.flashes = false;
};
$hxClasses["Options"] = Options;
Options.__name__ = "Options";
Options.prototype = {
	flashes: null
	,camShakes: null
	,controlLocks: null
	,basicAnimations: null
	,gunAiming: null
	,cartridges: null
	,gunShotFx: null
	,heroSquashAndStrech: null
	,physicalReactions: null
	,bulletImpactFx: null
	,blinkImpact: null
	,mobSquashAndStrech: null
	,levelTextures: null
	,__class__: Options
};
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x, x && x[0]=="0" && (x[1]=="x" || x[1]=="X") ? 16 : 10);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s1 = _g_s;
		var index = _g_offset++;
		var c = s1.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s1.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var ValueType = $hxEnums["ValueType"] = { __ename__ : true, __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__empty_constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TUnknown];
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.createInstance = function(cl,args) {
	return new (Function.prototype.bind.apply(cl,[null].concat(args)));
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c = e.__constructs__[index];
	if(c == null) {
		throw new js__$Boot_HaxeError(index + " is not a valid enum constructor index");
	}
	return Type.createEnum(e,c,params);
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var ctorName = enm.__constructs__[a._hx_index];
		var params = enm[ctorName].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( e1 ) {
		var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
		return false;
	}
	return true;
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = "_UInt.UInt_Impl_";
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var int = this1;
	if(int < 0) {
		return 4294967296.0 + int;
	} else {
		return int + 0.0;
	}
};
var _$Xml_XmlType_$Impl_$ = {};
$hxClasses["_Xml.XmlType_Impl_"] = _$Xml_XmlType_$Impl_$;
_$Xml_XmlType_$Impl_$.__name__ = "_Xml.XmlType_Impl_";
_$Xml_XmlType_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	nodeType: null
	,nodeName: null
	,nodeValue: null
	,parent: null
	,children: null
	,attributeMap: null
	,get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.getReserved(att);
		} else {
			return _this.h[att];
		}
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.existsReserved(att);
		} else {
			return _this.h.hasOwnProperty(att);
		}
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		return this.attributeMap.keys();
	}
	,iterator: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		return HxOverrides.iter(this.children);
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return HxOverrides.iter(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(child.nodeType));
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return HxOverrides.iter(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,insertChild: function(x,pos) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		if(x.parent != null) {
			HxOverrides.remove(x.parent.children,x);
		}
		this.children.splice(pos,0,x);
		x.parent = this;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var dn__$Cooldown_CdInst = function(k,f) {
	this.k = k;
	this.frames = f;
	this.initial = f;
};
$hxClasses["dn._Cooldown.CdInst"] = dn__$Cooldown_CdInst;
dn__$Cooldown_CdInst.__name__ = "dn._Cooldown.CdInst";
dn__$Cooldown_CdInst.prototype = {
	k: null
	,frames: null
	,initial: null
	,cb: null
	,__class__: dn__$Cooldown_CdInst
};
var dn_Cooldown = function(fps) {
	if(dn_Cooldown.INDEXES == null) {
		if(haxe_rtti_Meta.getType(dn_Cooldown).indexes != null) {
			var _g = [];
			var _g1 = 0;
			var _g2 = haxe_rtti_Meta.getType(dn_Cooldown).indexes;
			while(_g1 < _g2.length) {
				var str = _g2[_g1];
				++_g1;
				_g.push(Std.string(str));
			}
			dn_Cooldown.INDEXES = _g;
		}
	}
	this.cdList = [];
	this.fastCheck = new haxe_ds_IntMap();
	this.baseFps = fps;
};
$hxClasses["dn.Cooldown"] = dn_Cooldown;
dn_Cooldown.__name__ = "dn.Cooldown";
dn_Cooldown.prototype = {
	cdList: null
	,fastCheck: null
	,baseFps: null
	,destroy: function() {
		this.cdList = null;
		this.fastCheck = null;
	}
	,_getRatio: function(k) {
		var cd = this._getCdObject(k);
		var max = cd == null ? 0 : cd.initial;
		if(max <= 0) {
			return 0;
		} else {
			var cd1 = this._getCdObject(k);
			return (cd1 == null ? 0 : cd1.frames) / max;
		}
	}
	,_getCdObject: function(k) {
		var _g = 0;
		var _g1 = this.cdList;
		while(_g < _g1.length) {
			var cd = _g1[_g];
			++_g;
			if(cd.k == k) {
				return cd;
			}
		}
		return null;
	}
	,update: function(dt) {
		var i = 0;
		while(i < this.cdList.length) {
			var cd = this.cdList[i];
			cd.frames = Math.floor((cd.frames - dt) * 1000) / 1000;
			if(cd.frames <= 0) {
				var cb = cd.cb;
				HxOverrides.remove(this.cdList,cd);
				cd.frames = 0;
				cd.cb = null;
				this.fastCheck.remove(cd.k);
				if(cb != null) {
					cb();
				}
			} else {
				++i;
			}
		}
	}
	,__class__: dn_Cooldown
};
var dn__$Delayer_Task = function(id,t,cb) {
	this.t = t;
	this.cb = cb;
	this.id = id;
};
$hxClasses["dn._Delayer.Task"] = dn__$Delayer_Task;
dn__$Delayer_Task.__name__ = "dn._Delayer.Task";
dn__$Delayer_Task.prototype = {
	t: null
	,id: null
	,cb: null
	,__class__: dn__$Delayer_Task
};
var dn_Delayer = function(fps) {
	this.now = 0;
	this.fps = fps;
	this.delays = [];
};
$hxClasses["dn.Delayer"] = dn_Delayer;
dn_Delayer.__name__ = "dn.Delayer";
dn_Delayer.prototype = {
	delays: null
	,now: null
	,fps: null
	,destroy: function() {
		this.delays = null;
	}
	,cmp: function(a,b) {
		if(a.t < b.t) {
			return -1;
		} else if(a.t > b.t) {
			return 1;
		} else {
			return 0;
		}
	}
	,addF: function(id,cb,frames) {
		this.delays.push(new dn__$Delayer_Task(id,this.now + frames,cb));
		haxe_ds_ArraySort.sort(this.delays,$bind(this,this.cmp));
	}
	,update: function(dt) {
		while(this.delays.length > 0 && this.delays[0].t <= this.now) {
			var d = this.delays.shift();
			d.cb();
			d.cb = null;
		}
		this.now += dt;
	}
	,__class__: dn_Delayer
};
var dn_Lib = function() { };
$hxClasses["dn.Lib"] = dn_Lib;
dn_Lib.__name__ = "dn.Lib";
dn_Lib.redirectTracesToH2dConsole = function(c) {
	haxe_Log.trace = function(m,pos) {
		if(pos != null && pos.customParams == null) {
			pos.customParams = ["debug"];
		}
		c.log(pos.fileName + "(" + pos.lineNumber + ") : " + Std.string(m));
	};
};
var dn_TType = $hxEnums["dn.TType"] = { __ename__ : true, __constructs__ : ["TLinear","TLoop","TLoopEaseIn","TLoopEaseOut","TEase","TEaseIn","TEaseOut","TBurn","TBurnIn","TBurnOut","TZigZag","TRand","TShake","TShakeBoth","TJump","TElasticEnd","TBackOut"]
	,TLinear: {_hx_index:0,__enum__:"dn.TType",toString:$estr}
	,TLoop: {_hx_index:1,__enum__:"dn.TType",toString:$estr}
	,TLoopEaseIn: {_hx_index:2,__enum__:"dn.TType",toString:$estr}
	,TLoopEaseOut: {_hx_index:3,__enum__:"dn.TType",toString:$estr}
	,TEase: {_hx_index:4,__enum__:"dn.TType",toString:$estr}
	,TEaseIn: {_hx_index:5,__enum__:"dn.TType",toString:$estr}
	,TEaseOut: {_hx_index:6,__enum__:"dn.TType",toString:$estr}
	,TBurn: {_hx_index:7,__enum__:"dn.TType",toString:$estr}
	,TBurnIn: {_hx_index:8,__enum__:"dn.TType",toString:$estr}
	,TBurnOut: {_hx_index:9,__enum__:"dn.TType",toString:$estr}
	,TZigZag: {_hx_index:10,__enum__:"dn.TType",toString:$estr}
	,TRand: {_hx_index:11,__enum__:"dn.TType",toString:$estr}
	,TShake: {_hx_index:12,__enum__:"dn.TType",toString:$estr}
	,TShakeBoth: {_hx_index:13,__enum__:"dn.TType",toString:$estr}
	,TJump: {_hx_index:14,__enum__:"dn.TType",toString:$estr}
	,TElasticEnd: {_hx_index:15,__enum__:"dn.TType",toString:$estr}
	,TBackOut: {_hx_index:16,__enum__:"dn.TType",toString:$estr}
};
dn_TType.__empty_constructs__ = [dn_TType.TLinear,dn_TType.TLoop,dn_TType.TLoopEaseIn,dn_TType.TLoopEaseOut,dn_TType.TEase,dn_TType.TEaseIn,dn_TType.TEaseOut,dn_TType.TBurn,dn_TType.TBurnIn,dn_TType.TBurnOut,dn_TType.TZigZag,dn_TType.TRand,dn_TType.TShake,dn_TType.TShakeBoth,dn_TType.TJump,dn_TType.TElasticEnd,dn_TType.TBackOut];
var dn_Tween = function(tw) {
	this.tw = tw;
	this.paused = false;
	this.done = false;
	this.n = this.ln = 0;
	this.delay = 0;
	this.speed = 1;
	this.set_type(dn_TType.TEase);
	this.plays = 1;
	this.pixelSnap = false;
};
$hxClasses["dn.Tween"] = dn_Tween;
dn_Tween.__name__ = "dn.Tween";
dn_Tween.prototype = {
	tw: null
	,done: null
	,paused: null
	,getter: null
	,setter: null
	,n: null
	,ln: null
	,speed: null
	,from: null
	,to: null
	,type: null
	,plays: null
	,pixelSnap: null
	,delay: null
	,set_type: function(t) {
		var _gthis = this;
		this.type = t;
		var tmp;
		switch(this.type._hx_index) {
		case 0:
			tmp = function(step) {
				return step;
			};
			break;
		case 1:
			tmp = function(step1) {
				var n = 1 - step1;
				var n1 = 1 - step1;
				return n * n * n * 0 + 3 * step1 * (n1 * n1) * 1.33 + 3 * (step1 * step1) * (1 - step1) * 1.33 + step1 * step1 * step1 * 0;
			};
			break;
		case 2:
			tmp = function(step2) {
				var n2 = 1 - step2;
				var n3 = 1 - step2;
				return n2 * n2 * n2 * 0 + 3 * step2 * (n3 * n3) * 0 + 3 * (step2 * step2) * (1 - step2) * 2.25 + step2 * step2 * step2 * 0;
			};
			break;
		case 3:
			tmp = function(step3) {
				var n4 = 1 - step3;
				var n5 = 1 - step3;
				return n4 * n4 * n4 * 0 + 3 * step3 * (n5 * n5) * 2.25 + 3 * (step3 * step3) * (1 - step3) * 0 + step3 * step3 * step3 * 0;
			};
			break;
		case 4:
			tmp = function(step4) {
				var n6 = 1 - step4;
				var n7 = 1 - step4;
				return n6 * n6 * n6 * 0 + 3 * step4 * (n7 * n7) * 0 + 3 * (step4 * step4) * (1 - step4) + step4 * step4 * step4;
			};
			break;
		case 5:
			tmp = function(step5) {
				var n8 = 1 - step5;
				var n9 = 1 - step5;
				return n8 * n8 * n8 * 0 + 3 * step5 * (n9 * n9) * 0 + 3 * (step5 * step5) * (1 - step5) * 0.5 + step5 * step5 * step5;
			};
			break;
		case 6:
			tmp = function(step6) {
				var n10 = 1 - step6;
				var n11 = 1 - step6;
				return n10 * n10 * n10 * 0 + 3 * step6 * (n11 * n11) * 0.5 + 3 * (step6 * step6) * (1 - step6) + step6 * step6 * step6;
			};
			break;
		case 7:
			tmp = function(step7) {
				var n12 = 1 - step7;
				var n13 = 1 - step7;
				return n12 * n12 * n12 * 0 + 3 * step7 * (n13 * n13) + 3 * (step7 * step7) * (1 - step7) * 0 + step7 * step7 * step7;
			};
			break;
		case 8:
			tmp = function(step8) {
				var n14 = 1 - step8;
				var n15 = 1 - step8;
				return n14 * n14 * n14 * 0 + 3 * step8 * (n15 * n15) + 3 * (step8 * step8) * (1 - step8) + step8 * step8 * step8;
			};
			break;
		case 9:
			tmp = function(step9) {
				var n16 = 1 - step9;
				var n17 = 1 - step9;
				return n16 * n16 * n16 * 0 + 3 * step9 * (n17 * n17) * 0 + 3 * (step9 * step9) * (1 - step9) * 0 + step9 * step9 * step9;
			};
			break;
		case 10:
			tmp = function(step10) {
				var n18 = 1 - step10;
				var n19 = 1 - step10;
				return n18 * n18 * n18 * 0 + 3 * step10 * (n19 * n19) * 2.5 + 3 * (step10 * step10) * (1 - step10) * -1.5 + step10 * step10 * step10;
			};
			break;
		case 11:
			tmp = function(step11) {
				return step11;
			};
			break;
		case 12:
			tmp = function(step12) {
				var n20 = 1 - step12;
				var n21 = 1 - step12;
				return n20 * n20 * n20 * 0.5 + 3 * step12 * (n21 * n21) * 1.22 + 3 * (step12 * step12) * (1 - step12) * 1.25 + step12 * step12 * step12 * 0;
			};
			break;
		case 13:
			tmp = function(step13) {
				var n22 = 1 - step13;
				var n23 = 1 - step13;
				return n22 * n22 * n22 * 0.5 + 3 * step13 * (n23 * n23) * 1.22 + 3 * (step13 * step13) * (1 - step13) * 1.25 + step13 * step13 * step13 * 0;
			};
			break;
		case 14:
			tmp = function(step14) {
				var n24 = 1 - step14;
				var n25 = 1 - step14;
				return n24 * n24 * n24 * 0 + 3 * step14 * (n25 * n25) * 2 + 3 * (step14 * step14) * (1 - step14) * 2.79 + step14 * step14 * step14;
			};
			break;
		case 15:
			tmp = function(step15) {
				var n26 = 1 - step15;
				var n27 = 1 - step15;
				return n26 * n26 * n26 * 0 + 3 * step15 * (n27 * n27) * 0.7 + 3 * (step15 * step15) * (1 - step15) * 1.5 + step15 * step15 * step15;
			};
			break;
		case 16:
			tmp = function(step16) {
				var s = 1.70158;
				step16 = step16 / 1 - 1;
				return step16 * step16 * ((s + 1) * step16 + s) + 1;
			};
			break;
		}
		this.interpolate = tmp;
		return this.type;
	}
	,onUpdate: function() {
	}
	,onUpdateT: function(t) {
	}
	,onEnd: function() {
	}
	,onStart: function() {
	}
	,end: function(cb) {
		this.onEnd = cb;
		return this;
	}
	,chainedEvent: function() {
	}
	,interpolate: function(v) {
		return v;
	}
	,endWithoutCallbacks: function() {
		this.done = true;
	}
	,complete: function(fl_allowLoop) {
		if(fl_allowLoop == null) {
			fl_allowLoop = false;
		}
		var v = this.from + (this.to - this.from) * this.interpolate(1);
		if(this.pixelSnap) {
			v = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
		}
		this.setter(v);
		this.onUpdate();
		this.onUpdateT(1);
		this.onEnd();
		this.chainedEvent();
		if(fl_allowLoop && (this.plays == -1 || this.plays > 1)) {
			if(this.plays != -1) {
				this.plays--;
			}
			this.n = this.ln = 0;
		} else {
			this.done = true;
		}
	}
	,internalUpdate: function(dt) {
		if(this.done) {
			return true;
		}
		if(this.paused) {
			return false;
		}
		if(this.delay > 0) {
			this.delay--;
			return false;
		}
		if(this.onStart != null) {
			var cb = $bind(this,this.onStart);
			this.onStart = null;
			cb();
		}
		var dist = this.to - this.from;
		if(this.type == dn_TType.TRand) {
			this.ln += Std.random(100) < 33 ? this.speed * dt : 0;
		} else {
			this.ln += this.speed * dt;
		}
		this.n = this.interpolate(this.ln);
		if(this.ln < 1) {
			var val;
			if(this.type != dn_TType.TShake && this.type != dn_TType.TShakeBoth) {
				val = this.from + this.n * dist;
			} else if(this.type == dn_TType.TShake) {
				var val1 = this.from;
				var val2 = Math.random();
				var x = this.n * dist;
				val = val1 + val2 * (x < 0 ? -x : x) * (dist > 0 ? 1 : -1);
			} else {
				val = this.from + Math.random() * this.n * dist * (Std.random(2) * 2 - 1);
			}
			if(this.pixelSnap) {
				val = (val > 0 ? val + .5 : val < 0 ? val - .5 : 0) | 0;
			}
			this.setter(val);
			this.onUpdate();
			this.onUpdateT(this.ln);
		} else {
			this.complete(true);
		}
		return this.done;
	}
	,__class__: dn_Tween
};
var dn_Tweenie = function(fps) {
	this.baseFps = fps;
	this.tlist = [];
};
$hxClasses["dn.Tweenie"] = dn_Tweenie;
dn_Tweenie.__name__ = "dn.Tweenie";
dn_Tweenie.prototype = {
	tlist: null
	,baseFps: null
	,terminate_: function(getter,setter,withCallbacks) {
		if(this.tlist == null) {
			return;
		}
		var v = getter();
		var _g = 0;
		var _g1 = this.tlist;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(t.done) {
				continue;
			}
			var old = t.getter();
			t.setter(old + 1);
			if(getter() != v) {
				t.setter(old);
				if(withCallbacks) {
					t.ln = 1;
					t.complete(false);
				} else {
					t.endWithoutCallbacks();
				}
			} else {
				t.setter(old);
			}
		}
	}
	,create_: function(getter,setter,from,to,tp,duration_ms,allowDuplicates) {
		if(allowDuplicates == null) {
			allowDuplicates = false;
		}
		if(duration_ms == null) {
			duration_ms = dn_Tweenie.DEFAULT_DURATION;
		}
		if(!allowDuplicates) {
			this.terminate_(getter,setter,false);
		}
		var t = new dn_Tween(this);
		t.getter = getter;
		t.setter = setter;
		t.from = from == null ? getter() : from;
		t.speed = 1 / (duration_ms * this.baseFps / 1000);
		t.to = to;
		if(tp != null) {
			t.set_type(tp);
		}
		if(from != null) {
			setter(from);
		}
		this.tlist.push(t);
		return t;
	}
	,destroy: function() {
		this.tlist = null;
	}
	,update: function(dt) {
		if(dt == null) {
			dt = 1.0;
		}
		var _g = 0;
		var _g1 = this.tlist;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(t.internalUpdate(dt)) {
				HxOverrides.remove(this.tlist,t);
			}
		}
	}
	,__class__: dn_Tweenie
};
var dn_heaps_Mode = $hxEnums["dn.heaps.Mode"] = { __ename__ : true, __constructs__ : ["Keyboard","Pad"]
	,Keyboard: {_hx_index:0,__enum__:"dn.heaps.Mode",toString:$estr}
	,Pad: {_hx_index:1,__enum__:"dn.heaps.Mode",toString:$estr}
};
dn_heaps_Mode.__empty_constructs__ = [dn_heaps_Mode.Keyboard,dn_heaps_Mode.Pad];
var dn_heaps_Controller = function(s2d) {
	this.hasAnyPress = false;
	this.longPressLock = new haxe_ds_IntMap();
	this.framePresses = new Array(28);
	this.pressTimers = new Array(28);
	this.third = new haxe_ds_IntMap();
	this.secondary = new haxe_ds_IntMap();
	this.primary = new haxe_ds_IntMap();
	this.allowAutoSwitch = true;
	this.locked = false;
	this.suspendTimer = 0.;
	this.exclusiveId = null;
	this.mode = dn_heaps_Mode.Keyboard;
	var _gthis = this;
	dn_heaps_Controller.ALL.push(this);
	this.gc = new dn_heaps_GamePad(0.4);
	s2d.addEventListener(function(e) {
		if(_gthis.allowAutoSwitch && (e.kind == hxd_EventKind.EMove || e.kind == hxd_EventKind.EKeyDown) && _gthis.mode != dn_heaps_Mode.Keyboard) {
			_gthis.mode = dn_heaps_Mode.Keyboard;
		}
	});
	var _g = 0;
	var _g1 = this.pressTimers.length;
	while(_g < _g1) {
		var idx = _g++;
		this.pressTimers[idx] = -1;
	}
	var _g2 = 0;
	var _g3 = this.framePresses.length;
	while(_g2 < _g3) {
		var idx1 = _g2++;
		this.framePresses[idx1] = -1;
	}
};
$hxClasses["dn.heaps.Controller"] = dn_heaps_Controller;
dn_heaps_Controller.__name__ = "dn.heaps.Controller";
dn_heaps_Controller.beforeUpdate = function() {
	dn_heaps_GamePad.update();
	var _g = 0;
	var _g1 = dn_heaps_Controller.ALL;
	while(_g < _g1.length) {
		var c = _g1[_g];
		++_g;
		if(c.gc != null) {
			var tmp;
			if(c.allowAutoSwitch && c.mode != dn_heaps_Mode.Pad) {
				var tmp1;
				var tmp2;
				var tmp3;
				var tmp4;
				var tmp5;
				var tmp6;
				var _this = c.gc;
				if(!(_this.device != null && _this.toggles[0] > 0)) {
					var _this1 = c.gc;
					tmp6 = _this1.device != null && _this1.toggles[1] > 0;
				} else {
					tmp6 = true;
				}
				if(!tmp6) {
					var _this2 = c.gc;
					tmp5 = _this2.device != null && _this2.toggles[2] > 0;
				} else {
					tmp5 = true;
				}
				if(!tmp5) {
					var _this3 = c.gc;
					tmp4 = _this3.device != null && _this3.toggles[3] > 0;
				} else {
					tmp4 = true;
				}
				if(!tmp4) {
					var _this4 = c.gc;
					var x;
					if(_this4.device != null) {
						var idx = dn_heaps_GamePad.MAPPING[18];
						var overrideDeadZone = -1.;
						if(overrideDeadZone == null) {
							overrideDeadZone = -1.;
						}
						var v = idx > -1 && idx < _this4.device.values.length ? _this4.device.values[idx] : 0;
						var dz = overrideDeadZone < 0. ? _this4.deadZone : overrideDeadZone;
						x = v > -dz && v < dz ? 0. : v;
					} else {
						x = 0.;
					}
					tmp3 = (x < 0 ? -x : x) >= 0.75;
				} else {
					tmp3 = true;
				}
				if(!tmp3) {
					var _this5 = c.gc;
					var x1;
					if(_this5.device != null) {
						var idx1 = dn_heaps_GamePad.MAPPING[21];
						var overrideDeadZone1 = -1.;
						if(overrideDeadZone1 == null) {
							overrideDeadZone1 = -1.;
						}
						var v1 = idx1 > -1 && idx1 < _this5.device.values.length ? _this5.device.values[idx1] : 0;
						var dz1 = overrideDeadZone1 < 0. ? _this5.deadZone : overrideDeadZone1;
						x1 = v1 > -dz1 && v1 < dz1 ? 0. : v1;
					} else {
						x1 = 0.;
					}
					tmp2 = (x1 < 0 ? -x1 : x1) >= 0.75;
				} else {
					tmp2 = true;
				}
				if(!tmp2) {
					var _this6 = c.gc;
					var x2;
					if(_this6.device != null) {
						var idx2 = dn_heaps_GamePad.MAPPING[24];
						var overrideDeadZone2 = -1.;
						if(overrideDeadZone2 == null) {
							overrideDeadZone2 = -1.;
						}
						var v2 = idx2 > -1 && idx2 < _this6.device.values.length ? _this6.device.values[idx2] : 0;
						var dz2 = overrideDeadZone2 < 0. ? _this6.deadZone : overrideDeadZone2;
						x2 = v2 > -dz2 && v2 < dz2 ? 0. : v2;
					} else {
						x2 = 0.;
					}
					tmp1 = (x2 < 0 ? -x2 : x2) >= 0.75;
				} else {
					tmp1 = true;
				}
				if(!tmp1) {
					var _this7 = c.gc;
					var x3;
					if(_this7.device != null) {
						var idx3 = dn_heaps_GamePad.MAPPING[27];
						var overrideDeadZone3 = -1.;
						if(overrideDeadZone3 == null) {
							overrideDeadZone3 = -1.;
						}
						var v3 = idx3 > -1 && idx3 < _this7.device.values.length ? _this7.device.values[idx3] : 0;
						var dz3 = overrideDeadZone3 < 0. ? _this7.deadZone : overrideDeadZone3;
						x3 = v3 > -dz3 && v3 < dz3 ? 0. : v3;
					} else {
						x3 = 0.;
					}
					tmp = (x3 < 0 ? -x3 : x3) >= 0.75;
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				c.mode = dn_heaps_Mode.Pad;
			}
			if(c.hasAnyPress) {
				c.hasAnyPress = false;
				var _g2 = 0;
				var _g11 = c.framePresses.length;
				while(_g2 < _g11) {
					var idx4 = _g2++;
					c.framePresses[idx4] = -1;
				}
			}
			c.updateLongPress(0);
			c.updateLongPress(1);
			c.updateLongPress(2);
			c.updateLongPress(3);
			c.updateLongPress(5);
			c.updateLongPress(13);
		}
	}
};
dn_heaps_Controller.prototype = {
	mode: null
	,exclusiveId: null
	,gc: null
	,suspendTimer: null
	,locked: null
	,allowAutoSwitch: null
	,primary: null
	,secondary: null
	,third: null
	,bind: function(k,keyboardKey,alternate1,alternate2) {
		this.primary.h[k] = keyboardKey;
		if(alternate1 != null) {
			this.secondary.h[k] = alternate1;
		}
		if(alternate2 != null) {
			this.third.h[k] = alternate2;
		}
	}
	,isLocked: function() {
		return this.locked;
	}
	,createAccess: function(id,exclusive) {
		if(exclusive == null) {
			exclusive = false;
		}
		return new dn_heaps_ControllerAccess(this,id,exclusive);
	}
	,pressTimers: null
	,framePresses: null
	,longPressLock: null
	,hasAnyPress: null
	,updateLongPress: function(k) {
		var idx = k;
		var _this = this.gc;
		if(_this.device != null && _this.toggles[k] > 0 || hxd_Key.isDown(this.primary.h[k]) || hxd_Key.isDown(this.secondary.h[k]) || hxd_Key.isDown(this.third.h[k])) {
			if(this.pressTimers[idx] == -1) {
				this.pressTimers[idx] = Date.now() / 1000;
			}
			if(Date.now() / 1000 - this.pressTimers[idx] >= dn_heaps_Controller.LONG_PRESS) {
				if(!this.longPressLock.h.hasOwnProperty(idx)) {
					this.framePresses[idx] = 2;
					this.hasAnyPress = true;
					this.longPressLock.h[idx] = true;
				}
			}
		} else {
			if(this.longPressLock.h.hasOwnProperty(idx)) {
				this.longPressLock.remove(idx);
			}
			if(this.pressTimers[idx] != -1) {
				if(this.framePresses[idx] < 0) {
					if(Date.now() / 1000 - this.pressTimers[idx] <= dn_heaps_Controller.SHORT_PRESS) {
						this.hasAnyPress = true;
						this.framePresses[idx] = 1;
					}
				}
				this.pressTimers[idx] = -1;
			}
		}
	}
	,__class__: dn_heaps_Controller
};
var dn_heaps_ControllerAccess = function(parent,id,exclusive) {
	if(exclusive == null) {
		exclusive = false;
	}
	this.manualLock = false;
	this.parent = parent;
	this.id = id + dn_heaps_Controller.UNIQ_ID++;
	var sec = 0.1;
	if(sec == null) {
		sec = 0.07;
	}
	parent.suspendTimer = Date.now() / 1000 + sec;
	if(exclusive) {
		this.parent.exclusiveId = this.id;
	}
};
$hxClasses["dn.heaps.ControllerAccess"] = dn_heaps_ControllerAccess;
dn_heaps_ControllerAccess.__name__ = "dn.heaps.ControllerAccess";
dn_heaps_ControllerAccess.prototype = {
	parent: null
	,id: null
	,manualLock: null
	,leftDeadZone: null
	,rightDeadZone: null
	,dispose: function() {
		if(this.parent.exclusiveId == this.id) {
			this.parent.exclusiveId = null;
			this.parent.suspendTimer = Date.now() / 1000 + 0.07;
		}
		this.parent.suspendTimer = Date.now() / 1000 + 0.07;
	}
	,__class__: dn_heaps_ControllerAccess
};
var hxd_Pad = function() {
	this.prevButtons = [];
	this.values = [];
	this.buttons = [];
	this.yAxis = 0.;
	this.xAxis = 0.;
	this.config = hxd_Pad.DEFAULT_CONFIG;
	this.index = -1;
	this.connected = true;
};
$hxClasses["hxd.Pad"] = hxd_Pad;
hxd_Pad.__name__ = "hxd.Pad";
hxd_Pad.pickConfig = function(name) {
	switch(name) {
	case "054c-05c4-Wireless Controller":case "054c-09cc-Wireless Controller":
		return hxd_Pad.CONFIG_JS_DS4_FF;
	case "Wireless Controller (STANDARD GAMEPAD Vendor: 054c Product: 05c4)":case "Wireless Controller (STANDARD GAMEPAD Vendor: 054c Product: 09cc)":
		return hxd_Pad.CONFIG_JS_DS4;
	default:
		return hxd_Pad.CONFIG_JS_STD;
	}
};
hxd_Pad.wait = function(onPad) {
	hxd_Pad.waitPad = onPad;
	if(!hxd_Pad.initDone) {
		hxd_Pad.initDone = true;
		window.addEventListener("gamepadconnected",function(p) {
			var pad = new hxd_Pad();
			pad.d = p.gamepad;
			pad.config = hxd_Pad.pickConfig(pad.d.id);
			pad.index = pad.d.index;
			hxd_Pad.pads.h[pad.d.index] = pad;
			hxd_Pad.waitPad(pad);
		});
		window.addEventListener("gamepaddisconnected",function(p1) {
			var pad1 = hxd_Pad.pads.h[p1.gamepad.index];
			if(pad1 == null) {
				return;
			}
			hxd_Pad.pads.remove(p1.gamepad.index);
			pad1.connected = false;
			pad1.onDisconnect();
		});
		haxe_MainLoop.add(hxd_Pad.syncPads);
	}
};
hxd_Pad.syncPads = function() {
	var freshPads = [];
	try {
		freshPads = window.navigator.getGamepads();
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
	}
	if(freshPads.length > 0) {
		var _g = 0;
		var _g1 = freshPads.length;
		while(_g < _g1) {
			var i = _g++;
			if(hxd_Pad.pads.h[i] != null) {
				hxd_Pad.pads.h[i].d = freshPads[i];
			}
		}
	}
	var p = hxd_Pad.pads.iterator();
	while(p.hasNext()) {
		var p1 = p.next();
		var _g11 = 0;
		var _g2 = p1.d.buttons.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			p1.prevButtons[i1] = p1.buttons[i1];
			p1.buttons[i1] = p1.d.buttons[i1].pressed;
			p1.values[i1] = p1.d.buttons[i1].value;
		}
		var _g3 = 0;
		var _g4 = p1.d.axes.length >> 1;
		while(_g3 < _g4) {
			var i2 = _g3++;
			var x = p1.d.axes[i2 << 1];
			var y = p1.d.axes[(i2 << 1) + 1];
			p1.values[(i2 << 1) + p1.d.buttons.length] = x;
			p1.values[(i2 << 1) + p1.d.buttons.length + 1] = -y;
			if(i2 == 0) {
				p1.xAxis = x;
				p1.yAxis = y;
			}
		}
	}
};
hxd_Pad.prototype = {
	connected: null
	,index: null
	,config: null
	,xAxis: null
	,yAxis: null
	,buttons: null
	,values: null
	,prevButtons: null
	,onDisconnect: function() {
	}
	,d: null
	,__class__: hxd_Pad
};
var dn_heaps_GamePad = function(deadZone,onEnable) {
	this.axisAsButtonDeadZone = 0.70;
	this.deadZone = 0.18;
	dn_heaps_GamePad.ALL.push(this);
	this.toggles = [];
	if(deadZone != null) {
		this.deadZone = deadZone;
	}
	if(onEnable != null) {
		this.onEnable = onEnable;
	}
	if(dn_heaps_GamePad.AVAILABLE_DEVICES == null) {
		dn_heaps_GamePad.AVAILABLE_DEVICES = [];
		hxd_Pad.wait(dn_heaps_GamePad.onDevice);
	} else if(dn_heaps_GamePad.AVAILABLE_DEVICES.length > 0) {
		this.enableDevice(dn_heaps_GamePad.AVAILABLE_DEVICES[0]);
	}
	this.lastActivity = Date.now() / 1000;
};
$hxClasses["dn.heaps.GamePad"] = dn_heaps_GamePad;
dn_heaps_GamePad.__name__ = "dn.heaps.GamePad";
dn_heaps_GamePad.onDevice = function(p) {
	var _g = 0;
	var _g1 = dn_heaps_GamePad.ALL;
	while(_g < _g1.length) {
		var i = _g1[_g];
		++_g;
		if(i.device == null) {
			i.enableDevice(p);
			return;
		}
	}
	dn_heaps_GamePad.AVAILABLE_DEVICES.push(p);
	p.onDisconnect = function() {
		HxOverrides.remove(dn_heaps_GamePad.AVAILABLE_DEVICES,p);
	};
};
dn_heaps_GamePad.update = function() {
	var _g = 0;
	var _g1 = dn_heaps_GamePad.ALL;
	while(_g < _g1.length) {
		var e = _g1[_g];
		++_g;
		var hasToggle = false;
		if(e.device != null) {
			var _g2 = 0;
			while(_g2 < 28) {
				var i = _g2++;
				var this1 = i;
				var k = this1;
				var tmp;
				switch(k) {
				case 18:case 21:case 24:case 27:
					var simplified = true;
					var overrideDeadZone = e.axisAsButtonDeadZone;
					if(overrideDeadZone == null) {
						overrideDeadZone = -1.;
					}
					if(simplified == null) {
						simplified = false;
					}
					var tmp1;
					if(e.device != null) {
						var idx = dn_heaps_GamePad.MAPPING[k];
						var overrideDeadZone1 = overrideDeadZone;
						if(overrideDeadZone1 == null) {
							overrideDeadZone1 = -1.;
						}
						var v = idx > -1 && idx < e.device.values.length ? e.device.values[idx] : 0;
						var dz = overrideDeadZone1 < 0. ? e.deadZone : overrideDeadZone1;
						tmp1 = simplified ? v < -dz ? -1. : v > dz ? 1. : 0. : v > -dz && v < dz ? 0. : v;
					} else {
						tmp1 = 0.;
					}
					tmp = tmp1 > 0;
					break;
				case 17:case 20:case 23:case 26:
					var simplified1 = true;
					var overrideDeadZone2 = e.axisAsButtonDeadZone;
					if(overrideDeadZone2 == null) {
						overrideDeadZone2 = -1.;
					}
					if(simplified1 == null) {
						simplified1 = false;
					}
					var tmp2;
					if(e.device != null) {
						var idx1 = dn_heaps_GamePad.MAPPING[k];
						var overrideDeadZone3 = overrideDeadZone2;
						if(overrideDeadZone3 == null) {
							overrideDeadZone3 = -1.;
						}
						var v1 = idx1 > -1 && idx1 < e.device.values.length ? e.device.values[idx1] : 0;
						var dz1 = overrideDeadZone3 < 0. ? e.deadZone : overrideDeadZone3;
						tmp2 = simplified1 ? v1 < -dz1 ? -1. : v1 > dz1 ? 1. : 0. : v1 > -dz1 && v1 < dz1 ? 0. : v1;
					} else {
						tmp2 = 0.;
					}
					tmp = tmp2 < 0;
					break;
				default:
					var simplified2 = true;
					if(simplified2 == null) {
						simplified2 = false;
					}
					var tmp3;
					if(e.device != null) {
						var idx2 = dn_heaps_GamePad.MAPPING[k];
						var overrideDeadZone4 = -1.;
						if(overrideDeadZone4 == null) {
							overrideDeadZone4 = -1.;
						}
						var v2 = idx2 > -1 && idx2 < e.device.values.length ? e.device.values[idx2] : 0;
						var dz2 = overrideDeadZone4 < 0. ? e.deadZone : overrideDeadZone4;
						tmp3 = simplified2 ? v2 < -dz2 ? -1. : v2 > dz2 ? 1. : 0. : v2 > -dz2 && v2 < dz2 ? 0. : v2;
					} else {
						tmp3 = 0.;
					}
					tmp = tmp3 != 0;
				}
				if(tmp) {
					hasToggle = true;
					if(e.toggles[i] >= 1) {
						e.toggles[i] = 2;
					} else {
						e.toggles[i] = 1;
					}
				} else {
					e.toggles[i] = 0;
				}
			}
		}
		if(hasToggle) {
			e.lastActivity = Date.now() / 1000;
		}
	}
};
dn_heaps_GamePad.prototype = {
	device: null
	,toggles: null
	,deadZone: null
	,axisAsButtonDeadZone: null
	,lastActivity: null
	,onEnable: function(pad) {
	}
	,onDisable: function(pad) {
	}
	,enableDevice: function(p) {
		var _gthis = this;
		if(this.device == null) {
			HxOverrides.remove(dn_heaps_GamePad.AVAILABLE_DEVICES,p);
			p.onDisconnect = function() {
				_gthis.disable();
			};
			this.device = p;
			this.onEnable(this);
		}
	}
	,disable: function() {
		if(this.device != null) {
			this.device = null;
			this.onDisable(this);
		}
	}
	,isPressed: function(k) {
		if(this.device != null) {
			return this.toggles[k] == 1;
		} else {
			return false;
		}
	}
	,__class__: dn_heaps_GamePad
};
var dn_heaps_ParticlePool = function(tile,count,fps) {
	var this1 = new Array(count);
	this.all = this1;
	this.nalloc = 0;
	var _g = 0;
	var _g1 = count;
	while(_g < _g1) {
		var i = _g++;
		var p = new dn_heaps_HParticle(this,tile.clone(),fps);
		this.all[i] = p;
		p.kill();
	}
};
$hxClasses["dn.heaps.ParticlePool"] = dn_heaps_ParticlePool;
dn_heaps_ParticlePool.__name__ = "dn.heaps.ParticlePool";
dn_heaps_ParticlePool.prototype = {
	all: null
	,nalloc: null
	,free: function(kp) {
		if(this.all == null) {
			return;
		}
		if(this.nalloc > 1) {
			var idx = kp.poolIdx;
			var tmp = this.all[idx];
			this.all[idx] = this.all[this.nalloc - 1];
			this.all[idx].poolIdx = idx;
			this.all[this.nalloc - 1] = tmp;
			this.nalloc--;
		} else {
			this.nalloc = 0;
		}
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.all;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.dispose();
		}
		this.all = null;
	}
	,update: function(tmod,updateCb) {
		var i = 0;
		while(i < this.nalloc) {
			var p = this.all[i];
			var tmod1 = tmod;
			if(p.customTmod != null) {
				tmod1 = p.customTmod();
			}
			var _g = p;
			var d = _g.delayF - tmod1;
			d = 0 > d ? 0 : d;
			_g.visible = !_g.killed && d <= 0;
			_g.delayF = d;
			if(p.delayF <= 0 && !p.killed) {
				if(p.onStart != null) {
					var cb = p.onStart;
					p.onStart = null;
					cb();
				}
				if(p.animId != null) {
					var _this = p.animLib;
					var k = p.animId;
					var f;
					if(k == null) {
						f = _this.currentGroup;
					} else {
						var _this1 = _this.groups;
						f = __map_reserved[k] != null ? _this1.getReserved(k) : _this1.h[k];
					}
					var f1 = f.anim[p.animCursor | 0];
					var _this2 = p.animLib;
					var k1 = p.animId;
					var frame = f1;
					if(frame == null) {
						frame = 0;
					}
					var g;
					if(k1 == null) {
						g = _this2.currentGroup;
					} else {
						var _this3 = _this2.groups;
						g = __map_reserved[k1] != null ? _this3.getReserved(k1) : _this3.h[k1];
					}
					var fd = g == null ? null : g.frames[frame];
					var tile = p.animLib.getTile(p.animId,f1);
					p.t.setPosition(tile.x,tile.y);
					p.t.setSize(tile.width,tile.height);
					p.t.dx = -(fd.realWid * p.animXr + fd.realX | 0);
					p.t.dy = -(fd.realHei * p.animYr + fd.realY | 0);
					var p1 = p.animCursor += p.animSpd * tmod1;
					var _this4 = p.animLib;
					var k2 = p.animId;
					var tmp;
					if(k2 == null) {
						tmp = _this4.currentGroup;
					} else {
						var _this5 = _this4.groups;
						tmp = __map_reserved[k2] != null ? _this5.getReserved(k2) : _this5.h[k2];
					}
					if(p1 >= tmp.anim.length) {
						if(p.animLoop) {
							var p2 = p;
							var p3 = p2.animCursor;
							var _this6 = p.animLib;
							var k3 = p.animId;
							var tmp1;
							if(k3 == null) {
								tmp1 = _this6.currentGroup;
							} else {
								var _this7 = _this6.groups;
								tmp1 = __map_reserved[k3] != null ? _this7.getReserved(k3) : _this7.h[k3];
							}
							p2.animCursor = p3 - tmp1.anim.length;
						} else if(p.animStop) {
							p.animId = null;
							p.animLib = null;
						} else {
							p.animId = null;
							p.animLib = null;
							p.animCursor = 0;
							p.kill();
						}
					}
				}
				if(!p.killed) {
					p.dx += p.gx * tmod1;
					p.dy += p.gy * tmod1;
					p.x += p.dx * tmod1;
					p.y += p.dy * tmod1;
					if(p.frictX == p.frictY) {
						var v = p.frictX;
						var frictTmod = tmod1 == 1 || v == 0 || v == 1 ? v : Math.pow(v,tmod1);
						p.dx *= frictTmod;
						p.dy *= frictTmod;
					} else {
						var v1 = p.frictX;
						p.dx *= tmod1 == 1 || v1 == 0 || v1 == 1 ? v1 : Math.pow(v1,tmod1);
						var v2 = p.frictY;
						p.dy *= tmod1 == 1 || v2 == 0 || v2 == 1 ? v2 : Math.pow(v2,tmod1);
					}
					if(p.groundY != null && p.dy > 0 && p.y >= p.groundY) {
						p.dy = -p.dy * p.bounceMul;
						p.y = p.groundY - 1;
						if(p.onBounce != null) {
							p.onBounce();
						}
						if(p.onTouchGround != null) {
							p.onTouchGround(p);
						}
					}
					if(!p.killed) {
						p.rotation += p.dr * tmod1;
						var v3 = p.drFrict;
						p.dr *= tmod1 == 1 || v3 == 0 || v3 == 1 ? v3 : Math.pow(v3,tmod1);
						p.scaleX += (p.ds + p.dsX) * tmod1;
						p.scaleY += (p.ds + p.dsY) * tmod1;
						var v4 = p.scaleMul;
						var scaleMulTmod = tmod1 == 1 || v4 == 0 || v4 == 1 ? v4 : Math.pow(v4,tmod1);
						p.scaleX *= scaleMulTmod;
						var v5 = p.scaleXMul;
						p.scaleX *= tmod1 == 1 || v5 == 0 || v5 == 1 ? v5 : Math.pow(v5,tmod1);
						p.scaleY *= scaleMulTmod;
						var v6 = p.scaleYMul;
						p.scaleY *= tmod1 == 1 || v6 == 0 || v6 == 1 ? v6 : Math.pow(v6,tmod1);
						var v7 = p.dsFrict;
						p.ds *= tmod1 == 1 || v7 == 0 || v7 == 1 ? v7 : Math.pow(v7,tmod1);
						var v8 = p.dsFrict;
						p.dsX *= tmod1 == 1 || v8 == 0 || v8 == 1 ? v8 : Math.pow(v8,tmod1);
						var v9 = p.dsFrict;
						p.dsY *= tmod1 == 1 || v9 == 0 || v9 == 1 ? v9 : Math.pow(v9,tmod1);
						if(!isNaN(p.rColor)) {
							var x = p.rColor + p.dColor * tmod1;
							p.rColor = x < 0 ? 0 : x > 1 ? 1 : x;
							var from = p.fromColor;
							var to = p.toColor;
							var ratio = p.rColor;
							var a = _$UInt_UInt_$Impl_$.toFloat(from >>> 16);
							var x1 = a + (_$UInt_UInt_$Impl_$.toFloat(to >>> 16) - a) * ratio;
							var a1 = _$UInt_UInt_$Impl_$.toFloat(from >>> 8 & 255);
							var x2 = a1 + (_$UInt_UInt_$Impl_$.toFloat(to >>> 8 & 255) - a1) * ratio;
							var a2 = _$UInt_UInt_$Impl_$.toFloat(from & 255);
							var x3 = a2 + (_$UInt_UInt_$Impl_$.toFloat(to & 255) - a2) * ratio;
							var c = ((x1 > 0 ? x1 + .5 : x1 < 0 ? x1 - .5 : 0) | 0) << 16 | ((x2 > 0 ? x2 + .5 : x2 < 0 ? x2 - .5 : 0) | 0) << 8 | ((x3 > 0 ? x3 + .5 : x3 < 0 ? x3 - .5 : 0) | 0);
							var ratio1 = 1.0;
							if(ratio1 == null) {
								ratio1 = 1.0;
							}
							var a3 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 16);
							var x4 = a3 + (_$UInt_UInt_$Impl_$.toFloat(c >>> 16) - a3) * ratio1;
							p.r = ((x4 > 0 ? x4 + .5 : x4 < 0 ? x4 - .5 : 0) | 0) / 255;
							var a4 = _$UInt_UInt_$Impl_$.toFloat(16777215 >>> 8 & 255);
							var x5 = a4 + (_$UInt_UInt_$Impl_$.toFloat(c >>> 8 & 255) - a4) * ratio1;
							p.g = ((x5 > 0 ? x5 + .5 : x5 < 0 ? x5 - .5 : 0) | 0) / 255;
							var a5 = _$UInt_UInt_$Impl_$.toFloat(16777215 & 255);
							var x6 = a5 + (_$UInt_UInt_$Impl_$.toFloat(c & 255) - a5) * ratio1;
							p.b = ((x6 > 0 ? x6 + .5 : x6 < 0 ? x6 - .5 : 0) | 0) / 255;
						}
						if(p.rLifeF > 0 && p.da != 0) {
							p.a += p.da * tmod1;
							if(p.a > p.maxAlpha) {
								p.da = 0;
								p.a = p.maxAlpha;
							}
						}
						if(p.onFadeOutStart != null && p.rLifeF > 0 && p.rLifeF - tmod1 <= 0) {
							p.onFadeOutStart(p);
						}
						p.rLifeF -= tmod1;
						if(p.rLifeF <= 0) {
							p.a -= p.fadeOutSpeed * tmod1;
						} else if(p.alphaFlicker > 0) {
							var max = p.alphaFlicker;
							var sign = true;
							if(sign == null) {
								sign = false;
							}
							var x7 = p.a + (sign ? Math.random() * max * (Std.random(2) * 2 - 1) : Math.random() * max);
							var max1 = p.maxAlpha;
							p.a = x7 < 0 ? 0 : x7 > max1 ? max1 : x7;
						}
						if(p.rLifeF <= 0 && (p.a <= 0 || p.killOnLifeOut) || p.bounds != null && !(p.x >= p.bounds.xMin && p.x < p.bounds.xMax && p.y >= p.bounds.yMin && p.y < p.bounds.yMax)) {
							p.kill();
						} else if(p.onUpdate != null) {
							p.onUpdate(p);
						}
					}
				}
			}
			if(!p.killed) {
				if(updateCb != null) {
					updateCb(p);
				}
				++i;
			}
		}
	}
	,__class__: dn_heaps_ParticlePool
};
var h2d_BatchElement = function(t) {
	this.x = 0;
	this.y = 0;
	this.r = 1;
	this.g = 1;
	this.b = 1;
	this.a = 1;
	this.rotation = 0;
	this.scaleX = this.scaleY = 1;
	this.visible = true;
	this.t = t;
};
$hxClasses["h2d.BatchElement"] = h2d_BatchElement;
h2d_BatchElement.__name__ = "h2d.BatchElement";
h2d_BatchElement.prototype = {
	x: null
	,y: null
	,scaleX: null
	,scaleY: null
	,rotation: null
	,r: null
	,g: null
	,b: null
	,a: null
	,t: null
	,visible: null
	,batch: null
	,prev: null
	,next: null
	,update: function(et) {
		return true;
	}
	,remove: function() {
		if(this.batch != null) {
			this.batch.delete(this);
		}
	}
	,__class__: h2d_BatchElement
};
var dn_heaps_HParticle = function(p,tile,fps,x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	h2d_BatchElement.call(this,tile);
	this.fps = fps;
	this.pool = p;
	this.poolIdx = -1;
	this.reset(null,null,x,y);
};
$hxClasses["dn.heaps.HParticle"] = dn_heaps_HParticle;
dn_heaps_HParticle.__name__ = "dn.heaps.HParticle";
dn_heaps_HParticle.__super__ = h2d_BatchElement;
dn_heaps_HParticle.prototype = $extend(h2d_BatchElement.prototype,{
	pool: null
	,poolIdx: null
	,stamp: null
	,dx: null
	,dy: null
	,da: null
	,ds: null
	,dsX: null
	,dsY: null
	,dsFrict: null
	,scaleMul: null
	,scaleXMul: null
	,scaleYMul: null
	,dr: null
	,drFrict: null
	,frictX: null
	,frictY: null
	,gx: null
	,gy: null
	,bounceMul: null
	,bounds: null
	,groundY: null
	,groupId: null
	,fadeOutSpeed: null
	,maxAlpha: null
	,alphaFlicker: null
	,customTmod: null
	,rLifeF: null
	,maxLifeF: null
	,delayF: null
	,onStart: null
	,onBounce: null
	,onTouchGround: null
	,onUpdate: null
	,onFadeOutStart: null
	,onKill: null
	,pixel: null
	,killOnLifeOut: null
	,killed: null
	,fromColor: null
	,toColor: null
	,dColor: null
	,rColor: null
	,data0: null
	,data1: null
	,data2: null
	,data3: null
	,data4: null
	,data5: null
	,data6: null
	,data7: null
	,fps: null
	,animLib: null
	,animId: null
	,animCursor: null
	,animXr: null
	,animYr: null
	,animLoop: null
	,animStop: null
	,animSpd: null
	,setTile: function(tile) {
		this.t.setPosition(tile.x,tile.y);
		this.t.setSize(tile.width,tile.height);
		this.t.dx = tile.dx;
		this.t.dy = tile.dy;
		this.t.setTexture(tile.innerTex);
	}
	,reset: function(sb,tile,x,y) {
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		if(tile != null) {
			this.setTile(tile);
		}
		if(this.batch != sb) {
			if(this.batch != null) {
				this.remove();
			}
			if(sb != null) {
				sb.add(this);
			}
		}
		this.x = x;
		this.y = y;
		this.scaleX = 1;
		this.scaleY = 1;
		this.rotation = 0;
		this.r = this.g = this.b = this.a = 1;
		this.a = 1;
		this.visible = true;
		this.data0 = this.data1 = this.data2 = this.data3 = this.data4 = this.data5 = this.data6 = this.data7 = NaN;
		this.customTmod = null;
		this.animId = null;
		this.animLib = null;
		this.scaleMul = 1;
		this.scaleXMul = this.scaleYMul = 1;
		this.dsFrict = 1;
		this.alphaFlicker = 0;
		this.fromColor = 0;
		this.dColor = this.rColor = NaN;
		this.stamp = Date.now() / 1000;
		var _this = this.t;
		var px = 0.5;
		var py = 0.5;
		if(py == null) {
			py = 0.5;
		}
		if(px == null) {
			px = 0.5;
		}
		_this.dx = -(px * _this.width);
		_this.dy = -(py * _this.height);
		this.animXr = 0.5;
		this.animYr = 0.5;
		this.killed = false;
		if(this.a > 1) {
			this.a = 1;
		}
		this.maxAlpha = 1;
		this.dx = this.dy = this.da = this.dr = this.ds = this.dsX = this.dsY = 0;
		this.gx = this.gy = 0;
		this.frictX = this.frictY = 1;
		this.drFrict = 1;
		this.fadeOutSpeed = 0.1;
		this.bounceMul = 0.85;
		var d = 0 * this.fps;
		d = 0 > d ? 0 : d;
		this.visible = !this.killed && d <= 0;
		this.delayF = d;
		this.set_lifeS(1);
		this.pixel = false;
		this.bounds = dn_heaps_HParticle.DEFAULT_BOUNDS;
		this.killOnLifeOut = false;
		this.groundY = null;
		this.groupId = null;
		this.onStart = null;
		this.onKill = null;
		this.onBounce = null;
		this.onUpdate = null;
		this.onFadeOutStart = null;
		this.onTouchGround = null;
	}
	,colorAnimS: function(from,to,t) {
		this.fromColor = from;
		this.toColor = to;
		this.dColor = 1 / (t * this.fps);
		this.rColor = 0;
	}
	,setFadeS: function(targetAlpha,fadeInDurationS,fadeOutDurationS) {
		this.a = 0;
		if(this.a > targetAlpha) {
			this.a = targetAlpha;
		}
		this.maxAlpha = targetAlpha;
		if(fadeInDurationS <= 0) {
			this.a = this.maxAlpha;
		} else {
			this.da = targetAlpha / (fadeInDurationS * this.fps);
		}
		if(fadeOutDurationS <= 0) {
			this.fadeOutSpeed = 99;
		} else {
			this.fadeOutSpeed = targetAlpha / (fadeOutDurationS * this.fps);
		}
	}
	,set_lifeS: function(v) {
		var x = this.fps * v;
		this.rLifeF = this.maxLifeF = x > 0 ? x : 0;
		return v;
	}
	,kill: function() {
		if(this.killed) {
			return;
		}
		if(this.onKill != null) {
			var cb = this.onKill;
			this.onKill = null;
			cb();
		}
		this.a = 0;
		this.set_lifeS(0);
		var d = 0 * this.fps;
		d = 0 > d ? 0 : d;
		this.visible = !this.killed && d <= 0;
		this.delayF = d;
		this.killed = true;
		this.visible = false;
		this.pool.free(this);
	}
	,dispose: function() {
		this.remove();
		this.bounds = null;
	}
	,__class__: dn_heaps_HParticle
});
var dn_heaps_assets_Atlas = function() { };
$hxClasses["dn.heaps.assets.Atlas"] = dn_heaps_assets_Atlas;
dn_heaps_assets_Atlas.__name__ = "dn.heaps.assets.Atlas";
dn_heaps_assets_Atlas.ltick = function() {
	if(dn_heaps_assets_Atlas.LOADING_TICK_FUN != null) {
		dn_heaps_assets_Atlas.LOADING_TICK_FUN();
	}
};
dn_heaps_assets_Atlas.load = function(atlasPath,onReload,notZeroBaseds,properties) {
	var notZeroMap = new haxe_ds_StringMap();
	if(notZeroBaseds != null) {
		var _g = 0;
		while(_g < notZeroBaseds.length) {
			var id = notZeroBaseds[_g];
			++_g;
			if(__map_reserved[id] != null) {
				notZeroMap.setReserved(id,true);
			} else {
				notZeroMap.h[id] = true;
			}
		}
	}
	var propertiesMap = new haxe_ds_StringMap();
	if(properties != null) {
		var _g1 = 0;
		var _g11 = properties.length;
		while(_g1 < _g11) {
			var i = _g1++;
			var value = properties.length - 1 - i;
			var key = properties[i];
			if(__map_reserved[key] != null) {
				propertiesMap.setReserved(key,value);
			} else {
				propertiesMap.h[key] = value;
			}
		}
	}
	var res = hxd_Res.load(atlasPath);
	var basePath = atlasPath.indexOf("/") < 0 ? "" : HxOverrides.substr(atlasPath,0,atlasPath.lastIndexOf("/") + 1);
	var atlas = res.to(hxd_res_Atlas);
	var lib = dn_heaps_assets_Atlas.convertToSlib(atlas,notZeroMap,propertiesMap,atlasPath);
	res.watch(function() {
		dn_heaps_assets_Atlas.convertToSlib(atlas,notZeroMap,propertiesMap,atlasPath);
		if(onReload != null) {
			onReload();
		}
	});
	return lib;
};
dn_heaps_assets_Atlas.convertToSlib = function(atlas,notZeroBaseds,properties,atlasName) {
	dn_heaps_assets_Atlas.ltick();
	var contents = atlas.getContents();
	dn_heaps_assets_Atlas.ltick();
	var bestVariants = new haxe_ds_StringMap();
	var propertiesReg = new EReg("(.*)((\\.[a-z_\\-]+)+)$","gi");
	var rawName = contents.keys();
	while(rawName.hasNext()) {
		var rawName1 = rawName.next();
		var groupName = rawName1;
		var groupProps = [];
		if(propertiesReg.match(rawName1)) {
			var str = HxOverrides.substr(propertiesReg.matched(2),1,null);
			groupProps = str.split(".");
			groupName = propertiesReg.matched(1);
		}
		var score = 0;
		if(groupProps.length > 0) {
			var _g = 0;
			var _g1 = groupProps.length;
			while(_g < _g1) {
				var i = _g++;
				var key = groupProps[i];
				var prio = __map_reserved[key] != null ? properties.getReserved(key) : properties.h[key];
				if(prio != null) {
					score |= 1 << prio;
				}
			}
			if(score == 0) {
				continue;
			}
		}
		var e = __map_reserved[groupName] != null ? bestVariants.getReserved(groupName) : bestVariants.h[groupName];
		if(e == null) {
			var value = { rawName : rawName1, score : score};
			if(__map_reserved[groupName] != null) {
				bestVariants.setReserved(groupName,value);
			} else {
				bestVariants.h[groupName] = value;
			}
		} else if(score > e.score) {
			e.rawName = rawName1;
			e.score = score;
		}
	}
	var pageMap = new haxe_ds_ObjectMap();
	var pages = [];
	var group = new haxe_ds__$StringMap_StringMapIterator(contents,contents.arrayKeys());
	while(group.hasNext()) {
		var group1 = group.next();
		var _g11 = 0;
		while(_g11 < group1.length) {
			var frame = group1[_g11];
			++_g11;
			var tex = frame.t.innerTex;
			var page = pageMap.h[tex.__id__];
			if(page == null) {
				pageMap.set(tex,pages.length);
				dn_heaps_assets_Atlas.ltick();
				pages.push(h2d_Tile.fromTexture(tex));
				dn_heaps_assets_Atlas.ltick();
			}
		}
	}
	var nrmPages = [];
	var _g2 = 0;
	var _g12 = pages.length;
	while(_g2 < _g12) {
		var i1 = _g2++;
		var name = pages[i1].innerTex.name;
		var nrmName = HxOverrides.substr(name,0,name.length - 4) + "_n.png";
		dn_heaps_assets_Atlas.ltick();
		nrmPages[i1] = hxd_res_Loader.currentInstance.exists(nrmName) ? h2d_Tile.fromTexture(hxd_Res.load(nrmName).toTexture()) : null;
		dn_heaps_assets_Atlas.ltick();
	}
	var lib = new dn_heaps_slib_SpriteLib(pages,nrmPages);
	var frameReg = new EReg("(.*?)(_?)([0-9]+)$","gi");
	var numReg = new EReg("^[0-9]+$","");
	var groupName1 = bestVariants.keys();
	while(groupName1.hasNext()) {
		var groupName2 = groupName1.next();
		var rawName2 = (__map_reserved[groupName2] != null ? bestVariants.getReserved(groupName2) : bestVariants.h[groupName2]).rawName;
		var content = __map_reserved[rawName2] != null ? contents.getReserved(rawName2) : contents.h[rawName2];
		if(content.length == 1) {
			var e1 = content[0];
			var page1 = pageMap.h[e1.t.innerTex.__id__];
			var k = groupName2;
			var f = 0;
			var regBoth = false;
			if(frameReg.match(k)) {
				k = frameReg.matched(1);
				f = Std.parseInt(frameReg.matched(3));
				if(__map_reserved[k] != null ? notZeroBaseds.existsReserved(k) : notZeroBaseds.h.hasOwnProperty(k)) {
					--f;
				}
				if(frameReg.matched(2).length == 0) {
					regBoth = true;
				}
			}
			var _this = e1.t;
			var _this1 = e1.t;
			var fd = lib.sliceCustom(k,page1,f,Math.floor(e1.t.x),Math.floor(e1.t.y),Math.ceil(_this.width + _this.x) - Math.floor(_this.x),Math.ceil(_this1.height + _this1.y) - Math.floor(_this1.y),Math.floor(-e1.t.dx),Math.floor(-e1.t.dy),e1.width,e1.height);
			if(regBoth) {
				lib.resliceCustom(groupName2,0,fd);
			}
		} else {
			var k1 = groupName2;
			if(k1.indexOf("/") >= 0) {
				k1 = HxOverrides.substr(k1,k1.lastIndexOf("/") + 1,null);
			}
			var _g21 = 0;
			var _g3 = content.length;
			while(_g21 < _g3) {
				var i2 = _g21++;
				var e2 = content[i2];
				var page2 = pageMap.h[e2.t.innerTex.__id__];
				var _this2 = e2.t;
				var _this3 = e2.t;
				lib.sliceCustom(k1,page2,i2,Math.floor(e2.t.x),Math.floor(e2.t.y),Math.ceil(_this2.width + _this2.x) - Math.floor(_this2.x),Math.ceil(_this3.height + _this3.y) - Math.floor(_this3.y),Math.floor(-e2.t.dx),Math.floor(-e2.t.dy),e2.width,e2.height);
			}
		}
	}
	dn_heaps_assets_Atlas.ltick();
	var id = lib.groups.keys();
	while(id.hasNext()) {
		var id1 = id.next();
		var tmp;
		var tmp1;
		if(id1 != null) {
			var _this4 = lib.groups;
			tmp1 = __map_reserved[id1] != null ? _this4.existsReserved(id1) : _this4.h.hasOwnProperty(id1);
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			var _this5 = lib.groups;
			tmp = (__map_reserved[id1] != null ? _this5.getReserved(id1) : _this5.h[id1]).frames.length > 0;
		} else {
			tmp = false;
		}
		if(!tmp) {
			throw new js__$Boot_HaxeError("Unknown group " + id1);
		}
		var nframes;
		if(id1 == null) {
			nframes = lib.currentGroup;
		} else {
			var _this6 = lib.groups;
			nframes = __map_reserved[id1] != null ? _this6.getReserved(id1) : _this6.h[id1];
		}
		var nframes1 = nframes.frames.length;
		var a = dn_heaps_assets_Atlas.CACHE_ANIMS[nframes1];
		if(a == null) {
			var _g22 = [];
			var _g31 = 0;
			var _g4 = nframes1;
			while(_g31 < _g4) {
				var i3 = _g31++;
				_g22.push(i3);
			}
			a = _g22;
			if(nframes1 < 256) {
				dn_heaps_assets_Atlas.CACHE_ANIMS[nframes1] = a;
			}
		}
		lib.__defineAnim(id1,a);
		var p = id1.lastIndexOf("/");
		if(p >= 0) {
			var id2 = HxOverrides.substr(id1,p + 1,null);
			if(id2 != null && id2.length > 0 && !numReg.match(id2)) {
				var _this7 = lib.groups;
				if(__map_reserved[id2] != null ? _this7.existsReserved(id2) : _this7.h.hasOwnProperty(id2)) {
					haxe_Log.trace("Warning, duplicate short name: " + id2 + " in " + atlasName + ":" + id1,{ fileName : "dn/heaps/assets/Atlas.hx", lineNumber : 187, className : "dn.heaps.assets.Atlas", methodName : "convertToSlib"});
				}
				var this1 = lib.groups;
				var _this8 = lib.groups;
				var value1 = __map_reserved[id1] != null ? _this8.getReserved(id1) : _this8.h[id1];
				var _this9 = this1;
				if(__map_reserved[id2] != null) {
					_this9.setReserved(id2,value1);
				} else {
					_this9.h[id2] = value1;
				}
			}
		}
	}
	dn_heaps_assets_Atlas.ltick();
	return lib;
};
var dn_heaps_slib__$AnimManager_AnimInstance = function(s,g) {
	this.reverse = false;
	this.speed = 1.0;
	this.stopOnLastFrame = false;
	this.killAfterPlay = false;
	this.isStateAnim = false;
	this.paused = false;
	this.playDuration = -1.;
	this.plays = 1;
	this.curFrameCpt = 0.0;
	this.animCursor = 0;
	this.frames = [];
	this.spr = s;
	this.group = g;
	var _this = this.spr.lib;
	var k = this.group;
	var tmp;
	var tmp1;
	if(k != null) {
		var _this1 = _this.groups;
		tmp1 = __map_reserved[k] != null ? _this1.existsReserved(k) : _this1.h.hasOwnProperty(k);
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		var _this2 = _this.groups;
		tmp = (__map_reserved[k] != null ? _this2.getReserved(k) : _this2.h[k]).frames.length > 0;
	} else {
		tmp = false;
	}
	if(!tmp) {
		throw new js__$Boot_HaxeError("unknown group " + this.group);
	}
	var _this3 = this.spr.lib;
	var k1 = this.group;
	var tmp2;
	if(k1 == null) {
		tmp2 = _this3.currentGroup;
	} else {
		var _this4 = _this3.groups;
		tmp2 = __map_reserved[k1] != null ? _this4.getReserved(k1) : _this4.h[k1];
	}
	this.frames = tmp2.anim;
};
$hxClasses["dn.heaps.slib._AnimManager.AnimInstance"] = dn_heaps_slib__$AnimManager_AnimInstance;
dn_heaps_slib__$AnimManager_AnimInstance.__name__ = "dn.heaps.slib._AnimManager.AnimInstance";
dn_heaps_slib__$AnimManager_AnimInstance.prototype = {
	spr: null
	,group: null
	,frames: null
	,animCursor: null
	,curFrameCpt: null
	,plays: null
	,playDuration: null
	,paused: null
	,isStateAnim: null
	,killAfterPlay: null
	,stopOnLastFrame: null
	,speed: null
	,reverse: null
	,lastFrame: null
	,onEnd: function() {
	}
	,onEachLoop: function() {
	}
	,__class__: dn_heaps_slib__$AnimManager_AnimInstance
};
var dn_heaps_slib__$AnimManager_StateAnim = function(g,cb) {
	this.group = g;
	this.priority = 0;
	this.cond = cb;
	this.spd = 1.0;
};
$hxClasses["dn.heaps.slib._AnimManager.StateAnim"] = dn_heaps_slib__$AnimManager_StateAnim;
dn_heaps_slib__$AnimManager_StateAnim.__name__ = "dn.heaps.slib._AnimManager.StateAnim";
dn_heaps_slib__$AnimManager_StateAnim.prototype = {
	group: null
	,priority: null
	,cond: null
	,spd: null
	,__class__: dn_heaps_slib__$AnimManager_StateAnim
};
var dn_heaps_slib__$AnimManager_Transition = function(f,t,a,cb) {
	this.from = f;
	this.to = t;
	this.anim = a;
	this.cond = cb;
	this.spd = 1.0;
	this.reverse = false;
};
$hxClasses["dn.heaps.slib._AnimManager.Transition"] = dn_heaps_slib__$AnimManager_Transition;
dn_heaps_slib__$AnimManager_Transition.__name__ = "dn.heaps.slib._AnimManager.Transition";
dn_heaps_slib__$AnimManager_Transition.prototype = {
	from: null
	,to: null
	,anim: null
	,cond: null
	,spd: null
	,reverse: null
	,__class__: dn_heaps_slib__$AnimManager_Transition
};
var dn_heaps_slib_AnimManager = function(spr) {
	this.S_STAR = "*";
	this.suspendF = 0.;
	this.suspended = false;
	this.destroyed = false;
	this.needUpdates = false;
	this.genSpeed = 1.0;
	this.stateAnimsActive = true;
	this.transitions = [];
	this.stateAnims = [];
	this.stack = [];
	this.spr = spr;
};
$hxClasses["dn.heaps.slib.AnimManager"] = dn_heaps_slib_AnimManager;
dn_heaps_slib_AnimManager.__name__ = "dn.heaps.slib.AnimManager";
dn_heaps_slib_AnimManager.prototype = {
	spr: null
	,overlap: null
	,stack: null
	,stateAnims: null
	,transitions: null
	,stateAnimsActive: null
	,genSpeed: null
	,needUpdates: null
	,destroyed: null
	,suspended: null
	,suspendF: null
	,onEnterFrame: null
	,destroy: function() {
		this.destroyed = true;
		this.stopWithoutStateAnims();
		this.needUpdates = false;
		this.stateAnims = null;
		this.stack = null;
		this.spr = null;
	}
	,play: function(group,plays,queueAnim) {
		if(queueAnim == null) {
			queueAnim = false;
		}
		if(plays == null) {
			plays = 1;
		}
		var _this = this.spr.lib;
		var g;
		if(group == null) {
			g = _this.currentGroup;
		} else {
			var _this1 = _this.groups;
			g = __map_reserved[group] != null ? _this1.getReserved(group) : _this1.h[group];
		}
		if(g == null) {
			return this;
		}
		if(g.anim == null || g.anim.length == 0) {
			return this;
		}
		if(!queueAnim && (!this.destroyed && this.stack.length > 0)) {
			this.stack = [];
		}
		var a = new dn_heaps_slib__$AnimManager_AnimInstance(this.spr,group);
		this.stack.push(a);
		a.plays = plays;
		this.needUpdates = true;
		if(!queueAnim) {
			var t = this.getTransition(this.spr.groupName,this.stack[0].group);
			if(t != null && t.anim != this.spr.groupName) {
				var _this2 = this.spr.lib;
				var k = t.anim;
				var tmp;
				var tmp1;
				if(k != null) {
					var _this3 = _this2.groups;
					tmp1 = __map_reserved[k] != null ? _this3.existsReserved(k) : _this3.h.hasOwnProperty(k);
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					var _this4 = _this2.groups;
					tmp = (__map_reserved[k] != null ? _this4.getReserved(k) : _this4.h[k]).frames.length > 0;
				} else {
					tmp = false;
				}
				if(tmp) {
					var a1 = new dn_heaps_slib__$AnimManager_AnimInstance(this.spr,t.anim);
					this.stack.splice(0,0,a1);
					a1.speed = t.spd;
					a1.reverse = t.reverse;
				}
			}
			var _this5 = this.stack[0];
			var f = _this5.frames[_this5.reverse ? _this5.frames.length - 1 - _this5.animCursor : _this5.animCursor];
			if(_this5.spr.get_anim().onEnterFrame != null && _this5.lastFrame != f) {
				_this5.spr.get_anim().onEnterFrame(f);
			}
			if(_this5.spr.groupName != _this5.group) {
				_this5.spr.set(null,_this5.group,f);
			} else if(_this5.spr.frame != f) {
				_this5.spr.setFrame(f);
			}
			_this5.lastFrame = f;
		}
		return this;
	}
	,loop: function() {
		if(!this.destroyed && this.stack.length > 0) {
			this.stack[this.stack.length - 1].plays = 999999;
		}
		return this;
	}
	,stopWithStateAnims: function() {
		this.stateAnimsActive = true;
		this.stack = [];
		this.applyStateAnims();
	}
	,stopWithoutStateAnims: function(k,frame) {
		this.stateAnimsActive = false;
		this.stack = [];
		if(k != null) {
			this.spr.set(null,k,frame != null ? frame : 0);
		} else if(frame != null) {
			this.spr.setFrame(frame);
		}
	}
	,unsuspend: function() {
		this.suspended = false;
		this.suspendF = 0;
	}
	,S_STAR: null
	,getTransition: function(from,to) {
		var _g = 0;
		var _g1 = this.transitions;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if((t.from == this.S_STAR || t.from == from) && (t.to == this.S_STAR || t.to == to) && t.cond()) {
				return t;
			}
		}
		return null;
	}
	,applyStateAnims: function() {
		if(!this.stateAnimsActive) {
			return;
		}
		if(!this.destroyed && this.stack.length > 0 && !this.stack[0].isStateAnim) {
			return;
		}
		var _g = 0;
		var _g1 = this.stateAnims;
		while(_g < _g1.length) {
			var sa = _g1[_g];
			++_g;
			if(sa.cond()) {
				if(!this.destroyed && this.stack.length > 0 && this.stack[0].group == sa.group) {
					break;
				}
				var _this = this.play(sa.group).loop();
				if(!_this.destroyed && _this.stack.length > 0) {
					_this.stack[_this.stack.length - 1].speed = sa.spd;
				}
				if(!this.destroyed && this.stack.length > 0) {
					this.stack[this.stack.length - 1].isStateAnim = true;
				}
				break;
			}
		}
	}
	,_update: function(dt) {
		if(this.suspended) {
			this.suspendF -= dt;
			if(this.suspendF <= 0) {
				this.unsuspend();
			}
			return;
		}
		this.applyStateAnims();
		var a = this.stack[0];
		if(a != null && !a.paused) {
			a.curFrameCpt += dt * this.genSpeed * a.speed;
			if(a.playDuration > 0) {
				a.playDuration -= dt;
				if(a.playDuration <= 0) {
					a.plays = 0;
					a.animCursor = a.frames.length;
					a.curFrameCpt = 1;
				}
			}
			while(a.curFrameCpt > 1) {
				a.curFrameCpt--;
				a.animCursor++;
				if(a.animCursor < a.frames.length) {
					var f = a.frames[a.reverse ? a.frames.length - 1 - a.animCursor : a.animCursor];
					if(a.spr.get_anim().onEnterFrame != null && a.lastFrame != f) {
						a.spr.get_anim().onEnterFrame(f);
					}
					if(a.spr.groupName != a.group) {
						a.spr.set(null,a.group,f);
					} else if(a.spr.frame != f) {
						a.spr.setFrame(f);
					}
					a.lastFrame = f;
					continue;
				}
				a.animCursor = 0;
				a.plays--;
				if(a.plays > 0 || a.playDuration > 0) {
					a.onEachLoop();
					a = this.stack[0];
					var f1 = a.frames[a.reverse ? a.frames.length - 1 - a.animCursor : a.animCursor];
					if(a.spr.get_anim().onEnterFrame != null && a.lastFrame != f1) {
						a.spr.get_anim().onEnterFrame(f1);
					}
					if(a.spr.groupName != a.group) {
						a.spr.set(null,a.group,f1);
					} else if(a.spr.frame != f1) {
						a.spr.setFrame(f1);
					}
					a.lastFrame = f1;
					continue;
				}
				if(a.stopOnLastFrame) {
					this.stopWithoutStateAnims();
				}
				a.onEnd();
				if(a.killAfterPlay) {
					this.spr.remove();
					break;
				}
				if(!this.destroyed && this.stack.length > 0) {
					this.stack.shift();
					if(this.stack.length == 0) {
						this.stopWithStateAnims();
					} else {
						var t = this.getTransition(this.spr.groupName,this.stack[0].group);
						if(t != null && t.anim != this.spr.groupName) {
							var _this = this.spr.lib;
							var k = t.anim;
							var tmp;
							var tmp1;
							if(k != null) {
								var _this1 = _this.groups;
								tmp1 = __map_reserved[k] != null ? _this1.existsReserved(k) : _this1.h.hasOwnProperty(k);
							} else {
								tmp1 = false;
							}
							if(tmp1) {
								var _this2 = _this.groups;
								tmp = (__map_reserved[k] != null ? _this2.getReserved(k) : _this2.h[k]).frames.length > 0;
							} else {
								tmp = false;
							}
							if(tmp) {
								var a1 = new dn_heaps_slib__$AnimManager_AnimInstance(this.spr,t.anim);
								this.stack.splice(0,0,a1);
								a1.speed = t.spd;
								a1.reverse = t.reverse;
							}
						}
						var _this3 = this.stack[0];
						var f2 = _this3.frames[_this3.reverse ? _this3.frames.length - 1 - _this3.animCursor : _this3.animCursor];
						if(_this3.spr.get_anim().onEnterFrame != null && _this3.lastFrame != f2) {
							_this3.spr.get_anim().onEnterFrame(f2);
						}
						if(_this3.spr.groupName != _this3.group) {
							_this3.spr.set(null,_this3.group,f2);
						} else if(_this3.spr.frame != f2) {
							_this3.spr.setFrame(f2);
						}
						_this3.lastFrame = f2;
					}
					a = this.stack[0];
				}
				if(!(!this.destroyed && this.stack.length > 0)) {
					break;
				}
			}
		}
		if(this.overlap != null && !this.spr.destroyed) {
			this.overlap.curFrameCpt += dt * this.genSpeed * this.overlap.speed;
			while(this.overlap.curFrameCpt > 1) {
				this.overlap.curFrameCpt--;
				this.overlap.animCursor++;
				var _this4 = this.overlap;
				if(_this4.animCursor >= _this4.frames.length) {
					this.overlap = null;
					if(this.stack[0] != null) {
						var _this5 = this.stack[0];
						var f3 = _this5.frames[_this5.reverse ? _this5.frames.length - 1 - _this5.animCursor : _this5.animCursor];
						if(_this5.spr.get_anim().onEnterFrame != null && _this5.lastFrame != f3) {
							_this5.spr.get_anim().onEnterFrame(f3);
						}
						if(_this5.spr.groupName != _this5.group) {
							_this5.spr.set(null,_this5.group,f3);
						} else if(_this5.spr.frame != f3) {
							_this5.spr.setFrame(f3);
						}
						_this5.lastFrame = f3;
					}
					break;
				}
			}
			if(this.overlap != null) {
				var _this6 = this.overlap;
				var f4 = _this6.frames[_this6.reverse ? _this6.frames.length - 1 - _this6.animCursor : _this6.animCursor];
				if(_this6.spr.get_anim().onEnterFrame != null && _this6.lastFrame != f4) {
					_this6.spr.get_anim().onEnterFrame(f4);
				}
				if(_this6.spr.groupName != _this6.group) {
					_this6.spr.set(null,_this6.group,f4);
				} else if(_this6.spr.frame != f4) {
					_this6.spr.setFrame(f4);
				}
				_this6.lastFrame = f4;
			}
		}
		if(!this.destroyed && !(!this.destroyed && this.stack.length > 0) && this.overlap == null) {
			this.needUpdates = false;
		}
	}
	,__class__: dn_heaps_slib_AnimManager
};
var h2d_Object = function(parent) {
	this.alpha = 1.;
	this.matA = 1;
	this.matB = 0;
	this.matC = 0;
	this.matD = 1;
	this.absX = 0;
	this.absY = 0;
	this.posChanged = true;
	this.x = 0;
	this.posChanged = true;
	this.y = 0;
	this.posChanged = true;
	this.scaleX = 1;
	this.posChanged = true;
	this.scaleY = 1;
	this.posChanged = true;
	this.rotation = 0;
	this.blendMode = h2d_BlendMode.Alpha;
	this.posChanged = parent != null;
	this.set_visible(true);
	this.children = [];
	if(parent != null) {
		parent.addChild(this);
	}
};
$hxClasses["h2d.Object"] = h2d_Object;
h2d_Object.__name__ = "h2d.Object";
h2d_Object.prototype = {
	children: null
	,parentContainer: null
	,parent: null
	,x: null
	,y: null
	,scaleX: null
	,scaleY: null
	,rotation: null
	,visible: null
	,alpha: null
	,filter: null
	,blendMode: null
	,matA: null
	,matB: null
	,matC: null
	,matD: null
	,absX: null
	,absY: null
	,posChanged: null
	,allocated: null
	,lastFrame: null
	,getBounds: function(relativeTo,out) {
		if(out == null) {
			out = new h2d_col_Bounds();
		} else {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
		}
		if(relativeTo != null) {
			relativeTo.syncPos();
		}
		if(relativeTo != this) {
			this.syncPos();
		}
		this.getBoundsRec(relativeTo,out,false);
		if(out.xMax <= out.xMin || out.yMax <= out.yMin) {
			this.addBounds(relativeTo,out,-1,-1,2,2);
			out.xMax = out.xMin = (out.xMax + out.xMin) * 0.5;
			out.yMax = out.yMin = (out.yMax + out.yMin) * 0.5;
		}
		return out;
	}
	,getSize: function(out) {
		if(out == null) {
			out = new h2d_col_Bounds();
		} else {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
		}
		this.syncPos();
		this.getBoundsRec(this.parent,out,true);
		if(out.xMax <= out.xMin || out.yMax <= out.yMin) {
			this.addBounds(this.parent,out,-1,-1,2,2);
			out.xMax = out.xMin = (out.xMax + out.xMin) * 0.5;
			out.yMax = out.yMin = (out.yMax + out.yMin) * 0.5;
		}
		var dx = -this.x;
		var dy = -this.y;
		out.xMin += dx;
		out.xMax += dx;
		out.yMin += dy;
		out.yMax += dy;
		return out;
	}
	,set_filter: function(f) {
		if(this.filter != null && this.allocated) {
			this.filter.unbind(this);
		}
		this.filter = f;
		if(f != null && this.allocated) {
			f.bind(this);
		}
		return f;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		var n = this.children.length;
		if(n == 0) {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
			return;
		}
		if(n == 1) {
			var c1 = this.children[0];
			if(c1.visible) {
				c1.getBoundsRec(relativeTo,out,forSize);
			} else {
				out.xMin = 1e20;
				out.yMin = 1e20;
				out.xMax = -1e20;
				out.yMax = -1e20;
			}
			return;
		}
		var xmin = Infinity;
		var ymin = Infinity;
		var xmax = -Infinity;
		var ymax = -Infinity;
		var _g2 = 0;
		var _g11 = this.children;
		while(_g2 < _g11.length) {
			var c2 = _g11[_g2];
			++_g2;
			if(!c2.visible) {
				continue;
			}
			c2.getBoundsRec(relativeTo,out,forSize);
			if(out.xMin < xmin) {
				xmin = out.xMin;
			}
			if(out.yMin < ymin) {
				ymin = out.yMin;
			}
			if(out.xMax > xmax) {
				xmax = out.xMax;
			}
			if(out.yMax > ymax) {
				ymax = out.yMax;
			}
		}
		out.xMin = xmin;
		out.yMin = ymin;
		out.xMax = xmax;
		out.yMax = ymax;
	}
	,addBounds: function(relativeTo,out,dx,dy,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		if(relativeTo == null) {
			var x;
			var y;
			var x1 = dx * this.matA + dy * this.matC + this.absX;
			var y1 = dx * this.matB + dy * this.matD + this.absY;
			if(x1 < out.xMin) {
				out.xMin = x1;
			}
			if(x1 > out.xMax) {
				out.xMax = x1;
			}
			if(y1 < out.yMin) {
				out.yMin = y1;
			}
			if(y1 > out.yMax) {
				out.yMax = y1;
			}
			var x2 = (dx + width) * this.matA + dy * this.matC + this.absX;
			var y2 = (dx + width) * this.matB + dy * this.matD + this.absY;
			if(x2 < out.xMin) {
				out.xMin = x2;
			}
			if(x2 > out.xMax) {
				out.xMax = x2;
			}
			if(y2 < out.yMin) {
				out.yMin = y2;
			}
			if(y2 > out.yMax) {
				out.yMax = y2;
			}
			var x3 = dx * this.matA + (dy + height) * this.matC + this.absX;
			var y3 = dx * this.matB + (dy + height) * this.matD + this.absY;
			if(x3 < out.xMin) {
				out.xMin = x3;
			}
			if(x3 > out.xMax) {
				out.xMax = x3;
			}
			if(y3 < out.yMin) {
				out.yMin = y3;
			}
			if(y3 > out.yMax) {
				out.yMax = y3;
			}
			var x4 = (dx + width) * this.matA + (dy + height) * this.matC + this.absX;
			var y4 = (dx + width) * this.matB + (dy + height) * this.matD + this.absY;
			if(x4 < out.xMin) {
				out.xMin = x4;
			}
			if(x4 > out.xMax) {
				out.xMax = x4;
			}
			if(y4 < out.yMin) {
				out.yMin = y4;
			}
			if(y4 > out.yMax) {
				out.yMax = y4;
			}
			return;
		}
		if(relativeTo == this) {
			if(out.xMin > dx) {
				out.xMin = dx;
			}
			if(out.yMin > dy) {
				out.yMin = dy;
			}
			if(out.xMax < dx + width) {
				out.xMax = dx + width;
			}
			if(out.yMax < dy + height) {
				out.yMax = dy + height;
			}
			return;
		}
		var r = relativeTo.matA * relativeTo.matD - relativeTo.matB * relativeTo.matC;
		if(r == 0) {
			return;
		}
		var det = 1 / r;
		var rA = relativeTo.matD * det;
		var rB = -relativeTo.matB * det;
		var rC = -relativeTo.matC * det;
		var rD = relativeTo.matA * det;
		var rX = this.absX - relativeTo.absX;
		var rY = this.absY - relativeTo.absY;
		var x5 = dx * this.matA + dy * this.matC + rX;
		var y5 = dx * this.matB + dy * this.matD + rY;
		var x6 = x5 * rA + y5 * rC;
		var y6 = x5 * rB + y5 * rD;
		if(x6 < out.xMin) {
			out.xMin = x6;
		}
		if(x6 > out.xMax) {
			out.xMax = x6;
		}
		if(y6 < out.yMin) {
			out.yMin = y6;
		}
		if(y6 > out.yMax) {
			out.yMax = y6;
		}
		x5 = (dx + width) * this.matA + dy * this.matC + rX;
		y5 = (dx + width) * this.matB + dy * this.matD + rY;
		var x7 = x5 * rA + y5 * rC;
		var y7 = x5 * rB + y5 * rD;
		if(x7 < out.xMin) {
			out.xMin = x7;
		}
		if(x7 > out.xMax) {
			out.xMax = x7;
		}
		if(y7 < out.yMin) {
			out.yMin = y7;
		}
		if(y7 > out.yMax) {
			out.yMax = y7;
		}
		x5 = dx * this.matA + (dy + height) * this.matC + rX;
		y5 = dx * this.matB + (dy + height) * this.matD + rY;
		var x8 = x5 * rA + y5 * rC;
		var y8 = x5 * rB + y5 * rD;
		if(x8 < out.xMin) {
			out.xMin = x8;
		}
		if(x8 > out.xMax) {
			out.xMax = x8;
		}
		if(y8 < out.yMin) {
			out.yMin = y8;
		}
		if(y8 > out.yMax) {
			out.yMax = y8;
		}
		x5 = (dx + width) * this.matA + (dy + height) * this.matC + rX;
		y5 = (dx + width) * this.matB + (dy + height) * this.matD + rY;
		var x9 = x5 * rA + y5 * rC;
		var y9 = x5 * rB + y5 * rD;
		if(x9 < out.xMin) {
			out.xMin = x9;
		}
		if(x9 > out.xMax) {
			out.xMax = x9;
		}
		if(y9 < out.yMin) {
			out.yMin = y9;
		}
		if(y9 > out.yMax) {
			out.yMax = y9;
		}
	}
	,localToGlobal: function(pt) {
		this.syncPos();
		if(pt == null) {
			pt = new h2d_col_Point();
		}
		var px = pt.x * this.matA + pt.y * this.matC + this.absX;
		var py = pt.x * this.matB + pt.y * this.matD + this.absY;
		pt.x = px;
		pt.y = py;
		return pt;
	}
	,globalToLocal: function(pt) {
		this.syncPos();
		pt.x -= this.absX;
		pt.y -= this.absY;
		var invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
		var px = (pt.x * this.matD - pt.y * this.matC) * invDet;
		var py = (-pt.x * this.matB + pt.y * this.matA) * invDet;
		pt.x = px;
		pt.y = py;
		return pt;
	}
	,getScene: function() {
		var p = this;
		while(p.parent != null) p = p.parent;
		return ((p) instanceof h2d_Scene) ? p : null;
	}
	,set_visible: function(b) {
		if(this.visible == b) {
			return b;
		}
		this.visible = b;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return b;
	}
	,addChild: function(s) {
		this.addChildAt(s,this.children.length);
	}
	,addChildAt: function(s,pos) {
		if(pos < 0) {
			pos = 0;
		}
		if(pos > this.children.length) {
			pos = this.children.length;
		}
		var p = this;
		while(p != null) {
			if(p == s) {
				throw new js__$Boot_HaxeError("Recursive addChild");
			}
			p = p.parent;
		}
		if(s.parent != null) {
			var old = s.allocated;
			s.allocated = false;
			s.parent.removeChild(s);
			s.allocated = old;
		}
		this.children.splice(pos,0,s);
		if(!this.allocated && s.allocated) {
			s.onRemove();
		}
		s.parent = this;
		s.parentContainer = this.parentContainer;
		s.posChanged = true;
		if(this.allocated) {
			if(!s.allocated) {
				s.onAdd();
			} else {
				s.onHierarchyMoved(true);
			}
		}
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,onHierarchyMoved: function(parentChanged) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onHierarchyMoved(parentChanged);
		}
	}
	,onAdd: function() {
		this.allocated = true;
		if(this.filter != null) {
			this.filter.bind(this);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onAdd();
		}
	}
	,onRemove: function() {
		this.allocated = false;
		if(this.filter != null) {
			this.filter.unbind(this);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onRemove();
		}
	}
	,removeChild: function(s) {
		if(HxOverrides.remove(this.children,s)) {
			if(s.allocated) {
				s.onRemove();
			}
			s.parent = null;
			if(s.parentContainer != null) {
				s.setParentContainer(null);
			}
			s.posChanged = true;
			if(this.parentContainer != null) {
				this.parentContainer.contentChanged(this);
			}
		}
	}
	,setParentContainer: function(c) {
		this.parentContainer = c;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			s.setParentContainer(c);
		}
	}
	,removeChildren: function() {
		while(this.children.length > 0) this.removeChild(this.children[0]);
	}
	,remove: function() {
		if(this.parent != null) {
			this.parent.removeChild(this);
		}
	}
	,draw: function(ctx) {
	}
	,sync: function(ctx) {
		var changed = this.posChanged;
		if(changed) {
			this.calcAbsPos();
			this.posChanged = false;
		}
		this.lastFrame = ctx.frame;
		var p = 0;
		var len = this.children.length;
		while(p < len) {
			var c = this.children[p];
			if(c == null) {
				break;
			}
			if(c.lastFrame != ctx.frame) {
				if(changed) {
					c.posChanged = true;
				}
				c.sync(ctx);
			}
			if(this.children[p] != c) {
				p = 0;
				len = this.children.length;
			} else {
				++p;
			}
		}
	}
	,syncPos: function() {
		if(this.parent != null) {
			this.parent.syncPos();
		}
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
	}
	,calcAbsPos: function() {
		if(this.parent == null) {
			var cr;
			var sr;
			if(this.rotation == 0) {
				cr = 1.;
				sr = 0.;
				this.matA = this.scaleX;
				this.matB = 0;
				this.matC = 0;
				this.matD = this.scaleY;
			} else {
				cr = Math.cos(this.rotation);
				sr = Math.sin(this.rotation);
				this.matA = this.scaleX * cr;
				this.matB = this.scaleX * sr;
				this.matC = this.scaleY * -sr;
				this.matD = this.scaleY * cr;
			}
			this.absX = this.x;
			this.absY = this.y;
		} else {
			if(this.rotation == 0) {
				this.matA = this.scaleX * this.parent.matA;
				this.matB = this.scaleX * this.parent.matB;
				this.matC = this.scaleY * this.parent.matC;
				this.matD = this.scaleY * this.parent.matD;
			} else {
				var cr1 = Math.cos(this.rotation);
				var sr1 = Math.sin(this.rotation);
				var tmpA = this.scaleX * cr1;
				var tmpB = this.scaleX * sr1;
				var tmpC = this.scaleY * -sr1;
				var tmpD = this.scaleY * cr1;
				this.matA = tmpA * this.parent.matA + tmpB * this.parent.matC;
				this.matB = tmpA * this.parent.matB + tmpB * this.parent.matD;
				this.matC = tmpC * this.parent.matA + tmpD * this.parent.matC;
				this.matD = tmpC * this.parent.matB + tmpD * this.parent.matD;
			}
			this.absX = this.x * this.parent.matA + this.y * this.parent.matC + this.parent.absX;
			this.absY = this.x * this.parent.matB + this.y * this.parent.matD + this.parent.absY;
		}
	}
	,emitTile: function(ctx,tile) {
		if(h2d_Object.nullDrawable == null) {
			h2d_Object.nullDrawable = new h2d_Drawable(null);
		}
		h2d_Object.nullDrawable.absX = this.absX;
		h2d_Object.nullDrawable.absY = this.absY;
		h2d_Object.nullDrawable.matA = this.matA;
		h2d_Object.nullDrawable.matB = this.matB;
		h2d_Object.nullDrawable.matC = this.matC;
		h2d_Object.nullDrawable.matD = this.matD;
		ctx.drawTile(h2d_Object.nullDrawable,tile);
		return;
	}
	,clipBounds: function(ctx,bounds) {
		var view = ctx.tmpBounds;
		var matA;
		var matB;
		var matC;
		var matD;
		var absX;
		var absY;
		if(ctx.inFilter != null) {
			var f1 = ctx.baseShader.filterMatrixA__;
			var f2 = ctx.baseShader.filterMatrixB__;
			matA = this.matA * f1.x + this.matB * f1.y;
			matB = this.matA * f2.x + this.matB * f2.y;
			matC = this.matC * f1.x + this.matD * f1.y;
			matD = this.matC * f2.x + this.matD * f2.y;
			absX = this.absX * f1.x + this.absY * f1.y + f1.z;
			absY = this.absX * f2.x + this.absY * f2.y + f2.z;
		} else {
			matA = this.matA;
			matB = this.matB;
			matC = this.matC;
			matD = this.matD;
			absX = this.absX;
			absY = this.absY;
		}
		view.xMin = 1e20;
		view.yMin = 1e20;
		view.xMax = -1e20;
		view.yMax = -1e20;
		var x = bounds.xMin;
		var y = bounds.yMin;
		var x1 = x * matA + y * matC + absX;
		var y1 = x * matB + y * matD + absY;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x2 = bounds.xMax;
		var y2 = bounds.yMin;
		var x3 = x2 * matA + y2 * matC + absX;
		var y3 = x2 * matB + y2 * matD + absY;
		if(x3 < view.xMin) {
			view.xMin = x3;
		}
		if(x3 > view.xMax) {
			view.xMax = x3;
		}
		if(y3 < view.yMin) {
			view.yMin = y3;
		}
		if(y3 > view.yMax) {
			view.yMax = y3;
		}
		var x4 = bounds.xMin;
		var y4 = bounds.yMax;
		var x5 = x4 * matA + y4 * matC + absX;
		var y5 = x4 * matB + y4 * matD + absY;
		if(x5 < view.xMin) {
			view.xMin = x5;
		}
		if(x5 > view.xMax) {
			view.xMax = x5;
		}
		if(y5 < view.yMin) {
			view.yMin = y5;
		}
		if(y5 > view.yMax) {
			view.yMax = y5;
		}
		var x6 = bounds.xMax;
		var y6 = bounds.yMax;
		var x7 = x6 * matA + y6 * matC + absX;
		var y7 = x6 * matB + y6 * matD + absY;
		if(x7 < view.xMin) {
			view.xMin = x7;
		}
		if(x7 > view.xMax) {
			view.xMax = x7;
		}
		if(y7 < view.yMin) {
			view.yMin = y7;
		}
		if(y7 > view.yMax) {
			view.yMax = y7;
		}
		if(view.xMin < ctx.curX) {
			view.xMin = ctx.curX;
		}
		if(view.yMin < ctx.curY) {
			view.yMin = ctx.curY;
		}
		if(view.xMax > ctx.curX + ctx.curWidth) {
			view.xMax = ctx.curX + ctx.curWidth;
		}
		if(view.yMax > ctx.curY + ctx.curHeight) {
			view.yMax = ctx.curY + ctx.curHeight;
		}
		var invDet = 1 / (matA * matD - matB * matC);
		var sxMin = view.xMin;
		var syMin = view.yMin;
		var sxMax = view.xMax;
		var syMax = view.yMax;
		view.xMin = 1e20;
		view.yMin = 1e20;
		view.xMax = -1e20;
		view.yMax = -1e20;
		var x8 = sxMin;
		var y8 = syMin;
		x8 -= absX;
		y8 -= absY;
		var x9 = (x8 * matD - y8 * matC) * invDet;
		var y9 = (-x8 * matB + y8 * matA) * invDet;
		if(x9 < view.xMin) {
			view.xMin = x9;
		}
		if(x9 > view.xMax) {
			view.xMax = x9;
		}
		if(y9 < view.yMin) {
			view.yMin = y9;
		}
		if(y9 > view.yMax) {
			view.yMax = y9;
		}
		var x10 = sxMax;
		var y10 = syMin;
		x10 -= absX;
		y10 -= absY;
		var x11 = (x10 * matD - y10 * matC) * invDet;
		var y11 = (-x10 * matB + y10 * matA) * invDet;
		if(x11 < view.xMin) {
			view.xMin = x11;
		}
		if(x11 > view.xMax) {
			view.xMax = x11;
		}
		if(y11 < view.yMin) {
			view.yMin = y11;
		}
		if(y11 > view.yMax) {
			view.yMax = y11;
		}
		var x12 = sxMin;
		var y12 = syMax;
		x12 -= absX;
		y12 -= absY;
		var x13 = (x12 * matD - y12 * matC) * invDet;
		var y13 = (-x12 * matB + y12 * matA) * invDet;
		if(x13 < view.xMin) {
			view.xMin = x13;
		}
		if(x13 > view.xMax) {
			view.xMax = x13;
		}
		if(y13 < view.yMin) {
			view.yMin = y13;
		}
		if(y13 > view.yMax) {
			view.yMax = y13;
		}
		var x14 = sxMax;
		var y14 = syMax;
		x14 -= absX;
		y14 -= absY;
		var x15 = (x14 * matD - y14 * matC) * invDet;
		var y15 = (-x14 * matB + y14 * matA) * invDet;
		if(x15 < view.xMin) {
			view.xMin = x15;
		}
		if(x15 > view.xMax) {
			view.xMax = x15;
		}
		if(y15 < view.yMin) {
			view.yMin = y15;
		}
		if(y15 > view.yMax) {
			view.yMax = y15;
		}
		var a = bounds.xMin;
		var b = view.xMin;
		bounds.xMin = a < b ? b : a;
		var a1 = bounds.yMin;
		var b1 = view.yMin;
		bounds.yMin = a1 < b1 ? b1 : a1;
		var a2 = bounds.xMax;
		var b2 = view.xMax;
		bounds.xMax = a2 > b2 ? b2 : a2;
		var a3 = bounds.yMax;
		var b3 = view.yMax;
		bounds.yMax = a3 > b3 ? b3 : a3;
	}
	,drawFilters: function(ctx) {
		if(!ctx.pushFilter(this)) {
			return;
		}
		var bounds = ctx.tmpBounds;
		var total = new h2d_col_Bounds();
		var maxExtent = -1.;
		this.filter.sync(ctx,this);
		if(this.filter.autoBounds) {
			maxExtent = this.filter.boundsExtend;
		} else {
			this.filter.getBounds(this,bounds);
			if(bounds.xMin < total.xMin) {
				total.xMin = bounds.xMin;
			}
			if(bounds.xMax > total.xMax) {
				total.xMax = bounds.xMax;
			}
			if(bounds.yMin < total.yMin) {
				total.yMin = bounds.yMin;
			}
			if(bounds.yMax > total.yMax) {
				total.yMax = bounds.yMax;
			}
		}
		if(maxExtent >= 0) {
			this.getBounds(this,bounds);
			bounds.xMin -= maxExtent;
			bounds.yMin -= maxExtent;
			bounds.xMax += maxExtent;
			bounds.yMax += maxExtent;
			if(bounds.xMin < total.xMin) {
				total.xMin = bounds.xMin;
			}
			if(bounds.xMax > total.xMax) {
				total.xMax = bounds.xMax;
			}
			if(bounds.yMin < total.yMin) {
				total.yMin = bounds.yMin;
			}
			if(bounds.yMax > total.yMax) {
				total.yMax = bounds.yMax;
			}
		}
		this.clipBounds(ctx,total);
		var xMin = Math.floor(total.xMin + 1e-10);
		var yMin = Math.floor(total.yMin + 1e-10);
		var width = Math.ceil(total.xMax - xMin - 1e-10);
		var height = Math.ceil(total.yMax - yMin - 1e-10);
		if(width <= 0 || height <= 0 || total.xMax < total.xMin) {
			return;
		}
		var t = ctx.textures.allocTarget("filterTemp",width,height,false);
		ctx.pushTarget(t,xMin,yMin,width,height);
		ctx.engine.clear(0);
		var oldAlpha = ctx.globalAlpha;
		var shader = ctx.baseShader;
		var _this = shader.filterMatrixA__;
		var x = _this.x;
		var y = _this.y;
		var z = _this.z;
		var w = _this.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var oldA_x = x;
		var oldA_y = y;
		var oldA_z = z;
		var oldA_w = w;
		var _this1 = shader.filterMatrixB__;
		var x1 = _this1.x;
		var y1 = _this1.y;
		var z1 = _this1.z;
		var w1 = _this1.w;
		if(w1 == null) {
			w1 = 1.;
		}
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var oldB_x = x1;
		var oldB_y = y1;
		var oldB_z = z1;
		var oldB_w = w1;
		var oldF = ctx.inFilter;
		var invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
		var invA = this.matD * invDet;
		var invB = -this.matB * invDet;
		var invC = -this.matC * invDet;
		var invD = this.matA * invDet;
		var invX = -(this.absX * invA + this.absY * invC);
		var invY = -(this.absX * invB + this.absY * invD);
		var _this2 = shader.filterMatrixA__;
		var x2 = invA;
		var y2 = invC;
		var z2 = invX;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		_this2.x = x2;
		_this2.y = y2;
		_this2.z = z2;
		_this2.w = 1.;
		var _this3 = shader.filterMatrixB__;
		var x3 = invB;
		var y3 = invD;
		var z3 = invY;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		_this3.x = x3;
		_this3.y = y3;
		_this3.z = z3;
		_this3.w = 1.;
		ctx.globalAlpha = 1;
		this.draw(ctx);
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.drawRec(ctx);
		}
		var finalTile = h2d_Tile.fromTexture(t);
		finalTile.dx = xMin;
		finalTile.dy = yMin;
		var prev = finalTile;
		finalTile = this.filter.draw(ctx,finalTile);
		if(finalTile != prev && finalTile != null) {
			finalTile.dx += xMin;
			finalTile.dy += yMin;
		}
		var _this4 = shader.filterMatrixA__;
		_this4.x = oldA_x;
		_this4.y = oldA_y;
		_this4.z = oldA_z;
		_this4.w = oldA_w;
		var _this5 = shader.filterMatrixB__;
		_this5.x = oldB_x;
		_this5.y = oldB_y;
		_this5.z = oldB_z;
		_this5.w = oldB_w;
		ctx.popTarget();
		ctx.popFilter();
		if(finalTile == null) {
			return;
		}
		ctx.globalAlpha = oldAlpha;
		this.drawFiltered(ctx,finalTile);
	}
	,drawFiltered: function(ctx,tile) {
		var oldAlpha = ctx.globalAlpha;
		ctx.currentBlend = null;
		ctx.inFilterBlend = this.blendMode;
		ctx.globalAlpha *= this.alpha;
		this.emitTile(ctx,tile);
		ctx.globalAlpha = oldAlpha;
		ctx.inFilterBlend = null;
		ctx.currentBlend = null;
	}
	,drawRec: function(ctx) {
		if(!this.visible) {
			return;
		}
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		if(this.filter != null && this.filter.get_enable()) {
			this.drawFilters(ctx);
		} else {
			var old = ctx.globalAlpha;
			ctx.globalAlpha *= this.alpha;
			if(ctx.front2back) {
				var nchilds = this.children.length;
				var _g2 = 0;
				var _g11 = nchilds;
				while(_g2 < _g11) {
					var i = _g2++;
					this.children[nchilds - 1 - i].drawRec(ctx);
				}
				this.draw(ctx);
			} else {
				this.draw(ctx);
				var _g3 = 0;
				var _g12 = this.children;
				while(_g3 < _g12.length) {
					var c1 = _g12[_g3];
					++_g3;
					c1.drawRec(ctx);
				}
			}
			ctx.globalAlpha = old;
		}
	}
	,getChildIndex: function(o) {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.children[i] == o) {
				return i;
			}
		}
		return -1;
	}
	,contentChanged: function(s) {
	}
	,constraintSize: function(maxWidth,maxHeight) {
	}
	,__class__: h2d_Object
};
var h2d_Drawable = function(parent) {
	h2d_Object.call(this,parent);
	this.color = new h3d_Vector(1,1,1,1);
};
$hxClasses["h2d.Drawable"] = h2d_Drawable;
h2d_Drawable.__name__ = "h2d.Drawable";
h2d_Drawable.__super__ = h2d_Object;
h2d_Drawable.prototype = $extend(h2d_Object.prototype,{
	color: null
	,smooth: null
	,tileWrap: null
	,shaders: null
	,set_colorAdd: function(c) {
		var s = this.getShader(h3d_shader_ColorAdd);
		if(s == null) {
			if(c != null) {
				s = this.addShader(new h3d_shader_ColorAdd());
				s.color__ = c;
			}
		} else if(c == null) {
			this.removeShader(s);
		} else {
			s.color__ = c;
		}
		return c;
	}
	,drawFiltered: function(ctx,tile) {
		var old = this.shaders;
		this.shaders = null;
		h2d_Object.prototype.drawFiltered.call(this,ctx,tile);
		this.shaders = old;
	}
	,getShader: function(stype) {
		if(this.shaders != null) {
			var _g_l = this.shaders;
			var _g_last = null;
			while(_g_l != _g_last) {
				var s = _g_l.s;
				_g_l = _g_l.next;
				var s1 = s;
				var s2 = js_Boot.__downcastCheck(s1,stype) ? s1 : null;
				if(s2 != null) {
					return s2;
				}
			}
		}
		return null;
	}
	,addShader: function(s) {
		if(s == null) {
			throw new js__$Boot_HaxeError("Can't add null shader");
		}
		this.shaders = hxsl_ShaderList.addSort(s,this.shaders);
		return s;
	}
	,removeShader: function(s) {
		var prev = null;
		var cur = this.shaders;
		while(cur != null) {
			if(cur.s == s) {
				if(prev == null) {
					this.shaders = cur.next;
				} else {
					prev.next = cur.next;
				}
				return true;
			}
			prev = cur;
			cur = cur.next;
		}
		return false;
	}
	,emitTile: function(ctx,tile) {
		if(tile == null) {
			tile = new h2d_Tile(null,0,0,5,5);
		}
		if(!ctx.drawTile(this,tile)) {
			return;
		}
		return;
	}
	,__class__: h2d_Drawable
});
var dn_heaps_slib_SpriteInterface = function() { };
$hxClasses["dn.heaps.slib.SpriteInterface"] = dn_heaps_slib_SpriteInterface;
dn_heaps_slib_SpriteInterface.__name__ = "dn.heaps.slib.SpriteInterface";
dn_heaps_slib_SpriteInterface.__isInterface__ = true;
dn_heaps_slib_SpriteInterface.prototype = {
	get_anim: null
	,lib: null
	,groupName: null
	,frame: null
	,destroyed: null
	,remove: null
	,set: null
	,setFrame: null
	,__class__: dn_heaps_slib_SpriteInterface
};
var dn_heaps_slib_HSprite = function(l,g,f,parent) {
	if(f == null) {
		f = 0;
	}
	h2d_Drawable.call(this,parent);
	this.destroyed = false;
	this.pivot = new dn_heaps_slib_SpritePivot();
	this.lastPage = -1;
	if(l != null) {
		var frame = f;
		if(frame == null) {
			frame = 0;
		}
		if(l != null) {
			if(l.pages == null || l.pages.length == 0) {
				throw new js__$Boot_HaxeError("sprite sheet has no backing texture, please generate one");
			}
			if(g == null) {
				this.groupName = null;
				this.group = null;
				this.frameData = null;
			}
			if(this.allocated && this.lib != null) {
				this.lib.removeChild(this);
			}
			this.lib = l;
			if(this.allocated) {
				this.lib.addChild(this);
			}
			if(this.pivot.isUndefined) {
				var _this = this.pivot;
				_this.centerFactorX = this.lib.defaultCenterX;
				_this.centerFactorY = this.lib.defaultCenterY;
				_this.usingFactor = true;
				_this.isUndefined = false;
			}
		}
		if(g != null && g != this.groupName) {
			this.groupName = g;
		}
		if(!this.destroyed && this.lib != null && this.groupName != null) {
			var _this1 = this.lib;
			var k = this.groupName;
			var tmp;
			if(k == null) {
				tmp = _this1.currentGroup;
			} else {
				var _this2 = _this1.groups;
				tmp = __map_reserved[k] != null ? _this2.getReserved(k) : _this2.h[k];
			}
			this.group = tmp;
			var _this3 = this.lib;
			var k1 = this.groupName;
			var frame1 = frame;
			if(frame1 == null) {
				frame1 = 0;
			}
			var g1;
			if(k1 == null) {
				g1 = _this3.currentGroup;
			} else {
				var _this4 = _this3.groups;
				g1 = __map_reserved[k1] != null ? _this4.getReserved(k1) : _this4.h[k1];
			}
			this.frameData = g1 == null ? null : g1.frames[frame1];
			if(this.frameData == null) {
				throw new js__$Boot_HaxeError("Unknown frame: " + this.groupName + "(" + frame + ")");
			}
			if(this.rawTile == null) {
				this.rawTile = this.lib.pages[this.frameData.page].clone();
			} else {
				this.rawTile.setTexture(this.lib.pages[this.frameData.page].innerTex);
			}
			this.lastPage = this.frameData.page;
			this.setFrame(frame);
		} else {
			this.setEmptyTexture();
		}
	} else {
		this.setEmptyTexture();
	}
};
$hxClasses["dn.heaps.slib.HSprite"] = dn_heaps_slib_HSprite;
dn_heaps_slib_HSprite.__name__ = "dn.heaps.slib.HSprite";
dn_heaps_slib_HSprite.__interfaces__ = [dn_heaps_slib_SpriteInterface];
dn_heaps_slib_HSprite.__super__ = h2d_Drawable;
dn_heaps_slib_HSprite.prototype = $extend(h2d_Drawable.prototype,{
	_animManager: null
	,lib: null
	,groupName: null
	,group: null
	,frame: null
	,frameData: null
	,pivot: null
	,destroyed: null
	,onAnimManAlloc: null
	,onFrameChange: null
	,rawTile: null
	,lastPage: null
	,toString: function() {
		return "HSprite_" + this.groupName + "[" + this.frame + "]";
	}
	,get_anim: function() {
		if(this._animManager == null) {
			this._animManager = new dn_heaps_slib_AnimManager(this);
			if(this.onAnimManAlloc != null) {
				this.onAnimManAlloc(this._animManager);
			}
		}
		return this._animManager;
	}
	,setEmptyTexture: function() {
		this.rawTile = h2d_Tile.fromColor(8453888,4,4);
	}
	,set: function(l,g,frame,stopAllAnims) {
		if(stopAllAnims == null) {
			stopAllAnims = false;
		}
		if(frame == null) {
			frame = 0;
		}
		if(l != null) {
			if(l.pages == null || l.pages.length == 0) {
				throw new js__$Boot_HaxeError("sprite sheet has no backing texture, please generate one");
			}
			if(g == null) {
				this.groupName = null;
				this.group = null;
				this.frameData = null;
			}
			if(this.allocated && this.lib != null) {
				this.lib.removeChild(this);
			}
			this.lib = l;
			if(this.allocated) {
				this.lib.addChild(this);
			}
			if(this.pivot.isUndefined) {
				var _this = this.pivot;
				_this.centerFactorX = this.lib.defaultCenterX;
				_this.centerFactorY = this.lib.defaultCenterY;
				_this.usingFactor = true;
				_this.isUndefined = false;
			}
		}
		if(g != null && g != this.groupName) {
			this.groupName = g;
		}
		if(!this.destroyed && this.lib != null && this.groupName != null) {
			if(stopAllAnims && this._animManager != null) {
				if(this._animManager == null) {
					this._animManager = new dn_heaps_slib_AnimManager(this);
					if(this.onAnimManAlloc != null) {
						this.onAnimManAlloc(this._animManager);
					}
				}
				this._animManager.stopWithoutStateAnims();
			}
			var _this1 = this.lib;
			var k = this.groupName;
			var tmp;
			if(k == null) {
				tmp = _this1.currentGroup;
			} else {
				var _this2 = _this1.groups;
				tmp = __map_reserved[k] != null ? _this2.getReserved(k) : _this2.h[k];
			}
			this.group = tmp;
			var _this3 = this.lib;
			var k1 = this.groupName;
			var frame1 = frame;
			if(frame1 == null) {
				frame1 = 0;
			}
			var g1;
			if(k1 == null) {
				g1 = _this3.currentGroup;
			} else {
				var _this4 = _this3.groups;
				g1 = __map_reserved[k1] != null ? _this4.getReserved(k1) : _this4.h[k1];
			}
			this.frameData = g1 == null ? null : g1.frames[frame1];
			if(this.frameData == null) {
				throw new js__$Boot_HaxeError("Unknown frame: " + this.groupName + "(" + frame + ")");
			}
			if(this.rawTile == null) {
				this.rawTile = this.lib.pages[this.frameData.page].clone();
			} else {
				this.rawTile.setTexture(this.lib.pages[this.frameData.page].innerTex);
			}
			this.lastPage = this.frameData.page;
			this.setFrame(frame);
		} else {
			this.setEmptyTexture();
		}
	}
	,setFrame: function(f) {
		var old = this.frame;
		this.frame = f;
		if(!this.destroyed && this.lib != null && this.groupName != null) {
			var prev = this.frameData;
			var _this = this.lib;
			var k = this.groupName;
			var frame = this.frame;
			if(frame == null) {
				frame = 0;
			}
			var g;
			if(k == null) {
				g = _this.currentGroup;
			} else {
				var _this1 = _this.groups;
				g = __map_reserved[k] != null ? _this1.getReserved(k) : _this1.h[k];
			}
			this.frameData = g == null ? null : g.frames[frame];
			if(this.frameData == null) {
				throw new js__$Boot_HaxeError("Unknown frame: " + this.groupName + "(" + this.frame + ")");
			}
			if(this.lastFrame != this.frameData.page) {
				this.rawTile.setTexture(this.lib.pages[this.frameData.page].innerTex);
				this.lastPage = this.frameData.page;
			}
			if(this.onFrameChange != null) {
				this.onFrameChange();
			}
		}
	}
	,onAdd: function() {
		h2d_Drawable.prototype.onAdd.call(this);
		this.destroyed = false;
		if(this.lib != null) {
			this.lib.addChild(this);
		}
	}
	,onRemove: function() {
		h2d_Drawable.prototype.onRemove.call(this);
		this.destroyed = true;
		if(this.lib != null) {
			this.lib.removeChild(this);
		}
		if(this._animManager != null) {
			this._animManager.destroy();
			this._animManager = null;
		}
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(!this.destroyed && this.lib != null && this.groupName != null) {
			var fd = this.frameData;
			this.rawTile.setPosition(fd.x,fd.y);
			this.rawTile.setSize(fd.wid,fd.hei);
			var _this = this.pivot;
			if(!_this.isUndefined && !_this.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX + fd.realX | 0);
				this.rawTile.dy = -(this.pivot.coordY + fd.realY | 0);
			} else {
				var _this1 = this.pivot;
				if(!_this1.isUndefined && _this1.usingFactor) {
					this.rawTile.dx = -(fd.realWid * this.pivot.centerFactorX + fd.realX | 0);
					this.rawTile.dy = -(fd.realHei * this.pivot.centerFactorY + fd.realY | 0);
				}
			}
		} else {
			var _this2 = this.pivot;
			if(!_this2.isUndefined && !_this2.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX | 0);
				this.rawTile.dy = -(this.pivot.coordY | 0);
			} else {
				var _this3 = this.pivot;
				if(!_this3.isUndefined && _this3.usingFactor) {
					this.rawTile.dx = -(this.rawTile.width * this.pivot.centerFactorX | 0);
					this.rawTile.dy = -(this.rawTile.height * this.pivot.centerFactorY | 0);
				}
			}
		}
		var tmp = this.rawTile.dx;
		if(!this.destroyed && this.lib != null && this.groupName != null) {
			var fd1 = this.frameData;
			this.rawTile.setPosition(fd1.x,fd1.y);
			this.rawTile.setSize(fd1.wid,fd1.hei);
			var _this4 = this.pivot;
			if(!_this4.isUndefined && !_this4.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX + fd1.realX | 0);
				this.rawTile.dy = -(this.pivot.coordY + fd1.realY | 0);
			} else {
				var _this5 = this.pivot;
				if(!_this5.isUndefined && _this5.usingFactor) {
					this.rawTile.dx = -(fd1.realWid * this.pivot.centerFactorX + fd1.realX | 0);
					this.rawTile.dy = -(fd1.realHei * this.pivot.centerFactorY + fd1.realY | 0);
				}
			}
		} else {
			var _this6 = this.pivot;
			if(!_this6.isUndefined && !_this6.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX | 0);
				this.rawTile.dy = -(this.pivot.coordY | 0);
			} else {
				var _this7 = this.pivot;
				if(!_this7.isUndefined && _this7.usingFactor) {
					this.rawTile.dx = -(this.rawTile.width * this.pivot.centerFactorX | 0);
					this.rawTile.dy = -(this.rawTile.height * this.pivot.centerFactorY | 0);
				}
			}
		}
		var tmp1 = this.rawTile.dy;
		if(!this.destroyed && this.lib != null && this.groupName != null) {
			var fd2 = this.frameData;
			this.rawTile.setPosition(fd2.x,fd2.y);
			this.rawTile.setSize(fd2.wid,fd2.hei);
			var _this8 = this.pivot;
			if(!_this8.isUndefined && !_this8.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX + fd2.realX | 0);
				this.rawTile.dy = -(this.pivot.coordY + fd2.realY | 0);
			} else {
				var _this9 = this.pivot;
				if(!_this9.isUndefined && _this9.usingFactor) {
					this.rawTile.dx = -(fd2.realWid * this.pivot.centerFactorX + fd2.realX | 0);
					this.rawTile.dy = -(fd2.realHei * this.pivot.centerFactorY + fd2.realY | 0);
				}
			}
		} else {
			var _this10 = this.pivot;
			if(!_this10.isUndefined && !_this10.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX | 0);
				this.rawTile.dy = -(this.pivot.coordY | 0);
			} else {
				var _this11 = this.pivot;
				if(!_this11.isUndefined && _this11.usingFactor) {
					this.rawTile.dx = -(this.rawTile.width * this.pivot.centerFactorX | 0);
					this.rawTile.dy = -(this.rawTile.height * this.pivot.centerFactorY | 0);
				}
			}
		}
		var tmp2 = this.rawTile.width;
		if(!this.destroyed && this.lib != null && this.groupName != null) {
			var fd3 = this.frameData;
			this.rawTile.setPosition(fd3.x,fd3.y);
			this.rawTile.setSize(fd3.wid,fd3.hei);
			var _this12 = this.pivot;
			if(!_this12.isUndefined && !_this12.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX + fd3.realX | 0);
				this.rawTile.dy = -(this.pivot.coordY + fd3.realY | 0);
			} else {
				var _this13 = this.pivot;
				if(!_this13.isUndefined && _this13.usingFactor) {
					this.rawTile.dx = -(fd3.realWid * this.pivot.centerFactorX + fd3.realX | 0);
					this.rawTile.dy = -(fd3.realHei * this.pivot.centerFactorY + fd3.realY | 0);
				}
			}
		} else {
			var _this14 = this.pivot;
			if(!_this14.isUndefined && !_this14.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX | 0);
				this.rawTile.dy = -(this.pivot.coordY | 0);
			} else {
				var _this15 = this.pivot;
				if(!_this15.isUndefined && _this15.usingFactor) {
					this.rawTile.dx = -(this.rawTile.width * this.pivot.centerFactorX | 0);
					this.rawTile.dy = -(this.rawTile.height * this.pivot.centerFactorY | 0);
				}
			}
		}
		this.addBounds(relativeTo,out,tmp,tmp1,tmp2,this.rawTile.height);
	}
	,draw: function(ctx) {
		if(!this.destroyed && this.lib != null && this.groupName != null) {
			var fd = this.frameData;
			this.rawTile.setPosition(fd.x,fd.y);
			this.rawTile.setSize(fd.wid,fd.hei);
			var _this = this.pivot;
			if(!_this.isUndefined && !_this.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX + fd.realX | 0);
				this.rawTile.dy = -(this.pivot.coordY + fd.realY | 0);
			} else {
				var _this1 = this.pivot;
				if(!_this1.isUndefined && _this1.usingFactor) {
					this.rawTile.dx = -(fd.realWid * this.pivot.centerFactorX + fd.realX | 0);
					this.rawTile.dy = -(fd.realHei * this.pivot.centerFactorY + fd.realY | 0);
				}
			}
		} else {
			var _this2 = this.pivot;
			if(!_this2.isUndefined && !_this2.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX | 0);
				this.rawTile.dy = -(this.pivot.coordY | 0);
			} else {
				var _this3 = this.pivot;
				if(!_this3.isUndefined && _this3.usingFactor) {
					this.rawTile.dx = -(this.rawTile.width * this.pivot.centerFactorX | 0);
					this.rawTile.dy = -(this.rawTile.height * this.pivot.centerFactorY | 0);
				}
			}
		}
		this.emitTile(ctx,this.rawTile);
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		if(this._animManager != null) {
			if(this._animManager == null) {
				this._animManager = new dn_heaps_slib_AnimManager(this);
				if(this.onAnimManAlloc != null) {
					this.onAnimManAlloc(this._animManager);
				}
			}
			var _this = this._animManager;
			var dt = !isNaN(dn_heaps_slib_SpriteLib.TMOD) ? dn_heaps_slib_SpriteLib.TMOD : ctx.elapsedTime * hxd_Timer.wantedFPS;
			if(_this.needUpdates) {
				_this._update(dt);
			}
		}
	}
	,__class__: dn_heaps_slib_HSprite
});
var h2d_SpriteBatch = function(t,parent) {
	h2d_Drawable.call(this,parent);
	this.tile = t;
};
$hxClasses["h2d.SpriteBatch"] = h2d_SpriteBatch;
h2d_SpriteBatch.__name__ = "h2d.SpriteBatch";
h2d_SpriteBatch.__super__ = h2d_Drawable;
h2d_SpriteBatch.prototype = $extend(h2d_Drawable.prototype,{
	tile: null
	,hasRotationScale: null
	,hasUpdate: null
	,first: null
	,last: null
	,tmpBuf: null
	,buffer: null
	,bufferVertices: null
	,add: function(e,before) {
		if(before == null) {
			before = false;
		}
		e.batch = this;
		if(this.first == null) {
			this.first = this.last = e;
			e.prev = e.next = null;
		} else if(before) {
			e.prev = null;
			e.next = this.first;
			this.first.prev = e;
			this.first = e;
		} else {
			this.last.next = e;
			e.prev = this.last;
			e.next = null;
			this.last = e;
		}
		return e;
	}
	,'delete': function(e) {
		if(e.prev == null) {
			if(this.first == e) {
				this.first = e.next;
			}
		} else {
			e.prev.next = e.next;
		}
		if(e.next == null) {
			if(this.last == e) {
				this.last = e.prev;
			}
		} else {
			e.next.prev = e.prev;
		}
		e.batch = null;
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		if(this.hasUpdate) {
			var e = this.first;
			while(e != null) {
				if(!e.update(ctx.elapsedTime)) {
					e.remove();
				}
				e = e.next;
			}
		}
		this.flush();
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		var e = this.first;
		while(e != null) {
			var t = e.t;
			if(this.hasRotationScale) {
				var ca = Math.cos(e.rotation);
				var sa = Math.sin(e.rotation);
				var hx = t.width;
				var hy = t.height;
				var px = t.dx * e.scaleX;
				var py = t.dy * e.scaleY;
				var x = px * ca - py * sa + e.x;
				var y = py * ca + px * sa + e.y;
				this.addBounds(relativeTo,out,x,y,1e-10,1e-10);
				var px1 = (t.dx + hx) * e.scaleX;
				var py1 = t.dy * e.scaleY;
				x = px1 * ca - py1 * sa + e.x;
				y = py1 * ca + px1 * sa + e.y;
				this.addBounds(relativeTo,out,x,y,1e-10,1e-10);
				var px2 = t.dx * e.scaleX;
				var py2 = (t.dy + hy) * e.scaleY;
				x = px2 * ca - py2 * sa + e.x;
				y = py2 * ca + px2 * sa + e.y;
				this.addBounds(relativeTo,out,x,y,1e-10,1e-10);
				var px3 = (t.dx + hx) * e.scaleX;
				var py3 = (t.dy + hy) * e.scaleY;
				x = px3 * ca - py3 * sa + e.x;
				y = py3 * ca + px3 * sa + e.y;
				this.addBounds(relativeTo,out,x,y,1e-10,1e-10);
			} else {
				this.addBounds(relativeTo,out,e.x + t.dx,e.y + t.dy,t.width,t.height);
			}
			e = e.next;
		}
	}
	,flush: function() {
		if(this.first == null) {
			this.bufferVertices = 0;
			return;
		}
		if(this.tmpBuf == null) {
			var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
			this.tmpBuf = this1;
		}
		var pos = 0;
		var e = this.first;
		var tmp = this.tmpBuf;
		while(e != null) {
			if(!e.visible) {
				e = e.next;
				continue;
			}
			var t = e.t;
			var _g = tmp.pos;
			var _g1 = pos + 32;
			while(_g < _g1) {
				var i = _g++;
				if(tmp.pos == tmp.array.length) {
					var newSize = tmp.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					var newArray = new Float32Array(newSize);
					newArray.set(tmp.array);
					tmp.array = newArray;
				}
				tmp.array[tmp.pos++] = 0.;
			}
			if(this.hasRotationScale) {
				var ca = Math.cos(e.rotation);
				var sa = Math.sin(e.rotation);
				var hx = t.width;
				var hy = t.height;
				var px = t.dx * e.scaleX;
				var py = t.dy * e.scaleY;
				tmp.array[pos++] = px * ca - py * sa + e.x;
				tmp.array[pos++] = py * ca + px * sa + e.y;
				tmp.array[pos++] = t.u;
				tmp.array[pos++] = t.v;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				var px1 = (t.dx + hx) * e.scaleX;
				var py1 = t.dy * e.scaleY;
				tmp.array[pos++] = px1 * ca - py1 * sa + e.x;
				tmp.array[pos++] = py1 * ca + px1 * sa + e.y;
				tmp.array[pos++] = t.u2;
				tmp.array[pos++] = t.v;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				var px2 = t.dx * e.scaleX;
				var py2 = (t.dy + hy) * e.scaleY;
				tmp.array[pos++] = px2 * ca - py2 * sa + e.x;
				tmp.array[pos++] = py2 * ca + px2 * sa + e.y;
				tmp.array[pos++] = t.u;
				tmp.array[pos++] = t.v2;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				var px3 = (t.dx + hx) * e.scaleX;
				var py3 = (t.dy + hy) * e.scaleY;
				tmp.array[pos++] = px3 * ca - py3 * sa + e.x;
				tmp.array[pos++] = py3 * ca + px3 * sa + e.y;
				tmp.array[pos++] = t.u2;
				tmp.array[pos++] = t.v2;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
			} else {
				var sx = e.x + t.dx;
				var sy = e.y + t.dy;
				tmp.array[pos++] = sx;
				tmp.array[pos++] = sy;
				tmp.array[pos++] = t.u;
				tmp.array[pos++] = t.v;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				tmp.array[pos++] = sx + t.width + 0.1;
				tmp.array[pos++] = sy;
				tmp.array[pos++] = t.u2;
				tmp.array[pos++] = t.v;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				tmp.array[pos++] = sx;
				tmp.array[pos++] = sy + t.height + 0.1;
				tmp.array[pos++] = t.u;
				tmp.array[pos++] = t.v2;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
				tmp.array[pos++] = sx + t.width + 0.1;
				tmp.array[pos++] = sy + t.height + 0.1;
				tmp.array[pos++] = t.u2;
				tmp.array[pos++] = t.v2;
				tmp.array[pos++] = e.r;
				tmp.array[pos++] = e.g;
				tmp.array[pos++] = e.b;
				tmp.array[pos++] = e.a;
			}
			e = e.next;
		}
		this.bufferVertices = pos >> 3;
		if(this.buffer != null && !this.buffer.isDisposed()) {
			if(this.buffer.vertices >= this.bufferVertices) {
				this.buffer.uploadVector(this.tmpBuf,0,this.bufferVertices);
				return;
			}
			this.buffer.dispose();
			this.buffer = null;
		}
		if(this.bufferVertices > 0) {
			this.buffer = h3d_Buffer.ofSubFloats(this.tmpBuf,8,this.bufferVertices,[h3d_BufferFlag.Dynamic,h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat]);
		}
	}
	,draw: function(ctx) {
		this.drawWith(ctx,this);
	}
	,drawWith: function(ctx,obj) {
		if(this.first == null || this.buffer == null || this.buffer.isDisposed() || this.bufferVertices == 0) {
			return;
		}
		if(!ctx.beginDrawObject(obj,this.tile.innerTex)) {
			return;
		}
		var _this = ctx.engine;
		var start = 0;
		var max = this.bufferVertices >> 1;
		if(max == null) {
			max = -1;
		}
		if(start == null) {
			start = 0;
		}
		_this.renderBuffer(this.buffer,_this.mem.quadIndexes,2,start,max);
	}
	,onRemove: function() {
		h2d_Drawable.prototype.onRemove.call(this);
		if(this.buffer != null) {
			this.buffer.dispose();
			this.buffer = null;
		}
	}
	,__class__: h2d_SpriteBatch
});
var dn_heaps_slib_FrameData = function(page,x,y,wid,hei,realX,realY,realWid,realHei,tile) {
	this.page = page;
	this.x = x;
	this.y = y;
	this.wid = wid;
	this.hei = hei;
	this.realX = realX;
	this.realY = realY;
	this.realWid = realWid;
	this.realHei = realHei;
	this.tile = tile;
};
$hxClasses["dn.heaps.slib.FrameData"] = dn_heaps_slib_FrameData;
dn_heaps_slib_FrameData.__name__ = "dn.heaps.slib.FrameData";
dn_heaps_slib_FrameData.prototype = {
	page: null
	,x: null
	,y: null
	,wid: null
	,hei: null
	,realX: null
	,realY: null
	,realWid: null
	,realHei: null
	,tile: null
	,__class__: dn_heaps_slib_FrameData
};
var dn_heaps_slib_LibGroup = function(id,maxWid,maxHei,frames,anim) {
	this.id = id;
	this.maxWid = maxWid;
	this.maxHei = maxHei;
	this.frames = frames;
	this.anim = anim;
};
$hxClasses["dn.heaps.slib.LibGroup"] = dn_heaps_slib_LibGroup;
dn_heaps_slib_LibGroup.__name__ = "dn.heaps.slib.LibGroup";
dn_heaps_slib_LibGroup.prototype = {
	id: null
	,maxWid: null
	,maxHei: null
	,frames: null
	,anim: null
	,__class__: dn_heaps_slib_LibGroup
};
var dn_heaps_slib_SLBError = $hxEnums["dn.heaps.slib.SLBError"] = { __ename__ : true, __constructs__ : ["NoGroupSelected","GroupAlreadyExists","InvalidFrameDuration","EndFrameLower","InvalidFrames","NoCurrentGroup","AnimFrameExceeds","AssetImportFailed","NotSameSLBFromBatch"]
	,NoGroupSelected: {_hx_index:0,__enum__:"dn.heaps.slib.SLBError",toString:$estr}
	,GroupAlreadyExists: ($_=function(g) { return {_hx_index:1,g:g,__enum__:"dn.heaps.slib.SLBError",toString:$estr}; },$_.__params__ = ["g"],$_)
	,InvalidFrameDuration: ($_=function(s) { return {_hx_index:2,s:s,__enum__:"dn.heaps.slib.SLBError",toString:$estr}; },$_.__params__ = ["s"],$_)
	,EndFrameLower: ($_=function(s) { return {_hx_index:3,s:s,__enum__:"dn.heaps.slib.SLBError",toString:$estr}; },$_.__params__ = ["s"],$_)
	,InvalidFrames: ($_=function(s) { return {_hx_index:4,s:s,__enum__:"dn.heaps.slib.SLBError",toString:$estr}; },$_.__params__ = ["s"],$_)
	,NoCurrentGroup: {_hx_index:5,__enum__:"dn.heaps.slib.SLBError",toString:$estr}
	,AnimFrameExceeds: ($_=function(id,anim,frame) { return {_hx_index:6,id:id,anim:anim,frame:frame,__enum__:"dn.heaps.slib.SLBError",toString:$estr}; },$_.__params__ = ["id","anim","frame"],$_)
	,AssetImportFailed: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"dn.heaps.slib.SLBError",toString:$estr}; },$_.__params__ = ["e"],$_)
	,NotSameSLBFromBatch: {_hx_index:8,__enum__:"dn.heaps.slib.SLBError",toString:$estr}
};
dn_heaps_slib_SLBError.__empty_constructs__ = [dn_heaps_slib_SLBError.NoGroupSelected,dn_heaps_slib_SLBError.NoCurrentGroup,dn_heaps_slib_SLBError.NotSameSLBFromBatch];
var dn_heaps_slib_SpriteLib = function(pages,normalPages) {
	this.groups = new haxe_ds_StringMap();
	this.defaultCenterX = 0;
	this.defaultCenterY = 0;
	this.gridX = this.gridY = 16;
	this.children = [];
	this.pages = pages;
	this.normalPages = normalPages;
};
$hxClasses["dn.heaps.slib.SpriteLib"] = dn_heaps_slib_SpriteLib;
dn_heaps_slib_SpriteLib.__name__ = "dn.heaps.slib.SpriteLib";
dn_heaps_slib_SpriteLib.prototype = {
	groups: null
	,defaultCenterX: null
	,defaultCenterY: null
	,currentGroup: null
	,gridX: null
	,gridY: null
	,children: null
	,pages: null
	,normalPages: null
	,createGroup: function(k) {
		var _this = this.groups;
		if(__map_reserved[k] != null ? _this.existsReserved(k) : _this.h.hasOwnProperty(k)) {
			throw new js__$Boot_HaxeError(dn_heaps_slib_SLBError.GroupAlreadyExists(k));
		}
		var this1 = this.groups;
		var value = new dn_heaps_slib_LibGroup(k,0,0,[],[]);
		var _this1 = this1;
		if(__map_reserved[k] != null) {
			_this1.setReserved(k,value);
		} else {
			_this1.h[k] = value;
		}
		var tmp;
		if(k == null) {
			tmp = this.currentGroup;
		} else {
			var _this2 = this.groups;
			tmp = __map_reserved[k] != null ? _this2.getReserved(k) : _this2.h[k];
		}
		this.currentGroup = tmp;
		var k1 = null;
		if(k1 == null) {
			return this.currentGroup;
		} else {
			var _this3 = this.groups;
			if(__map_reserved[k1] != null) {
				return _this3.getReserved(k1);
			} else {
				return _this3.h[k1];
			}
		}
	}
	,sliceCustom: function(groupName,page,frame,x,y,wid,hei,realX,realY,realWid,realHei) {
		var g;
		var g1;
		var g2;
		if(groupName != null) {
			var _this = this.groups;
			g2 = __map_reserved[groupName] != null ? _this.existsReserved(groupName) : _this.h.hasOwnProperty(groupName);
		} else {
			g2 = false;
		}
		if(g2) {
			var _this1 = this.groups;
			g1 = (__map_reserved[groupName] != null ? _this1.getReserved(groupName) : _this1.h[groupName]).frames.length > 0;
		} else {
			g1 = false;
		}
		if(g1) {
			if(groupName == null) {
				g = this.currentGroup;
			} else {
				var _this2 = this.groups;
				g = __map_reserved[groupName] != null ? _this2.getReserved(groupName) : _this2.h[groupName];
			}
		} else {
			g = this.createGroup(groupName);
		}
		var x1 = g.maxWid;
		g.maxWid = x1 > wid ? x1 : wid;
		var x2 = g.maxHei;
		g.maxHei = x2 > hei ? x2 : hei;
		var fd = new dn_heaps_slib_FrameData(page,x,y,wid,hei,realX,realY,realWid,realHei,null);
		g.frames[frame] = fd;
		return fd;
	}
	,resliceCustom: function(groupName,frame,fd) {
		var g;
		var g1;
		var g2;
		if(groupName != null) {
			var _this = this.groups;
			g2 = __map_reserved[groupName] != null ? _this.existsReserved(groupName) : _this.h.hasOwnProperty(groupName);
		} else {
			g2 = false;
		}
		if(g2) {
			var _this1 = this.groups;
			g1 = (__map_reserved[groupName] != null ? _this1.getReserved(groupName) : _this1.h[groupName]).frames.length > 0;
		} else {
			g1 = false;
		}
		if(g1) {
			if(groupName == null) {
				g = this.currentGroup;
			} else {
				var _this2 = this.groups;
				g = __map_reserved[groupName] != null ? _this2.getReserved(groupName) : _this2.h[groupName];
			}
		} else {
			g = this.createGroup(groupName);
		}
		var x = g.maxWid;
		var y = fd.wid;
		g.maxWid = x > y ? x : y;
		var x1 = g.maxHei;
		var y1 = fd.hei;
		g.maxHei = x1 > y1 ? x1 : y1;
		g.frames[frame] = fd;
		return fd;
	}
	,toString: function() {
		var l = [];
		var k = this.groups.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			var g;
			if(k1 == null) {
				g = this.currentGroup;
			} else {
				var _this = this.groups;
				g = __map_reserved[k1] != null ? _this.getReserved(k1) : _this.h[k1];
			}
			l.push(k1 + " (" + g.maxWid + "x" + g.maxHei + ")" + (g.frames.length > 1 ? " " + g.frames.length + "f" : "") + (g.anim.length > 1 ? " animated(" + g.anim.length + "f)" : ""));
		}
		l.sort(function(a,b) {
			return Reflect.compare(a,b);
		});
		return "| " + l.join("\n| ");
	}
	,addChild: function(s) {
		this.children.push(s);
	}
	,removeChild: function(s) {
		HxOverrides.remove(this.children,s);
	}
	,getTile: function(g,frame,px,py) {
		if(py == null) {
			py = 0.0;
		}
		if(px == null) {
			px = 0.0;
		}
		if(frame == null) {
			frame = 0;
		}
		var frame1 = frame;
		if(frame1 == null) {
			frame1 = 0;
		}
		var g1;
		if(g == null) {
			g1 = this.currentGroup;
		} else {
			var _this = this.groups;
			g1 = __map_reserved[g] != null ? _this.getReserved(g) : _this.h[g];
		}
		var fd = g1 == null ? null : g1.frames[frame1];
		if(fd == null) {
			throw new js__$Boot_HaxeError("Unknown group " + g + "#" + frame + "!");
		}
		var t = this.pages[fd.page].clone();
		return this.updTile(t,g,frame,px,py);
	}
	,updTile: function(t,g,frame,px,py) {
		if(py == null) {
			py = 0.0;
		}
		if(px == null) {
			px = 0.0;
		}
		if(frame == null) {
			frame = 0;
		}
		var frame1 = frame;
		if(frame1 == null) {
			frame1 = 0;
		}
		var g1;
		if(g == null) {
			g1 = this.currentGroup;
		} else {
			var _this = this.groups;
			g1 = __map_reserved[g] != null ? _this.getReserved(g) : _this.h[g];
		}
		var fd = g1 == null ? null : g1.frames[frame1];
		if(fd == null) {
			throw new js__$Boot_HaxeError("Unknown group " + g + "#" + frame + "!");
		}
		t.setPosition(fd.x,fd.y);
		t.setSize(fd.wid,fd.hei);
		t.dx = -(fd.realWid * px + fd.realX | 0);
		t.dy = -(fd.realHei * py + fd.realY | 0);
		return t;
	}
	,getTileRandom: function(g,px,py,rndFunc) {
		if(py == null) {
			py = 0.0;
		}
		if(px == null) {
			px = 0.0;
		}
		var tmp;
		var tmp1;
		if(g != null) {
			var _this = this.groups;
			tmp1 = __map_reserved[g] != null ? _this.existsReserved(g) : _this.h.hasOwnProperty(g);
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			var _this1 = this.groups;
			tmp = (__map_reserved[g] != null ? _this1.getReserved(g) : _this1.h[g]).frames.length > 0;
		} else {
			tmp = false;
		}
		if(!tmp) {
			throw new js__$Boot_HaxeError("Unknown group " + g);
		}
		var tmp2;
		if(g == null) {
			tmp2 = this.currentGroup;
		} else {
			var _this2 = this.groups;
			tmp2 = __map_reserved[g] != null ? _this2.getReserved(g) : _this2.h[g];
		}
		return this.getTile(g,(rndFunc == null ? Std.random : rndFunc)(tmp2.frames.length),px,py);
	}
	,__defineAnim: function(group,anim) {
		if(this.currentGroup == null && group == null) {
			throw new js__$Boot_HaxeError(dn_heaps_slib_SLBError.NoCurrentGroup);
		}
		if(group != null) {
			var tmp;
			if(group == null) {
				tmp = this.currentGroup;
			} else {
				var _this = this.groups;
				tmp = __map_reserved[group] != null ? _this.getReserved(group) : _this.h[group];
			}
			this.currentGroup = tmp;
			var k = null;
			if(k != null) {
				var _this1 = this.groups;
				if(__map_reserved[k] != null) {
					_this1.getReserved(k);
				}
			}
		}
		var _g = 0;
		while(_g < anim.length) {
			var f = anim[_g];
			++_g;
			if(f >= this.currentGroup.frames.length) {
				throw new js__$Boot_HaxeError(dn_heaps_slib_SLBError.AnimFrameExceeds(this.currentGroup.id,"[" + anim.join(",") + "] " + this.currentGroup.frames.length,f));
			}
		}
		this.currentGroup.anim = anim;
	}
	,__class__: dn_heaps_slib_SpriteLib
};
var dn_heaps_slib_SpritePivot = function() {
	this.isUndefined = true;
};
$hxClasses["dn.heaps.slib.SpritePivot"] = dn_heaps_slib_SpritePivot;
dn_heaps_slib_SpritePivot.__name__ = "dn.heaps.slib.SpritePivot";
dn_heaps_slib_SpritePivot.prototype = {
	isUndefined: null
	,usingFactor: null
	,coordX: null
	,coordY: null
	,centerFactorX: null
	,centerFactorY: null
	,__class__: dn_heaps_slib_SpritePivot
};
var en_Bullet = function(e,offY) {
	if(offY == null) {
		offY = 0.;
	}
	this.speed = 1.0;
	Entity.call(this,0,0);
	this.setPosPixel((e.cx + e.xr) * Const.GRID,(e.cy + e.yr) * Const.GRID - e.hei * 0.5 + offY);
	en_Bullet.ALL.push(this);
	this.hasCollisions = false;
	this.ang = e.dir == 1 ? 0. : 3.141592653589793;
	this.frict = 1;
	this.gravity = 0;
	this.radius = 2;
	this.hei = 0;
	var g = new h2d_Graphics(this.spr);
	g.beginFill(16763904);
	g.drawRect(-3,-1,6,2);
};
$hxClasses["en.Bullet"] = en_Bullet;
en_Bullet.__name__ = "en.Bullet";
en_Bullet.__super__ = Entity;
en_Bullet.prototype = $extend(Entity.prototype,{
	speed: null
	,ang: null
	,dispose: function() {
		Entity.prototype.dispose.call(this);
		HxOverrides.remove(en_Bullet.ALL,this);
	}
	,onBulletHitWall: function(hitX,hitY) {
		if(Main.ME.options.bulletImpactFx) {
			var tmp = Game.ME.fx;
			var a = this.ang;
			var b = 0;
			var a1 = a;
			while(a1 < -3.1415926535897931) a1 += 6.283185307179586;
			while(a1 > 3.141592653589793) a1 -= 6.283185307179586;
			a = a1;
			var a2 = b;
			while(a2 < -3.1415926535897931) a2 += 6.283185307179586;
			while(a2 > 3.141592653589793) a2 -= 6.283185307179586;
			b = a2;
			var a3 = a - b;
			while(a3 < -3.1415926535897931) a3 += 6.283185307179586;
			while(a3 > 3.141592653589793) a3 -= 6.283185307179586;
			var x = a3;
			tmp.hitWall(hitX,hitY,(x < 0 ? -x : x) <= 1.5707963267948966 ? -1 : 1);
		}
		if(!this.destroyed) {
			this.destroyed = true;
			Entity.GC.push(this);
		}
	}
	,update: function() {
		this.dx = Math.cos(this.ang) * 0.55 * this.speed;
		this.dy = Math.sin(this.ang) * 0.55 * this.speed;
		Entity.prototype.update.call(this);
		var a = this.ang;
		var b = 0;
		var a1 = a;
		while(a1 < -3.1415926535897931) a1 += 6.283185307179586;
		while(a1 > 3.141592653589793) a1 -= 6.283185307179586;
		a = a1;
		var a2 = b;
		while(a2 < -3.1415926535897931) a2 += 6.283185307179586;
		while(a2 > 3.141592653589793) a2 -= 6.283185307179586;
		b = a2;
		var a3 = a - b;
		while(a3 < -3.1415926535897931) a3 += 6.283185307179586;
		while(a3 > 3.141592653589793) a3 -= 6.283185307179586;
		var x = a3;
		var v = (x < 0 ? -x : x) <= 1.5707963267948966 ? 1 : -1;
		this.dir = v > 0 ? 1 : v < 0 ? -1 : this.dir;
		var _g = 0;
		var _g1 = en_Mob.ALL;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e.isAlive() && (this.cx + this.xr) * Const.GRID >= (e.cx + e.xr) * Const.GRID - e.radius && (this.cx + this.xr) * Const.GRID <= (e.cx + e.xr) * Const.GRID + e.radius && (this.cy + this.yr) * Const.GRID >= (e.cy + e.yr) * Const.GRID - e.hei && (this.cy + this.yr) * Const.GRID <= (e.cy + e.yr) * Const.GRID) {
				e.hit(1,this.dir);
				if(Main.ME.options.bulletImpactFx) {
					Game.ME.fx.hitEntity((e.cx + e.xr) * Const.GRID - this.dir * 4,(this.cy + this.yr) * Const.GRID,-this.dir);
				}
				if(!this.destroyed) {
					this.destroyed = true;
					Entity.GC.push(this);
				}
			}
		}
		var tmp;
		var _this = Game.ME.level;
		var cx = this.cx;
		var cy = this.cy;
		var tmp1;
		var tmp2;
		if(cx >= 0) {
			var _this1 = _this.data.layersByName;
			var _this2 = __map_reserved["collisions"] != null ? _this1.getReserved("collisions") : _this1.h["collisions"];
			var x1 = _this2.level.pxWid / _this2.gridWid;
			var tmp3;
			if(x1 > .0) {
				var t = x1 + .5 | 0;
				tmp3 = t < x1 ? t + 1 : t;
			} else if(x1 < .0) {
				var t1 = x1 - .5 | 0;
				tmp3 = t1 < x1 ? t1 + 1 : t1;
			} else {
				tmp3 = 0;
			}
			tmp2 = cx < tmp3;
		} else {
			tmp2 = false;
		}
		if(tmp2 && cy >= 0) {
			var _this3 = _this.data.layersByName;
			var _this4 = __map_reserved["collisions"] != null ? _this3.getReserved("collisions") : _this3.h["collisions"];
			var x2 = _this4.level.pxHei / _this4.gridHei;
			var tmp4;
			if(x2 > .0) {
				var t2 = x2 + .5 | 0;
				tmp4 = t2 < x2 ? t2 + 1 : t2;
			} else if(x2 < .0) {
				var t3 = x2 - .5 | 0;
				tmp4 = t3 < x2 ? t3 + 1 : t3;
			} else {
				tmp4 = 0;
			}
			tmp1 = cy < tmp4;
		} else {
			tmp1 = false;
		}
		if(!(!tmp1)) {
			var _this5 = Game.ME.level;
			var cx1 = this.cx;
			var cy1 = this.cy;
			var tmp5;
			var tmp6;
			if(cx1 >= 0) {
				var _this6 = _this5.data.layersByName;
				var _this7 = __map_reserved["collisions"] != null ? _this6.getReserved("collisions") : _this6.h["collisions"];
				var x3 = _this7.level.pxWid / _this7.gridWid;
				var tmp7;
				if(x3 > .0) {
					var t4 = x3 + .5 | 0;
					tmp7 = t4 < x3 ? t4 + 1 : t4;
				} else if(x3 < .0) {
					var t5 = x3 - .5 | 0;
					tmp7 = t5 < x3 ? t5 + 1 : t5;
				} else {
					tmp7 = 0;
				}
				tmp6 = cx1 < tmp7;
			} else {
				tmp6 = false;
			}
			if(tmp6 && cy1 >= 0) {
				var _this8 = _this5.data.layersByName;
				var _this9 = __map_reserved["collisions"] != null ? _this8.getReserved("collisions") : _this8.h["collisions"];
				var x4 = _this9.level.pxHei / _this9.gridHei;
				var tmp8;
				if(x4 > .0) {
					var t6 = x4 + .5 | 0;
					tmp8 = t6 < x4 ? t6 + 1 : t6;
				} else if(x4 < .0) {
					var t7 = x4 - .5 | 0;
					tmp8 = t7 < x4 ? t7 + 1 : t7;
				} else {
					tmp8 = 0;
				}
				tmp5 = cy1 < tmp8;
			} else {
				tmp5 = false;
			}
			if(tmp5) {
				var this1 = _this5.collMap;
				var _this10 = _this5.data.layersByName;
				var _this11 = __map_reserved["collisions"] != null ? _this10.getReserved("collisions") : _this10.h["collisions"];
				var x5 = _this11.level.pxWid / _this11.gridWid;
				var key;
				if(x5 > .0) {
					var t8 = x5 + .5 | 0;
					key = t8 < x5 ? t8 + 1 : t8;
				} else if(x5 < .0) {
					var t9 = x5 - .5 | 0;
					key = t9 < x5 ? t9 + 1 : t9;
				} else {
					key = 0;
				}
				tmp = this1.h[cx1 + cy1 * key] == true;
			} else {
				tmp = true;
			}
		} else {
			tmp = true;
		}
		if(tmp) {
			this.onBulletHitWall((this.cx + 0.5) * Const.GRID - Math.cos(this.ang) * Const.GRID * 0.5,(this.cy + 0.5) * Const.GRID - Math.sin(this.ang) * Const.GRID * 0.5);
		}
	}
	,__class__: en_Bullet
});
var en_Hero = function(x,y) {
	this.burstCount = 0;
	Entity.call(this,x,y);
	this.ca = Main.ME.controller.createAccess("hero");
	var c = 65280;
	var g = new h2d_Graphics(this.spr);
	var a = _$UInt_UInt_$Impl_$.toFloat(c >>> 16);
	var x1 = a + (_$UInt_UInt_$Impl_$.toFloat(0 >>> 16) - a) * 0.4;
	var a1 = _$UInt_UInt_$Impl_$.toFloat(c >>> 8 & 255);
	var x2 = a1 + (_$UInt_UInt_$Impl_$.toFloat(0 >>> 8 & 255) - a1) * 0.4;
	var a2 = _$UInt_UInt_$Impl_$.toFloat(c & 255);
	var x3 = a2 + (_$UInt_UInt_$Impl_$.toFloat(0 & 255) - a2) * 0.4;
	g.beginFill(((x1 > 0 ? x1 + .5 : x1 < 0 ? x1 - .5 : 0) | 0) << 16 | ((x2 > 0 ? x2 + .5 : x2 < 0 ? x2 - .5 : 0) | 0) << 8 | ((x3 > 0 ? x3 + .5 : x3 < 0 ? x3 - .5 : 0) | 0));
	g.drawRect(-this.radius,-this.hei,this.radius * 2,this.hei);
	g.endFill();
	this.gun = new h2d_Graphics(this.spr);
	var tmp = this.gun;
	var a3 = _$UInt_UInt_$Impl_$.toFloat(c >>> 16);
	var x4 = a3 + (_$UInt_UInt_$Impl_$.toFloat(0 >>> 16) - a3) * 0.2;
	var a4 = _$UInt_UInt_$Impl_$.toFloat(c >>> 8 & 255);
	var x5 = a4 + (_$UInt_UInt_$Impl_$.toFloat(0 >>> 8 & 255) - a4) * 0.2;
	var a5 = _$UInt_UInt_$Impl_$.toFloat(c & 255);
	var x6 = a5 + (_$UInt_UInt_$Impl_$.toFloat(0 & 255) - a5) * 0.2;
	tmp.beginFill(((x4 > 0 ? x4 + .5 : x4 < 0 ? x4 - .5 : 0) | 0) << 16 | ((x5 > 0 ? x5 + .5 : x5 < 0 ? x5 - .5 : 0) | 0) << 8 | ((x6 > 0 ? x6 + .5 : x6 < 0 ? x6 - .5 : 0) | 0));
	this.gun.drawRect(3,-1,4,4);
	this.gun.beginFill(16777215);
	this.gun.drawRect(-3,-5,12,6);
	this.gun.beginFill(c);
	this.gun.drawRect(-2,0,4,4);
};
$hxClasses["en.Hero"] = en_Hero;
en_Hero.__name__ = "en.Hero";
en_Hero.__super__ = Entity;
en_Hero.prototype = $extend(Entity.prototype,{
	ca: null
	,gun: null
	,dispose: function() {
		Entity.prototype.dispose.call(this);
		this.ca.dispose();
		this.ca = null;
	}
	,onLand: function(cHei) {
		Entity.prototype.onLand.call(this,cHei);
		var x = (cHei - 2) / 4;
		var pow = x < 0 ? 0 : x > 1 ? 1 : x;
		if(Main.ME.options.camShakes) {
			var _this = Game.ME.camera;
			_this.bumpOffX += 0;
			_this.bumpOffY += 3 * pow;
			Game.ME.camera.shakeS(0.5,0.2 * pow);
		}
		if(Main.ME.options.controlLocks) {
			this.dx *= 0.5;
			this.lockS(0.4 * pow);
		}
		if(Main.ME.options.heroSquashAndStrech) {
			var x1 = cHei / 3;
			var pow1 = x1 < 0 ? 0 : x1 > 1 ? 1 : x1;
			this.skewX = 1 + 0.2 * pow1;
			this.skewY = 1 - 0.6 * pow1;
		}
	}
	,postUpdate: function() {
		Entity.prototype.postUpdate.call(this);
		var _this = this.gun;
		_this.posChanged = true;
		_this.x = 3;
		var _this1 = this.gun;
		_this1.posChanged = true;
		_this1.y = -this.hei * 0.4;
		if(Main.ME.options.basicAnimations) {
			var isWalking;
			var _this2 = Game.ME.level;
			var cx = this.cx;
			var cy = this.cy + 1;
			var isWalking1;
			var isWalking2;
			var isWalking3;
			if(cx >= 0) {
				var _this3 = _this2.data.layersByName;
				var _this4 = __map_reserved["collisions"] != null ? _this3.getReserved("collisions") : _this3.h["collisions"];
				var x = _this4.level.pxWid / _this4.gridWid;
				var isWalking4;
				if(x > .0) {
					var t = x + .5 | 0;
					isWalking4 = t < x ? t + 1 : t;
				} else if(x < .0) {
					var t1 = x - .5 | 0;
					isWalking4 = t1 < x ? t1 + 1 : t1;
				} else {
					isWalking4 = 0;
				}
				isWalking3 = cx < isWalking4;
			} else {
				isWalking3 = false;
			}
			if(isWalking3 && cy >= 0) {
				var _this5 = _this2.data.layersByName;
				var _this6 = __map_reserved["collisions"] != null ? _this5.getReserved("collisions") : _this5.h["collisions"];
				var x1 = _this6.level.pxHei / _this6.gridHei;
				var isWalking5;
				if(x1 > .0) {
					var t2 = x1 + .5 | 0;
					isWalking5 = t2 < x1 ? t2 + 1 : t2;
				} else if(x1 < .0) {
					var t3 = x1 - .5 | 0;
					isWalking5 = t3 < x1 ? t3 + 1 : t3;
				} else {
					isWalking5 = 0;
				}
				isWalking2 = cy < isWalking5;
			} else {
				isWalking2 = false;
			}
			if(isWalking2) {
				var this1 = _this2.collMap;
				var _this7 = _this2.data.layersByName;
				var _this8 = __map_reserved["collisions"] != null ? _this7.getReserved("collisions") : _this7.h["collisions"];
				var x2 = _this8.level.pxWid / _this8.gridWid;
				var key;
				if(x2 > .0) {
					var t4 = x2 + .5 | 0;
					key = t4 < x2 ? t4 + 1 : t4;
				} else if(x2 < .0) {
					var t5 = x2 - .5 | 0;
					key = t5 < x2 ? t5 + 1 : t5;
				} else {
					key = 0;
				}
				isWalking1 = this1.h[cx + cy * key] == true;
			} else {
				isWalking1 = true;
			}
			if(isWalking1 && this.yr == 1 && this.dy >= 0) {
				var x3 = this.dx + this.bdx;
				isWalking = (x3 < 0 ? -x3 : x3) >= 0.1;
			} else {
				isWalking = false;
			}
			var _g = this.gun;
			var v = isWalking ? -2 + Math.cos(Game.ME.ftime * 0.2) * 3 : 0;
			_g.posChanged = true;
			_g.x += v;
			var _g1 = this.gun;
			var v1;
			if(isWalking) {
				var x4 = Math.sin(0.2 + Game.ME.ftime * 0.3);
				v1 = x4 < 0 ? -x4 : x4;
			} else {
				v1 = 0;
			}
			_g1.posChanged = true;
			_g1.y += v1;
			var _this9 = this.gun;
			_this9.posChanged = true;
			_this9.rotation = 0;
			if(Main.ME.options.gunAiming) {
				if(this.cd.fastCheck.h.hasOwnProperty(25165824)) {
					var _this10 = this.gun;
					var v2 = -0.15 * this.cd._getRatio(25165824);
					_this10.posChanged = true;
					_this10.rotation = v2;
					var _g2 = this.gun;
					var v3 = _g2.x - 4 * this.cd._getRatio(25165824);
					_g2.posChanged = true;
					_g2.x = v3;
					var _g3 = this.gun;
					_g3.posChanged = true;
					_g3.y -= 2;
				} else if(this.isChargingAction("shoot") || this.cd.fastCheck.h.hasOwnProperty(29360128) || this.burstCount > 0) {
					var _g4 = this.gun;
					var v4 = _g4.x + (3 - this.getChargeRatio("shoot"));
					_g4.posChanged = true;
					_g4.x = v4;
					var _g5 = this.gun;
					var v5 = _g5.y + (-1 - this.getChargeRatio("shoot"));
					_g5.posChanged = true;
					_g5.y = v5;
				} else {
					var _g6 = this.gun;
					_g6.posChanged = true;
					_g6.y += 2;
					var _this11 = this.gun;
					_this11.posChanged = true;
					_this11.rotation = 0.4;
				}
			}
		}
	}
	,shoot: function() {
		if(Main.ME.options.camShakes) {
			var _this = Game.ME.camera;
			_this.bumpOffX += -this.dir * 2;
			_this.bumpOffY += 0;
		}
		if(Main.ME.options.flashes) {
			Game.ME.fx.flashBangS(16763904,0.04,0.1);
		}
		if(Main.ME.options.heroSquashAndStrech) {
			this.skewX = 1.2;
			this.skewY = 0.9;
		}
		if(Main.ME.options.physicalReactions) {
			var sign = null;
			if(sign == null) {
				sign = false;
			}
			this.dx += -this.dir * (sign ? Math.random() * 0.01 * (Std.random(2) * 2 - 1) : Math.random() * 0.01);
			var sign1 = null;
			if(sign1 == null) {
				sign1 = false;
			}
			this.animOffsetX += -this.dir * (sign1 ? (1 + Math.random() * 2) * (Std.random(2) * 2 - 1) : 1 + Math.random() * 2);
		}
		var sign2 = true;
		if(sign2 == null) {
			sign2 = false;
		}
		var b = new en_Bullet(this,sign2 ? Math.random() * (Std.random(2) * 2 - 1) : Math.random());
		b.speed = 1;
		var _this1 = this.cd;
		var frames = 0.1 * this.cd.baseFps;
		var allowLower = true;
		var onComplete = null;
		if(allowLower == null) {
			allowLower = true;
		}
		frames = Math.floor(frames * 1000) / 1000;
		var cur = _this1._getCdObject(25165824);
		if(!(cur != null && frames < cur.frames && !allowLower)) {
			if(frames <= 0) {
				if(cur != null) {
					HxOverrides.remove(_this1.cdList,cur);
					cur.frames = 0;
					cur.cb = null;
					_this1.fastCheck.remove(cur.k);
				}
			} else {
				_this1.fastCheck.h[25165824] = true;
				if(cur != null) {
					cur.frames = frames;
				} else {
					_this1.cdList.push(new dn__$Cooldown_CdInst(25165824,frames));
				}
			}
			if(onComplete != null) {
				if(frames <= 0) {
					onComplete();
				} else {
					var cd = _this1._getCdObject(25165824);
					if(cd == null) {
						throw new js__$Boot_HaxeError("cannot bind onComplete(" + 25165824 + "): cooldown " + 25165824 + " isn't running");
					}
					cd.cb = onComplete;
				}
			}
		}
		var _this2 = this.cd;
		var _this3 = this.cd;
		var s;
		if(this.isAlive()) {
			var cd1 = this.cd._getCdObject(20971520);
			s = (cd1 == null ? 0 : cd1.frames) / this.cd.baseFps;
		} else {
			s = 0.;
		}
		var frames1 = s * _this3.baseFps;
		var allowLower1 = true;
		var onComplete1 = null;
		if(allowLower1 == null) {
			allowLower1 = true;
		}
		frames1 = Math.floor(frames1 * 1000) / 1000;
		var cur1 = _this2._getCdObject(29360128);
		if(!(cur1 != null && frames1 < cur1.frames && !allowLower1)) {
			if(frames1 <= 0) {
				if(cur1 != null) {
					HxOverrides.remove(_this2.cdList,cur1);
					cur1.frames = 0;
					cur1.cb = null;
					_this2.fastCheck.remove(cur1.k);
				}
			} else {
				_this2.fastCheck.h[29360128] = true;
				if(cur1 != null) {
					cur1.frames = frames1;
				} else {
					_this2.cdList.push(new dn__$Cooldown_CdInst(29360128,frames1));
				}
			}
			if(onComplete1 != null) {
				if(frames1 <= 0) {
					onComplete1();
				} else {
					var cd2 = _this2._getCdObject(29360128);
					if(cd2 == null) {
						throw new js__$Boot_HaxeError("cannot bind onComplete(" + 29360128 + "): cooldown " + 29360128 + " isn't running");
					}
					cd2.cb = onComplete1;
				}
			}
		}
		if(Main.ME.options.cartridges) {
			Game.ME.fx.cartridge((this.cx + this.xr) * Const.GRID,(this.cy + this.yr) * Const.GRID - this.hei * 0.5,-this.dir);
		}
		if(Main.ME.options.gunShotFx) {
			Game.ME.fx.gunShot((this.cx + this.xr) * Const.GRID + this.dir * 8,(this.cy + this.yr) * Const.GRID - this.hei * 0.5 - 1,this.dir);
		}
	}
	,burstCount: null
	,update: function() {
		var _gthis = this;
		Entity.prototype.update.call(this);
		var _this = Game.ME.level;
		var cx = this.cx;
		var cy = this.cy + 1;
		var tmp;
		var tmp1;
		var tmp2;
		if(cx >= 0) {
			var _this1 = _this.data.layersByName;
			var _this2 = __map_reserved["collisions"] != null ? _this1.getReserved("collisions") : _this1.h["collisions"];
			var x = _this2.level.pxWid / _this2.gridWid;
			var tmp3;
			if(x > .0) {
				var t = x + .5 | 0;
				tmp3 = t < x ? t + 1 : t;
			} else if(x < .0) {
				var t1 = x - .5 | 0;
				tmp3 = t1 < x ? t1 + 1 : t1;
			} else {
				tmp3 = 0;
			}
			tmp2 = cx < tmp3;
		} else {
			tmp2 = false;
		}
		if(tmp2 && cy >= 0) {
			var _this3 = _this.data.layersByName;
			var _this4 = __map_reserved["collisions"] != null ? _this3.getReserved("collisions") : _this3.h["collisions"];
			var x1 = _this4.level.pxHei / _this4.gridHei;
			var tmp4;
			if(x1 > .0) {
				var t2 = x1 + .5 | 0;
				tmp4 = t2 < x1 ? t2 + 1 : t2;
			} else if(x1 < .0) {
				var t3 = x1 - .5 | 0;
				tmp4 = t3 < x1 ? t3 + 1 : t3;
			} else {
				tmp4 = 0;
			}
			tmp1 = cy < tmp4;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			var this1 = _this.collMap;
			var _this5 = _this.data.layersByName;
			var _this6 = __map_reserved["collisions"] != null ? _this5.getReserved("collisions") : _this5.h["collisions"];
			var x2 = _this6.level.pxWid / _this6.gridWid;
			var key;
			if(x2 > .0) {
				var t4 = x2 + .5 | 0;
				key = t4 < x2 ? t4 + 1 : t4;
			} else if(x2 < .0) {
				var t5 = x2 - .5 | 0;
				key = t5 < x2 ? t5 + 1 : t5;
			} else {
				key = 0;
			}
			tmp = this1.h[cx + cy * key] == true;
		} else {
			tmp = true;
		}
		if(tmp && this.yr == 1 && this.dy >= 0) {
			var _this7 = this.cd;
			var frames = 2 * this.cd.baseFps;
			var allowLower = true;
			var onComplete = null;
			if(allowLower == null) {
				allowLower = true;
			}
			frames = Math.floor(frames * 1000) / 1000;
			var cur = _this7._getCdObject(33554432);
			if(!(cur != null && frames < cur.frames && !allowLower)) {
				if(frames <= 0) {
					if(cur != null) {
						HxOverrides.remove(_this7.cdList,cur);
						cur.frames = 0;
						cur.cb = null;
						_this7.fastCheck.remove(cur.k);
					}
				} else {
					_this7.fastCheck.h[33554432] = true;
					if(cur != null) {
						cur.frames = frames;
					} else {
						_this7.cdList.push(new dn__$Cooldown_CdInst(33554432,frames));
					}
				}
				if(onComplete != null) {
					if(frames <= 0) {
						onComplete();
					} else {
						var cd = _this7._getCdObject(33554432);
						if(cd == null) {
							throw new js__$Boot_HaxeError("cannot bind onComplete(" + 33554432 + "): cooldown " + 33554432 + " isn't running");
						}
						cd.cb = onComplete;
					}
				}
			}
		}
		var _this8 = this.ca;
		var k = 18;
		var tmp5;
		if(!(_this8.manualLock || _this8.parent.isLocked() || _this8.parent.exclusiveId != null && _this8.parent.exclusiveId != _this8.id || Date.now() / 1000 < _this8.parent.suspendTimer)) {
			var tmp6;
			var tmp7;
			var k1 = _this8.parent.primary.h[k];
			if(!(k1 != null && !(_this8.manualLock || _this8.parent.isLocked() || _this8.parent.exclusiveId != null && _this8.parent.exclusiveId != _this8.id || Date.now() / 1000 < _this8.parent.suspendTimer) && hxd_Key.isDown(k1))) {
				var k2 = _this8.parent.secondary.h[k];
				tmp7 = k2 != null && !(_this8.manualLock || _this8.parent.isLocked() || _this8.parent.exclusiveId != null && _this8.parent.exclusiveId != _this8.id || Date.now() / 1000 < _this8.parent.suspendTimer) && hxd_Key.isDown(k2);
			} else {
				tmp7 = true;
			}
			if(!tmp7) {
				var k3 = _this8.parent.third.h[k];
				tmp6 = k3 != null && !(_this8.manualLock || _this8.parent.isLocked() || _this8.parent.exclusiveId != null && _this8.parent.exclusiveId != _this8.id || Date.now() / 1000 < _this8.parent.suspendTimer) && hxd_Key.isDown(k3);
			} else {
				tmp6 = true;
			}
			if(!tmp6) {
				var _this9 = _this8.parent.gc;
				tmp5 = _this9.device != null && _this9.toggles[k] > 0;
			} else {
				tmp5 = true;
			}
		} else {
			tmp5 = false;
		}
		if(tmp5) {
			this.dir = 1;
		} else {
			var _this10 = this.ca;
			var k4 = 17;
			var tmp8;
			if(!(_this10.manualLock || _this10.parent.isLocked() || _this10.parent.exclusiveId != null && _this10.parent.exclusiveId != _this10.id || Date.now() / 1000 < _this10.parent.suspendTimer)) {
				var tmp9;
				var tmp10;
				var k5 = _this10.parent.primary.h[k4];
				if(!(k5 != null && !(_this10.manualLock || _this10.parent.isLocked() || _this10.parent.exclusiveId != null && _this10.parent.exclusiveId != _this10.id || Date.now() / 1000 < _this10.parent.suspendTimer) && hxd_Key.isDown(k5))) {
					var k6 = _this10.parent.secondary.h[k4];
					tmp10 = k6 != null && !(_this10.manualLock || _this10.parent.isLocked() || _this10.parent.exclusiveId != null && _this10.parent.exclusiveId != _this10.id || Date.now() / 1000 < _this10.parent.suspendTimer) && hxd_Key.isDown(k6);
				} else {
					tmp10 = true;
				}
				if(!tmp10) {
					var k7 = _this10.parent.third.h[k4];
					tmp9 = k7 != null && !(_this10.manualLock || _this10.parent.isLocked() || _this10.parent.exclusiveId != null && _this10.parent.exclusiveId != _this10.id || Date.now() / 1000 < _this10.parent.suspendTimer) && hxd_Key.isDown(k7);
				} else {
					tmp9 = true;
				}
				if(!tmp9) {
					var _this11 = _this10.parent.gc;
					tmp8 = _this11.device != null && _this11.toggles[k4] > 0;
				} else {
					tmp8 = true;
				}
			} else {
				tmp8 = false;
			}
			if(tmp8) {
				this.dir = -1;
			}
		}
		if(this.canAct()) {
			var spd = 0.011 * this.cd._getRatio(33554432);
			var _this12 = this.ca;
			var k8 = 18;
			var tmp11;
			if(!(_this12.manualLock || _this12.parent.isLocked() || _this12.parent.exclusiveId != null && _this12.parent.exclusiveId != _this12.id || Date.now() / 1000 < _this12.parent.suspendTimer)) {
				var tmp12;
				var tmp13;
				var k9 = _this12.parent.primary.h[k8];
				if(!(k9 != null && !(_this12.manualLock || _this12.parent.isLocked() || _this12.parent.exclusiveId != null && _this12.parent.exclusiveId != _this12.id || Date.now() / 1000 < _this12.parent.suspendTimer) && hxd_Key.isDown(k9))) {
					var k10 = _this12.parent.secondary.h[k8];
					tmp13 = k10 != null && !(_this12.manualLock || _this12.parent.isLocked() || _this12.parent.exclusiveId != null && _this12.parent.exclusiveId != _this12.id || Date.now() / 1000 < _this12.parent.suspendTimer) && hxd_Key.isDown(k10);
				} else {
					tmp13 = true;
				}
				if(!tmp13) {
					var k11 = _this12.parent.third.h[k8];
					tmp12 = k11 != null && !(_this12.manualLock || _this12.parent.isLocked() || _this12.parent.exclusiveId != null && _this12.parent.exclusiveId != _this12.id || Date.now() / 1000 < _this12.parent.suspendTimer) && hxd_Key.isDown(k11);
				} else {
					tmp12 = true;
				}
				if(!tmp12) {
					var _this13 = _this12.parent.gc;
					tmp11 = _this13.device != null && _this13.toggles[k8] > 0;
				} else {
					tmp11 = true;
				}
			} else {
				tmp11 = false;
			}
			if(tmp11) {
				this.dx += spd * Game.ME.tmod;
			} else {
				var _this14 = this.ca;
				var k12 = 17;
				var tmp14;
				if(!(_this14.manualLock || _this14.parent.isLocked() || _this14.parent.exclusiveId != null && _this14.parent.exclusiveId != _this14.id || Date.now() / 1000 < _this14.parent.suspendTimer)) {
					var tmp15;
					var tmp16;
					var k13 = _this14.parent.primary.h[k12];
					if(!(k13 != null && !(_this14.manualLock || _this14.parent.isLocked() || _this14.parent.exclusiveId != null && _this14.parent.exclusiveId != _this14.id || Date.now() / 1000 < _this14.parent.suspendTimer) && hxd_Key.isDown(k13))) {
						var k14 = _this14.parent.secondary.h[k12];
						tmp16 = k14 != null && !(_this14.manualLock || _this14.parent.isLocked() || _this14.parent.exclusiveId != null && _this14.parent.exclusiveId != _this14.id || Date.now() / 1000 < _this14.parent.suspendTimer) && hxd_Key.isDown(k14);
					} else {
						tmp16 = true;
					}
					if(!tmp16) {
						var k15 = _this14.parent.third.h[k12];
						tmp15 = k15 != null && !(_this14.manualLock || _this14.parent.isLocked() || _this14.parent.exclusiveId != null && _this14.parent.exclusiveId != _this14.id || Date.now() / 1000 < _this14.parent.suspendTimer) && hxd_Key.isDown(k15);
					} else {
						tmp15 = true;
					}
					if(!tmp15) {
						var _this15 = _this14.parent.gc;
						tmp14 = _this15.device != null && _this15.toggles[k12] > 0;
					} else {
						tmp14 = true;
					}
				} else {
					tmp14 = false;
				}
				if(tmp14) {
					this.dx -= spd * Game.ME.tmod;
				} else {
					this.dx *= Math.pow(this.frict,Game.ME.tmod);
				}
			}
			var tmp17;
			var _this16 = Game.ME.level;
			var cx1 = this.cx;
			var cy1 = this.cy + 1;
			var tmp18;
			var tmp19;
			var tmp20;
			if(cx1 >= 0) {
				var _this17 = _this16.data.layersByName;
				var _this18 = __map_reserved["collisions"] != null ? _this17.getReserved("collisions") : _this17.h["collisions"];
				var x3 = _this18.level.pxWid / _this18.gridWid;
				var tmp21;
				if(x3 > .0) {
					var t6 = x3 + .5 | 0;
					tmp21 = t6 < x3 ? t6 + 1 : t6;
				} else if(x3 < .0) {
					var t7 = x3 - .5 | 0;
					tmp21 = t7 < x3 ? t7 + 1 : t7;
				} else {
					tmp21 = 0;
				}
				tmp20 = cx1 < tmp21;
			} else {
				tmp20 = false;
			}
			if(tmp20 && cy1 >= 0) {
				var _this19 = _this16.data.layersByName;
				var _this20 = __map_reserved["collisions"] != null ? _this19.getReserved("collisions") : _this19.h["collisions"];
				var x4 = _this20.level.pxHei / _this20.gridHei;
				var tmp22;
				if(x4 > .0) {
					var t8 = x4 + .5 | 0;
					tmp22 = t8 < x4 ? t8 + 1 : t8;
				} else if(x4 < .0) {
					var t9 = x4 - .5 | 0;
					tmp22 = t9 < x4 ? t9 + 1 : t9;
				} else {
					tmp22 = 0;
				}
				tmp19 = cy1 < tmp22;
			} else {
				tmp19 = false;
			}
			if(tmp19) {
				var this2 = _this16.collMap;
				var _this21 = _this16.data.layersByName;
				var _this22 = __map_reserved["collisions"] != null ? _this21.getReserved("collisions") : _this21.h["collisions"];
				var x5 = _this22.level.pxWid / _this22.gridWid;
				var key1;
				if(x5 > .0) {
					var t10 = x5 + .5 | 0;
					key1 = t10 < x5 ? t10 + 1 : t10;
				} else if(x5 < .0) {
					var t11 = x5 - .5 | 0;
					key1 = t11 < x5 ? t11 + 1 : t11;
				} else {
					key1 = 0;
				}
				tmp18 = this2.h[cx1 + cy1 * key1] == true;
			} else {
				tmp18 = true;
			}
			if(!(tmp18 && this.yr == 1 && this.dy >= 0) && this.cd.fastCheck.h.hasOwnProperty(37748736)) {
				var _this23 = this.ca;
				var k16 = 0;
				if(!(_this23.manualLock || _this23.parent.isLocked() || _this23.parent.exclusiveId != null && _this23.parent.exclusiveId != _this23.id || Date.now() / 1000 < _this23.parent.suspendTimer)) {
					var tmp23;
					var tmp24;
					var k17 = _this23.parent.primary.h[k16];
					if(!(k17 != null && !(_this23.manualLock || _this23.parent.isLocked() || _this23.parent.exclusiveId != null && _this23.parent.exclusiveId != _this23.id || Date.now() / 1000 < _this23.parent.suspendTimer) && hxd_Key.isDown(k17))) {
						var k18 = _this23.parent.secondary.h[k16];
						tmp24 = k18 != null && !(_this23.manualLock || _this23.parent.isLocked() || _this23.parent.exclusiveId != null && _this23.parent.exclusiveId != _this23.id || Date.now() / 1000 < _this23.parent.suspendTimer) && hxd_Key.isDown(k18);
					} else {
						tmp24 = true;
					}
					if(!tmp24) {
						var k19 = _this23.parent.third.h[k16];
						tmp23 = k19 != null && !(_this23.manualLock || _this23.parent.isLocked() || _this23.parent.exclusiveId != null && _this23.parent.exclusiveId != _this23.id || Date.now() / 1000 < _this23.parent.suspendTimer) && hxd_Key.isDown(k19);
					} else {
						tmp23 = true;
					}
					if(!tmp23) {
						var _this24 = _this23.parent.gc;
						tmp17 = _this24.device != null && _this24.toggles[k16] > 0;
					} else {
						tmp17 = true;
					}
				} else {
					tmp17 = false;
				}
			} else {
				tmp17 = false;
			}
			if(tmp17) {
				this.dy += -0.08 * Game.ME.tmod;
			}
			var tmp25;
			var _this25 = Game.ME.level;
			var cx2 = this.cx;
			var cy2 = this.cy + 1;
			var tmp26;
			var tmp27;
			var tmp28;
			if(cx2 >= 0) {
				var _this26 = _this25.data.layersByName;
				var _this27 = __map_reserved["collisions"] != null ? _this26.getReserved("collisions") : _this26.h["collisions"];
				var x6 = _this27.level.pxWid / _this27.gridWid;
				var tmp29;
				if(x6 > .0) {
					var t12 = x6 + .5 | 0;
					tmp29 = t12 < x6 ? t12 + 1 : t12;
				} else if(x6 < .0) {
					var t13 = x6 - .5 | 0;
					tmp29 = t13 < x6 ? t13 + 1 : t13;
				} else {
					tmp29 = 0;
				}
				tmp28 = cx2 < tmp29;
			} else {
				tmp28 = false;
			}
			if(tmp28 && cy2 >= 0) {
				var _this28 = _this25.data.layersByName;
				var _this29 = __map_reserved["collisions"] != null ? _this28.getReserved("collisions") : _this28.h["collisions"];
				var x7 = _this29.level.pxHei / _this29.gridHei;
				var tmp30;
				if(x7 > .0) {
					var t14 = x7 + .5 | 0;
					tmp30 = t14 < x7 ? t14 + 1 : t14;
				} else if(x7 < .0) {
					var t15 = x7 - .5 | 0;
					tmp30 = t15 < x7 ? t15 + 1 : t15;
				} else {
					tmp30 = 0;
				}
				tmp27 = cy2 < tmp30;
			} else {
				tmp27 = false;
			}
			if(tmp27) {
				var this3 = _this25.collMap;
				var _this30 = _this25.data.layersByName;
				var _this31 = __map_reserved["collisions"] != null ? _this30.getReserved("collisions") : _this30.h["collisions"];
				var x8 = _this31.level.pxWid / _this31.gridWid;
				var key2;
				if(x8 > .0) {
					var t16 = x8 + .5 | 0;
					key2 = t16 < x8 ? t16 + 1 : t16;
				} else if(x8 < .0) {
					var t17 = x8 - .5 | 0;
					key2 = t17 < x8 ? t17 + 1 : t17;
				} else {
					key2 = 0;
				}
				tmp26 = this3.h[cx2 + cy2 * key2] == true;
			} else {
				tmp26 = true;
			}
			if(tmp26 && this.yr == 1 && this.dy >= 0) {
				var _this32 = this.ca;
				var k20 = 0;
				if(!(_this32.manualLock || _this32.parent.isLocked() || _this32.parent.exclusiveId != null && _this32.parent.exclusiveId != _this32.id || Date.now() / 1000 < _this32.parent.suspendTimer)) {
					var tmp31;
					var tmp32;
					var k21 = _this32.parent.primary.h[k20];
					if(!(k21 != null && !(_this32.manualLock || _this32.parent.isLocked() || _this32.parent.exclusiveId != null && _this32.parent.exclusiveId != _this32.id || Date.now() / 1000 < _this32.parent.suspendTimer) && hxd_Key.isPressed(k21))) {
						var k22 = _this32.parent.secondary.h[k20];
						tmp32 = k22 != null && !(_this32.manualLock || _this32.parent.isLocked() || _this32.parent.exclusiveId != null && _this32.parent.exclusiveId != _this32.id || Date.now() / 1000 < _this32.parent.suspendTimer) && hxd_Key.isPressed(k22);
					} else {
						tmp32 = true;
					}
					if(!tmp32) {
						var k23 = _this32.parent.third.h[k20];
						tmp31 = k23 != null && !(_this32.manualLock || _this32.parent.isLocked() || _this32.parent.exclusiveId != null && _this32.parent.exclusiveId != _this32.id || Date.now() / 1000 < _this32.parent.suspendTimer) && hxd_Key.isPressed(k23);
					} else {
						tmp31 = true;
					}
					tmp25 = tmp31 || _this32.parent.gc.isPressed(k20);
				} else {
					tmp25 = false;
				}
			} else {
				tmp25 = false;
			}
			if(tmp25) {
				this.dy = -0.16;
				var _this33 = this.cd;
				var frames1 = 0.1 * this.cd.baseFps;
				var allowLower1 = true;
				var onComplete1 = null;
				if(allowLower1 == null) {
					allowLower1 = true;
				}
				frames1 = Math.floor(frames1 * 1000) / 1000;
				var cur1 = _this33._getCdObject(37748736);
				if(!(cur1 != null && frames1 < cur1.frames && !allowLower1)) {
					if(frames1 <= 0) {
						if(cur1 != null) {
							HxOverrides.remove(_this33.cdList,cur1);
							cur1.frames = 0;
							cur1.cb = null;
							_this33.fastCheck.remove(cur1.k);
						}
					} else {
						_this33.fastCheck.h[37748736] = true;
						if(cur1 != null) {
							cur1.frames = frames1;
						} else {
							_this33.cdList.push(new dn__$Cooldown_CdInst(37748736,frames1));
						}
					}
					if(onComplete1 != null) {
						if(frames1 <= 0) {
							onComplete1();
						} else {
							var cd1 = _this33._getCdObject(37748736);
							if(cd1 == null) {
								throw new js__$Boot_HaxeError("cannot bind onComplete(" + 37748736 + "): cooldown " + 37748736 + " isn't running");
							}
							cd1.cb = onComplete1;
						}
					}
				}
			}
			var tmp33;
			if(this.burstCount <= 0) {
				var _this34 = this.ca;
				var k24 = 2;
				var tmp34;
				if(!(_this34.manualLock || _this34.parent.isLocked() || _this34.parent.exclusiveId != null && _this34.parent.exclusiveId != _this34.id || Date.now() / 1000 < _this34.parent.suspendTimer)) {
					var tmp35;
					var tmp36;
					var k25 = _this34.parent.primary.h[k24];
					if(!(k25 != null && !(_this34.manualLock || _this34.parent.isLocked() || _this34.parent.exclusiveId != null && _this34.parent.exclusiveId != _this34.id || Date.now() / 1000 < _this34.parent.suspendTimer) && hxd_Key.isDown(k25))) {
						var k26 = _this34.parent.secondary.h[k24];
						tmp36 = k26 != null && !(_this34.manualLock || _this34.parent.isLocked() || _this34.parent.exclusiveId != null && _this34.parent.exclusiveId != _this34.id || Date.now() / 1000 < _this34.parent.suspendTimer) && hxd_Key.isDown(k26);
					} else {
						tmp36 = true;
					}
					if(!tmp36) {
						var k27 = _this34.parent.third.h[k24];
						tmp35 = k27 != null && !(_this34.manualLock || _this34.parent.isLocked() || _this34.parent.exclusiveId != null && _this34.parent.exclusiveId != _this34.id || Date.now() / 1000 < _this34.parent.suspendTimer) && hxd_Key.isDown(k27);
					} else {
						tmp35 = true;
					}
					if(!tmp35) {
						var _this35 = _this34.parent.gc;
						tmp34 = _this35.device != null && _this35.toggles[k24] > 0;
					} else {
						tmp34 = true;
					}
				} else {
					tmp34 = false;
				}
				if(!tmp34) {
					var _this36 = this.ca;
					var k28 = 7;
					if(!(_this36.manualLock || _this36.parent.isLocked() || _this36.parent.exclusiveId != null && _this36.parent.exclusiveId != _this36.id || Date.now() / 1000 < _this36.parent.suspendTimer)) {
						var tmp37;
						var tmp38;
						var k29 = _this36.parent.primary.h[k28];
						if(!(k29 != null && !(_this36.manualLock || _this36.parent.isLocked() || _this36.parent.exclusiveId != null && _this36.parent.exclusiveId != _this36.id || Date.now() / 1000 < _this36.parent.suspendTimer) && hxd_Key.isDown(k29))) {
							var k30 = _this36.parent.secondary.h[k28];
							tmp38 = k30 != null && !(_this36.manualLock || _this36.parent.isLocked() || _this36.parent.exclusiveId != null && _this36.parent.exclusiveId != _this36.id || Date.now() / 1000 < _this36.parent.suspendTimer) && hxd_Key.isDown(k30);
						} else {
							tmp38 = true;
						}
						if(!tmp38) {
							var k31 = _this36.parent.third.h[k28];
							tmp37 = k31 != null && !(_this36.manualLock || _this36.parent.isLocked() || _this36.parent.exclusiveId != null && _this36.parent.exclusiveId != _this36.id || Date.now() / 1000 < _this36.parent.suspendTimer) && hxd_Key.isDown(k31);
						} else {
							tmp37 = true;
						}
						if(!tmp37) {
							var _this37 = _this36.parent.gc;
							tmp33 = _this37.device != null && _this37.toggles[k28] > 0;
						} else {
							tmp33 = true;
						}
					} else {
						tmp33 = false;
					}
				} else {
					tmp33 = true;
				}
			} else {
				tmp33 = false;
			}
			if(tmp33 && !this.cd.fastCheck.h.hasOwnProperty(41943040)) {
				this.chargeAction("shoot",Main.ME.options.gunAiming ? 0.35 : 0.,function() {
					_gthis.burstCount = 4;
				});
			}
			if(this.burstCount > 0) {
				this.burstCount--;
				this.shoot();
				this.lockS(0.05);
				if(this.burstCount <= 0 && !Main.ME.options.gunAiming) {
					this.lockS(0.35);
				}
			}
		}
	}
	,__class__: en_Hero
});
var en_Mob = function(x,y) {
	this.life = 10;
	Entity.call(this,x,y);
	en_Mob.ALL.push(this);
	var g = new h2d_Graphics(this.spr);
	g.beginFill(16711680);
	g.drawRect(-this.radius,-this.hei,this.radius * 2,this.hei);
};
$hxClasses["en.Mob"] = en_Mob;
en_Mob.__name__ = "en.Mob";
en_Mob.__super__ = Entity;
en_Mob.prototype = $extend(Entity.prototype,{
	life: null
	,dispose: function() {
		Entity.prototype.dispose.call(this);
		HxOverrides.remove(en_Mob.ALL,this);
	}
	,isAlive: function() {
		if(Entity.prototype.isAlive.call(this)) {
			return this.life > 0;
		} else {
			return false;
		}
	}
	,hit: function(dmg,impactDir) {
		this.life -= dmg;
		if(Main.ME.options.mobSquashAndStrech) {
			this.skewX = 0.8;
			this.skewY = 1.25;
		}
		if(Main.ME.options.physicalReactions) {
			var _this = this.cd;
			var frames = 0.4 * this.cd.baseFps;
			var tmp;
			if(_this.fastCheck.h.hasOwnProperty(0)) {
				tmp = true;
			} else {
				var frames1 = frames;
				var onComplete = null;
				frames1 = Math.floor(frames1 * 1000) / 1000;
				var cur = _this._getCdObject(0);
				if(!(cur != null && frames1 < cur.frames && false)) {
					if(frames1 <= 0) {
						if(cur != null) {
							HxOverrides.remove(_this.cdList,cur);
							cur.frames = 0;
							cur.cb = null;
							_this.fastCheck.remove(cur.k);
						}
					} else {
						_this.fastCheck.h[0] = true;
						if(cur != null) {
							cur.frames = frames1;
						} else {
							_this.cdList.push(new dn__$Cooldown_CdInst(0,frames1));
						}
					}
					if(onComplete != null) {
						if(frames1 <= 0) {
							onComplete();
						} else {
							var cd = _this._getCdObject(0);
							if(cd == null) {
								throw new js__$Boot_HaxeError("cannot bind onComplete(" + 0 + "): cooldown " + 0 + " isn't running");
							}
							cd.cb = onComplete;
						}
					}
				}
				tmp = false;
			}
			if(!tmp) {
				var sign = null;
				if(sign == null) {
					sign = false;
				}
				this.bump(impactDir * (sign ? (0.06 + Math.random() * 0.010000000000000009) * (Std.random(2) * 2 - 1) : 0.06 + Math.random() * 0.010000000000000009),-0.05);
			} else {
				var sign1 = null;
				if(sign1 == null) {
					sign1 = false;
				}
				this.bump(impactDir * (sign1 ? (0.01 + Math.random() * 0.01) * (Std.random(2) * 2 - 1) : 0.01 + Math.random() * 0.01),0);
			}
		}
		if(Main.ME.options.blinkImpact) {
			this.blink(16773488);
		}
		if(this.life <= 0) {
			this.life = 0;
			this.onDie();
		}
	}
	,onDie: function() {
		if(!this.destroyed) {
			this.destroyed = true;
			Entity.GC.push(this);
		}
	}
	,__class__: en_Mob
});
var format_gif_Block = $hxEnums["format.gif.Block"] = { __ename__ : true, __constructs__ : ["BFrame","BExtension","BEOF"]
	,BFrame: ($_=function(frame) { return {_hx_index:0,frame:frame,__enum__:"format.gif.Block",toString:$estr}; },$_.__params__ = ["frame"],$_)
	,BExtension: ($_=function(extension) { return {_hx_index:1,extension:extension,__enum__:"format.gif.Block",toString:$estr}; },$_.__params__ = ["extension"],$_)
	,BEOF: {_hx_index:2,__enum__:"format.gif.Block",toString:$estr}
};
format_gif_Block.__empty_constructs__ = [format_gif_Block.BEOF];
var format_gif_Extension = $hxEnums["format.gif.Extension"] = { __ename__ : true, __constructs__ : ["EGraphicControl","EComment","EText","EApplicationExtension","EUnknown"]
	,EGraphicControl: ($_=function(gce) { return {_hx_index:0,gce:gce,__enum__:"format.gif.Extension",toString:$estr}; },$_.__params__ = ["gce"],$_)
	,EComment: ($_=function(text) { return {_hx_index:1,text:text,__enum__:"format.gif.Extension",toString:$estr}; },$_.__params__ = ["text"],$_)
	,EText: ($_=function(pte) { return {_hx_index:2,pte:pte,__enum__:"format.gif.Extension",toString:$estr}; },$_.__params__ = ["pte"],$_)
	,EApplicationExtension: ($_=function(ext) { return {_hx_index:3,ext:ext,__enum__:"format.gif.Extension",toString:$estr}; },$_.__params__ = ["ext"],$_)
	,EUnknown: ($_=function(id,data) { return {_hx_index:4,id:id,data:data,__enum__:"format.gif.Extension",toString:$estr}; },$_.__params__ = ["id","data"],$_)
};
format_gif_Extension.__empty_constructs__ = [];
var format_gif_ApplicationExtension = $hxEnums["format.gif.ApplicationExtension"] = { __ename__ : true, __constructs__ : ["AENetscapeLooping","AEUnknown"]
	,AENetscapeLooping: ($_=function(loops) { return {_hx_index:0,loops:loops,__enum__:"format.gif.ApplicationExtension",toString:$estr}; },$_.__params__ = ["loops"],$_)
	,AEUnknown: ($_=function(name,version,data) { return {_hx_index:1,name:name,version:version,data:data,__enum__:"format.gif.ApplicationExtension",toString:$estr}; },$_.__params__ = ["name","version","data"],$_)
};
format_gif_ApplicationExtension.__empty_constructs__ = [];
var format_gif_Version = $hxEnums["format.gif.Version"] = { __ename__ : true, __constructs__ : ["GIF87a","GIF89a","Unknown"]
	,GIF87a: {_hx_index:0,__enum__:"format.gif.Version",toString:$estr}
	,GIF89a: {_hx_index:1,__enum__:"format.gif.Version",toString:$estr}
	,Unknown: ($_=function(version) { return {_hx_index:2,version:version,__enum__:"format.gif.Version",toString:$estr}; },$_.__params__ = ["version"],$_)
};
format_gif_Version.__empty_constructs__ = [format_gif_Version.GIF87a,format_gif_Version.GIF89a];
var format_gif_DisposalMethod = $hxEnums["format.gif.DisposalMethod"] = { __ename__ : true, __constructs__ : ["UNSPECIFIED","NO_ACTION","FILL_BACKGROUND","RENDER_PREVIOUS","UNDEFINED"]
	,UNSPECIFIED: {_hx_index:0,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,NO_ACTION: {_hx_index:1,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,FILL_BACKGROUND: {_hx_index:2,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,RENDER_PREVIOUS: {_hx_index:3,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,UNDEFINED: ($_=function(index) { return {_hx_index:4,index:index,__enum__:"format.gif.DisposalMethod",toString:$estr}; },$_.__params__ = ["index"],$_)
};
format_gif_DisposalMethod.__empty_constructs__ = [format_gif_DisposalMethod.UNSPECIFIED,format_gif_DisposalMethod.NO_ACTION,format_gif_DisposalMethod.FILL_BACKGROUND,format_gif_DisposalMethod.RENDER_PREVIOUS];
var format_gif_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(false);
};
$hxClasses["format.gif.Reader"] = format_gif_Reader;
format_gif_Reader.__name__ = "format.gif.Reader";
format_gif_Reader.prototype = {
	i: null
	,read: function() {
		var b = 71;
		if(this.i.readByte() != b) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b1 = 73;
		if(this.i.readByte() != b1) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b2 = 70;
		if(this.i.readByte() != b2) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var gifVer = this.i.readString(3);
		var version = format_gif_Version.GIF89a;
		switch(gifVer) {
		case "87a":
			version = format_gif_Version.GIF87a;
			break;
		case "89a":
			version = format_gif_Version.GIF89a;
			break;
		default:
			version = format_gif_Version.Unknown(gifVer);
		}
		var width = this.i.readUInt16();
		var height = this.i.readUInt16();
		var packedField = this.i.readByte();
		var bgIndex = this.i.readByte();
		var pixelAspectRatio = this.i.readByte();
		if(pixelAspectRatio != 0) {
			pixelAspectRatio = (pixelAspectRatio + 15) / 64;
		} else {
			pixelAspectRatio = 1;
		}
		var lsd = { width : width, height : height, hasGlobalColorTable : (packedField & 128) == 128, colorResolution : (packedField & 112) >>> 4, sorted : (packedField & 8) == 8, globalColorTableSize : 2 << (packedField & 7), backgroundColorIndex : bgIndex, pixelAspectRatio : pixelAspectRatio};
		var gct = null;
		if(lsd.hasGlobalColorTable) {
			gct = this.readColorTable(lsd.globalColorTableSize);
		}
		var blocks = new haxe_ds_List();
		while(true) {
			var b3 = this.readBlock();
			blocks.add(b3);
			if(b3 == format_gif_Block.BEOF) {
				break;
			}
		}
		return { version : version, logicalScreenDescriptor : lsd, globalColorTable : gct, blocks : blocks};
	}
	,readBlock: function() {
		var blockID = this.i.readByte();
		switch(blockID) {
		case 33:
			return this.readExtension();
		case 44:
			return this.readImage();
		case 59:
			return format_gif_Block.BEOF;
		}
		return format_gif_Block.BEOF;
	}
	,readImage: function() {
		var x = this.i.readUInt16();
		var y = this.i.readUInt16();
		var width = this.i.readUInt16();
		var height = this.i.readUInt16();
		var packed = this.i.readByte();
		var localColorTable = (packed & 128) == 128;
		var interlaced = (packed & 64) == 64;
		var sorted = (packed & 32) == 32;
		var localColorTableSize = 2 << (packed & 7);
		var lct = null;
		if(localColorTable) {
			lct = this.readColorTable(localColorTableSize);
		}
		return format_gif_Block.BFrame({ x : x, y : y, width : width, height : height, localColorTable : localColorTable, interlaced : interlaced, sorted : sorted, localColorTableSize : localColorTableSize, pixels : this.readPixels(width,height,interlaced), colorTable : lct});
	}
	,readPixels: function(width,height,interlaced) {
		var input = this.i;
		var pixelsCount = width * height;
		var pixels = new haxe_io_Bytes(new ArrayBuffer(pixelsCount));
		var minCodeSize = input.readByte();
		var blockSize = input.readByte() - 1;
		var bits = input.readByte();
		var bitsCount = 8;
		var clearCode = 1 << minCodeSize;
		var eoiCode = clearCode + 1;
		var codeSize = minCodeSize + 1;
		var codeSizeLimit = 1 << codeSize;
		var codeMask = codeSizeLimit - 1;
		var baseDict = [];
		var _g = 0;
		var _g1 = clearCode;
		while(_g < _g1) {
			var i = _g++;
			baseDict[i] = [i];
		}
		var dict = [];
		var dictLen = clearCode + 2;
		var newRecord;
		var i1 = 0;
		var code = 0;
		var last;
		while(i1 < pixelsCount) {
			last = code;
			while(bitsCount < codeSize) {
				if(blockSize == 0) {
					break;
				}
				bits |= input.readByte() << bitsCount;
				bitsCount += 8;
				--blockSize;
				if(blockSize == 0) {
					blockSize = input.readByte();
				}
			}
			code = bits & codeMask;
			bits >>= codeSize;
			bitsCount -= codeSize;
			if(code == clearCode) {
				dict = baseDict.slice();
				dictLen = clearCode + 2;
				codeSize = minCodeSize + 1;
				codeSizeLimit = 1 << codeSize;
				codeMask = codeSizeLimit - 1;
				continue;
			}
			if(code == eoiCode) {
				break;
			}
			if(code < dictLen) {
				if(last != clearCode) {
					newRecord = dict[last].slice();
					newRecord.push(dict[code][0]);
					dict[dictLen++] = newRecord;
				}
			} else {
				if(code != dictLen) {
					throw new js__$Boot_HaxeError("Invalid LZW code. Excepted: " + dictLen + ", got: " + code);
				}
				newRecord = dict[last].slice();
				newRecord.push(newRecord[0]);
				dict[dictLen++] = newRecord;
			}
			newRecord = dict[code];
			var _g2 = 0;
			while(_g2 < newRecord.length) {
				var item = newRecord[_g2];
				++_g2;
				pixels.b[i1++] = item;
			}
			if(dictLen == codeSizeLimit && codeSize < 12) {
				++codeSize;
				codeSizeLimit = 1 << codeSize;
				codeMask = codeSizeLimit - 1;
			}
		}
		while(blockSize > 0) {
			input.readByte();
			--blockSize;
			if(blockSize == 0) {
				blockSize = input.readByte();
			}
		}
		while(i1 < pixelsCount) pixels.b[i1++] = 0;
		if(interlaced) {
			var buffer = new haxe_io_Bytes(new ArrayBuffer(pixelsCount));
			var offset = this.deinterlace(pixels,buffer,8,0,0,width,height);
			offset = this.deinterlace(pixels,buffer,8,4,offset,width,height);
			offset = this.deinterlace(pixels,buffer,4,2,offset,width,height);
			this.deinterlace(pixels,buffer,2,1,offset,width,height);
			pixels = buffer;
		}
		return pixels;
	}
	,deinterlace: function(input,output,step,y,offset,width,height) {
		while(y < height) {
			output.blit(y * width,input,offset,width);
			offset += width;
			y += step;
		}
		return offset;
	}
	,readExtension: function() {
		var subId = this.i.readByte();
		switch(subId) {
		case 1:
			if(this.i.readByte() != 12) {
				throw new js__$Boot_HaxeError("Incorrect size of Plain Text Extension introducer block.");
			}
			var tmp = this.i.readUInt16();
			var tmp1 = this.i.readUInt16();
			var tmp2 = this.i.readUInt16();
			var tmp3 = this.i.readUInt16();
			var tmp4 = this.i.readByte();
			var tmp5 = this.i.readByte();
			var tmp6 = this.i.readByte();
			var tmp7 = this.i.readByte();
			var buffer = new haxe_io_BytesOutput();
			var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
			var len = this.i.readByte();
			while(len != 0) {
				this.i.readBytes(bytes,0,len);
				buffer.writeBytes(bytes,0,len);
				len = this.i.readByte();
			}
			buffer.flush();
			bytes = buffer.getBytes();
			buffer.close();
			return format_gif_Block.BExtension(format_gif_Extension.EText({ textGridX : tmp, textGridY : tmp1, textGridWidth : tmp2, textGridHeight : tmp3, charCellWidth : tmp4, charCellHeight : tmp5, textForegroundColorIndex : tmp6, textBackgroundColorIndex : tmp7, text : bytes.toString()}));
		case 249:
			if(this.i.readByte() != 4) {
				throw new js__$Boot_HaxeError("Incorrect Graphic Control Extension block size!");
			}
			var packed = this.i.readByte();
			var disposalMethod;
			switch((packed & 28) >> 2) {
			case 0:
				disposalMethod = format_gif_DisposalMethod.UNSPECIFIED;
				break;
			case 1:
				disposalMethod = format_gif_DisposalMethod.NO_ACTION;
				break;
			case 2:
				disposalMethod = format_gif_DisposalMethod.FILL_BACKGROUND;
				break;
			case 3:
				disposalMethod = format_gif_DisposalMethod.RENDER_PREVIOUS;
				break;
			default:
				disposalMethod = format_gif_DisposalMethod.UNDEFINED((packed & 28) >> 2);
			}
			var b = format_gif_Block.BExtension(format_gif_Extension.EGraphicControl({ disposalMethod : disposalMethod, userInput : (packed & 2) == 2, hasTransparentColor : (packed & 1) == 1, delay : this.i.readUInt16(), transparentIndex : this.i.readByte()}));
			this.i.readByte();
			return b;
		case 254:
			var buffer1 = new haxe_io_BytesOutput();
			var bytes1 = new haxe_io_Bytes(new ArrayBuffer(255));
			var len1 = this.i.readByte();
			while(len1 != 0) {
				this.i.readBytes(bytes1,0,len1);
				buffer1.writeBytes(bytes1,0,len1);
				len1 = this.i.readByte();
			}
			buffer1.flush();
			bytes1 = buffer1.getBytes();
			buffer1.close();
			return format_gif_Block.BExtension(format_gif_Extension.EComment(bytes1.toString()));
		case 255:
			return this.readApplicationExtension();
		default:
			var buffer2 = new haxe_io_BytesOutput();
			var bytes2 = new haxe_io_Bytes(new ArrayBuffer(255));
			var len2 = this.i.readByte();
			while(len2 != 0) {
				this.i.readBytes(bytes2,0,len2);
				buffer2.writeBytes(bytes2,0,len2);
				len2 = this.i.readByte();
			}
			buffer2.flush();
			bytes2 = buffer2.getBytes();
			buffer2.close();
			return format_gif_Block.BExtension(format_gif_Extension.EUnknown(subId,bytes2));
		}
	}
	,readApplicationExtension: function() {
		if(this.i.readByte() != 11) {
			throw new js__$Boot_HaxeError("Incorrect size of Application Extension introducer block.");
		}
		var name = this.i.readString(8);
		var version = this.i.readString(3);
		var buffer = new haxe_io_BytesOutput();
		var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
		var len = this.i.readByte();
		while(len != 0) {
			this.i.readBytes(bytes,0,len);
			buffer.writeBytes(bytes,0,len);
			len = this.i.readByte();
		}
		buffer.flush();
		bytes = buffer.getBytes();
		buffer.close();
		var data = bytes;
		if(name == "NETSCAPE" && version == "2.0" && data.b[0] == 1) {
			return format_gif_Block.BExtension(format_gif_Extension.EApplicationExtension(format_gif_ApplicationExtension.AENetscapeLooping(data.b[1] | data.b[2] << 8)));
		}
		return format_gif_Block.BExtension(format_gif_Extension.EApplicationExtension(format_gif_ApplicationExtension.AEUnknown(name,version,data)));
	}
	,readColorTable: function(size) {
		size *= 3;
		var output = new haxe_io_Bytes(new ArrayBuffer(size));
		var c = 0;
		while(c < size) {
			var v = this.i.readByte();
			output.b[c] = v;
			var v1 = this.i.readByte();
			output.b[c + 1] = v1;
			var v2 = this.i.readByte();
			output.b[c + 2] = v2;
			c += 3;
		}
		return output;
	}
	,__class__: format_gif_Reader
};
var format_gif_Tools = function() { };
$hxClasses["format.gif.Tools"] = format_gif_Tools;
format_gif_Tools.__name__ = "format.gif.Tools";
format_gif_Tools.extractFullBGRA = function(data,frameIndex) {
	var gce = null;
	var frameCaret = 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(data.logicalScreenDescriptor.width * data.logicalScreenDescriptor.height * 4));
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		switch(block._hx_index) {
		case 0:
			var frame = block.frame;
			var ct = frame.localColorTable ? frame.colorTable : data.globalColorTable;
			if(ct == null) {
				throw new js__$Boot_HaxeError("Frame does not have a color table!");
			}
			var transparentIndex = gce != null && gce.hasTransparentColor ? gce.transparentIndex * 3 : -1;
			var pixels = frame.pixels;
			var x = 0;
			var writeCaret = (frame.y * data.logicalScreenDescriptor.width + frame.x) * 4;
			var lineSkip = (data.logicalScreenDescriptor.width - frame.width) * 4 + 4;
			var disposalMethod = frameCaret != frameIndex && gce != null ? gce.disposalMethod : format_gif_DisposalMethod.NO_ACTION;
			switch(disposalMethod._hx_index) {
			case 2:
				var _g = 0;
				var _g1 = pixels.length;
				while(_g < _g1) {
					var i = _g++;
					bytes.b[writeCaret] = 0;
					bytes.b[writeCaret + 1] = 0;
					bytes.b[writeCaret + 2] = 0;
					bytes.b[writeCaret + 3] = 0;
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
				break;
			case 3:
				break;
			default:
				var _g2 = 0;
				var _g11 = pixels.length;
				while(_g2 < _g11) {
					var i1 = _g2++;
					var index = pixels.b[i1] * 3;
					if(transparentIndex != index) {
						bytes.b[writeCaret] = ct.b[index + 2];
						bytes.b[writeCaret + 1] = ct.b[index + 1];
						bytes.b[writeCaret + 2] = ct.b[index];
						bytes.b[writeCaret + 3] = 255;
					}
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
			}
			if(frameCaret == frameIndex) {
				return bytes;
			}
			++frameCaret;
			gce = null;
			break;
		case 1:
			var ext = block.extension;
			if(ext._hx_index == 0) {
				var g = ext.gce;
				gce = g;
			}
			break;
		default:
		}
	}
	return bytes;
};
var format_png_Color = $hxEnums["format.png.Color"] = { __ename__ : true, __constructs__ : ["ColGrey","ColTrue","ColIndexed"]
	,ColGrey: ($_=function(alpha) { return {_hx_index:0,alpha:alpha,__enum__:"format.png.Color",toString:$estr}; },$_.__params__ = ["alpha"],$_)
	,ColTrue: ($_=function(alpha) { return {_hx_index:1,alpha:alpha,__enum__:"format.png.Color",toString:$estr}; },$_.__params__ = ["alpha"],$_)
	,ColIndexed: {_hx_index:2,__enum__:"format.png.Color",toString:$estr}
};
format_png_Color.__empty_constructs__ = [format_png_Color.ColIndexed];
var format_png_Chunk = $hxEnums["format.png.Chunk"] = { __ename__ : true, __constructs__ : ["CEnd","CHeader","CData","CPalette","CUnknown"]
	,CEnd: {_hx_index:0,__enum__:"format.png.Chunk",toString:$estr}
	,CHeader: ($_=function(h) { return {_hx_index:1,h:h,__enum__:"format.png.Chunk",toString:$estr}; },$_.__params__ = ["h"],$_)
	,CData: ($_=function(b) { return {_hx_index:2,b:b,__enum__:"format.png.Chunk",toString:$estr}; },$_.__params__ = ["b"],$_)
	,CPalette: ($_=function(b) { return {_hx_index:3,b:b,__enum__:"format.png.Chunk",toString:$estr}; },$_.__params__ = ["b"],$_)
	,CUnknown: ($_=function(id,data) { return {_hx_index:4,id:id,data:data,__enum__:"format.png.Chunk",toString:$estr}; },$_.__params__ = ["id","data"],$_)
};
format_png_Chunk.__empty_constructs__ = [format_png_Chunk.CEnd];
var format_png_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(true);
	this.checkCRC = true;
};
$hxClasses["format.png.Reader"] = format_png_Reader;
format_png_Reader.__name__ = "format.png.Reader";
format_png_Reader.prototype = {
	i: null
	,checkCRC: null
	,read: function() {
		var b = 137;
		if(this.i.readByte() != b) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b1 = 80;
		if(this.i.readByte() != b1) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b2 = 78;
		if(this.i.readByte() != b2) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b3 = 71;
		if(this.i.readByte() != b3) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b4 = 13;
		if(this.i.readByte() != b4) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b5 = 10;
		if(this.i.readByte() != b5) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b6 = 26;
		if(this.i.readByte() != b6) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var b7 = 10;
		if(this.i.readByte() != b7) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var l = new haxe_ds_List();
		while(true) {
			var c = this.readChunk();
			l.add(c);
			if(c == format_png_Chunk.CEnd) {
				break;
			}
		}
		return l;
	}
	,readHeader: function(i) {
		i.set_bigEndian(true);
		var width = i.readInt32();
		var height = i.readInt32();
		var colbits = i.readByte();
		var color = i.readByte();
		var color1;
		switch(color) {
		case 0:
			color1 = format_png_Color.ColGrey(false);
			break;
		case 2:
			color1 = format_png_Color.ColTrue(false);
			break;
		case 3:
			color1 = format_png_Color.ColIndexed;
			break;
		case 4:
			color1 = format_png_Color.ColGrey(true);
			break;
		case 6:
			color1 = format_png_Color.ColTrue(true);
			break;
		default:
			throw new js__$Boot_HaxeError("Unknown color model " + color + ":" + colbits);
		}
		var compress = i.readByte();
		var filter = i.readByte();
		if(compress != 0 || filter != 0) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		var interlace = i.readByte();
		if(interlace != 0 && interlace != 1) {
			throw new js__$Boot_HaxeError("Invalid header");
		}
		return { width : width, height : height, colbits : colbits, color : color1, interlaced : interlace == 1};
	}
	,readChunk: function() {
		var dataLen = this.i.readInt32();
		var id = this.i.readString(4);
		var data = this.i.read(dataLen);
		var crc = this.i.readInt32();
		if(this.checkCRC) {
			var c_crc = -1;
			var tmp = (c_crc ^ HxOverrides.cca(id,0)) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp;
			var tmp1 = (c_crc ^ HxOverrides.cca(id,1)) & 255;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			tmp1 = tmp1 >>> 1 ^ -(tmp1 & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp1;
			var tmp2 = (c_crc ^ HxOverrides.cca(id,2)) & 255;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			tmp2 = tmp2 >>> 1 ^ -(tmp2 & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp2;
			var tmp3 = (c_crc ^ HxOverrides.cca(id,3)) & 255;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			tmp3 = tmp3 >>> 1 ^ -(tmp3 & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp3;
			var b = data.b.bufferValue;
			var _g = 0;
			var _g1 = data.length;
			while(_g < _g1) {
				var i = _g++;
				var tmp4 = (c_crc ^ b.bytes[i]) & 255;
				tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
				tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
				tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
				tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
				tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
				tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
				tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
				tmp4 = tmp4 >>> 1 ^ -(tmp4 & 1) & -306674912;
				c_crc = c_crc >>> 8 ^ tmp4;
			}
			if((c_crc ^ -1) != crc) {
				throw new js__$Boot_HaxeError("CRC check failure");
			}
		}
		switch(id) {
		case "IDAT":
			return format_png_Chunk.CData(data);
		case "IEND":
			return format_png_Chunk.CEnd;
		case "IHDR":
			return format_png_Chunk.CHeader(this.readHeader(new haxe_io_BytesInput(data)));
		case "PLTE":
			return format_png_Chunk.CPalette(data);
		default:
			return format_png_Chunk.CUnknown(id,data);
		}
	}
	,__class__: format_png_Reader
};
var format_png_Tools = function() { };
$hxClasses["format.png.Tools"] = format_png_Tools;
format_png_Tools.__name__ = "format.png.Tools";
format_png_Tools.getHeader = function(d) {
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 1) {
			var h = c.h;
			return h;
		}
	}
	throw new js__$Boot_HaxeError("Header not found");
};
format_png_Tools.getPalette = function(d) {
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 3) {
			var b = c.b;
			return b;
		}
	}
	return null;
};
format_png_Tools.extract32 = function(d,bytes,flipY) {
	var h = format_png_Tools.getHeader(d);
	var bgra = bytes == null ? new haxe_io_Bytes(new ArrayBuffer(h.width * h.height * 4)) : bytes;
	var data = null;
	var fullData = null;
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 2) {
			var b = c.b;
			if(fullData != null) {
				fullData.add(b);
			} else if(data == null) {
				data = b;
			} else {
				fullData = new haxe_io_BytesBuffer();
				fullData.add(data);
				fullData.add(b);
				data = null;
			}
		}
	}
	if(fullData != null) {
		data = fullData.getBytes();
	}
	if(data == null) {
		throw new js__$Boot_HaxeError("Data not found");
	}
	data = format_tools_Inflate.run(data);
	var r = 0;
	var w = 0;
	var lineDelta = 0;
	if(flipY) {
		lineDelta = -h.width * 8;
		w = (h.height - 1) * (h.width * 4);
	}
	var flipY1 = flipY ? -1 : 1;
	var _g1 = h.color;
	switch(_g1._hx_index) {
	case 0:
		var alpha = _g1.alpha;
		if(h.colbits != 8) {
			throw new js__$Boot_HaxeError("Unsupported color mode");
		}
		var width = h.width;
		var stride = (alpha ? 2 : 1) * width + 1;
		if(data.length < h.height * stride) {
			throw new js__$Boot_HaxeError("Not enough data");
		}
		var alphvaIdx = -1;
		if(!alpha) {
			var _g1_head = d.h;
			while(_g1_head != null) {
				var val1 = _g1_head.item;
				_g1_head = _g1_head.next;
				var t = val1;
				if(t._hx_index == 4) {
					if(t.id == "tRNS") {
						var data1 = t.data;
						if(data1.length >= 2) {
							alphvaIdx = data1.b[1];
						}
						break;
					}
				}
			}
		}
		var _g11 = 0;
		var _g2 = h.height;
		while(_g11 < _g2) {
			var y = _g11++;
			var f = data.b[r++];
			switch(f) {
			case 0:
				if(alpha) {
					var _g12 = 0;
					var _g21 = width;
					while(_g12 < _g21) {
						var x = _g12++;
						var v = data.b[r++];
						bgra.b[w++] = v;
						bgra.b[w++] = v;
						bgra.b[w++] = v;
						bgra.b[w++] = data.b[r++];
					}
				} else {
					var _g13 = 0;
					var _g22 = width;
					while(_g13 < _g22) {
						var x1 = _g13++;
						var v1 = data.b[r++];
						bgra.b[w++] = v1;
						bgra.b[w++] = v1;
						bgra.b[w++] = v1;
						bgra.b[w++] = v1 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 1:
				var cv = 0;
				var ca = 0;
				if(alpha) {
					var _g14 = 0;
					var _g23 = width;
					while(_g14 < _g23) {
						var x2 = _g14++;
						cv += data.b[r++];
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						ca += data.b[r++];
						bgra.b[w++] = ca;
					}
				} else {
					var _g15 = 0;
					var _g24 = width;
					while(_g15 < _g24) {
						var x3 = _g15++;
						cv += data.b[r++];
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						bgra.b[w++] = cv == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 2:
				var stride1 = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g16 = 0;
					var _g25 = width;
					while(_g16 < _g25) {
						var x4 = _g16++;
						var v2 = data.b[r++] + bgra.b[w - stride1];
						bgra.b[w++] = v2;
						bgra.b[w++] = v2;
						bgra.b[w++] = v2;
						bgra.b[w++] = data.b[r++] + bgra.b[w - stride1];
					}
				} else {
					var _g17 = 0;
					var _g26 = width;
					while(_g17 < _g26) {
						var x5 = _g17++;
						var v3 = data.b[r++] + bgra.b[w - stride1];
						bgra.b[w++] = v3;
						bgra.b[w++] = v3;
						bgra.b[w++] = v3;
						bgra.b[w++] = v3 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 3:
				var cv1 = 0;
				var ca1 = 0;
				var stride2 = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g18 = 0;
					var _g27 = width;
					while(_g18 < _g27) {
						var x6 = _g18++;
						cv1 = data.b[r++] + (cv1 + bgra.b[w - stride2] >> 1) & 255;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						ca1 = data.b[r++] + (ca1 + bgra.b[w - stride2] >> 1) & 255;
						bgra.b[w++] = ca1;
					}
				} else {
					var _g19 = 0;
					var _g28 = width;
					while(_g19 < _g28) {
						var x7 = _g19++;
						cv1 = data.b[r++] + (cv1 + bgra.b[w - stride2] >> 1) & 255;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 4:
				var stride3 = width * 4 * flipY1;
				var cv2 = 0;
				var ca2 = 0;
				if(alpha) {
					var _g110 = 0;
					var _g29 = width;
					while(_g110 < _g29) {
						var x8 = _g110++;
						var b1 = y == 0 ? 0 : bgra.b[w - stride3];
						var c1 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride3 - 4];
						var k = cv2 + b1 - c1;
						var pa = k - cv2;
						if(pa < 0) {
							pa = -pa;
						}
						var pb = k - b1;
						if(pb < 0) {
							pb = -pb;
						}
						var pc = k - c1;
						if(pc < 0) {
							pc = -pc;
						}
						var pos = r++;
						cv2 = (pa <= pb && pa <= pc ? cv2 : pb <= pc ? b1 : c1) + data.b[pos] & 255;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						var b2 = y == 0 ? 0 : bgra.b[w - stride3];
						var c2 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride3 - 4];
						var k1 = ca2 + b2 - c2;
						var pa1 = k1 - ca2;
						if(pa1 < 0) {
							pa1 = -pa1;
						}
						var pb1 = k1 - b2;
						if(pb1 < 0) {
							pb1 = -pb1;
						}
						var pc1 = k1 - c2;
						if(pc1 < 0) {
							pc1 = -pc1;
						}
						var pos1 = r++;
						ca2 = (pa1 <= pb1 && pa1 <= pc1 ? ca2 : pb1 <= pc1 ? b2 : c2) + data.b[pos1] & 255;
						bgra.b[w++] = ca2;
					}
				} else {
					var _g111 = 0;
					var _g210 = width;
					while(_g111 < _g210) {
						var x9 = _g111++;
						var b3 = y == 0 ? 0 : bgra.b[w - stride3];
						var c3 = x9 == 0 || y == 0 ? 0 : bgra.b[w - stride3 - 4];
						var k2 = cv2 + b3 - c3;
						var pa2 = k2 - cv2;
						if(pa2 < 0) {
							pa2 = -pa2;
						}
						var pb2 = k2 - b3;
						if(pb2 < 0) {
							pb2 = -pb2;
						}
						var pc2 = k2 - c3;
						if(pc2 < 0) {
							pc2 = -pc2;
						}
						var pos2 = r++;
						cv2 = (pa2 <= pb2 && pa2 <= pc2 ? cv2 : pb2 <= pc2 ? b3 : c3) + data.b[pos2] & 255;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid filter " + f);
			}
			w += lineDelta;
		}
		break;
	case 1:
		var alpha1 = _g1.alpha;
		if(h.colbits != 8) {
			throw new js__$Boot_HaxeError("Unsupported color mode");
		}
		var width1 = h.width;
		var stride4 = (alpha1 ? 4 : 3) * width1 + 1;
		if(data.length < h.height * stride4) {
			throw new js__$Boot_HaxeError("Not enough data");
		}
		var alphaRed = -1;
		var alphaGreen = -1;
		var alphaBlue = -1;
		if(!alpha1) {
			var _g1_head1 = d.h;
			while(_g1_head1 != null) {
				var val2 = _g1_head1.item;
				_g1_head1 = _g1_head1.next;
				var t1 = val2;
				if(t1._hx_index == 4) {
					if(t1.id == "tRNS") {
						var data2 = t1.data;
						if(data2.length >= 6) {
							alphaRed = data2.b[1];
							alphaGreen = data2.b[3];
							alphaBlue = data2.b[5];
						}
						break;
					}
				}
			}
		}
		var cr = 0;
		var cg = 0;
		var cb = 0;
		var ca3 = 0;
		var _g112 = 0;
		var _g211 = h.height;
		while(_g112 < _g211) {
			var y1 = _g112++;
			var f1 = data.b[r++];
			switch(f1) {
			case 0:
				if(alpha1) {
					var _g113 = 0;
					var _g212 = width1;
					while(_g113 < _g212) {
						var x10 = _g113++;
						bgra.b[w++] = data.b[r + 2];
						bgra.b[w++] = data.b[r + 1];
						bgra.b[w++] = data.b[r];
						bgra.b[w++] = data.b[r + 3];
						r += 4;
					}
				} else {
					var _g114 = 0;
					var _g213 = width1;
					while(_g114 < _g213) {
						var x11 = _g114++;
						cb = data.b[r + 2];
						bgra.b[w++] = cb;
						cg = data.b[r + 1];
						bgra.b[w++] = cg;
						cr = data.b[r];
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 1:
				ca3 = 0;
				cb = ca3;
				cg = cb;
				cr = cg;
				if(alpha1) {
					var _g115 = 0;
					var _g214 = width1;
					while(_g115 < _g214) {
						var x12 = _g115++;
						cb += data.b[r + 2];
						bgra.b[w++] = cb;
						cg += data.b[r + 1];
						bgra.b[w++] = cg;
						cr += data.b[r];
						bgra.b[w++] = cr;
						ca3 += data.b[r + 3];
						bgra.b[w++] = ca3;
						r += 4;
					}
				} else {
					var _g116 = 0;
					var _g215 = width1;
					while(_g116 < _g215) {
						var x13 = _g116++;
						cb += data.b[r + 2];
						bgra.b[w++] = cb;
						cg += data.b[r + 1];
						bgra.b[w++] = cg;
						cr += data.b[r];
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 2:
				var stride5 = y1 == 0 ? 0 : width1 * 4 * flipY1;
				if(alpha1) {
					var _g117 = 0;
					var _g216 = width1;
					while(_g117 < _g216) {
						var x14 = _g117++;
						bgra.b[w] = data.b[r + 2] + bgra.b[w - stride5];
						++w;
						bgra.b[w] = data.b[r + 1] + bgra.b[w - stride5];
						++w;
						bgra.b[w] = data.b[r] + bgra.b[w - stride5];
						++w;
						bgra.b[w] = data.b[r + 3] + bgra.b[w - stride5];
						++w;
						r += 4;
					}
				} else {
					var _g118 = 0;
					var _g217 = width1;
					while(_g118 < _g217) {
						var x15 = _g118++;
						cb = data.b[r + 2] + bgra.b[w - stride5];
						bgra.b[w] = cb;
						++w;
						cg = data.b[r + 1] + bgra.b[w - stride5];
						bgra.b[w] = cg;
						++w;
						cr = data.b[r] + bgra.b[w - stride5];
						bgra.b[w] = cr;
						++w;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 3:
				ca3 = 0;
				cb = ca3;
				cg = cb;
				cr = cg;
				var stride6 = y1 == 0 ? 0 : width1 * 4 * flipY1;
				if(alpha1) {
					var _g119 = 0;
					var _g218 = width1;
					while(_g119 < _g218) {
						var x16 = _g119++;
						cb = data.b[r + 2] + (cb + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cb;
						cg = data.b[r + 1] + (cg + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cg;
						cr = data.b[r] + (cr + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cr;
						ca3 = data.b[r + 3] + (ca3 + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = ca3;
						r += 4;
					}
				} else {
					var _g120 = 0;
					var _g219 = width1;
					while(_g120 < _g219) {
						var x17 = _g120++;
						cb = data.b[r + 2] + (cb + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cb;
						cg = data.b[r + 1] + (cg + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cg;
						cr = data.b[r] + (cr + bgra.b[w - stride6] >> 1) & 255;
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 4:
				var stride7 = width1 * 4 * flipY1;
				ca3 = 0;
				cb = ca3;
				cg = cb;
				cr = cg;
				if(alpha1) {
					var _g121 = 0;
					var _g220 = width1;
					while(_g121 < _g220) {
						var x18 = _g121++;
						var b4 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c4 = x18 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k3 = cb + b4 - c4;
						var pa3 = k3 - cb;
						if(pa3 < 0) {
							pa3 = -pa3;
						}
						var pb3 = k3 - b4;
						if(pb3 < 0) {
							pb3 = -pb3;
						}
						var pc3 = k3 - c4;
						if(pc3 < 0) {
							pc3 = -pc3;
						}
						cb = (pa3 <= pb3 && pa3 <= pc3 ? cb : pb3 <= pc3 ? b4 : c4) + data.b[r + 2] & 255;
						bgra.b[w++] = cb;
						var b5 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c5 = x18 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k4 = cg + b5 - c5;
						var pa4 = k4 - cg;
						if(pa4 < 0) {
							pa4 = -pa4;
						}
						var pb4 = k4 - b5;
						if(pb4 < 0) {
							pb4 = -pb4;
						}
						var pc4 = k4 - c5;
						if(pc4 < 0) {
							pc4 = -pc4;
						}
						cg = (pa4 <= pb4 && pa4 <= pc4 ? cg : pb4 <= pc4 ? b5 : c5) + data.b[r + 1] & 255;
						bgra.b[w++] = cg;
						var b6 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c6 = x18 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k5 = cr + b6 - c6;
						var pa5 = k5 - cr;
						if(pa5 < 0) {
							pa5 = -pa5;
						}
						var pb5 = k5 - b6;
						if(pb5 < 0) {
							pb5 = -pb5;
						}
						var pc5 = k5 - c6;
						if(pc5 < 0) {
							pc5 = -pc5;
						}
						cr = (pa5 <= pb5 && pa5 <= pc5 ? cr : pb5 <= pc5 ? b6 : c6) + data.b[r] & 255;
						bgra.b[w++] = cr;
						var b7 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c7 = x18 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k6 = ca3 + b7 - c7;
						var pa6 = k6 - ca3;
						if(pa6 < 0) {
							pa6 = -pa6;
						}
						var pb6 = k6 - b7;
						if(pb6 < 0) {
							pb6 = -pb6;
						}
						var pc6 = k6 - c7;
						if(pc6 < 0) {
							pc6 = -pc6;
						}
						ca3 = (pa6 <= pb6 && pa6 <= pc6 ? ca3 : pb6 <= pc6 ? b7 : c7) + data.b[r + 3] & 255;
						bgra.b[w++] = ca3;
						r += 4;
					}
				} else {
					var _g122 = 0;
					var _g221 = width1;
					while(_g122 < _g221) {
						var x19 = _g122++;
						var b8 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c8 = x19 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k7 = cb + b8 - c8;
						var pa7 = k7 - cb;
						if(pa7 < 0) {
							pa7 = -pa7;
						}
						var pb7 = k7 - b8;
						if(pb7 < 0) {
							pb7 = -pb7;
						}
						var pc7 = k7 - c8;
						if(pc7 < 0) {
							pc7 = -pc7;
						}
						cb = (pa7 <= pb7 && pa7 <= pc7 ? cb : pb7 <= pc7 ? b8 : c8) + data.b[r + 2] & 255;
						bgra.b[w++] = cb;
						var b9 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c9 = x19 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k8 = cg + b9 - c9;
						var pa8 = k8 - cg;
						if(pa8 < 0) {
							pa8 = -pa8;
						}
						var pb8 = k8 - b9;
						if(pb8 < 0) {
							pb8 = -pb8;
						}
						var pc8 = k8 - c9;
						if(pc8 < 0) {
							pc8 = -pc8;
						}
						cg = (pa8 <= pb8 && pa8 <= pc8 ? cg : pb8 <= pc8 ? b9 : c9) + data.b[r + 1] & 255;
						bgra.b[w++] = cg;
						var b10 = y1 == 0 ? 0 : bgra.b[w - stride7];
						var c10 = x19 == 0 || y1 == 0 ? 0 : bgra.b[w - stride7 - 4];
						var k9 = cr + b10 - c10;
						var pa9 = k9 - cr;
						if(pa9 < 0) {
							pa9 = -pa9;
						}
						var pb9 = k9 - b10;
						if(pb9 < 0) {
							pb9 = -pb9;
						}
						var pc9 = k9 - c10;
						if(pc9 < 0) {
							pc9 = -pc9;
						}
						cr = (pa9 <= pb9 && pa9 <= pc9 ? cr : pb9 <= pc9 ? b10 : c10) + data.b[r] & 255;
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid filter " + f1);
			}
			w += lineDelta;
		}
		break;
	case 2:
		var pal = format_png_Tools.getPalette(d);
		if(pal == null) {
			throw new js__$Boot_HaxeError("PNG Palette is missing");
		}
		var alpha2 = null;
		var _g1_head2 = d.h;
		while(_g1_head2 != null) {
			var val3 = _g1_head2.item;
			_g1_head2 = _g1_head2.next;
			var t2 = val3;
			if(t2._hx_index == 4) {
				if(t2.id == "tRNS") {
					var data3 = t2.data;
					alpha2 = data3;
					break;
				}
			}
		}
		if(alpha2 != null && alpha2.length < 1 << h.colbits) {
			var alpha21 = new haxe_io_Bytes(new ArrayBuffer(1 << h.colbits));
			alpha21.blit(0,alpha2,0,alpha2.length);
			alpha21.fill(alpha2.length,alpha21.length - alpha2.length,255);
			alpha2 = alpha21;
		}
		var width2 = h.width;
		var stride8 = Math.ceil(width2 * h.colbits / 8) + 1;
		if(data.length < h.height * stride8) {
			throw new js__$Boot_HaxeError("Not enough data");
		}
		var tmp = h.width * h.colbits;
		var rline = tmp >> 3;
		var _g222 = 0;
		var _g3 = h.height;
		while(_g222 < _g3) {
			var y2 = _g222++;
			var f2 = data.b[r++];
			if(f2 == 0) {
				r += rline;
				continue;
			}
			switch(f2) {
			case 1:
				var c11 = 0;
				var _g223 = 0;
				var _g31 = width2;
				while(_g223 < _g31) {
					var x20 = _g223++;
					var v4 = data.b[r];
					c11 += v4;
					data.b[r++] = c11 & 255;
				}
				break;
			case 2:
				var stride9 = y2 == 0 ? 0 : rline + 1;
				var _g224 = 0;
				var _g32 = width2;
				while(_g224 < _g32) {
					var x21 = _g224++;
					var v5 = data.b[r];
					data.b[r] = v5 + data.b[r - stride9];
					++r;
				}
				break;
			case 3:
				var c12 = 0;
				var stride10 = y2 == 0 ? 0 : rline + 1;
				var _g225 = 0;
				var _g33 = width2;
				while(_g225 < _g33) {
					var x22 = _g225++;
					var v6 = data.b[r];
					c12 = v6 + (c12 + data.b[r - stride10] >> 1) & 255;
					data.b[r++] = c12;
				}
				break;
			case 4:
				var stride11 = rline + 1;
				var c13 = 0;
				var _g226 = 0;
				var _g34 = width2;
				while(_g226 < _g34) {
					var x23 = _g226++;
					var v7 = data.b[r];
					var numChannels = 1;
					if(numChannels == null) {
						numChannels = 4;
					}
					var b11 = y2 == 0 ? 0 : data.b[r - stride11];
					var c14 = x23 == 0 || y2 == 0 ? 0 : data.b[r - stride11 - numChannels];
					var k10 = c13 + b11 - c14;
					var pa10 = k10 - c13;
					if(pa10 < 0) {
						pa10 = -pa10;
					}
					var pb10 = k10 - b11;
					if(pb10 < 0) {
						pb10 = -pb10;
					}
					var pc10 = k10 - c14;
					if(pc10 < 0) {
						pc10 = -pc10;
					}
					c13 = (pa10 <= pb10 && pa10 <= pc10 ? c13 : pb10 <= pc10 ? b11 : c14) + v7 & 255;
					data.b[r++] = c13;
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid filter " + f2);
			}
		}
		var r1 = 0;
		if(h.colbits == 8) {
			var _g4 = 0;
			var _g5 = h.height;
			while(_g4 < _g5) {
				var y3 = _g4++;
				++r1;
				var _g41 = 0;
				var _g51 = h.width;
				while(_g41 < _g51) {
					var x24 = _g41++;
					var c15 = data.b[r1++];
					bgra.b[w++] = pal.b[c15 * 3 + 2];
					bgra.b[w++] = pal.b[c15 * 3 + 1];
					bgra.b[w++] = pal.b[c15 * 3];
					bgra.b[w++] = alpha2 != null ? alpha2.b[c15] : 255;
				}
				w += lineDelta;
			}
		} else if(h.colbits < 8) {
			var req = h.colbits;
			var mask = (1 << req) - 1;
			var _g42 = 0;
			var _g52 = h.height;
			while(_g42 < _g52) {
				var y4 = _g42++;
				++r1;
				var bits = 0;
				var nbits = 0;
				var _g43 = 0;
				var _g53 = h.width;
				while(_g43 < _g53) {
					var x25 = _g43++;
					if(nbits < req) {
						bits = bits << 8 | data.b[r1++];
						nbits += 8;
					}
					var c16 = bits >>> nbits - req & mask;
					nbits -= req;
					bgra.b[w++] = pal.b[c16 * 3 + 2];
					bgra.b[w++] = pal.b[c16 * 3 + 1];
					bgra.b[w++] = pal.b[c16 * 3];
					bgra.b[w++] = alpha2 != null ? alpha2.b[c16] : 255;
				}
				w += lineDelta;
			}
		} else {
			throw new js__$Boot_HaxeError(h.colbits + " indexed bits per pixel not supported");
		}
		break;
	}
	return bgra;
};
var format_tga_ImageOrigin = $hxEnums["format.tga.ImageOrigin"] = { __ename__ : true, __constructs__ : ["BottomLeft","BottomRight","TopLeft","TopRight"]
	,BottomLeft: {_hx_index:0,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,BottomRight: {_hx_index:1,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,TopLeft: {_hx_index:2,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,TopRight: {_hx_index:3,__enum__:"format.tga.ImageOrigin",toString:$estr}
};
format_tga_ImageOrigin.__empty_constructs__ = [format_tga_ImageOrigin.BottomLeft,format_tga_ImageOrigin.BottomRight,format_tga_ImageOrigin.TopLeft,format_tga_ImageOrigin.TopRight];
var format_tga_ImageType = $hxEnums["format.tga.ImageType"] = { __ename__ : true, __constructs__ : ["NoImage","UncompressedColorMapped","UncompressedTrueColor","UncompressedBlackAndWhite","RunLengthColorMapped","RunLengthTrueColor","RunLengthBlackAndWhite","Unknown"]
	,NoImage: {_hx_index:0,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedColorMapped: {_hx_index:1,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedTrueColor: {_hx_index:2,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedBlackAndWhite: {_hx_index:3,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthColorMapped: {_hx_index:4,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthTrueColor: {_hx_index:5,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthBlackAndWhite: {_hx_index:6,__enum__:"format.tga.ImageType",toString:$estr}
	,Unknown: ($_=function(type) { return {_hx_index:7,type:type,__enum__:"format.tga.ImageType",toString:$estr}; },$_.__params__ = ["type"],$_)
};
format_tga_ImageType.__empty_constructs__ = [format_tga_ImageType.NoImage,format_tga_ImageType.UncompressedColorMapped,format_tga_ImageType.UncompressedTrueColor,format_tga_ImageType.UncompressedBlackAndWhite,format_tga_ImageType.RunLengthColorMapped,format_tga_ImageType.RunLengthTrueColor,format_tga_ImageType.RunLengthBlackAndWhite];
var format_tga_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(false);
};
$hxClasses["format.tga.Reader"] = format_tga_Reader;
format_tga_Reader.__name__ = "format.tga.Reader";
format_tga_Reader.prototype = {
	i: null
	,read: function() {
		var idLength = this.i.readByte();
		var header = this.readHeader();
		var id = idLength == 0 ? "" : this.i.readString(idLength);
		var colorMap = this.readColorMapData(header);
		return { header : header, imageId : id, colorMapData : colorMap, imageData : this.readImageData(header,colorMap), developerData : null};
	}
	,readHeader: function() {
		var colorMapType = this.i.readByte();
		var dataType;
		var dataId = this.i.readByte();
		switch(dataId) {
		case 0:
			dataType = format_tga_ImageType.NoImage;
			break;
		case 1:
			dataType = format_tga_ImageType.UncompressedColorMapped;
			break;
		case 2:
			dataType = format_tga_ImageType.UncompressedTrueColor;
			break;
		case 3:
			dataType = format_tga_ImageType.UncompressedBlackAndWhite;
			break;
		case 9:
			dataType = format_tga_ImageType.RunLengthColorMapped;
			break;
		case 10:
			dataType = format_tga_ImageType.RunLengthTrueColor;
			break;
		case 11:
			dataType = format_tga_ImageType.RunLengthBlackAndWhite;
			break;
		default:
			dataType = format_tga_ImageType.Unknown(dataId);
		}
		var colorMapOrigin = this.i.readInt16();
		var colorMapLength = this.i.readInt16();
		var colorMapDepth = this.i.readByte();
		var xOrigin = this.i.readInt16();
		var yOrigin = this.i.readInt16();
		var width = this.i.readInt16();
		var height = this.i.readInt16();
		var depth = this.i.readByte();
		var descriptor = this.i.readByte();
		var origin;
		switch(descriptor & 48) {
		case 16:
			origin = format_tga_ImageOrigin.BottomRight;
			break;
		case 32:
			origin = format_tga_ImageOrigin.TopLeft;
			break;
		case 48:
			origin = format_tga_ImageOrigin.TopRight;
			break;
		default:
			origin = format_tga_ImageOrigin.BottomLeft;
		}
		return { colorMapType : colorMapType, imageType : dataType, colorMapFirstIndex : colorMapOrigin, colorMapLength : colorMapLength, colorMapEntrySize : colorMapDepth, xOrigin : xOrigin, yOrigin : yOrigin, width : width, height : height, bitsPerPixel : depth, alphaChannelBits : descriptor & 15, imageOrigin : origin};
	}
	,readColorMapData: function(header) {
		if(header.colorMapType == 0) {
			return null;
		}
		return this.readPixels(header.colorMapEntrySize,header.colorMapLength,header.alphaChannelBits,false);
	}
	,readImageData: function(header,colorMap) {
		switch(header.imageType._hx_index) {
		case 0:
			return null;
		case 1:
			return this.readIndexes(header.bitsPerPixel,header.width * header.height,colorMap,header.colorMapFirstIndex,false);
		case 2:
			return this.readPixels(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,false);
		case 3:
			return this.readMono(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,false);
		case 4:
			return this.readIndexes(header.bitsPerPixel,header.width * header.height,colorMap,header.colorMapFirstIndex,true);
		case 5:
			return this.readPixels(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,true);
		case 6:
			return this.readMono(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,true);
		default:
			throw new js__$Boot_HaxeError("Unsupported image data type!");
		}
	}
	,readPixels: function(bitsPerPixel,amount,alphaChannelBits,rle) {
		var this1 = new Array(amount);
		var list = this1;
		var alpha = alphaChannelBits != 0;
		var bitFieldSize = bitsPerPixel / 3 | 0;
		if(bitFieldSize > 8) {
			bitFieldSize = 8;
		}
		var parsePixel;
		var readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			parsePixel = $bind(this,this.parsePixel1);
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			parsePixel = $bind(this,this.parsePixel2);
			break;
		case 24:
			readEntry = ($_=this.i,$bind($_,$_.readUInt24));
			parsePixel = $bind(this,this.parsePixel3);
			break;
		case 32:
			readEntry = ($_=this.i,$bind($_,$_.readInt32));
			parsePixel = $bind(this,this.parsePixel4);
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported bits per pixels amount!");
		}
		if(rle) {
			var rleChunk;
			var i = 0;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					var pixel = parsePixel(readEntry(),alpha);
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = parsePixel(readEntry(),alpha);
						--rleChunk;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = amount;
			while(_g < _g1) {
				var i1 = _g++;
				list[i1] = parsePixel(readEntry(),alpha);
			}
		}
		return list;
	}
	,readMono: function(bitsPerPixel,amount,alphaChannelBits,rle) {
		var this1 = new Array(amount);
		var list = this1;
		var alpha = alphaChannelBits != 0;
		var parsePixel;
		var readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			parsePixel = $bind(this,this.parsePixel1);
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			parsePixel = $bind(this,this.parsePixelGreyAlpha);
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported bits per pixels amount!");
		}
		if(rle) {
			var rleChunk;
			var i = 0;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					var pixel = parsePixel(readEntry(),alpha);
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = parsePixel(readEntry(),alpha);
						--rleChunk;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = amount;
			while(_g < _g1) {
				var i1 = _g++;
				list[i1] = parsePixel(readEntry(),alpha);
			}
		}
		return list;
	}
	,readIndexes: function(bitsPerPixel,amount,colorMap,offset,rle) {
		var this1 = new Array(amount);
		var list = this1;
		var readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			break;
		case 24:
			readEntry = ($_=this.i,$bind($_,$_.readUInt24));
			break;
		case 32:
			readEntry = ($_=this.i,$bind($_,$_.readInt32));
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported bits per pixels amount!");
		}
		if(rle) {
			var i = 0;
			var rleChunk;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					var pixel = colorMap[offset + readEntry()];
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = colorMap[offset + readEntry()];
						--rleChunk;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = amount;
			while(_g < _g1) {
				var i1 = _g++;
				list[i1] = colorMap[offset + readEntry()];
			}
		}
		return list;
	}
	,parsePixel1: function(value,alpha) {
		return value << 16 | value << 8 | value;
	}
	,parsePixelGreyAlpha: function(value,alpha) {
		return (alpha ? (value & 65280) << 16 : 0) | this.parsePixel1(value & 255,false);
	}
	,parsePixel2: function(value,alpha) {
		return (alpha ? (value & 32768) == 1 ? -16777216 : 0 : 0) | (((value & 31744) >> 10) / 31 * 255 | 0) << 16 | (((value & 992) >> 5) / 31 * 255 | 0) << 8 | ((value & 31) / 31 * 255 | 0);
	}
	,parsePixel3: function(value,alpha) {
		return value;
	}
	,parsePixel4: function(value,alpha) {
		return value;
	}
	,__class__: format_tga_Reader
};
var format_tools_Inflate = function() { };
$hxClasses["format.tools.Inflate"] = format_tools_Inflate;
format_tools_Inflate.__name__ = "format.tools.Inflate";
format_tools_Inflate.run = function(bytes) {
	return haxe_zip_Uncompress.run(bytes);
};
var h2d_Bitmap = function(tile,parent) {
	h2d_Drawable.call(this,parent);
	this.tile = tile;
};
$hxClasses["h2d.Bitmap"] = h2d_Bitmap;
h2d_Bitmap.__name__ = "h2d.Bitmap";
h2d_Bitmap.__super__ = h2d_Drawable;
h2d_Bitmap.prototype = $extend(h2d_Drawable.prototype,{
	tile: null
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.tile != null) {
			this.addBounds(relativeTo,out,this.tile.dx,this.tile.dy,this.tile.width,this.tile.height);
		}
	}
	,draw: function(ctx) {
		this.emitTile(ctx,this.tile);
	}
	,__class__: h2d_Bitmap
});
var h2d_BlendMode = $hxEnums["h2d.BlendMode"] = { __ename__ : true, __constructs__ : ["None","Alpha","Add","AlphaAdd","SoftAdd","Multiply","AlphaMultiply","Erase","Screen","Sub","Max","Min"]
	,None: {_hx_index:0,__enum__:"h2d.BlendMode",toString:$estr}
	,Alpha: {_hx_index:1,__enum__:"h2d.BlendMode",toString:$estr}
	,Add: {_hx_index:2,__enum__:"h2d.BlendMode",toString:$estr}
	,AlphaAdd: {_hx_index:3,__enum__:"h2d.BlendMode",toString:$estr}
	,SoftAdd: {_hx_index:4,__enum__:"h2d.BlendMode",toString:$estr}
	,Multiply: {_hx_index:5,__enum__:"h2d.BlendMode",toString:$estr}
	,AlphaMultiply: {_hx_index:6,__enum__:"h2d.BlendMode",toString:$estr}
	,Erase: {_hx_index:7,__enum__:"h2d.BlendMode",toString:$estr}
	,Screen: {_hx_index:8,__enum__:"h2d.BlendMode",toString:$estr}
	,Sub: {_hx_index:9,__enum__:"h2d.BlendMode",toString:$estr}
	,Max: {_hx_index:10,__enum__:"h2d.BlendMode",toString:$estr}
	,Min: {_hx_index:11,__enum__:"h2d.BlendMode",toString:$estr}
};
h2d_BlendMode.__empty_constructs__ = [h2d_BlendMode.None,h2d_BlendMode.Alpha,h2d_BlendMode.Add,h2d_BlendMode.AlphaAdd,h2d_BlendMode.SoftAdd,h2d_BlendMode.Multiply,h2d_BlendMode.AlphaMultiply,h2d_BlendMode.Erase,h2d_BlendMode.Screen,h2d_BlendMode.Sub,h2d_BlendMode.Max,h2d_BlendMode.Min];
var h2d_ConsoleArg = $hxEnums["h2d.ConsoleArg"] = { __ename__ : true, __constructs__ : ["AInt","AFloat","AString","ABool","AEnum"]
	,AInt: {_hx_index:0,__enum__:"h2d.ConsoleArg",toString:$estr}
	,AFloat: {_hx_index:1,__enum__:"h2d.ConsoleArg",toString:$estr}
	,AString: {_hx_index:2,__enum__:"h2d.ConsoleArg",toString:$estr}
	,ABool: {_hx_index:3,__enum__:"h2d.ConsoleArg",toString:$estr}
	,AEnum: ($_=function(values) { return {_hx_index:4,values:values,__enum__:"h2d.ConsoleArg",toString:$estr}; },$_.__params__ = ["values"],$_)
};
h2d_ConsoleArg.__empty_constructs__ = [h2d_ConsoleArg.AInt,h2d_ConsoleArg.AFloat,h2d_ConsoleArg.AString,h2d_ConsoleArg.ABool];
var h2d_Console = function(font,parent) {
	this.autoComplete = true;
	this.shortKeyChar = 47;
	this.logDY = 0;
	var _gthis = this;
	h2d_Object.call(this,parent);
	this.height = Math.ceil(font.lineHeight) + 2;
	this.logTxt = new h2d_HtmlText(font,this);
	var _this = this.logTxt;
	_this.posChanged = true;
	_this.x = 2;
	this.logTxt.dropShadow = { dx : 0, dy : 1, color : 0, alpha : 0.5};
	this.logTxt.set_visible(false);
	this.logs = [];
	this.logIndex = -1;
	this.bg = new h2d_Bitmap(h2d_Tile.fromColor(0,1,1,0.5),this);
	this.bg.set_visible(false);
	this.hintTxt = new h2d_Text(font,this.bg);
	var _this1 = this.hintTxt;
	_this1.posChanged = true;
	_this1.x = 2;
	var _this2 = this.hintTxt;
	_this2.posChanged = true;
	_this2.y = 1;
	this.hintTxt.set_textColor(-1);
	this.hintTxt.alpha = 0.5;
	this.tf = new h2d_TextInput(font,this.bg);
	this.tf.onKeyDown = $bind(this,this.handleKey);
	this.tf.onChange = $bind(this,this.handleCmdChange);
	this.tf.onFocusLost = function(_) {
		_gthis.hide();
	};
	var _this3 = this.tf;
	_this3.posChanged = true;
	_this3.x = 2;
	var _this4 = this.tf;
	_this4.posChanged = true;
	_this4.y = 1;
	this.tf.set_textColor(-1);
	this.commands = new haxe_ds_StringMap();
	this.aliases = new haxe_ds_StringMap();
	this.addCommand("help","Show help",[{ name : "command", t : h2d_ConsoleArg.AString, opt : true}],$bind(this,this.showHelp));
	this.addCommand("cls","Clear console",[],function() {
		_gthis.logs = [];
		_gthis.logTxt.set_text("");
	});
	this.addAlias("?","help");
};
$hxClasses["h2d.Console"] = h2d_Console;
h2d_Console.__name__ = "h2d.Console";
h2d_Console.__super__ = h2d_Object;
h2d_Console.prototype = $extend(h2d_Object.prototype,{
	width: null
	,height: null
	,bg: null
	,tf: null
	,hintTxt: null
	,logTxt: null
	,lastLogTime: null
	,commands: null
	,aliases: null
	,logDY: null
	,logs: null
	,logIndex: null
	,curCmd: null
	,shortKeyChar: null
	,autoComplete: null
	,addCommand: function(name,help,args,callb) {
		var _this = this.commands;
		var value = { help : help == null ? "" : help, args : args, callb : callb};
		if(__map_reserved[name] != null) {
			_this.setReserved(name,value);
		} else {
			_this.h[name] = value;
		}
	}
	,addAlias: function(name,command) {
		var _this = this.aliases;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,command);
		} else {
			_this.h[name] = command;
		}
	}
	,onAdd: function() {
		h2d_Object.prototype.onAdd.call(this);
		this.getScene().window.addEventTarget($bind(this,this.onEvent));
	}
	,onRemove: function() {
		this.getScene().window.removeEventTarget($bind(this,this.onEvent));
		h2d_Object.prototype.onRemove.call(this);
	}
	,onEvent: function(e) {
		switch(e.kind._hx_index) {
		case 5:
			if(this.logTxt.visible) {
				this.logDY -= this.tf.font.lineHeight * e.wheelDelta * 3;
				if(this.logDY < 0) {
					this.logDY = 0;
				}
				if(this.logDY > this.logTxt.get_textHeight()) {
					this.logDY = this.logTxt.get_textHeight();
				}
				e.propagate = false;
			}
			break;
		case 11:
			if(e.charCode == this.shortKeyChar && !this.bg.visible) {
				this.show();
			}
			break;
		default:
		}
	}
	,showHelp: function(command) {
		var _gthis = this;
		var all;
		if(command == null) {
			all = Lambda.array({ iterator : function() {
				return _gthis.commands.keys();
			}});
			all.sort(Reflect.compare);
			HxOverrides.remove(all,"help");
			all.push("help");
		} else {
			var _this = this.aliases;
			if(__map_reserved[command] != null ? _this.existsReserved(command) : _this.h.hasOwnProperty(command)) {
				var _this1 = this.aliases;
				command = __map_reserved[command] != null ? _this1.getReserved(command) : _this1.h[command];
			}
			var _this2 = this.commands;
			if(!(__map_reserved[command] != null ? _this2.existsReserved(command) : _this2.h.hasOwnProperty(command))) {
				throw new js__$Boot_HaxeError("Command not found \"" + command + "\"");
			}
			all = [command];
		}
		var _g = 0;
		while(_g < all.length) {
			var cmdName = all[_g];
			++_g;
			var _this3 = this.commands;
			var c = __map_reserved[cmdName] != null ? _this3.getReserved(cmdName) : _this3.h[cmdName];
			var str = "/" + cmdName;
			var a = this.aliases.keys();
			while(a.hasNext()) {
				var a1 = a.next();
				var _this4 = this.aliases;
				if((__map_reserved[a1] != null ? _this4.getReserved(a1) : _this4.h[a1]) == cmdName) {
					str += "|" + a1;
				}
			}
			var _g1 = 0;
			var _g11 = c.args;
			while(_g1 < _g11.length) {
				var a2 = _g11[_g1];
				++_g1;
				var astr = a2.name;
				var _g2 = a2.t;
				switch(_g2._hx_index) {
				case 0:case 1:
					var e = a2.t;
					astr += ":" + HxOverrides.substr($hxEnums[e.__enum__].__constructs__[e._hx_index],1,null);
					break;
				case 2:
					break;
				case 3:
					astr += "=0|1";
					break;
				case 4:
					var values = _g2.values;
					astr += "=" + values.join("|");
					break;
				}
				str += " " + (a2.opt ? "[" + astr + "]" : astr);
			}
			if(c.help != "") {
				str += " : " + c.help;
			}
			this.log(str);
		}
	}
	,isActive: function() {
		return this.bg.visible;
	}
	,hide: function() {
		this.bg.set_visible(false);
		this.tf.set_text("");
		this.hintTxt.set_text("");
		this.tf.cursorIndex = -1;
	}
	,show: function() {
		this.bg.set_visible(true);
		this.tf.focus();
		this.tf.cursorIndex = this.tf.text.length;
		this.logIndex = -1;
	}
	,getCommandSuggestion: function(cmd) {
		if(cmd == "") {
			return "";
		}
		var closestCommand = "";
		var commandNames = this.commands.keys();
		var command = commandNames;
		while(command.hasNext()) {
			var command1 = command.next();
			if(command1.indexOf(cmd) == 0) {
				if(closestCommand == "" || closestCommand.length > command1.length) {
					closestCommand = command1;
				}
			}
		}
		return closestCommand;
	}
	,handleKey: function(e) {
		if(!this.bg.visible) {
			return;
		}
		switch(e.keyCode) {
		case 9:
			if(this.autoComplete) {
				if(this.hintTxt.text != "") {
					this.tf.set_text(this.hintTxt.text + " ");
					this.tf.cursorIndex = this.tf.text.length;
				}
			}
			break;
		case 13:case 108:
			var cmd = this.tf.text;
			this.tf.set_text("");
			this.hintTxt.set_text("");
			if(this.autoComplete) {
				var suggestion = this.getCommandSuggestion(cmd);
				if(suggestion != "") {
					cmd = suggestion;
				}
			}
			this.handleCommand(cmd);
			if(!this.logTxt.visible) {
				this.bg.set_visible(false);
			}
			e.cancel = true;
			return;
		case 27:
			this.hide();
			break;
		case 38:
			if(this.logs.length == 0 || this.logIndex == 0) {
				return;
			}
			if(this.logIndex == -1) {
				this.curCmd = this.tf.text;
				this.logIndex = this.logs.length - 1;
			} else {
				this.logIndex--;
			}
			this.tf.set_text(this.logs[this.logIndex]);
			this.tf.cursorIndex = this.tf.text.length;
			break;
		case 40:
			if(this.tf.text == this.curCmd) {
				return;
			}
			if(this.logIndex == this.logs.length - 1) {
				this.tf.set_text(this.curCmd == null ? "" : this.curCmd);
				this.tf.cursorIndex = this.tf.text.length;
				this.logIndex = -1;
				return;
			}
			this.logIndex++;
			this.tf.set_text(this.logs[this.logIndex]);
			this.tf.cursorIndex = this.tf.text.length;
			break;
		}
	}
	,handleCmdChange: function() {
		this.hintTxt.set_visible(this.autoComplete);
		if(this.autoComplete) {
			this.hintTxt.set_text(this.getCommandSuggestion(this.tf.text));
		} else {
			this.hintTxt.set_text("");
		}
	}
	,handleCommand: function(command) {
		command = StringTools.trim(command);
		if(HxOverrides.cca(command,0) == 47) {
			command = HxOverrides.substr(command,1,null);
		}
		if(command == "") {
			this.hide();
			return;
		}
		this.logs.push(command);
		this.logIndex = -1;
		var errorColor = 12582912;
		var args = [];
		var c = "";
		var i = 0;
		var readString = function(endChar) {
			var string = "";
			while(i < command.length) {
				var c1 = i += 1;
				c = command.charAt(c1);
				if(c == endChar) {
					i += 1;
					return string;
				}
				string += c;
			}
			return null;
		};
		var last = "";
		while(i < command.length) {
			c = command.charAt(i);
			switch(c) {
			case "\t":case " ":
				c = command.charAt(i);
				while(c == " " || c == "\t") {
					var c2 = i += 1;
					c = command.charAt(c2);
				}
				i -= 1;
				args.push(last);
				last = "";
				break;
			case "\"":case "'":
				var string1 = readString(c);
				if(string1 == null) {
					this.log("Bad formated string",errorColor);
					return;
				}
				args.push(string1);
				last = "";
				c = command.charAt(i);
				while(c == " " || c == "\t") {
					var c3 = i += 1;
					c = command.charAt(c3);
				}
				i -= 1;
				break;
			default:
				last += c;
			}
			i += 1;
		}
		args.push(last);
		var cmdName = args[0];
		var _this = this.aliases;
		if(__map_reserved[cmdName] != null ? _this.existsReserved(cmdName) : _this.h.hasOwnProperty(cmdName)) {
			var _this1 = this.aliases;
			cmdName = __map_reserved[cmdName] != null ? _this1.getReserved(cmdName) : _this1.h[cmdName];
		}
		var _this2 = this.commands;
		var cmd = __map_reserved[cmdName] != null ? _this2.getReserved(cmdName) : _this2.h[cmdName];
		if(cmd == null) {
			this.log("Unknown command \"" + cmdName + "\"",errorColor);
			return;
		}
		var vargs = [];
		var _g = 0;
		var _g1 = cmd.args.length;
		while(_g < _g1) {
			var i1 = _g++;
			var a = cmd.args[i1];
			var v = args[i1 + 1];
			if(v == null) {
				if(a.opt) {
					vargs.push(null);
					continue;
				}
				this.log("Missing argument " + a.name,errorColor);
				return;
			}
			var _g2 = a.t;
			switch(_g2._hx_index) {
			case 0:
				var i2 = Std.parseInt(v);
				if(i2 == null) {
					this.log("" + v + " should be Int for argument " + a.name,errorColor);
					return;
				}
				vargs.push(i2);
				break;
			case 1:
				var f = parseFloat(v);
				if(isNaN(f)) {
					this.log("" + v + " should be Float for argument " + a.name,errorColor);
					return;
				}
				vargs.push(f);
				break;
			case 2:
				vargs.push(cmd.args.length == 1 ? StringTools.trim(HxOverrides.substr(command,args[0].length,null)) : v);
				break;
			case 3:
				switch(v) {
				case "1":case "true":
					vargs.push(true);
					break;
				case "0":case "false":
					vargs.push(false);
					break;
				default:
					this.log("" + v + " should be Bool for argument " + a.name,errorColor);
					return;
				}
				break;
			case 4:
				var values = _g2.values;
				var found = false;
				var _g3 = 0;
				while(_g3 < values.length) {
					var v2 = values[_g3];
					++_g3;
					if(v == v2) {
						found = true;
						vargs.push(v2);
					}
				}
				if(!found) {
					this.log("" + v + " should be [" + values.join("|") + "] for argument " + a.name,errorColor);
					return;
				}
				break;
			}
		}
		try {
			cmd.callb.apply(null,vargs);
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(typeof(e1) == "string") {
				this.log("ERROR " + e1,errorColor);
			} else {
				throw e;
			}
		}
	}
	,log: function(text,color) {
		if(color == null) {
			color = this.tf.textColor;
		}
		var oldH = this.logTxt.get_textHeight();
		this.logTxt.set_text(this.logTxt.text + ("<font color=\"#" + StringTools.hex(color & 16777215,6) + "\">" + StringTools.htmlEscape(text) + "</font><br/>"));
		if(this.logDY != 0) {
			this.logDY += this.logTxt.get_textHeight() - oldH;
		}
		this.logTxt.alpha = 1;
		this.logTxt.set_visible(true);
		this.lastLogTime = Date.now() / 1000;
	}
	,sync: function(ctx) {
		var scene = ctx.scene;
		if(scene != null) {
			this.posChanged = true;
			this.x = 0;
			this.posChanged = true;
			this.y = scene.height - this.height;
			this.width = scene.width;
			this.tf.set_maxWidth(this.width);
			this.bg.tile.scaleToSize(this.width,this.height);
		}
		var log = this.logTxt;
		if(log.visible) {
			var v = this.bg.y - log.get_textHeight() + this.logDY;
			log.posChanged = true;
			log.y = v;
			var dt = Date.now() / 1000 - this.lastLogTime;
			if(dt > h2d_Console.HIDE_LOG_TIMEOUT && !this.bg.visible) {
				log.alpha -= ctx.elapsedTime * 4;
				if(log.alpha <= 0) {
					log.set_visible(false);
				}
			}
		}
		h2d_Object.prototype.sync.call(this,ctx);
	}
	,__class__: h2d_Console
});
var h2d_FlowAlign = $hxEnums["h2d.FlowAlign"] = { __ename__ : true, __constructs__ : ["Top","Left","Right","Middle","Bottom"]
	,Top: {_hx_index:0,__enum__:"h2d.FlowAlign",toString:$estr}
	,Left: {_hx_index:1,__enum__:"h2d.FlowAlign",toString:$estr}
	,Right: {_hx_index:2,__enum__:"h2d.FlowAlign",toString:$estr}
	,Middle: {_hx_index:3,__enum__:"h2d.FlowAlign",toString:$estr}
	,Bottom: {_hx_index:4,__enum__:"h2d.FlowAlign",toString:$estr}
};
h2d_FlowAlign.__empty_constructs__ = [h2d_FlowAlign.Top,h2d_FlowAlign.Left,h2d_FlowAlign.Right,h2d_FlowAlign.Middle,h2d_FlowAlign.Bottom];
var h2d_FlowLayout = $hxEnums["h2d.FlowLayout"] = { __ename__ : true, __constructs__ : ["Horizontal","Vertical","Stack"]
	,Horizontal: {_hx_index:0,__enum__:"h2d.FlowLayout",toString:$estr}
	,Vertical: {_hx_index:1,__enum__:"h2d.FlowLayout",toString:$estr}
	,Stack: {_hx_index:2,__enum__:"h2d.FlowLayout",toString:$estr}
};
h2d_FlowLayout.__empty_constructs__ = [h2d_FlowLayout.Horizontal,h2d_FlowLayout.Vertical,h2d_FlowLayout.Stack];
var h2d_FlowProperties = function(elt) {
	this.constraint = true;
	this.calculatedHeight = 0;
	this.calculatedWidth = 0;
	this.offsetY = 0;
	this.offsetX = 0;
	this.isAbsolute = false;
	this.paddingBottom = 0;
	this.paddingRight = 0;
	this.paddingTop = 0;
	this.paddingLeft = 0;
	this.elt = elt;
};
$hxClasses["h2d.FlowProperties"] = h2d_FlowProperties;
h2d_FlowProperties.__name__ = "h2d.FlowProperties";
h2d_FlowProperties.prototype = {
	elt: null
	,paddingLeft: null
	,paddingTop: null
	,paddingRight: null
	,paddingBottom: null
	,isAbsolute: null
	,horizontalAlign: null
	,verticalAlign: null
	,offsetX: null
	,offsetY: null
	,minWidth: null
	,minHeight: null
	,calculatedWidth: null
	,calculatedHeight: null
	,isBreak: null
	,constraint: null
	,set_isAbsolute: function(a) {
		if(a) {
			this.elt.constraintSize(-1,-1);
			this.isBreak = false;
		}
		return this.isAbsolute = a;
	}
	,__class__: h2d_FlowProperties
};
var h2d_Flow = function(parent) {
	this.realMinHeight = -1;
	this.realMinWidth = -1;
	this.realMaxHeight = -1;
	this.realMaxWidth = -1;
	this.constraintHeight = -1;
	this.constraintWidth = -1;
	this.calculatedHeight = 0.;
	this.calculatedWidth = 0.;
	this.properties = [];
	this.fillHeight = false;
	this.fillWidth = false;
	this.reverse = false;
	this.multiline = false;
	this.isInline = true;
	this.layout = h2d_FlowLayout.Horizontal;
	this.borderHeight = 0;
	this.borderWidth = 0;
	this.verticalSpacing = 0;
	this.horizontalSpacing = 0;
	this.paddingBottom = 0;
	this.paddingTop = 0;
	this.paddingRight = 0;
	this.paddingLeft = 0;
	this.overflow = false;
	this.needReflow = true;
	this.tmpBounds = new h2d_col_Bounds();
	h2d_Object.call(this,parent);
};
$hxClasses["h2d.Flow"] = h2d_Flow;
h2d_Flow.__name__ = "h2d.Flow";
h2d_Flow.__super__ = h2d_Object;
h2d_Flow.prototype = $extend(h2d_Object.prototype,{
	tmpBounds: null
	,needReflow: null
	,horizontalAlign: null
	,verticalAlign: null
	,minWidth: null
	,minHeight: null
	,maxWidth: null
	,maxHeight: null
	,lineHeight: null
	,colWidth: null
	,overflow: null
	,paddingLeft: null
	,paddingRight: null
	,paddingTop: null
	,paddingBottom: null
	,horizontalSpacing: null
	,verticalSpacing: null
	,enableInteractive: null
	,interactive: null
	,backgroundTile: null
	,borderWidth: null
	,borderHeight: null
	,layout: null
	,isInline: null
	,debug: null
	,multiline: null
	,reverse: null
	,fillWidth: null
	,fillHeight: null
	,background: null
	,debugGraphics: null
	,properties: null
	,calculatedWidth: null
	,calculatedHeight: null
	,constraintWidth: null
	,constraintHeight: null
	,realMaxWidth: null
	,realMaxHeight: null
	,realMinWidth: null
	,realMinHeight: null
	,isConstraint: null
	,getProperties: function(e) {
		this.set_needReflow(true);
		return this.properties[this.getChildIndex(e)];
	}
	,set_layout: function(v) {
		if(this.layout == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.layout = v == null ? h2d_FlowLayout.Horizontal : v;
	}
	,set_horizontalAlign: function(v) {
		if(this.horizontalAlign == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.horizontalAlign = v;
	}
	,set_verticalAlign: function(v) {
		if(this.verticalAlign == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.verticalAlign = v;
	}
	,set_needReflow: function(v) {
		if(this.needReflow == v) {
			return v;
		}
		if(v) {
			if(this.parentContainer != null) {
				this.parentContainer.contentChanged(this);
			}
		}
		return this.needReflow = v;
	}
	,set_padding: function(v) {
		this.set_paddingLeft(v);
		this.set_paddingTop(v);
		this.set_paddingRight(v);
		this.set_paddingBottom(v);
		return v;
	}
	,get_outerWidth: function() {
		if(this.needReflow) {
			this.reflow();
		}
		return Math.ceil(this.calculatedWidth);
	}
	,get_outerHeight: function() {
		if(this.needReflow) {
			this.reflow();
		}
		return Math.ceil(this.calculatedHeight);
	}
	,get_innerWidth: function() {
		if(this.needReflow) {
			this.reflow();
		}
		return Math.ceil(this.calculatedWidth) - (this.paddingLeft + this.paddingRight + this.borderWidth * 2);
	}
	,get_innerHeight: function() {
		if(this.needReflow) {
			this.reflow();
		}
		return Math.ceil(this.calculatedHeight) - (this.paddingTop + this.paddingBottom + this.borderHeight * 2);
	}
	,set_paddingLeft: function(v) {
		if(this.paddingLeft == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.paddingLeft = v;
	}
	,set_paddingRight: function(v) {
		if(this.paddingRight == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.paddingRight = v;
	}
	,set_paddingTop: function(v) {
		if(this.paddingTop == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.paddingTop = v;
	}
	,set_paddingBottom: function(v) {
		if(this.paddingBottom == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.paddingBottom = v;
	}
	,constraintSize: function(width,height) {
		this.constraintWidth = width;
		this.constraintHeight = height;
		this.isConstraint = true;
		this.updateConstraint();
	}
	,contentChanged: function(s) {
		while(s.parent != this) s = s.parent;
		if(this.getProperties(s).isAbsolute) {
			return;
		}
		this.set_needReflow(true);
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,addSpacing: function(v) {
		var last = this.properties.length - 1;
		while(last >= 0 && this.properties[last].isAbsolute) --last;
		switch(this.layout._hx_index) {
		case 0:
			if(last >= 0) {
				this.properties[last].paddingRight += v;
			} else {
				var _g = this;
				_g.set_paddingLeft(_g.paddingLeft + v);
			}
			break;
		case 1:
			if(last >= 0) {
				this.properties[last].paddingBottom += v;
			} else {
				var _g1 = this;
				_g1.set_paddingTop(_g1.paddingTop + v);
			}
			break;
		case 2:
			break;
		}
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		if(this.needReflow) {
			this.reflow();
		}
		if(forSize) {
			if(!this.isInline) {
				h2d_Object.prototype.getBoundsRec.call(this,relativeTo,out,true);
			}
			if(this.calculatedWidth != 0) {
				if(this.posChanged) {
					this.calcAbsPos();
					var _g = 0;
					var _g1 = this.children;
					while(_g < _g1.length) {
						var c = _g1[_g];
						++_g;
						c.posChanged = true;
					}
					this.posChanged = false;
				}
				this.addBounds(relativeTo,out,0,0,this.calculatedWidth,this.calculatedHeight);
			}
		} else {
			h2d_Object.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		}
	}
	,setParentContainer: function(c) {
		this.parentContainer = c;
	}
	,addChildAt: function(s,pos) {
		if(this.background != null) {
			++pos;
		}
		if(this.interactive != null) {
			++pos;
		}
		var fp = this.getProperties(s);
		h2d_Object.prototype.addChildAt.call(this,s,pos);
		if(fp == null) {
			fp = new h2d_FlowProperties(s);
		} else {
			HxOverrides.remove(this.properties,fp);
		}
		this.properties.splice(pos,0,fp);
		this.set_needReflow(true);
		s.setParentContainer(this);
	}
	,removeChild: function(s) {
		var index = this.getChildIndex(s);
		h2d_Object.prototype.removeChild.call(this,s);
		if(index >= 0) {
			this.set_needReflow(true);
			this.properties.splice(index,1);
			s.constraintSize(-1,-1);
		}
		if(s != null) {
			if(s == this.background) {
				this.set_backgroundTile(null);
			}
			if(s == this.interactive) {
				this.set_enableInteractive(false);
			}
		}
	}
	,removeChildren: function() {
		var k = 0;
		while(this.children.length > k) {
			var c = this.children[k];
			if(c == this.background || c == this.interactive || c == this.debugGraphics) {
				++k;
			} else {
				this.removeChild(c);
			}
		}
	}
	,sync: function(ctx) {
		if(!this.isConstraint && (this.fillWidth || this.fillHeight)) {
			var scene = ctx.scene;
			if(scene.width != this.constraintWidth || scene.height != this.constraintHeight) {
				this.set_needReflow(true);
			}
		}
		if(this.needReflow) {
			this.reflow();
		}
		h2d_Object.prototype.sync.call(this,ctx);
	}
	,updateConstraint: function() {
		var oldW = this.realMaxWidth;
		var oldH = this.realMaxHeight;
		var tmp;
		if(this.maxWidth == null) {
			tmp = this.constraintWidth;
		} else if(this.constraintWidth < 0) {
			tmp = this.maxWidth;
		} else {
			var a = this.maxWidth;
			var b = this.constraintWidth;
			tmp = a > b ? b : a;
		}
		this.realMaxWidth = tmp;
		var tmp1;
		if(this.maxHeight == null) {
			tmp1 = this.constraintHeight;
		} else if(this.constraintHeight < 0) {
			tmp1 = this.maxHeight;
		} else {
			var a1 = this.maxHeight;
			var b1 = this.constraintHeight;
			tmp1 = a1 > b1 ? b1 : a1;
		}
		this.realMaxHeight = tmp1;
		if(this.minWidth != null && this.realMaxWidth < this.minWidth && this.realMaxWidth >= 0) {
			this.realMaxWidth = this.minWidth;
		}
		if(this.minHeight != null && this.realMaxHeight < this.minHeight && this.realMaxWidth >= 0) {
			this.realMaxHeight = this.minHeight;
		}
		if(this.realMaxWidth != oldW || this.realMaxHeight != oldH) {
			this.set_needReflow(true);
		}
		var oldW1 = this.realMinWidth;
		var oldH1 = this.realMinHeight;
		this.realMinWidth = this.minWidth == null && this.fillWidth ? Math.ceil(this.constraintWidth) : this.minWidth != null ? this.minWidth : -1;
		this.realMinHeight = this.minHeight == null && this.fillHeight ? Math.ceil(this.constraintHeight) : this.minHeight != null ? this.minHeight : -1;
		if(this.realMinWidth != oldW1 || this.realMinHeight != oldH1) {
			this.set_needReflow(true);
		}
	}
	,set_horizontalSpacing: function(s) {
		if(this.horizontalSpacing == s) {
			return s;
		}
		this.set_needReflow(true);
		return this.horizontalSpacing = s;
	}
	,set_verticalSpacing: function(s) {
		if(this.verticalSpacing == s) {
			return s;
		}
		this.set_needReflow(true);
		return this.verticalSpacing = s;
	}
	,set_enableInteractive: function(b) {
		if(this.enableInteractive == b) {
			return b;
		}
		if(b) {
			if(this.interactive == null) {
				var interactive = new h2d_Interactive(0,0);
				this.addChildAt(interactive,0);
				this.interactive = interactive;
				interactive.set_cursor(hxd_Cursor.Default);
				this.getProperties(interactive).set_isAbsolute(true);
				if(!this.needReflow) {
					interactive.width = this.calculatedWidth;
					interactive.height = this.calculatedHeight;
				}
			}
		} else if(this.interactive != null) {
			var _this = this.interactive;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
			this.interactive = null;
		}
		return this.enableInteractive = b;
	}
	,set_backgroundTile: function(t) {
		if(this.backgroundTile == t) {
			return t;
		}
		if(t != null) {
			if(this.background == null) {
				var background = new h2d_ScaleGrid(t,this.borderWidth,this.borderHeight);
				this.addChildAt(background,0);
				this.getProperties(background).set_isAbsolute(true);
				this.background = background;
				if(!this.needReflow) {
					background.set_width(Math.ceil(this.calculatedWidth));
					background.set_height(Math.ceil(this.calculatedHeight));
				}
			}
			this.background.tile = t;
		} else if(this.background != null) {
			var _this = this.background;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
			this.background = null;
		}
		return this.backgroundTile = t;
	}
	,set_borderWidth: function(v) {
		if(this.borderWidth == v) {
			return v;
		}
		if(this.background != null) {
			this.background.set_borderWidth(v);
		}
		this.set_needReflow(true);
		return this.borderWidth = v;
	}
	,set_borderHeight: function(v) {
		if(this.borderHeight == v) {
			return v;
		}
		if(this.background != null) {
			this.background.set_borderHeight(v);
		}
		this.set_needReflow(true);
		return this.borderHeight = v;
	}
	,reflow: function() {
		var _gthis = this;
		this.onBeforeReflow();
		if(!this.isConstraint && (this.fillWidth || this.fillHeight)) {
			var scene = this.getScene();
			if(scene.width != this.constraintWidth || scene.height != this.constraintHeight) {
				this.constraintSize(this.fillWidth ? scene.width : -1,this.fillHeight ? scene.height : -1);
				this.isConstraint = false;
			}
		}
		var isConstraintWidth = this.realMaxWidth >= 0;
		var isConstraintHeight = this.realMaxHeight >= 0;
		var maxTotWidth = this.realMaxWidth < 0 ? 100000000 : Math.floor(this.realMaxWidth);
		var maxTotHeight = this.realMaxHeight < 0 ? 100000000 : Math.floor(this.realMaxHeight);
		var maxInWidth = maxTotWidth - (this.paddingLeft + this.paddingRight + this.borderWidth * 2);
		var maxInHeight = maxTotHeight - (this.paddingTop + this.paddingBottom + this.borderHeight * 2);
		if(this.debug) {
			this.debugGraphics.clear();
		}
		var cw;
		var ch;
		switch(this.layout._hx_index) {
		case 0:
			var halign = this.horizontalAlign == null ? h2d_FlowAlign.Left : this.horizontalAlign;
			var valign = this.verticalAlign == null ? h2d_FlowAlign.Bottom : this.verticalAlign;
			var startX = this.paddingLeft + this.borderWidth;
			var x = startX;
			var y = this.paddingTop + this.borderHeight;
			cw = x;
			var maxLineHeight = 0;
			var minLineHeight = this.lineHeight != null ? this.lineHeight : this.realMinHeight >= 0 && !this.multiline ? this.realMinHeight - (this.paddingTop + this.paddingBottom + this.borderHeight * 2) : 0;
			var lastIndex = 0;
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var p = _gthis.properties[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				var isAbs = p.isAbsolute;
				if(isAbs && p.horizontalAlign == null && p.verticalAlign == null) {
					continue;
				}
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				var pw = p.paddingLeft + p.paddingRight;
				var ph = p.paddingTop + p.paddingBottom;
				if(!isAbs) {
					c.constraintSize(isConstraintWidth && p.constraint ? (maxInWidth - pw) / Math.abs(c.scaleX) : -1,isConstraintHeight && p.constraint ? (maxInHeight - ph) / Math.abs(c.scaleX) : -1);
				}
				var b = c.getSize(this.tmpBounds);
				var br = false;
				p.calculatedWidth = Math.ceil(b.xMax) + pw;
				p.calculatedHeight = Math.ceil(b.yMax) + ph;
				if(p.minWidth != null && p.calculatedWidth < p.minWidth) {
					p.calculatedWidth = p.minWidth;
				}
				if(p.minHeight != null && p.calculatedHeight < p.minHeight) {
					p.calculatedHeight = p.minHeight;
				}
				if(isAbs) {
					continue;
				}
				if(this.multiline && x - startX + p.calculatedWidth > maxInWidth && x - startX > 0) {
					br = true;
					if(maxLineHeight < minLineHeight) {
						maxLineHeight = minLineHeight;
					} else if(_gthis.overflow && minLineHeight != 0) {
						maxLineHeight = minLineHeight;
					}
					var _g2 = lastIndex;
					var _g11 = i;
					while(_g2 < _g11) {
						var i1 = _g2++;
						var p1 = _gthis.properties[_gthis.reverse ? _gthis.children.length - i1 - 1 : i1];
						if(p1.isAbsolute && p1.verticalAlign == null) {
							continue;
						}
						var c1 = _gthis.children[_gthis.reverse ? _gthis.children.length - i1 - 1 : i1];
						if(!c1.visible) {
							continue;
						}
						var a = p1.verticalAlign != null ? p1.verticalAlign : valign;
						c1.posChanged = true;
						c1.y = y + p1.offsetY + p1.paddingTop;
						if(a != null) {
							switch(a._hx_index) {
							case 3:
								var _g3 = c1;
								_g3.posChanged = true;
								_g3.y += (maxLineHeight - p1.calculatedHeight) * 0.5 | 0;
								break;
							case 4:
								var _g4 = c1;
								_g4.posChanged = true;
								_g4.y += maxLineHeight - (p1.calculatedHeight | 0);
								break;
							default:
							}
						}
					}
					lastIndex = i;
					y += maxLineHeight + this.verticalSpacing;
					maxLineHeight = 0;
					x = startX;
				}
				p.isBreak = br;
				x += p.calculatedWidth;
				if(x > cw) {
					cw = x;
				}
				x += this.horizontalSpacing;
				if(p.calculatedHeight > maxLineHeight) {
					maxLineHeight = p.calculatedHeight;
				}
			}
			var maxIndex = this.children.length;
			if(maxLineHeight < minLineHeight) {
				maxLineHeight = minLineHeight;
			} else if(_gthis.overflow && minLineHeight != 0) {
				maxLineHeight = minLineHeight;
			}
			var _g5 = lastIndex;
			var _g12 = maxIndex;
			while(_g5 < _g12) {
				var i2 = _g5++;
				var p2 = _gthis.properties[_gthis.reverse ? _gthis.children.length - i2 - 1 : i2];
				if(p2.isAbsolute && p2.verticalAlign == null) {
					continue;
				}
				var c2 = _gthis.children[_gthis.reverse ? _gthis.children.length - i2 - 1 : i2];
				if(!c2.visible) {
					continue;
				}
				var a1 = p2.verticalAlign != null ? p2.verticalAlign : valign;
				c2.posChanged = true;
				c2.y = y + p2.offsetY + p2.paddingTop;
				if(a1 != null) {
					switch(a1._hx_index) {
					case 3:
						var _g6 = c2;
						_g6.posChanged = true;
						_g6.y += (maxLineHeight - p2.calculatedHeight) * 0.5 | 0;
						break;
					case 4:
						var _g7 = c2;
						_g7.posChanged = true;
						_g7.y += maxLineHeight - (p2.calculatedHeight | 0);
						break;
					default:
					}
				}
			}
			lastIndex = maxIndex;
			cw += this.paddingRight + this.borderWidth;
			ch = y + maxLineHeight + this.paddingBottom + this.borderHeight;
			if(this.realMinWidth >= 0 && cw < this.realMinWidth) {
				cw = this.realMinWidth;
			}
			var endX = cw - (this.paddingRight + this.borderWidth);
			var xmin = startX;
			var xmax = endX;
			var midSpace = 0;
			var curAlign = null;
			var _g21 = 0;
			var _g31 = this.children.length;
			while(_g21 < _g31) {
				var i3 = _g21++;
				var p3 = _gthis.properties[_gthis.reverse ? _gthis.children.length - i3 - 1 : i3];
				var c3 = _gthis.children[_gthis.reverse ? _gthis.children.length - i3 - 1 : i3];
				if(!c3.visible) {
					continue;
				}
				if(p3.isAbsolute) {
					var _g22 = p3.horizontalAlign;
					if(_g22 != null) {
						switch(_g22._hx_index) {
						case 1:
							c3.posChanged = true;
							c3.x = startX + p3.offsetX;
							break;
						case 2:
							c3.posChanged = true;
							c3.x = endX - p3.calculatedWidth + p3.offsetX;
							break;
						case 3:
							c3.posChanged = true;
							c3.x = startX + ((startX - endX - p3.calculatedWidth) * 0.5 | 0) + p3.offsetX;
							break;
						default:
						}
					}
					continue;
				}
				if(p3.isBreak) {
					xmin = startX;
					xmax = endX;
					midSpace = 0;
				}
				var px;
				var align = p3.horizontalAlign == null ? halign : p3.horizontalAlign;
				if(curAlign != align) {
					curAlign = align;
					midSpace = 0;
				}
				if(align == null) {
					px = xmin;
					xmin += p3.calculatedWidth + this.horizontalSpacing;
				} else {
					switch(align._hx_index) {
					case 2:
						if(midSpace == 0) {
							var p4 = p3.calculatedWidth;
							var size = 0;
							var _g8 = i3 + 1;
							var _g13 = _gthis.children.length;
							while(_g8 < _g13) {
								var j = _g8++;
								var p5 = _gthis.properties[_gthis.reverse ? _gthis.children.length - j - 1 : j];
								if(p5.isAbsolute || !_gthis.children[_gthis.reverse ? _gthis.children.length - j - 1 : j].visible) {
									continue;
								}
								if(p5.isBreak) {
									break;
								}
								size += _gthis.horizontalSpacing + p5.calculatedWidth;
							}
							var remSize = p4 + size;
							midSpace = xmax - xmin - remSize;
							xmin += midSpace;
						}
						px = xmin;
						xmin += p3.calculatedWidth + this.horizontalSpacing;
						break;
					case 3:
						if(midSpace == 0) {
							var p6 = p3.calculatedWidth;
							var size1 = 0;
							var _g9 = i3 + 1;
							var _g14 = _gthis.children.length;
							while(_g9 < _g14) {
								var j1 = _g9++;
								var p7 = _gthis.properties[_gthis.reverse ? _gthis.children.length - j1 - 1 : j1];
								if(p7.isAbsolute || !_gthis.children[_gthis.reverse ? _gthis.children.length - j1 - 1 : j1].visible) {
									continue;
								}
								if(p7.isBreak) {
									break;
								}
								size1 += _gthis.horizontalSpacing + p7.calculatedWidth;
							}
							var remSize1 = p6 + size1;
							midSpace = (xmax - xmin - remSize1) * 0.5 | 0;
							xmin += midSpace;
						}
						px = xmin;
						xmin += p3.calculatedWidth + this.horizontalSpacing;
						break;
					default:
						px = xmin;
						xmin += p3.calculatedWidth + this.horizontalSpacing;
					}
				}
				c3.posChanged = true;
				c3.x = px + p3.offsetX + p3.paddingLeft;
				if(p3.isAbsolute) {
					xmin = px;
				}
			}
			break;
		case 1:
			var halign1 = this.horizontalAlign == null ? h2d_FlowAlign.Left : this.horizontalAlign;
			var valign1 = this.verticalAlign == null ? h2d_FlowAlign.Top : this.verticalAlign;
			var startY = this.paddingTop + this.borderHeight;
			var y1 = startY;
			var x1 = this.paddingLeft + this.borderWidth;
			ch = y1;
			var maxColWidth = 0;
			var minColWidth = this.colWidth != null ? this.colWidth : this.realMinWidth >= 0 && !this.multiline ? this.realMinWidth - (this.paddingLeft + this.paddingRight + this.borderWidth * 2) : 0;
			var lastIndex1 = 0;
			var _g10 = 0;
			var _g15 = this.children.length;
			while(_g10 < _g15) {
				var i4 = _g10++;
				var p8 = _gthis.properties[_gthis.reverse ? _gthis.children.length - i4 - 1 : i4];
				var isAbs1 = p8.isAbsolute;
				if(isAbs1 && p8.horizontalAlign == null && p8.verticalAlign == null) {
					continue;
				}
				var c4 = _gthis.children[_gthis.reverse ? _gthis.children.length - i4 - 1 : i4];
				if(!c4.visible) {
					continue;
				}
				var pw1 = p8.paddingLeft + p8.paddingRight;
				var ph1 = p8.paddingTop + p8.paddingBottom;
				if(!isAbs1) {
					c4.constraintSize(isConstraintWidth && p8.constraint ? (maxInWidth - pw1) / Math.abs(c4.scaleX) : -1,isConstraintHeight && p8.constraint ? (maxInHeight - ph1) / Math.abs(c4.scaleY) : -1);
				}
				var b1 = c4.getSize(this.tmpBounds);
				var br1 = false;
				p8.calculatedWidth = Math.ceil(b1.xMax) + pw1;
				p8.calculatedHeight = Math.ceil(b1.yMax) + ph1;
				if(p8.minWidth != null && p8.calculatedWidth < p8.minWidth) {
					p8.calculatedWidth = p8.minWidth;
				}
				if(p8.minHeight != null && p8.calculatedHeight < p8.minHeight) {
					p8.calculatedHeight = p8.minHeight;
				}
				if(isAbs1) {
					continue;
				}
				if(this.multiline && y1 - startY + p8.calculatedHeight > maxInHeight && y1 - startY > 0) {
					br1 = true;
					if(maxColWidth < minColWidth) {
						maxColWidth = minColWidth;
					} else if(_gthis.overflow && minColWidth != 0) {
						maxColWidth = minColWidth;
					}
					var _g16 = lastIndex1;
					var _g17 = i4;
					while(_g16 < _g17) {
						var i5 = _g16++;
						var p9 = _gthis.properties[_gthis.reverse ? _gthis.children.length - i5 - 1 : i5];
						if(p9.isAbsolute && p9.horizontalAlign == null) {
							continue;
						}
						var c5 = _gthis.children[_gthis.reverse ? _gthis.children.length - i5 - 1 : i5];
						if(!c5.visible) {
							continue;
						}
						var a2 = p9.horizontalAlign != null ? p9.horizontalAlign : halign1;
						c5.posChanged = true;
						c5.x = x1 + p9.offsetX + p9.paddingLeft;
						if(a2 != null) {
							switch(a2._hx_index) {
							case 2:
								var _g18 = c5;
								_g18.posChanged = true;
								_g18.x += maxColWidth - p9.calculatedWidth;
								break;
							case 3:
								var _g19 = c5;
								_g19.posChanged = true;
								_g19.x += (maxColWidth - p9.calculatedWidth) * 0.5 | 0;
								break;
							default:
							}
						}
					}
					lastIndex1 = i4;
					x1 += maxColWidth + this.horizontalSpacing;
					maxColWidth = 0;
					y1 = startY;
				}
				p8.isBreak = br1;
				c4.posChanged = true;
				c4.y = y1 + p8.offsetY + p8.paddingTop;
				y1 += p8.calculatedHeight;
				if(y1 > ch) {
					ch = y1;
				}
				y1 += this.verticalSpacing;
				if(p8.calculatedWidth > maxColWidth) {
					maxColWidth = p8.calculatedWidth;
				}
			}
			var maxIndex1 = this.children.length;
			if(maxColWidth < minColWidth) {
				maxColWidth = minColWidth;
			} else if(_gthis.overflow && minColWidth != 0) {
				maxColWidth = minColWidth;
			}
			var _g20 = lastIndex1;
			var _g110 = maxIndex1;
			while(_g20 < _g110) {
				var i6 = _g20++;
				var p10 = _gthis.properties[_gthis.reverse ? _gthis.children.length - i6 - 1 : i6];
				if(p10.isAbsolute && p10.horizontalAlign == null) {
					continue;
				}
				var c6 = _gthis.children[_gthis.reverse ? _gthis.children.length - i6 - 1 : i6];
				if(!c6.visible) {
					continue;
				}
				var a3 = p10.horizontalAlign != null ? p10.horizontalAlign : halign1;
				c6.posChanged = true;
				c6.x = x1 + p10.offsetX + p10.paddingLeft;
				if(a3 != null) {
					switch(a3._hx_index) {
					case 2:
						var _g23 = c6;
						_g23.posChanged = true;
						_g23.x += maxColWidth - p10.calculatedWidth;
						break;
					case 3:
						var _g24 = c6;
						_g24.posChanged = true;
						_g24.x += (maxColWidth - p10.calculatedWidth) * 0.5 | 0;
						break;
					default:
					}
				}
			}
			lastIndex1 = maxIndex1;
			ch += this.paddingBottom + this.borderHeight;
			cw = x1 + maxColWidth + this.paddingRight + this.borderWidth;
			if(this.realMinHeight >= 0 && ch < this.realMinHeight) {
				ch = this.realMinHeight;
			}
			var endY = ch - (this.paddingBottom + this.borderHeight);
			var ymin = startY;
			var ymax = endY;
			var midSpace1 = 0;
			var curAlign1 = null;
			var _g25 = 0;
			var _g32 = this.children.length;
			while(_g25 < _g32) {
				var i7 = _g25++;
				var p11 = _gthis.properties[_gthis.reverse ? _gthis.children.length - i7 - 1 : i7];
				var c7 = _gthis.children[_gthis.reverse ? _gthis.children.length - i7 - 1 : i7];
				if(!c7.visible) {
					continue;
				}
				if(p11.isAbsolute) {
					var _g26 = p11.verticalAlign;
					if(_g26 != null) {
						switch(_g26._hx_index) {
						case 0:
							c7.posChanged = true;
							c7.y = startY + p11.offsetY;
							break;
						case 3:
							c7.posChanged = true;
							c7.y = startY + ((startY - endY - p11.calculatedHeight) * 0.5 | 0) + p11.offsetY;
							break;
						case 4:
							c7.posChanged = true;
							c7.y = endY - p11.calculatedHeight + p11.offsetY;
							break;
						default:
						}
					}
					continue;
				}
				if(p11.isBreak) {
					ymin = startY;
					ymax = endY;
					midSpace1 = 0;
				}
				var py;
				var align1 = p11.verticalAlign == null ? valign1 : p11.verticalAlign;
				if(curAlign1 != align1) {
					curAlign1 = align1;
					midSpace1 = 0;
				}
				if(align1 == null) {
					py = ymin;
					ymin += p11.calculatedHeight + this.verticalSpacing;
				} else {
					switch(align1._hx_index) {
					case 3:
						if(midSpace1 == 0) {
							var p12 = p11.calculatedHeight;
							var size2 = 0;
							var _g27 = i7 + 1;
							var _g111 = _gthis.children.length;
							while(_g27 < _g111) {
								var j2 = _g27++;
								var p13 = _gthis.properties[_gthis.reverse ? _gthis.children.length - j2 - 1 : j2];
								if(p13.isAbsolute || !_gthis.children[_gthis.reverse ? _gthis.children.length - j2 - 1 : j2].visible) {
									continue;
								}
								if(p13.isBreak) {
									break;
								}
								size2 += _gthis.verticalSpacing + p13.calculatedHeight;
							}
							var remSize2 = p12 + size2;
							midSpace1 = (ymax - ymin - remSize2) * 0.5 | 0;
							ymin += midSpace1;
						}
						py = ymin;
						ymin += p11.calculatedHeight + this.verticalSpacing;
						break;
					case 4:
						if(midSpace1 == 0) {
							var p14 = p11.calculatedHeight;
							var size3 = 0;
							var _g28 = i7 + 1;
							var _g112 = _gthis.children.length;
							while(_g28 < _g112) {
								var j3 = _g28++;
								var p15 = _gthis.properties[_gthis.reverse ? _gthis.children.length - j3 - 1 : j3];
								if(p15.isAbsolute || !_gthis.children[_gthis.reverse ? _gthis.children.length - j3 - 1 : j3].visible) {
									continue;
								}
								if(p15.isBreak) {
									break;
								}
								size3 += _gthis.verticalSpacing + p15.calculatedHeight;
							}
							var remSize3 = p14 + size3;
							midSpace1 = ymax - ymin - remSize3;
							ymin += midSpace1;
						}
						py = ymin;
						ymin += p11.calculatedHeight + this.verticalSpacing;
						break;
					default:
						py = ymin;
						ymin += p11.calculatedHeight + this.verticalSpacing;
					}
				}
				c7.posChanged = true;
				c7.y = py + p11.offsetY + p11.paddingTop;
			}
			break;
		case 2:
			var halign2 = this.horizontalAlign == null ? h2d_FlowAlign.Left : this.horizontalAlign;
			var valign2 = this.verticalAlign == null ? h2d_FlowAlign.Top : this.verticalAlign;
			var maxChildW = 0;
			var maxChildH = 0;
			var _g29 = 0;
			var _g113 = this.children.length;
			while(_g29 < _g113) {
				var i8 = _g29++;
				var c8 = _gthis.children[_gthis.reverse ? _gthis.children.length - i8 - 1 : i8];
				if(!c8.visible) {
					continue;
				}
				var p16 = _gthis.properties[_gthis.reverse ? _gthis.children.length - i8 - 1 : i8];
				var isAbs2 = p16.isAbsolute;
				if(isAbs2 && p16.verticalAlign == null && p16.horizontalAlign == null) {
					continue;
				}
				if(!isAbs2) {
					c8.constraintSize(isConstraintWidth && p16.constraint ? maxInWidth / Math.abs(c8.scaleX) : -1,isConstraintHeight && p16.constraint ? maxInHeight / Math.abs(c8.scaleY) : -1);
				}
				var b2 = c8.getSize(this.tmpBounds);
				p16.calculatedWidth = Math.ceil(b2.xMax) + p16.paddingLeft + p16.paddingRight;
				p16.calculatedHeight = Math.ceil(b2.yMax) + p16.paddingTop + p16.paddingBottom;
				if(p16.minWidth != null && p16.calculatedWidth < p16.minWidth) {
					p16.calculatedWidth = p16.minWidth;
				}
				if(p16.minHeight != null && p16.calculatedHeight < p16.minHeight) {
					p16.calculatedHeight = p16.minHeight;
				}
				if(isAbs2) {
					continue;
				}
				if(p16.calculatedWidth > maxChildW) {
					maxChildW = p16.calculatedWidth;
				}
				if(p16.calculatedHeight > maxChildH) {
					maxChildH = p16.calculatedHeight;
				}
			}
			var xmin1 = this.paddingLeft + this.borderWidth;
			var ymin1 = this.paddingTop + this.borderHeight;
			var xmax1;
			if(this.realMaxWidth > 0 && this.overflow) {
				xmax1 = Math.floor(this.realMaxWidth - (this.paddingRight + this.borderWidth));
			} else {
				var a4 = xmin1 + maxChildW;
				var b3 = this.realMinWidth - (this.paddingRight + this.borderWidth);
				xmax1 = a4 < b3 ? b3 : a4;
			}
			var ymax1;
			if(this.realMaxWidth > 0 && this.overflow) {
				ymax1 = Math.floor(this.realMaxHeight - (this.paddingBottom + this.borderHeight));
			} else {
				var a5 = ymin1 + maxChildH;
				var b4 = this.realMinHeight - (this.paddingBottom + this.borderHeight);
				ymax1 = a5 < b4 ? b4 : a5;
			}
			cw = xmax1 + this.paddingRight + this.borderWidth;
			ch = ymax1 + this.paddingBottom + this.borderHeight;
			var _g210 = 0;
			var _g33 = this.children.length;
			while(_g210 < _g33) {
				var i9 = _g210++;
				var c9 = _gthis.children[_gthis.reverse ? _gthis.children.length - i9 - 1 : i9];
				if(!c9.visible) {
					continue;
				}
				var p17 = _gthis.properties[_gthis.reverse ? _gthis.children.length - i9 - 1 : i9];
				var isAbs3 = p17.isAbsolute;
				if(isAbs3 && p17.verticalAlign == null && p17.horizontalAlign == null) {
					continue;
				}
				var valign3 = p17.verticalAlign == null ? valign2 : p17.verticalAlign;
				var halign3 = p17.horizontalAlign == null ? halign2 : p17.horizontalAlign;
				var px1;
				if(halign3 == null) {
					px1 = xmin1;
				} else {
					switch(halign3._hx_index) {
					case 2:
						px1 = xmax1 - p17.calculatedWidth;
						break;
					case 3:
						px1 = xmin1 + ((xmax1 - xmin1 - p17.calculatedWidth) * 0.5 | 0);
						break;
					default:
						px1 = xmin1;
					}
				}
				var py1;
				if(valign3 == null) {
					py1 = ymin1;
				} else {
					switch(valign3._hx_index) {
					case 3:
						py1 = ymin1 + ((ymax1 - ymin1 - p17.calculatedHeight) * 0.5 | 0);
						break;
					case 4:
						py1 = ymax1 - p17.calculatedHeight;
						break;
					default:
						py1 = ymin1;
					}
				}
				if(!isAbs3 || p17.horizontalAlign != null) {
					c9.posChanged = true;
					c9.x = px1 + p17.offsetX + p17.paddingLeft;
				}
				if(!isAbs3 || p17.verticalAlign != null) {
					c9.posChanged = true;
					c9.y = py1 + p17.offsetY + p17.paddingTop;
				}
			}
			break;
		}
		if(this.realMinWidth >= 0 && cw < this.realMinWidth) {
			cw = this.realMinWidth;
		}
		if(this.realMinHeight >= 0 && ch < this.realMinHeight) {
			ch = this.realMinHeight;
		}
		if(this.overflow) {
			if(isConstraintWidth && cw > maxTotWidth) {
				cw = maxTotWidth;
			}
			if(isConstraintHeight && ch > maxTotHeight) {
				ch = maxTotHeight;
			}
		}
		if(this.interactive != null) {
			this.interactive.width = cw;
			this.interactive.height = ch;
		}
		if(this.background != null) {
			this.background.set_width(Math.ceil(cw));
			this.background.set_height(Math.ceil(ch));
		}
		this.calculatedWidth = cw;
		this.calculatedHeight = ch;
		this.set_needReflow(false);
		if(this.debug) {
			if(this.debugGraphics != this.children[this.children.length - 1]) {
				this.addChild(this.debugGraphics);
				this.set_needReflow(false);
			}
			if(this.paddingLeft != 0 || this.paddingRight != 0 || this.paddingTop != 0 || this.paddingBottom != 0 || this.borderWidth != 0 || this.borderHeight != 0) {
				this.debugGraphics.lineStyle(1,65280);
				this.debugGraphics.drawRect(this.paddingLeft + this.borderWidth,this.paddingTop + this.borderHeight,this.get_innerWidth(),this.get_innerHeight());
			}
			this.debugGraphics.lineStyle(1,33023);
			var _g114 = 0;
			var _g211 = this.children.length;
			while(_g114 < _g211) {
				var i10 = _g114++;
				var p18 = _gthis.properties[_gthis.reverse ? _gthis.children.length - i10 - 1 : i10];
				var c10 = _gthis.children[_gthis.reverse ? _gthis.children.length - i10 - 1 : i10];
				if(p18.isAbsolute || !c10.visible) {
					continue;
				}
				this.debugGraphics.drawRect(c10.x,c10.y,p18.calculatedWidth,p18.calculatedHeight);
			}
			this.debugGraphics.lineStyle(1,16711680);
			this.debugGraphics.drawRect(0,0,cw,ch);
		}
		this.onAfterReflow();
	}
	,onBeforeReflow: function() {
	}
	,onAfterReflow: function() {
	}
	,__class__: h2d_Flow
});
var h2d_Kerning = function(c,o) {
	this.prevChar = c;
	this.offset = o;
};
$hxClasses["h2d.Kerning"] = h2d_Kerning;
h2d_Kerning.__name__ = "h2d.Kerning";
h2d_Kerning.prototype = {
	prevChar: null
	,offset: null
	,next: null
	,__class__: h2d_Kerning
};
var h2d_FontChar = function(t,w) {
	this.t = t;
	this.width = w;
};
$hxClasses["h2d.FontChar"] = h2d_FontChar;
h2d_FontChar.__name__ = "h2d.FontChar";
h2d_FontChar.prototype = {
	t: null
	,width: null
	,kerning: null
	,addKerning: function(prevChar,offset) {
		var k = new h2d_Kerning(prevChar,offset);
		k.next = this.kerning;
		this.kerning = k;
	}
	,getKerningOffset: function(prevChar) {
		var k = this.kerning;
		while(k != null) {
			if(k.prevChar == prevChar) {
				return k.offset;
			}
			k = k.next;
		}
		return 0;
	}
	,__class__: h2d_FontChar
};
var h2d_FontType = $hxEnums["h2d.FontType"] = { __ename__ : true, __constructs__ : ["BitmapFont","SignedDistanceField"]
	,BitmapFont: {_hx_index:0,__enum__:"h2d.FontType",toString:$estr}
	,SignedDistanceField: ($_=function(channel,alphaCutoff,smoothing) { return {_hx_index:1,channel:channel,alphaCutoff:alphaCutoff,smoothing:smoothing,__enum__:"h2d.FontType",toString:$estr}; },$_.__params__ = ["channel","alphaCutoff","smoothing"],$_)
};
h2d_FontType.__empty_constructs__ = [h2d_FontType.BitmapFont];
var h2d_Font = function(name,size,type) {
	this.name = name;
	this.size = size;
	this.initSize = size;
	this.glyphs = new haxe_ds_IntMap();
	this.defaultChar = this.nullChar = new h2d_FontChar(new h2d_Tile(null,0,0,0,0),0);
	this.charset = hxd_Charset.getDefault();
	if(name != null) {
		this.tilePath = haxe_io_Path.withExtension(name,"png");
	}
	if(type == null) {
		this.type = h2d_FontType.BitmapFont;
	} else {
		this.type = type;
	}
};
$hxClasses["h2d.Font"] = h2d_Font;
h2d_Font.__name__ = "h2d.Font";
h2d_Font.prototype = {
	name: null
	,size: null
	,baseLine: null
	,lineHeight: null
	,tile: null
	,tilePath: null
	,type: null
	,charset: null
	,glyphs: null
	,nullChar: null
	,defaultChar: null
	,initSize: null
	,hasChar: function(code) {
		return this.glyphs.h[code] != null;
	}
	,__class__: h2d_Font
};
var h2d_GPoint = function() {
};
$hxClasses["h2d.GPoint"] = h2d_GPoint;
h2d_GPoint.__name__ = "h2d.GPoint";
h2d_GPoint.prototype = {
	x: null
	,y: null
	,r: null
	,g: null
	,b: null
	,a: null
	,load: function(x,y,r,g,b,a) {
		this.x = x;
		this.y = y;
		this.r = r;
		this.g = g;
		this.b = b;
		this.a = a;
	}
	,__class__: h2d_GPoint
};
var hxd_impl__$Serializable_NoSerializeSupport = function() { };
$hxClasses["hxd.impl._Serializable.NoSerializeSupport"] = hxd_impl__$Serializable_NoSerializeSupport;
hxd_impl__$Serializable_NoSerializeSupport.__name__ = "hxd.impl._Serializable.NoSerializeSupport";
hxd_impl__$Serializable_NoSerializeSupport.__isInterface__ = true;
var h3d_prim_Primitive = function() {
	this.refCount = 0;
};
$hxClasses["h3d.prim.Primitive"] = h3d_prim_Primitive;
h3d_prim_Primitive.__name__ = "h3d.prim.Primitive";
h3d_prim_Primitive.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_prim_Primitive.prototype = {
	buffer: null
	,indexes: null
	,refCount: null
	,getBounds: function() {
		throw new js__$Boot_HaxeError("not implemented for " + Std.string(this));
	}
	,incref: function() {
		this.refCount++;
	}
	,decref: function() {
		this.refCount--;
		if(this.refCount <= 0) {
			this.refCount = 0;
			this.dispose();
		}
	}
	,alloc: function(engine) {
		throw new js__$Boot_HaxeError("not implemented");
	}
	,render: function(engine) {
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(engine);
		}
		if(this.indexes == null) {
			if((this.buffer.flags & 1 << h3d_BufferFlag.Quads._hx_index) != 0) {
				engine.renderBuffer(this.buffer,engine.mem.quadIndexes,2,0,-1);
			} else {
				engine.renderBuffer(this.buffer,engine.mem.triIndexes,3,0,-1);
			}
		} else {
			engine.renderIndexed(this.buffer,this.indexes);
		}
	}
	,dispose: function() {
		if(this.buffer != null) {
			this.buffer.dispose();
			this.buffer = null;
		}
		if(this.indexes != null) {
			this.indexes.dispose();
			this.indexes = null;
		}
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__.split(".").pop();
	}
	,__class__: h3d_prim_Primitive
};
var h2d__$Graphics_GraphicsContent = function(allocPos) {
	h3d_prim_Primitive.call(this);
	this.buffers = [];
	this.allocPos = allocPos;
};
$hxClasses["h2d._Graphics.GraphicsContent"] = h2d__$Graphics_GraphicsContent;
h2d__$Graphics_GraphicsContent.__name__ = "h2d._Graphics.GraphicsContent";
h2d__$Graphics_GraphicsContent.__super__ = h3d_prim_Primitive;
h2d__$Graphics_GraphicsContent.prototype = $extend(h3d_prim_Primitive.prototype,{
	tmp: null
	,index: null
	,buffers: null
	,bufferDirty: null
	,indexDirty: null
	,allocPos: null
	,next: function() {
		var nvect = this.tmp.pos >> 3;
		if(nvect < 32768) {
			return false;
		}
		this.buffers.push({ buf : this.tmp, idx : this.index, vbuf : null, ibuf : null});
		var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
		this.tmp = this1;
		var this2 = new Array(0);
		this.index = this2;
		h3d_prim_Primitive.prototype.dispose.call(this);
		return true;
	}
	,alloc: function(engine) {
		if(this.index.length <= 0) {
			return;
		}
		this.buffer = h3d_Buffer.ofFloats(this.tmp,8,[h3d_BufferFlag.RawFormat],this.allocPos);
		this.indexes = h3d_Indexes.alloc(this.index);
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.vbuf == null || b.vbuf.isDisposed()) {
				b.vbuf = h3d_Buffer.ofFloats(b.buf,8,[h3d_BufferFlag.RawFormat]);
			}
			if(b.ibuf == null || b.ibuf.isDisposed()) {
				b.ibuf = h3d_Indexes.alloc(b.idx);
			}
		}
		this.bufferDirty = false;
		this.indexDirty = false;
	}
	,render: function(engine) {
		if(this.index.length <= 0) {
			return;
		}
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(h3d_Engine.CURRENT);
		} else {
			if(this.bufferDirty) {
				this.buffer.dispose();
				this.buffer = h3d_Buffer.ofFloats(this.tmp,8,[h3d_BufferFlag.RawFormat]);
				this.bufferDirty = false;
			}
			if(this.indexDirty) {
				this.indexes.dispose();
				this.indexes = h3d_Indexes.alloc(this.index);
				this.indexDirty = false;
			}
		}
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			engine.renderIndexed(b.vbuf,b.ibuf);
		}
		h3d_prim_Primitive.prototype.render.call(this,engine);
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.vbuf != null) {
				b.vbuf.dispose();
			}
			if(b.ibuf != null) {
				b.ibuf.dispose();
			}
			b.vbuf = null;
			b.ibuf = null;
		}
		h3d_prim_Primitive.prototype.dispose.call(this);
	}
	,clear: function() {
		this.dispose();
		var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
		this.tmp = this1;
		var this2 = new Array(0);
		this.index = this2;
		this.buffers = [];
	}
	,__class__: h2d__$Graphics_GraphicsContent
});
var h2d_Graphics = function(parent,allocPos) {
	this.bevel = 0.25;
	this.my = 0.;
	this.mx = 0.;
	this.md = 1.;
	this.mc = 0.;
	this.mb = 0.;
	this.ma = 1.;
	h2d_Drawable.call(this,parent);
	this.content = new h2d__$Graphics_GraphicsContent(allocPos);
	this.tile = h2d_Tile.fromColor(16777215);
	this.clear();
};
$hxClasses["h2d.Graphics"] = h2d_Graphics;
h2d_Graphics.__name__ = "h2d.Graphics";
h2d_Graphics.__super__ = h2d_Drawable;
h2d_Graphics.prototype = $extend(h2d_Drawable.prototype,{
	content: null
	,tmpPoints: null
	,pindex: null
	,curR: null
	,curG: null
	,curB: null
	,curA: null
	,lineSize: null
	,lineR: null
	,lineG: null
	,lineB: null
	,lineA: null
	,doFill: null
	,xMin: null
	,yMin: null
	,xMax: null
	,yMax: null
	,ma: null
	,mb: null
	,mc: null
	,md: null
	,mx: null
	,my: null
	,tile: null
	,bevel: null
	,onRemove: function() {
		h2d_Drawable.prototype.onRemove.call(this);
		this.clear();
	}
	,clear: function() {
		this.content.clear();
		this.tmpPoints = [];
		this.pindex = 0;
		this.lineSize = 0;
		this.xMin = Infinity;
		this.yMin = Infinity;
		this.yMax = -Infinity;
		this.xMax = -Infinity;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.tile != null) {
			this.addBounds(relativeTo,out,this.xMin,this.yMin,this.xMax - this.xMin,this.yMax - this.yMin);
		}
	}
	,isConvex: function(points) {
		var first = true;
		var sign = false;
		var _g = 0;
		var _g1 = points.length;
		while(_g < _g1) {
			var i = _g++;
			var p1 = points[i];
			var p2 = points[(i + 1) % points.length];
			var p3 = points[(i + 2) % points.length];
			var s = (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x) > 0;
			if(first) {
				first = false;
				sign = s;
			} else if(sign != s) {
				return false;
			}
		}
		return true;
	}
	,flushLine: function(start) {
		var pts = this.tmpPoints;
		var last = pts.length - 1;
		var prev = pts[last];
		var p = pts[0];
		var closed = p.x == prev.x && p.y == prev.y;
		var count = pts.length;
		if(!closed) {
			var prevLast = pts[last - 1];
			if(prevLast == null) {
				prevLast = p;
			}
			var gp = new h2d_GPoint();
			gp.load(prev.x * 2 - prevLast.x,prev.y * 2 - prevLast.y,0,0,0,0);
			pts.push(gp);
			var pNext = pts[1];
			if(pNext == null) {
				pNext = p;
			}
			var gp1 = new h2d_GPoint();
			gp1.load(p.x * 2 - pNext.x,p.y * 2 - pNext.y,0,0,0,0);
			prev = gp1;
		} else if(p != prev) {
			--count;
			--last;
			prev = pts[last];
		}
		var _g = 0;
		var _g1 = count;
		while(_g < _g1) {
			var i = _g++;
			var next = pts[(i + 1) % pts.length];
			var nx1 = prev.y - p.y;
			var ny1 = p.x - prev.x;
			var ns1 = 1. / Math.sqrt(nx1 * nx1 + ny1 * ny1);
			var nx2 = p.y - next.y;
			var ny2 = next.x - p.x;
			var ns2 = 1. / Math.sqrt(nx2 * nx2 + ny2 * ny2);
			var nx = nx1 * ns1 + nx2 * ns2;
			var ny = ny1 * ns1 + ny2 * ns2;
			var ns = 1. / Math.sqrt(nx * nx + ny * ny);
			nx *= ns;
			ny *= ns;
			var size = nx * nx1 * ns1 + ny * ny1 * ns1;
			if(size < 0.1) {
				size = 0.1;
			}
			var d = this.lineSize * 0.5 / size;
			nx *= d;
			ny *= d;
			if(size > this.bevel) {
				var _this = this.content;
				var x = p.x + nx;
				var y = p.y + ny;
				var r = p.r;
				var g = p.g;
				var b = p.b;
				var a = p.a;
				var this1 = _this.tmp;
				if(this1.pos == this1.array.length) {
					var newSize = this1.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					var newArray = new Float32Array(newSize);
					newArray.set(this1.array);
					this1.array = newArray;
				}
				this1.array[this1.pos++] = x;
				var this2 = _this.tmp;
				if(this2.pos == this2.array.length) {
					var newSize1 = this2.array.length << 1;
					if(newSize1 < 128) {
						newSize1 = 128;
					}
					var newArray1 = new Float32Array(newSize1);
					newArray1.set(this2.array);
					this2.array = newArray1;
				}
				this2.array[this2.pos++] = y;
				var this3 = _this.tmp;
				if(this3.pos == this3.array.length) {
					var newSize2 = this3.array.length << 1;
					if(newSize2 < 128) {
						newSize2 = 128;
					}
					var newArray2 = new Float32Array(newSize2);
					newArray2.set(this3.array);
					this3.array = newArray2;
				}
				this3.array[this3.pos++] = 0;
				var this4 = _this.tmp;
				if(this4.pos == this4.array.length) {
					var newSize3 = this4.array.length << 1;
					if(newSize3 < 128) {
						newSize3 = 128;
					}
					var newArray3 = new Float32Array(newSize3);
					newArray3.set(this4.array);
					this4.array = newArray3;
				}
				this4.array[this4.pos++] = 0;
				var this5 = _this.tmp;
				if(this5.pos == this5.array.length) {
					var newSize4 = this5.array.length << 1;
					if(newSize4 < 128) {
						newSize4 = 128;
					}
					var newArray4 = new Float32Array(newSize4);
					newArray4.set(this5.array);
					this5.array = newArray4;
				}
				this5.array[this5.pos++] = r;
				var this6 = _this.tmp;
				if(this6.pos == this6.array.length) {
					var newSize5 = this6.array.length << 1;
					if(newSize5 < 128) {
						newSize5 = 128;
					}
					var newArray5 = new Float32Array(newSize5);
					newArray5.set(this6.array);
					this6.array = newArray5;
				}
				this6.array[this6.pos++] = g;
				var this7 = _this.tmp;
				if(this7.pos == this7.array.length) {
					var newSize6 = this7.array.length << 1;
					if(newSize6 < 128) {
						newSize6 = 128;
					}
					var newArray6 = new Float32Array(newSize6);
					newArray6.set(this7.array);
					this7.array = newArray6;
				}
				this7.array[this7.pos++] = b;
				var this8 = _this.tmp;
				if(this8.pos == this8.array.length) {
					var newSize7 = this8.array.length << 1;
					if(newSize7 < 128) {
						newSize7 = 128;
					}
					var newArray7 = new Float32Array(newSize7);
					newArray7.set(this8.array);
					this8.array = newArray7;
				}
				this8.array[this8.pos++] = a;
				_this.bufferDirty = true;
				var _this1 = this.content;
				var x1 = p.x - nx;
				var y1 = p.y - ny;
				var r1 = p.r;
				var g1 = p.g;
				var b1 = p.b;
				var a1 = p.a;
				var this9 = _this1.tmp;
				if(this9.pos == this9.array.length) {
					var newSize8 = this9.array.length << 1;
					if(newSize8 < 128) {
						newSize8 = 128;
					}
					var newArray8 = new Float32Array(newSize8);
					newArray8.set(this9.array);
					this9.array = newArray8;
				}
				this9.array[this9.pos++] = x1;
				var this10 = _this1.tmp;
				if(this10.pos == this10.array.length) {
					var newSize9 = this10.array.length << 1;
					if(newSize9 < 128) {
						newSize9 = 128;
					}
					var newArray9 = new Float32Array(newSize9);
					newArray9.set(this10.array);
					this10.array = newArray9;
				}
				this10.array[this10.pos++] = y1;
				var this11 = _this1.tmp;
				if(this11.pos == this11.array.length) {
					var newSize10 = this11.array.length << 1;
					if(newSize10 < 128) {
						newSize10 = 128;
					}
					var newArray10 = new Float32Array(newSize10);
					newArray10.set(this11.array);
					this11.array = newArray10;
				}
				this11.array[this11.pos++] = 0;
				var this12 = _this1.tmp;
				if(this12.pos == this12.array.length) {
					var newSize11 = this12.array.length << 1;
					if(newSize11 < 128) {
						newSize11 = 128;
					}
					var newArray11 = new Float32Array(newSize11);
					newArray11.set(this12.array);
					this12.array = newArray11;
				}
				this12.array[this12.pos++] = 0;
				var this13 = _this1.tmp;
				if(this13.pos == this13.array.length) {
					var newSize12 = this13.array.length << 1;
					if(newSize12 < 128) {
						newSize12 = 128;
					}
					var newArray12 = new Float32Array(newSize12);
					newArray12.set(this13.array);
					this13.array = newArray12;
				}
				this13.array[this13.pos++] = r1;
				var this14 = _this1.tmp;
				if(this14.pos == this14.array.length) {
					var newSize13 = this14.array.length << 1;
					if(newSize13 < 128) {
						newSize13 = 128;
					}
					var newArray13 = new Float32Array(newSize13);
					newArray13.set(this14.array);
					this14.array = newArray13;
				}
				this14.array[this14.pos++] = g1;
				var this15 = _this1.tmp;
				if(this15.pos == this15.array.length) {
					var newSize14 = this15.array.length << 1;
					if(newSize14 < 128) {
						newSize14 = 128;
					}
					var newArray14 = new Float32Array(newSize14);
					newArray14.set(this15.array);
					this15.array = newArray14;
				}
				this15.array[this15.pos++] = b1;
				var this16 = _this1.tmp;
				if(this16.pos == this16.array.length) {
					var newSize15 = this16.array.length << 1;
					if(newSize15 < 128) {
						newSize15 = 128;
					}
					var newArray15 = new Float32Array(newSize15);
					newArray15.set(this16.array);
					this16.array = newArray15;
				}
				this16.array[this16.pos++] = a1;
				_this1.bufferDirty = true;
				var pnext = i == last ? start : this.pindex + 2;
				if(i < count - 1 || closed) {
					var _this2 = this.content;
					_this2.index.push(this.pindex);
					_this2.indexDirty = true;
					var _this3 = this.content;
					_this3.index.push(this.pindex + 1);
					_this3.indexDirty = true;
					var _this4 = this.content;
					_this4.index.push(pnext);
					_this4.indexDirty = true;
					var _this5 = this.content;
					_this5.index.push(this.pindex + 1);
					_this5.indexDirty = true;
					var _this6 = this.content;
					_this6.index.push(pnext);
					_this6.indexDirty = true;
					var _this7 = this.content;
					_this7.index.push(pnext + 1);
					_this7.indexDirty = true;
				}
				this.pindex += 2;
			} else {
				var n0x = next.x - p.x;
				var n0y = next.y - p.y;
				var sign = n0x * nx + n0y * ny;
				var nnx = -ny;
				var nny = nx;
				var size1 = nnx * nx1 * ns1 + nny * ny1 * ns1;
				var d1 = this.lineSize * 0.5 / size1;
				nnx *= d1;
				nny *= d1;
				var pnext1 = i == last ? start : this.pindex + 3;
				if(sign > 0) {
					var _this8 = this.content;
					var x2 = p.x + nx;
					var y2 = p.y + ny;
					var r2 = p.r;
					var g2 = p.g;
					var b2 = p.b;
					var a2 = p.a;
					var this17 = _this8.tmp;
					if(this17.pos == this17.array.length) {
						var newSize16 = this17.array.length << 1;
						if(newSize16 < 128) {
							newSize16 = 128;
						}
						var newArray16 = new Float32Array(newSize16);
						newArray16.set(this17.array);
						this17.array = newArray16;
					}
					this17.array[this17.pos++] = x2;
					var this18 = _this8.tmp;
					if(this18.pos == this18.array.length) {
						var newSize17 = this18.array.length << 1;
						if(newSize17 < 128) {
							newSize17 = 128;
						}
						var newArray17 = new Float32Array(newSize17);
						newArray17.set(this18.array);
						this18.array = newArray17;
					}
					this18.array[this18.pos++] = y2;
					var this19 = _this8.tmp;
					if(this19.pos == this19.array.length) {
						var newSize18 = this19.array.length << 1;
						if(newSize18 < 128) {
							newSize18 = 128;
						}
						var newArray18 = new Float32Array(newSize18);
						newArray18.set(this19.array);
						this19.array = newArray18;
					}
					this19.array[this19.pos++] = 0;
					var this20 = _this8.tmp;
					if(this20.pos == this20.array.length) {
						var newSize19 = this20.array.length << 1;
						if(newSize19 < 128) {
							newSize19 = 128;
						}
						var newArray19 = new Float32Array(newSize19);
						newArray19.set(this20.array);
						this20.array = newArray19;
					}
					this20.array[this20.pos++] = 0;
					var this21 = _this8.tmp;
					if(this21.pos == this21.array.length) {
						var newSize20 = this21.array.length << 1;
						if(newSize20 < 128) {
							newSize20 = 128;
						}
						var newArray20 = new Float32Array(newSize20);
						newArray20.set(this21.array);
						this21.array = newArray20;
					}
					this21.array[this21.pos++] = r2;
					var this22 = _this8.tmp;
					if(this22.pos == this22.array.length) {
						var newSize21 = this22.array.length << 1;
						if(newSize21 < 128) {
							newSize21 = 128;
						}
						var newArray21 = new Float32Array(newSize21);
						newArray21.set(this22.array);
						this22.array = newArray21;
					}
					this22.array[this22.pos++] = g2;
					var this23 = _this8.tmp;
					if(this23.pos == this23.array.length) {
						var newSize22 = this23.array.length << 1;
						if(newSize22 < 128) {
							newSize22 = 128;
						}
						var newArray22 = new Float32Array(newSize22);
						newArray22.set(this23.array);
						this23.array = newArray22;
					}
					this23.array[this23.pos++] = b2;
					var this24 = _this8.tmp;
					if(this24.pos == this24.array.length) {
						var newSize23 = this24.array.length << 1;
						if(newSize23 < 128) {
							newSize23 = 128;
						}
						var newArray23 = new Float32Array(newSize23);
						newArray23.set(this24.array);
						this24.array = newArray23;
					}
					this24.array[this24.pos++] = a2;
					_this8.bufferDirty = true;
					var _this9 = this.content;
					var x3 = p.x - nnx;
					var y3 = p.y - nny;
					var r3 = p.r;
					var g3 = p.g;
					var b3 = p.b;
					var a3 = p.a;
					var this25 = _this9.tmp;
					if(this25.pos == this25.array.length) {
						var newSize24 = this25.array.length << 1;
						if(newSize24 < 128) {
							newSize24 = 128;
						}
						var newArray24 = new Float32Array(newSize24);
						newArray24.set(this25.array);
						this25.array = newArray24;
					}
					this25.array[this25.pos++] = x3;
					var this26 = _this9.tmp;
					if(this26.pos == this26.array.length) {
						var newSize25 = this26.array.length << 1;
						if(newSize25 < 128) {
							newSize25 = 128;
						}
						var newArray25 = new Float32Array(newSize25);
						newArray25.set(this26.array);
						this26.array = newArray25;
					}
					this26.array[this26.pos++] = y3;
					var this27 = _this9.tmp;
					if(this27.pos == this27.array.length) {
						var newSize26 = this27.array.length << 1;
						if(newSize26 < 128) {
							newSize26 = 128;
						}
						var newArray26 = new Float32Array(newSize26);
						newArray26.set(this27.array);
						this27.array = newArray26;
					}
					this27.array[this27.pos++] = 0;
					var this28 = _this9.tmp;
					if(this28.pos == this28.array.length) {
						var newSize27 = this28.array.length << 1;
						if(newSize27 < 128) {
							newSize27 = 128;
						}
						var newArray27 = new Float32Array(newSize27);
						newArray27.set(this28.array);
						this28.array = newArray27;
					}
					this28.array[this28.pos++] = 0;
					var this29 = _this9.tmp;
					if(this29.pos == this29.array.length) {
						var newSize28 = this29.array.length << 1;
						if(newSize28 < 128) {
							newSize28 = 128;
						}
						var newArray28 = new Float32Array(newSize28);
						newArray28.set(this29.array);
						this29.array = newArray28;
					}
					this29.array[this29.pos++] = r3;
					var this30 = _this9.tmp;
					if(this30.pos == this30.array.length) {
						var newSize29 = this30.array.length << 1;
						if(newSize29 < 128) {
							newSize29 = 128;
						}
						var newArray29 = new Float32Array(newSize29);
						newArray29.set(this30.array);
						this30.array = newArray29;
					}
					this30.array[this30.pos++] = g3;
					var this31 = _this9.tmp;
					if(this31.pos == this31.array.length) {
						var newSize30 = this31.array.length << 1;
						if(newSize30 < 128) {
							newSize30 = 128;
						}
						var newArray30 = new Float32Array(newSize30);
						newArray30.set(this31.array);
						this31.array = newArray30;
					}
					this31.array[this31.pos++] = b3;
					var this32 = _this9.tmp;
					if(this32.pos == this32.array.length) {
						var newSize31 = this32.array.length << 1;
						if(newSize31 < 128) {
							newSize31 = 128;
						}
						var newArray31 = new Float32Array(newSize31);
						newArray31.set(this32.array);
						this32.array = newArray31;
					}
					this32.array[this32.pos++] = a3;
					_this9.bufferDirty = true;
					var _this10 = this.content;
					var x4 = p.x + nnx;
					var y4 = p.y + nny;
					var r4 = p.r;
					var g4 = p.g;
					var b4 = p.b;
					var a4 = p.a;
					var this33 = _this10.tmp;
					if(this33.pos == this33.array.length) {
						var newSize32 = this33.array.length << 1;
						if(newSize32 < 128) {
							newSize32 = 128;
						}
						var newArray32 = new Float32Array(newSize32);
						newArray32.set(this33.array);
						this33.array = newArray32;
					}
					this33.array[this33.pos++] = x4;
					var this34 = _this10.tmp;
					if(this34.pos == this34.array.length) {
						var newSize33 = this34.array.length << 1;
						if(newSize33 < 128) {
							newSize33 = 128;
						}
						var newArray33 = new Float32Array(newSize33);
						newArray33.set(this34.array);
						this34.array = newArray33;
					}
					this34.array[this34.pos++] = y4;
					var this35 = _this10.tmp;
					if(this35.pos == this35.array.length) {
						var newSize34 = this35.array.length << 1;
						if(newSize34 < 128) {
							newSize34 = 128;
						}
						var newArray34 = new Float32Array(newSize34);
						newArray34.set(this35.array);
						this35.array = newArray34;
					}
					this35.array[this35.pos++] = 0;
					var this36 = _this10.tmp;
					if(this36.pos == this36.array.length) {
						var newSize35 = this36.array.length << 1;
						if(newSize35 < 128) {
							newSize35 = 128;
						}
						var newArray35 = new Float32Array(newSize35);
						newArray35.set(this36.array);
						this36.array = newArray35;
					}
					this36.array[this36.pos++] = 0;
					var this37 = _this10.tmp;
					if(this37.pos == this37.array.length) {
						var newSize36 = this37.array.length << 1;
						if(newSize36 < 128) {
							newSize36 = 128;
						}
						var newArray36 = new Float32Array(newSize36);
						newArray36.set(this37.array);
						this37.array = newArray36;
					}
					this37.array[this37.pos++] = r4;
					var this38 = _this10.tmp;
					if(this38.pos == this38.array.length) {
						var newSize37 = this38.array.length << 1;
						if(newSize37 < 128) {
							newSize37 = 128;
						}
						var newArray37 = new Float32Array(newSize37);
						newArray37.set(this38.array);
						this38.array = newArray37;
					}
					this38.array[this38.pos++] = g4;
					var this39 = _this10.tmp;
					if(this39.pos == this39.array.length) {
						var newSize38 = this39.array.length << 1;
						if(newSize38 < 128) {
							newSize38 = 128;
						}
						var newArray38 = new Float32Array(newSize38);
						newArray38.set(this39.array);
						this39.array = newArray38;
					}
					this39.array[this39.pos++] = b4;
					var this40 = _this10.tmp;
					if(this40.pos == this40.array.length) {
						var newSize39 = this40.array.length << 1;
						if(newSize39 < 128) {
							newSize39 = 128;
						}
						var newArray39 = new Float32Array(newSize39);
						newArray39.set(this40.array);
						this40.array = newArray39;
					}
					this40.array[this40.pos++] = a4;
					_this10.bufferDirty = true;
					var _this11 = this.content;
					_this11.index.push(this.pindex);
					_this11.indexDirty = true;
					var _this12 = this.content;
					_this12.index.push(pnext1);
					_this12.indexDirty = true;
					var _this13 = this.content;
					_this13.index.push(this.pindex + 2);
					_this13.indexDirty = true;
					var _this14 = this.content;
					_this14.index.push(this.pindex + 2);
					_this14.indexDirty = true;
					var _this15 = this.content;
					_this15.index.push(pnext1);
					_this15.indexDirty = true;
					var _this16 = this.content;
					_this16.index.push(pnext1 + 1);
					_this16.indexDirty = true;
				} else {
					var _this17 = this.content;
					var x5 = p.x + nnx;
					var y5 = p.y + nny;
					var r5 = p.r;
					var g5 = p.g;
					var b5 = p.b;
					var a5 = p.a;
					var this41 = _this17.tmp;
					if(this41.pos == this41.array.length) {
						var newSize40 = this41.array.length << 1;
						if(newSize40 < 128) {
							newSize40 = 128;
						}
						var newArray40 = new Float32Array(newSize40);
						newArray40.set(this41.array);
						this41.array = newArray40;
					}
					this41.array[this41.pos++] = x5;
					var this42 = _this17.tmp;
					if(this42.pos == this42.array.length) {
						var newSize41 = this42.array.length << 1;
						if(newSize41 < 128) {
							newSize41 = 128;
						}
						var newArray41 = new Float32Array(newSize41);
						newArray41.set(this42.array);
						this42.array = newArray41;
					}
					this42.array[this42.pos++] = y5;
					var this43 = _this17.tmp;
					if(this43.pos == this43.array.length) {
						var newSize42 = this43.array.length << 1;
						if(newSize42 < 128) {
							newSize42 = 128;
						}
						var newArray42 = new Float32Array(newSize42);
						newArray42.set(this43.array);
						this43.array = newArray42;
					}
					this43.array[this43.pos++] = 0;
					var this44 = _this17.tmp;
					if(this44.pos == this44.array.length) {
						var newSize43 = this44.array.length << 1;
						if(newSize43 < 128) {
							newSize43 = 128;
						}
						var newArray43 = new Float32Array(newSize43);
						newArray43.set(this44.array);
						this44.array = newArray43;
					}
					this44.array[this44.pos++] = 0;
					var this45 = _this17.tmp;
					if(this45.pos == this45.array.length) {
						var newSize44 = this45.array.length << 1;
						if(newSize44 < 128) {
							newSize44 = 128;
						}
						var newArray44 = new Float32Array(newSize44);
						newArray44.set(this45.array);
						this45.array = newArray44;
					}
					this45.array[this45.pos++] = r5;
					var this46 = _this17.tmp;
					if(this46.pos == this46.array.length) {
						var newSize45 = this46.array.length << 1;
						if(newSize45 < 128) {
							newSize45 = 128;
						}
						var newArray45 = new Float32Array(newSize45);
						newArray45.set(this46.array);
						this46.array = newArray45;
					}
					this46.array[this46.pos++] = g5;
					var this47 = _this17.tmp;
					if(this47.pos == this47.array.length) {
						var newSize46 = this47.array.length << 1;
						if(newSize46 < 128) {
							newSize46 = 128;
						}
						var newArray46 = new Float32Array(newSize46);
						newArray46.set(this47.array);
						this47.array = newArray46;
					}
					this47.array[this47.pos++] = b5;
					var this48 = _this17.tmp;
					if(this48.pos == this48.array.length) {
						var newSize47 = this48.array.length << 1;
						if(newSize47 < 128) {
							newSize47 = 128;
						}
						var newArray47 = new Float32Array(newSize47);
						newArray47.set(this48.array);
						this48.array = newArray47;
					}
					this48.array[this48.pos++] = a5;
					_this17.bufferDirty = true;
					var _this18 = this.content;
					var x6 = p.x - nx;
					var y6 = p.y - ny;
					var r6 = p.r;
					var g6 = p.g;
					var b6 = p.b;
					var a6 = p.a;
					var this49 = _this18.tmp;
					if(this49.pos == this49.array.length) {
						var newSize48 = this49.array.length << 1;
						if(newSize48 < 128) {
							newSize48 = 128;
						}
						var newArray48 = new Float32Array(newSize48);
						newArray48.set(this49.array);
						this49.array = newArray48;
					}
					this49.array[this49.pos++] = x6;
					var this50 = _this18.tmp;
					if(this50.pos == this50.array.length) {
						var newSize49 = this50.array.length << 1;
						if(newSize49 < 128) {
							newSize49 = 128;
						}
						var newArray49 = new Float32Array(newSize49);
						newArray49.set(this50.array);
						this50.array = newArray49;
					}
					this50.array[this50.pos++] = y6;
					var this51 = _this18.tmp;
					if(this51.pos == this51.array.length) {
						var newSize50 = this51.array.length << 1;
						if(newSize50 < 128) {
							newSize50 = 128;
						}
						var newArray50 = new Float32Array(newSize50);
						newArray50.set(this51.array);
						this51.array = newArray50;
					}
					this51.array[this51.pos++] = 0;
					var this52 = _this18.tmp;
					if(this52.pos == this52.array.length) {
						var newSize51 = this52.array.length << 1;
						if(newSize51 < 128) {
							newSize51 = 128;
						}
						var newArray51 = new Float32Array(newSize51);
						newArray51.set(this52.array);
						this52.array = newArray51;
					}
					this52.array[this52.pos++] = 0;
					var this53 = _this18.tmp;
					if(this53.pos == this53.array.length) {
						var newSize52 = this53.array.length << 1;
						if(newSize52 < 128) {
							newSize52 = 128;
						}
						var newArray52 = new Float32Array(newSize52);
						newArray52.set(this53.array);
						this53.array = newArray52;
					}
					this53.array[this53.pos++] = r6;
					var this54 = _this18.tmp;
					if(this54.pos == this54.array.length) {
						var newSize53 = this54.array.length << 1;
						if(newSize53 < 128) {
							newSize53 = 128;
						}
						var newArray53 = new Float32Array(newSize53);
						newArray53.set(this54.array);
						this54.array = newArray53;
					}
					this54.array[this54.pos++] = g6;
					var this55 = _this18.tmp;
					if(this55.pos == this55.array.length) {
						var newSize54 = this55.array.length << 1;
						if(newSize54 < 128) {
							newSize54 = 128;
						}
						var newArray54 = new Float32Array(newSize54);
						newArray54.set(this55.array);
						this55.array = newArray54;
					}
					this55.array[this55.pos++] = b6;
					var this56 = _this18.tmp;
					if(this56.pos == this56.array.length) {
						var newSize55 = this56.array.length << 1;
						if(newSize55 < 128) {
							newSize55 = 128;
						}
						var newArray55 = new Float32Array(newSize55);
						newArray55.set(this56.array);
						this56.array = newArray55;
					}
					this56.array[this56.pos++] = a6;
					_this18.bufferDirty = true;
					var _this19 = this.content;
					var x7 = p.x - nnx;
					var y7 = p.y - nny;
					var r7 = p.r;
					var g7 = p.g;
					var b7 = p.b;
					var a7 = p.a;
					var this57 = _this19.tmp;
					if(this57.pos == this57.array.length) {
						var newSize56 = this57.array.length << 1;
						if(newSize56 < 128) {
							newSize56 = 128;
						}
						var newArray56 = new Float32Array(newSize56);
						newArray56.set(this57.array);
						this57.array = newArray56;
					}
					this57.array[this57.pos++] = x7;
					var this58 = _this19.tmp;
					if(this58.pos == this58.array.length) {
						var newSize57 = this58.array.length << 1;
						if(newSize57 < 128) {
							newSize57 = 128;
						}
						var newArray57 = new Float32Array(newSize57);
						newArray57.set(this58.array);
						this58.array = newArray57;
					}
					this58.array[this58.pos++] = y7;
					var this59 = _this19.tmp;
					if(this59.pos == this59.array.length) {
						var newSize58 = this59.array.length << 1;
						if(newSize58 < 128) {
							newSize58 = 128;
						}
						var newArray58 = new Float32Array(newSize58);
						newArray58.set(this59.array);
						this59.array = newArray58;
					}
					this59.array[this59.pos++] = 0;
					var this60 = _this19.tmp;
					if(this60.pos == this60.array.length) {
						var newSize59 = this60.array.length << 1;
						if(newSize59 < 128) {
							newSize59 = 128;
						}
						var newArray59 = new Float32Array(newSize59);
						newArray59.set(this60.array);
						this60.array = newArray59;
					}
					this60.array[this60.pos++] = 0;
					var this61 = _this19.tmp;
					if(this61.pos == this61.array.length) {
						var newSize60 = this61.array.length << 1;
						if(newSize60 < 128) {
							newSize60 = 128;
						}
						var newArray60 = new Float32Array(newSize60);
						newArray60.set(this61.array);
						this61.array = newArray60;
					}
					this61.array[this61.pos++] = r7;
					var this62 = _this19.tmp;
					if(this62.pos == this62.array.length) {
						var newSize61 = this62.array.length << 1;
						if(newSize61 < 128) {
							newSize61 = 128;
						}
						var newArray61 = new Float32Array(newSize61);
						newArray61.set(this62.array);
						this62.array = newArray61;
					}
					this62.array[this62.pos++] = g7;
					var this63 = _this19.tmp;
					if(this63.pos == this63.array.length) {
						var newSize62 = this63.array.length << 1;
						if(newSize62 < 128) {
							newSize62 = 128;
						}
						var newArray62 = new Float32Array(newSize62);
						newArray62.set(this63.array);
						this63.array = newArray62;
					}
					this63.array[this63.pos++] = b7;
					var this64 = _this19.tmp;
					if(this64.pos == this64.array.length) {
						var newSize63 = this64.array.length << 1;
						if(newSize63 < 128) {
							newSize63 = 128;
						}
						var newArray63 = new Float32Array(newSize63);
						newArray63.set(this64.array);
						this64.array = newArray63;
					}
					this64.array[this64.pos++] = a7;
					_this19.bufferDirty = true;
					var _this20 = this.content;
					_this20.index.push(this.pindex + 1);
					_this20.indexDirty = true;
					var _this21 = this.content;
					_this21.index.push(pnext1);
					_this21.indexDirty = true;
					var _this22 = this.content;
					_this22.index.push(this.pindex + 2);
					_this22.indexDirty = true;
					var _this23 = this.content;
					_this23.index.push(this.pindex + 1);
					_this23.indexDirty = true;
					var _this24 = this.content;
					_this24.index.push(pnext1);
					_this24.indexDirty = true;
					var _this25 = this.content;
					_this25.index.push(pnext1 + 1);
					_this25.indexDirty = true;
				}
				var _this26 = this.content;
				_this26.index.push(this.pindex);
				_this26.indexDirty = true;
				var _this27 = this.content;
				_this27.index.push(this.pindex + 1);
				_this27.indexDirty = true;
				var _this28 = this.content;
				_this28.index.push(this.pindex + 2);
				_this28.indexDirty = true;
				this.pindex += 3;
			}
			prev = p;
			p = next;
		}
	}
	,flushFill: function(i0) {
		if(this.tmpPoints.length < 3) {
			return;
		}
		var pts = this.tmpPoints;
		var p0 = pts[0];
		var p1 = pts[pts.length - 1];
		var last = null;
		var tmp;
		var f = p0.x - p1.x;
		if((f < 0 ? -f : f) < 1e-9) {
			var f1 = p0.y - p1.y;
			tmp = (f1 < 0 ? -f1 : f1) < 1e-9;
		} else {
			tmp = false;
		}
		if(tmp) {
			last = pts.pop();
		}
		if(this.isConvex(pts)) {
			var _g = 1;
			var _g1 = pts.length - 1;
			while(_g < _g1) {
				var i = _g++;
				var _this = this.content;
				_this.index.push(i0);
				_this.indexDirty = true;
				var _this1 = this.content;
				_this1.index.push(i0 + i);
				_this1.indexDirty = true;
				var _this2 = this.content;
				_this2.index.push(i0 + i + 1);
				_this2.indexDirty = true;
			}
		} else {
			var ear = h2d_Graphics.EARCUT;
			if(ear == null) {
				ear = new hxd_earcut_Earcut();
				h2d_Graphics.EARCUT = ear;
			}
			var _g2 = 0;
			var _g11 = ear.triangulate_h2d_GPoint(pts);
			while(_g2 < _g11.length) {
				var i1 = _g11[_g2];
				++_g2;
				var _this3 = this.content;
				_this3.index.push(i1 + i0);
				_this3.indexDirty = true;
			}
		}
		if(last != null) {
			pts.push(last);
		}
	}
	,flush: function() {
		if(this.tmpPoints.length == 0) {
			return;
		}
		if(this.doFill) {
			this.flushFill(this.pindex);
			this.pindex += this.tmpPoints.length;
			if(this.content.next()) {
				this.pindex = 0;
			}
		}
		if(this.lineSize > 0) {
			this.flushLine(this.pindex);
			if(this.content.next()) {
				this.pindex = 0;
			}
		}
		this.tmpPoints = [];
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		if(color == null) {
			color = 0;
		}
		this.flush();
		var alpha1 = alpha;
		if(alpha1 == null) {
			alpha1 = 1.;
		}
		this.curA = alpha1;
		this.curR = (color >> 16 & 255) / 255.;
		this.curG = (color >> 8 & 255) / 255.;
		this.curB = (color & 255) / 255.;
		this.doFill = true;
	}
	,lineStyle: function(size,color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		if(color == null) {
			color = 0;
		}
		if(size == null) {
			size = 0;
		}
		this.flush();
		this.lineSize = size;
		this.lineA = alpha;
		this.lineR = (color >> 16 & 255) / 255.;
		this.lineG = (color >> 8 & 255) / 255.;
		this.lineB = (color & 255) / 255.;
	}
	,endFill: function() {
		this.flush();
		this.doFill = false;
	}
	,drawRect: function(x,y,w,h) {
		this.flush();
		this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		var x1 = x + w;
		this.addVertex(x1,y,this.curR,this.curG,this.curB,this.curA,x1 * this.ma + y * this.mc + this.mx,x1 * this.mb + y * this.md + this.my);
		var x2 = x + w;
		var y1 = y + h;
		this.addVertex(x2,y1,this.curR,this.curG,this.curB,this.curA,x2 * this.ma + y1 * this.mc + this.mx,x2 * this.mb + y1 * this.md + this.my);
		var y2 = y + h;
		this.addVertex(x,y2,this.curR,this.curG,this.curB,this.curA,x * this.ma + y2 * this.mc + this.mx,x * this.mb + y2 * this.md + this.my);
		this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		this.flush();
	}
	,addVertex: function(x,y,r,g,b,a,u,v) {
		if(v == null) {
			v = 0.;
		}
		if(u == null) {
			u = 0.;
		}
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
		if(this.doFill) {
			var _this = this.content;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = x;
			var this2 = _this.tmp;
			if(this2.pos == this2.array.length) {
				var newSize1 = this2.array.length << 1;
				if(newSize1 < 128) {
					newSize1 = 128;
				}
				var newArray1 = new Float32Array(newSize1);
				newArray1.set(this2.array);
				this2.array = newArray1;
			}
			this2.array[this2.pos++] = y;
			var this3 = _this.tmp;
			if(this3.pos == this3.array.length) {
				var newSize2 = this3.array.length << 1;
				if(newSize2 < 128) {
					newSize2 = 128;
				}
				var newArray2 = new Float32Array(newSize2);
				newArray2.set(this3.array);
				this3.array = newArray2;
			}
			this3.array[this3.pos++] = u;
			var this4 = _this.tmp;
			if(this4.pos == this4.array.length) {
				var newSize3 = this4.array.length << 1;
				if(newSize3 < 128) {
					newSize3 = 128;
				}
				var newArray3 = new Float32Array(newSize3);
				newArray3.set(this4.array);
				this4.array = newArray3;
			}
			this4.array[this4.pos++] = v;
			var this5 = _this.tmp;
			if(this5.pos == this5.array.length) {
				var newSize4 = this5.array.length << 1;
				if(newSize4 < 128) {
					newSize4 = 128;
				}
				var newArray4 = new Float32Array(newSize4);
				newArray4.set(this5.array);
				this5.array = newArray4;
			}
			this5.array[this5.pos++] = r;
			var this6 = _this.tmp;
			if(this6.pos == this6.array.length) {
				var newSize5 = this6.array.length << 1;
				if(newSize5 < 128) {
					newSize5 = 128;
				}
				var newArray5 = new Float32Array(newSize5);
				newArray5.set(this6.array);
				this6.array = newArray5;
			}
			this6.array[this6.pos++] = g;
			var this7 = _this.tmp;
			if(this7.pos == this7.array.length) {
				var newSize6 = this7.array.length << 1;
				if(newSize6 < 128) {
					newSize6 = 128;
				}
				var newArray6 = new Float32Array(newSize6);
				newArray6.set(this7.array);
				this7.array = newArray6;
			}
			this7.array[this7.pos++] = b;
			var this8 = _this.tmp;
			if(this8.pos == this8.array.length) {
				var newSize7 = this8.array.length << 1;
				if(newSize7 < 128) {
					newSize7 = 128;
				}
				var newArray7 = new Float32Array(newSize7);
				newArray7.set(this8.array);
				this8.array = newArray7;
			}
			this8.array[this8.pos++] = a;
			_this.bufferDirty = true;
		}
		var gp = new h2d_GPoint();
		gp.load(x,y,this.lineR,this.lineG,this.lineB,this.lineA);
		this.tmpPoints.push(gp);
	}
	,draw: function(ctx) {
		if(!ctx.beginDrawObject(this,this.tile.innerTex)) {
			return;
		}
		this.content.render(ctx.engine);
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		this.flush();
		var _this = this.content;
		if(_this.buffer == null || _this.buffer.isDisposed()) {
			_this.alloc(h3d_Engine.CURRENT);
		} else {
			if(_this.bufferDirty) {
				_this.buffer.dispose();
				_this.buffer = h3d_Buffer.ofFloats(_this.tmp,8,[h3d_BufferFlag.RawFormat]);
				_this.bufferDirty = false;
			}
			if(_this.indexDirty) {
				_this.indexes.dispose();
				_this.indexes = h3d_Indexes.alloc(_this.index);
				_this.indexDirty = false;
			}
		}
	}
	,__class__: h2d_Graphics
});
var h2d_Text = function(font,parent) {
	this.realMaxWidth = -1;
	this.constraintWidth = -1;
	h2d_Drawable.call(this,parent);
	this.set_font(font);
	this.set_textAlign(h2d_Align.Left);
	this.set_letterSpacing(1);
	this.set_lineSpacing(0);
	this.set_text("");
	this.set_textColor(16777215);
};
$hxClasses["h2d.Text"] = h2d_Text;
h2d_Text.__name__ = "h2d.Text";
h2d_Text.__super__ = h2d_Drawable;
h2d_Text.prototype = $extend(h2d_Drawable.prototype,{
	font: null
	,text: null
	,textColor: null
	,maxWidth: null
	,dropShadow: null
	,textWidth: null
	,textHeight: null
	,textAlign: null
	,letterSpacing: null
	,lineSpacing: null
	,glyphs: null
	,calcDone: null
	,calcXMin: null
	,calcYMin: null
	,calcWidth: null
	,calcHeight: null
	,calcSizeHeight: null
	,constraintWidth: null
	,realMaxWidth: null
	,sdfShader: null
	,set_font: function(font) {
		if(this.font == font) {
			return font;
		}
		this.font = font;
		if(font != null) {
			var _g = font.type;
			switch(_g._hx_index) {
			case 0:
				if(this.sdfShader != null) {
					this.removeShader(this.sdfShader);
					this.sdfShader = null;
				}
				break;
			case 1:
				var smoothing = _g.smoothing;
				var alphaCutoff = _g.alphaCutoff;
				var channel = _g.channel;
				if(this.sdfShader == null) {
					this.sdfShader = new h3d_shader_SignedDistanceField();
					this.addShader(this.sdfShader);
				}
				this.sdfShader.alphaCutoff__ = alphaCutoff;
				this.sdfShader.smoothing__ = smoothing;
				var _this = this.sdfShader;
				_this.constModified = true;
				_this.channel__ = channel;
				break;
			}
		}
		if(this.glyphs != null) {
			var _this1 = this.glyphs;
			if(_this1 != null && _this1.parent != null) {
				_this1.parent.removeChild(_this1);
			}
		}
		this.glyphs = new h2d_TileGroup(font == null ? null : font.tile,this);
		this.glyphs.set_visible(false);
		this.rebuild();
		return font;
	}
	,set_textAlign: function(a) {
		if(this.textAlign == a) {
			return a;
		}
		this.textAlign = a;
		this.rebuild();
		return a;
	}
	,set_letterSpacing: function(s) {
		if(this.letterSpacing == s) {
			return s;
		}
		this.letterSpacing = s;
		this.rebuild();
		return s;
	}
	,set_lineSpacing: function(s) {
		if(this.lineSpacing == s) {
			return s;
		}
		this.lineSpacing = s;
		this.rebuild();
		return s;
	}
	,constraintSize: function(width,height) {
		this.constraintWidth = width;
		this.updateConstraint();
	}
	,onAdd: function() {
		h2d_Drawable.prototype.onAdd.call(this);
		this.rebuild();
	}
	,draw: function(ctx) {
		if(this.glyphs == null) {
			this.emitTile(ctx,h2d_Tile.fromColor(16711935,16,16));
			return;
		}
		if(!this.calcDone && this.text != null && this.font != null) {
			this.initGlyphs(this.text);
		}
		if(this.dropShadow != null) {
			var oldX = this.absX;
			var oldY = this.absY;
			this.absX += this.dropShadow.dx * this.matA + this.dropShadow.dy * this.matC;
			this.absY += this.dropShadow.dx * this.matB + this.dropShadow.dy * this.matD;
			var oldR = this.color.x;
			var oldG = this.color.y;
			var oldB = this.color.z;
			var oldA = this.color.w;
			var _this = this.color;
			var c = this.dropShadow.color;
			_this.x = (c >> 16 & 255) / 255;
			_this.y = (c >> 8 & 255) / 255;
			_this.z = (c & 255) / 255;
			_this.w = (c >>> 24) / 255;
			this.color.w = this.dropShadow.alpha * oldA;
			this.glyphs.drawWith(ctx,this);
			this.absX = oldX;
			this.absY = oldY;
			var _this1 = this.color;
			var x = oldR;
			var y = oldG;
			var z = oldB;
			var w = oldA;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this1.x = x;
			_this1.y = y;
			_this1.z = z;
			_this1.w = w;
		}
		this.glyphs.drawWith(ctx,this);
	}
	,set_text: function(t) {
		var t1 = t == null ? "null" : t;
		if(t1 == this.text) {
			return t1;
		}
		this.text = t1;
		this.rebuild();
		return t1;
	}
	,rebuild: function() {
		this.calcDone = false;
		if(this.allocated && this.text != null && this.font != null) {
			this.initGlyphs(this.text);
		}
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,calcTextWidth: function(text) {
		if(this.calcDone) {
			var ow = this.calcWidth;
			var oh = this.calcHeight;
			var osh = this.calcSizeHeight;
			var ox = this.calcXMin;
			var oy = this.calcYMin;
			this.initGlyphs(text,false);
			var w = this.calcWidth;
			this.calcWidth = ow;
			this.calcHeight = oh;
			this.calcSizeHeight = osh;
			this.calcXMin = ox;
			this.calcYMin = oy;
			return w;
		} else {
			this.initGlyphs(text,false);
			this.calcDone = false;
			return this.calcWidth;
		}
	}
	,splitText: function(text) {
		return this.splitRawText(text,0,0);
	}
	,splitRawText: function(text,leftMargin,afterData) {
		if(this.realMaxWidth < 0) {
			return text;
		}
		var lines = [];
		var rest = text;
		var restPos = 0;
		var x = leftMargin;
		var prevChar = -1;
		var _g = 0;
		var _g1 = text.length;
		while(_g < _g1) {
			var i = _g++;
			var cc = HxOverrides.cca(text,i);
			var _this = this.font;
			var c = _this.glyphs.h[cc];
			if(c == null) {
				c = _this.charset.resolveChar(cc,_this.glyphs);
				if(c == null) {
					c = cc == 13 || cc == 10 ? _this.nullChar : _this.defaultChar;
				}
			}
			var e = c;
			var newline = cc == 10;
			var esize = e.width + e.getKerningOffset(prevChar);
			if(this.font.charset.isBreakChar(cc)) {
				if(lines.length == 0 && leftMargin > 0 && x > this.realMaxWidth) {
					lines.push("");
					x -= leftMargin;
				}
				var size = x + esize + this.letterSpacing;
				var k = i + 1;
				var max = text.length;
				var prevChar1 = prevChar;
				var breakFound = false;
				while(size <= this.realMaxWidth && k < max) {
					var cc1 = HxOverrides.cca(text,k++);
					if(this.font.charset.isSpace(cc1) || cc1 == 10) {
						breakFound = true;
						break;
					}
					var _this1 = this.font;
					var c1 = _this1.glyphs.h[cc1];
					if(c1 == null) {
						c1 = _this1.charset.resolveChar(cc1,_this1.glyphs);
						if(c1 == null) {
							c1 = cc1 == 13 || cc1 == 10 ? _this1.nullChar : _this1.defaultChar;
						}
					}
					var e1 = c1;
					size += e1.width + this.letterSpacing + e1.getKerningOffset(prevChar1);
					prevChar1 = cc1;
					if(this.font.charset.isBreakChar(cc1)) {
						break;
					}
				}
				if(size > this.realMaxWidth || !breakFound && size + afterData > this.realMaxWidth) {
					newline = true;
					if(this.font.charset.isSpace(cc)) {
						lines.push(HxOverrides.substr(text,restPos,i - restPos));
						e = null;
					} else {
						lines.push(HxOverrides.substr(text,restPos,i + 1 - restPos));
					}
					restPos = i + 1;
				}
			}
			if(e != null) {
				x += esize + this.letterSpacing;
			}
			if(newline) {
				x = 0;
				prevChar = -1;
			} else {
				prevChar = cc;
			}
		}
		if(restPos < text.length) {
			if(lines.length == 0 && leftMargin > 0 && x + afterData - this.letterSpacing > this.realMaxWidth) {
				lines.push("");
			}
			lines.push(HxOverrides.substr(text,restPos,text.length - restPos));
		}
		return lines.join("\n");
	}
	,initGlyphs: function(text,rebuild,handleAlign,lines) {
		if(handleAlign == null) {
			handleAlign = true;
		}
		if(rebuild == null) {
			rebuild = true;
		}
		if(rebuild) {
			this.glyphs.clear();
		}
		var x = 0.;
		var y = 0.;
		var xMax = 0.;
		var xMin = 0.;
		var prevChar = -1;
		var align = handleAlign ? this.textAlign : h2d_Align.Left;
		switch(align._hx_index) {
		case 1:case 2:case 3:case 4:
			lines = [];
			this.initGlyphs(text,false,false,lines);
			var max = align == h2d_Align.MultilineCenter || align == h2d_Align.MultilineRight ? Math.ceil(this.calcWidth) : this.realMaxWidth < 0 ? 0 : Math.ceil(this.realMaxWidth);
			var k = align == h2d_Align.Center || align == h2d_Align.MultilineCenter ? 1 : 0;
			var _g = 0;
			var _g1 = lines.length;
			while(_g < _g1) {
				var i = _g++;
				lines[i] = max - lines[i] >> k;
			}
			x = lines.shift();
			xMin = x;
			break;
		default:
		}
		var dl = this.font.lineHeight + this.lineSpacing;
		var calcLines = !handleAlign && !rebuild && lines != null;
		var yMin = 0.;
		var t = this.splitText(text);
		var _g2 = 0;
		var _g11 = t.length;
		while(_g2 < _g11) {
			var i1 = _g2++;
			var cc = HxOverrides.cca(t,i1);
			var _this = this.font;
			var c = _this.glyphs.h[cc];
			if(c == null) {
				c = _this.charset.resolveChar(cc,_this.glyphs);
				if(c == null) {
					c = cc == 13 || cc == 10 ? _this.nullChar : _this.defaultChar;
				}
			}
			var e = c;
			var offs = e.getKerningOffset(prevChar);
			var esize = e.width + offs;
			if(cc == 10) {
				if(x > xMax) {
					xMax = x;
				}
				if(calcLines) {
					lines.push(Math.ceil(x));
				}
				switch(align._hx_index) {
				case 0:
					x = 0;
					break;
				case 1:case 2:case 3:case 4:
					x = lines.shift();
					if(x < xMin) {
						xMin = x;
					}
					break;
				}
				y += dl;
				prevChar = -1;
			} else {
				if(e != null) {
					if(rebuild) {
						var _this1 = this.glyphs;
						_this1.content.add(x + offs,y,_this1.curColor.x,_this1.curColor.y,_this1.curColor.z,_this1.curColor.w,e.t);
					}
					if(y == 0 && e.t.dy < yMin) {
						yMin = e.t.dy;
					}
					x += esize + this.letterSpacing;
				}
				prevChar = cc;
			}
		}
		if(calcLines) {
			lines.push(Math.ceil(x));
		}
		if(x > xMax) {
			xMax = x;
		}
		this.calcXMin = xMin;
		this.calcYMin = yMin;
		this.calcWidth = xMax - xMin;
		this.calcHeight = y + this.font.lineHeight;
		this.calcSizeHeight = y + (this.font.baseLine > 0 ? this.font.baseLine : this.font.lineHeight);
		this.calcDone = true;
	}
	,get_textHeight: function() {
		if(!this.calcDone) {
			this.initGlyphs(this.text,false);
		}
		return this.calcHeight;
	}
	,get_textWidth: function() {
		if(!this.calcDone) {
			this.initGlyphs(this.text,false);
		}
		return this.calcWidth;
	}
	,set_maxWidth: function(w) {
		if(this.maxWidth == w) {
			return w;
		}
		this.maxWidth = w;
		this.updateConstraint();
		return w;
	}
	,updateConstraint: function() {
		var old = this.realMaxWidth;
		if(this.maxWidth == null) {
			this.realMaxWidth = this.constraintWidth;
		} else if(this.constraintWidth < 0) {
			this.realMaxWidth = this.maxWidth;
		} else {
			var a = this.maxWidth;
			var b = this.constraintWidth;
			this.realMaxWidth = a > b ? b : a;
		}
		if(this.realMaxWidth != old) {
			this.rebuild();
		}
	}
	,set_textColor: function(c) {
		if(this.textColor == c) {
			return c;
		}
		this.textColor = c;
		var a = this.color.w;
		var _this = this.color;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		_this.w = (c >>> 24) / 255;
		this.color.w = a;
		return c;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(!this.calcDone) {
			this.initGlyphs(this.text,false);
		}
		var x;
		var y;
		var w;
		var h;
		if(forSize) {
			x = this.calcXMin;
			y = 0.;
			w = this.calcWidth;
			h = this.calcSizeHeight;
		} else {
			x = this.calcXMin;
			y = this.calcYMin;
			w = this.calcWidth;
			h = this.calcHeight - this.calcYMin;
		}
		this.addBounds(relativeTo,out,x,y,w,h);
	}
	,__class__: h2d_Text
});
var h2d_HtmlText = function(font,parent) {
	this.elements = [];
	this.condenseWhite = true;
	h2d_Text.call(this,font,parent);
};
$hxClasses["h2d.HtmlText"] = h2d_HtmlText;
h2d_HtmlText.__name__ = "h2d.HtmlText";
h2d_HtmlText.__super__ = h2d_Text;
h2d_HtmlText.prototype = $extend(h2d_Text.prototype,{
	condenseWhite: null
	,elements: null
	,xPos: null
	,yPos: null
	,xMax: null
	,xMin: null
	,sizePos: null
	,dropMatrix: null
	,prevChar: null
	,newLine: null
	,draw: function(ctx) {
		if(this.dropShadow != null) {
			var oldX = this.absX;
			var oldY = this.absY;
			this.absX += this.dropShadow.dx * this.matA + this.dropShadow.dy * this.matC;
			this.absY += this.dropShadow.dx * this.matB + this.dropShadow.dy * this.matD;
			if(this.dropMatrix == null) {
				this.dropMatrix = new h3d_shader_ColorMatrix();
			}
			this.addShader(this.dropMatrix);
			var m = this.dropMatrix.matrix__;
			m.zero();
			m._41 = (this.dropShadow.color >> 16 & 255) / 255;
			m._42 = (this.dropShadow.color >> 8 & 255) / 255;
			m._43 = (this.dropShadow.color & 255) / 255;
			m._44 = this.dropShadow.alpha;
			this.glyphs.drawWith(ctx,this);
			this.removeShader(this.dropMatrix);
			this.absX = oldX;
			this.absY = oldY;
		} else {
			this.dropMatrix = null;
		}
		this.glyphs.drawWith(ctx,this);
	}
	,loadImage: function(url) {
		return null;
	}
	,loadFont: function(name) {
		return this.font;
	}
	,parseText: function(text) {
		try {
			return Xml.parse(text);
		} catch( e ) {
			throw new js__$Boot_HaxeError("Could not parse " + text + " (" + Std.string(((e) instanceof js__$Boot_HaxeError) ? e.val : e) + ")");
		}
	}
	,initGlyphs: function(text,rebuild,handleAlign,lines) {
		if(handleAlign == null) {
			handleAlign = true;
		}
		if(rebuild == null) {
			rebuild = true;
		}
		if(rebuild) {
			this.glyphs.clear();
			var _g = 0;
			var _g1 = this.elements;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				if(e != null && e.parent != null) {
					e.parent.removeChild(e);
				}
			}
			this.elements = [];
		}
		this.glyphs.setDefaultColor(this.textColor);
		this.xPos = 0;
		this.xMin = 0;
		var align = handleAlign ? this.textAlign : h2d_Align.Left;
		switch(align._hx_index) {
		case 1:case 2:case 3:case 4:
			lines = [];
			this.initGlyphs(text,false,false,lines);
			var max = align == h2d_Align.MultilineCenter || align == h2d_Align.MultilineRight ? Math.ceil(this.calcWidth) : this.realMaxWidth < 0 ? 0 : Math.ceil(this.realMaxWidth);
			var k = align == h2d_Align.Center || align == h2d_Align.MultilineCenter ? 1 : 0;
			var _g2 = 0;
			var _g11 = lines.length;
			while(_g2 < _g11) {
				var i = _g2++;
				lines[i] = max - lines[i] >> k;
			}
			this.xPos = lines.shift();
			this.xMin = this.xPos;
			break;
		default:
		}
		this.yPos = 0;
		this.xMax = 0;
		this.sizePos = 0;
		this.calcYMin = 0;
		var doc = this.parseText(text);
		var sizes = [];
		this.prevChar = -1;
		this.newLine = true;
		if(doc.nodeType != Xml.Document && doc.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(doc.nodeType));
		}
		var e1 = HxOverrides.iter(doc.children);
		while(e1.hasNext()) {
			var e2 = e1.next();
			this.buildSizes(e2,this.font,sizes,false);
		}
		this.prevChar = -1;
		this.newLine = true;
		if(doc.nodeType != Xml.Document && doc.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(doc.nodeType));
		}
		var e3 = HxOverrides.iter(doc.children);
		while(e3.hasNext()) {
			var e4 = e3.next();
			this.addNode(e4,this.font,rebuild,handleAlign,sizes,lines);
		}
		if(!handleAlign && !rebuild && lines != null) {
			lines.push(Math.ceil(this.xPos));
		}
		if(this.xPos > this.xMax) {
			this.xMax = this.xPos;
		}
		var y = this.yPos;
		this.calcXMin = this.xMin;
		this.calcWidth = this.xMax - this.xMin;
		this.calcHeight = y + this.font.lineHeight;
		this.calcSizeHeight = y + (this.font.baseLine > 0 ? this.font.baseLine : this.font.lineHeight);
		this.calcDone = true;
	}
	,buildSizes: function(e,font,sizes,forSplit) {
		if(e.nodeType == Xml.Element) {
			var len = 0.;
			if(e.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(e.nodeType));
			}
			var nodeName = e.nodeName.toLowerCase();
			switch(nodeName) {
			case "b":case "bold":
				font = this.loadFont("bold");
				break;
			case "br":
				len = -1;
				this.newLine = true;
				break;
			case "font":
				var a = e.attributes();
				while(a.hasNext()) {
					var a1 = a.next();
					var v = e.get(a1);
					if(a1.toLowerCase() == "face") {
						font = this.loadFont(v);
					}
				}
				break;
			case "img":
				var i = this.loadImage(e.get("src"));
				len = (i == null ? 8 : i.width) + this.letterSpacing;
				this.newLine = false;
				break;
			case "i":case "italic":
				font = this.loadFont("italic");
				break;
			case "p":
				if(!this.newLine) {
					len = -1;
					this.newLine = true;
				}
				break;
			default:
			}
			sizes.push(len);
			if(e.nodeType != Xml.Document && e.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(e.nodeType));
			}
			var child = HxOverrides.iter(e.children);
			while(child.hasNext()) {
				var child1 = child.next();
				this.buildSizes(child1,font,sizes,forSplit);
			}
			if(nodeName == "p") {
				sizes.push(-1);
				this.newLine = true;
			}
		} else {
			this.newLine = false;
			if(e.nodeType == Xml.Document || e.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(e.nodeType));
			}
			var text = this.htmlToText(e.nodeValue);
			var xp = 0.;
			var _g = 0;
			var _g1 = text.length;
			while(_g < _g1) {
				var i1 = _g++;
				var cc = HxOverrides.cca(text,i1);
				var c = font.glyphs.h[cc];
				if(c == null) {
					c = font.charset.resolveChar(cc,font.glyphs);
					if(c == null) {
						c = cc == 13 || cc == 10 ? font.nullChar : font.defaultChar;
					}
				}
				var fc = c;
				var sz = fc.getKerningOffset(this.prevChar) + fc.width;
				if(cc == 10 || font.charset.isBreakChar(cc)) {
					if(cc != 10 && !font.charset.isSpace(cc)) {
						xp += sz;
					}
					if(!forSplit) {
						sizes.push(-(xp + 1));
						return;
					}
					sizes.push(xp);
					if(font.charset.isSpace(cc)) {
						sizes.push(sz);
					}
					xp = 0;
					continue;
				}
				xp += sz + this.letterSpacing;
			}
			sizes.push(xp);
		}
	}
	,htmlToText: function(t) {
		if(this.condenseWhite) {
			t = t.replace(h2d_HtmlText.REG_SPACES.r," ");
		}
		return t;
	}
	,remainingSize: function(sizes) {
		var size = 0.;
		var _g = this.sizePos;
		var _g1 = sizes.length;
		while(_g < _g1) {
			var i = _g++;
			var s = sizes[i];
			if(s < 0) {
				size += -s - 1;
				return size;
			}
			size += s;
		}
		return size;
	}
	,splitText: function(text) {
		var _gthis = this;
		if(this.realMaxWidth < 0) {
			return text;
		}
		this.yPos = 0;
		this.xMax = 0;
		this.sizePos = 0;
		this.calcYMin = 0;
		var doc = this.parseText(text);
		var sizes = [];
		this.prevChar = -1;
		this.newLine = true;
		if(doc.nodeType != Xml.Document && doc.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(doc.nodeType));
		}
		var e = HxOverrides.iter(doc.children);
		while(e.hasNext()) {
			var e1 = e.next();
			this.buildSizes(e1,this.font,sizes,true);
		}
		this.xMax = 0;
		var addBreaks = null;
		addBreaks = function(e2) {
			if(e2.nodeType == Xml.Element) {
				var sz = sizes[_gthis.sizePos++];
				if(sz < 0) {
					_gthis.xMax = 0;
				} else {
					_gthis.xMax += sz;
				}
				if(e2.nodeType != Xml.Document && e2.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(e2.nodeType));
				}
				var x = HxOverrides.iter(e2.children);
				while(x.hasNext()) {
					var x1 = x.next();
					addBreaks(x1);
				}
				if(e2.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(e2.nodeType));
				}
				if(e2.nodeName == "p") {
					_gthis.sizePos++;
					_gthis.xMax = 0;
				}
			} else {
				if(e2.nodeType == Xml.Document || e2.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(e2.nodeType));
				}
				var text1 = _gthis.htmlToText(e2.nodeValue);
				var startI = 0;
				var prevI = 0;
				var _g = 0;
				var _g1 = text1.length;
				while(_g < _g1) {
					var i = _g++;
					var cc = HxOverrides.cca(text1,i);
					if(cc == 10 || _gthis.font.charset.isBreakChar(cc)) {
						var sz1 = sizes[_gthis.sizePos++];
						var sp = _gthis.font.charset.isSpace(cc) ? sizes[_gthis.sizePos++] : 0;
						_gthis.xMax += sz1;
						if(_gthis.xMax > _gthis.realMaxWidth) {
							var index = Lambda.indexOf(e2.parent,e2);
							var pre = HxOverrides.substr(text1,startI,prevI - startI);
							if(pre != "") {
								e2.parent.insertChild(Xml.createPCData(pre),index++);
							}
							e2.parent.insertChild(Xml.createElement("br"),index);
							var v = HxOverrides.substr(text1,prevI + 1,null);
							if(e2.nodeType == Xml.Document || e2.nodeType == Xml.Element) {
								throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(e2.nodeType));
							}
							e2.nodeValue = v;
							startI = prevI + 1;
							_gthis.xMax = sz1;
						}
						_gthis.xMax += sp + _gthis.letterSpacing;
						prevI = i;
					}
				}
				var sz2 = sizes[_gthis.sizePos++];
				_gthis.xMax += sz2;
				if(_gthis.xMax > _gthis.realMaxWidth) {
					e2.parent.insertChild(Xml.createElement("br"),Lambda.indexOf(e2.parent,e2));
					_gthis.xMax = sz2;
				}
			}
		};
		if(doc.nodeType != Xml.Document && doc.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(doc.nodeType));
		}
		var d = HxOverrides.iter(doc.children);
		while(d.hasNext()) {
			var d1 = d.next();
			addBreaks(d1);
		}
		return haxe_xml_Printer.print(doc);
	}
	,addNode: function(e,font,rebuild,handleAlign,sizes,lines) {
		var _gthis = this;
		this.sizePos++;
		var calcLines = !handleAlign && !rebuild && lines != null;
		var align = handleAlign ? this.textAlign : h2d_Align.Left;
		if(e.nodeType == Xml.Element) {
			var prevColor = null;
			var prevGlyphs = null;
			var makeLineBreak = function() {
				if(_gthis.xPos > _gthis.xMax) {
					_gthis.xMax = _gthis.xPos;
				}
				if(calcLines) {
					lines.push(Math.ceil(_gthis.xPos));
				}
				switch(align._hx_index) {
				case 0:
					_gthis.xPos = 0;
					break;
				case 1:case 2:case 3:case 4:
					_gthis.xPos = lines.shift();
					if(_gthis.xPos < _gthis.xMin) {
						_gthis.xMin = _gthis.xPos;
					}
					break;
				}
				_gthis.yPos += font.lineHeight + _gthis.lineSpacing;
				_gthis.prevChar = -1;
				_gthis.newLine = true;
			};
			if(e.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(e.nodeType));
			}
			var nodeName = e.nodeName.toLowerCase();
			switch(nodeName) {
			case "b":case "bold":
				font = _gthis.loadFont("bold");
				if(prevGlyphs == null) {
					prevGlyphs = _gthis.glyphs;
				}
				var prev = _gthis.glyphs;
				_gthis.glyphs = new h2d_TileGroup(font == null ? null : font.tile,_gthis);
				if(font != null) {
					var _g = font.type;
					if(_g._hx_index == 1) {
						var smoothing = _g.smoothing;
						var alphaCutoff = _g.alphaCutoff;
						var channel = _g.channel;
						var shader = new h3d_shader_SignedDistanceField();
						shader.constModified = true;
						shader.channel__ = channel;
						shader.alphaCutoff__ = alphaCutoff;
						shader.smoothing__ = smoothing;
						_gthis.glyphs.smooth = true;
						_gthis.glyphs.addShader(shader);
					}
				}
				var _this = _gthis.glyphs.curColor;
				var v = prev.curColor;
				_this.x = v.x;
				_this.y = v.y;
				_this.z = v.z;
				_this.w = v.w;
				_gthis.elements.push(_gthis.glyphs);
				break;
			case "br":
				makeLineBreak();
				break;
			case "font":
				var a = e.attributes();
				while(a.hasNext()) {
					var a1 = a.next();
					var v1 = e.get(a1);
					switch(a1.toLowerCase()) {
					case "color":
						if(prevColor == null) {
							var _this1 = this.glyphs.curColor;
							prevColor = new h3d_Vector(_this1.x,_this1.y,_this1.z,_this1.w);
						}
						if(HxOverrides.cca(v1,0) == 35 && v1.length == 4) {
							v1 = "#" + v1.charAt(1) + v1.charAt(1) + v1.charAt(2) + v1.charAt(2) + v1.charAt(3) + v1.charAt(3);
						}
						this.glyphs.setDefaultColor(Std.parseInt("0x" + HxOverrides.substr(v1,1,null)));
						break;
					case "face":
						font = _gthis.loadFont(v1);
						if(prevGlyphs == null) {
							prevGlyphs = _gthis.glyphs;
						}
						var prev1 = _gthis.glyphs;
						_gthis.glyphs = new h2d_TileGroup(font == null ? null : font.tile,_gthis);
						if(font != null) {
							var _g1 = font.type;
							if(_g1._hx_index == 1) {
								var smoothing1 = _g1.smoothing;
								var alphaCutoff1 = _g1.alphaCutoff;
								var channel1 = _g1.channel;
								var shader1 = new h3d_shader_SignedDistanceField();
								shader1.constModified = true;
								shader1.channel__ = channel1;
								shader1.alphaCutoff__ = alphaCutoff1;
								shader1.smoothing__ = smoothing1;
								_gthis.glyphs.smooth = true;
								_gthis.glyphs.addShader(shader1);
							}
						}
						var _this2 = _gthis.glyphs.curColor;
						var v2 = prev1.curColor;
						_this2.x = v2.x;
						_this2.y = v2.y;
						_this2.z = v2.z;
						_this2.w = v2.w;
						_gthis.elements.push(_gthis.glyphs);
						break;
					case "opacity":
						if(prevColor == null) {
							var _this3 = this.glyphs.curColor;
							prevColor = new h3d_Vector(_this3.x,_this3.y,_this3.z,_this3.w);
						}
						this.glyphs.curColor.w *= parseFloat(v1);
						break;
					default:
					}
				}
				break;
			case "img":
				this.newLine = false;
				var i = this.loadImage(e.get("src"));
				if(i == null) {
					i = h2d_Tile.fromColor(16711935,8,8);
				}
				if(this.realMaxWidth >= 0 && this.xPos + i.width + this.letterSpacing + this.remainingSize(sizes) > this.realMaxWidth && this.xPos > 0) {
					if(this.xPos > this.xMax) {
						this.xMax = this.xPos;
					}
					this.xPos = 0;
					this.yPos += font.lineHeight + this.lineSpacing;
				}
				var py = this.yPos + font.baseLine - i.height;
				if(py + i.dy < this.calcYMin) {
					this.calcYMin = py + i.dy;
				}
				if(rebuild) {
					var b = new h2d_Bitmap(i,this);
					b.posChanged = true;
					b.x = this.xPos;
					b.posChanged = true;
					b.y = py;
					this.elements.push(b);
				}
				this.xPos += i.width + this.letterSpacing;
				break;
			case "i":case "italic":
				font = _gthis.loadFont("italic");
				if(prevGlyphs == null) {
					prevGlyphs = _gthis.glyphs;
				}
				var prev2 = _gthis.glyphs;
				_gthis.glyphs = new h2d_TileGroup(font == null ? null : font.tile,_gthis);
				if(font != null) {
					var _g2 = font.type;
					if(_g2._hx_index == 1) {
						var smoothing2 = _g2.smoothing;
						var alphaCutoff2 = _g2.alphaCutoff;
						var channel2 = _g2.channel;
						var shader2 = new h3d_shader_SignedDistanceField();
						shader2.constModified = true;
						shader2.channel__ = channel2;
						shader2.alphaCutoff__ = alphaCutoff2;
						shader2.smoothing__ = smoothing2;
						_gthis.glyphs.smooth = true;
						_gthis.glyphs.addShader(shader2);
					}
				}
				var _this4 = _gthis.glyphs.curColor;
				var v3 = prev2.curColor;
				_this4.x = v3.x;
				_this4.y = v3.y;
				_this4.z = v3.z;
				_this4.w = v3.w;
				_gthis.elements.push(_gthis.glyphs);
				break;
			case "p":
				if(!this.newLine) {
					makeLineBreak();
				}
				break;
			default:
			}
			if(e.nodeType != Xml.Document && e.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(e.nodeType));
			}
			var child = HxOverrides.iter(e.children);
			while(child.hasNext()) {
				var child1 = child.next();
				this.addNode(child1,font,rebuild,handleAlign,sizes,lines);
			}
			if(nodeName == "p") {
				this.sizePos++;
				makeLineBreak();
			}
			if(prevGlyphs != null) {
				this.glyphs = prevGlyphs;
			}
			if(prevColor != null) {
				var _this5 = this.glyphs.curColor;
				_this5.x = prevColor.x;
				_this5.y = prevColor.y;
				_this5.z = prevColor.z;
				_this5.w = prevColor.w;
			}
		} else {
			this.newLine = false;
			if(e.nodeType == Xml.Document || e.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(e.nodeType));
			}
			var t = this.splitRawText(this.htmlToText(e.nodeValue),this.xPos,this.remainingSize(sizes));
			var dy = this.font.baseLine - font.baseLine;
			var _g3 = 0;
			var _g11 = t.length;
			while(_g3 < _g11) {
				var i1 = _g3++;
				var cc = HxOverrides.cca(t,i1);
				if(cc == 10) {
					if(this.xPos > this.xMax) {
						this.xMax = this.xPos;
					}
					if(calcLines) {
						lines.push(Math.ceil(this.xPos));
					}
					switch(align._hx_index) {
					case 0:
						this.xPos = 0;
						break;
					case 1:case 2:case 3:case 4:
						this.xPos = lines.shift();
						if(this.xPos < this.xMin) {
							this.xMin = this.xPos;
						}
						break;
					}
					this.yPos += font.lineHeight + this.lineSpacing;
					this.prevChar = -1;
					continue;
				} else {
					var c = font.glyphs.h[cc];
					if(c == null) {
						c = font.charset.resolveChar(cc,font.glyphs);
						if(c == null) {
							c = cc == 13 || cc == 10 ? font.nullChar : font.defaultChar;
						}
					}
					var fc = c;
					if(fc != null) {
						this.xPos += fc.getKerningOffset(this.prevChar);
						if(rebuild) {
							var _this6 = this.glyphs;
							_this6.content.add(this.xPos,this.yPos + dy,_this6.curColor.x,_this6.curColor.y,_this6.curColor.z,_this6.curColor.w,fc.t);
						}
						if(this.yPos == 0 && fc.t.dy + dy < this.calcYMin) {
							this.calcYMin = fc.t.dy + dy;
						}
						this.xPos += fc.width + this.letterSpacing;
					}
					this.prevChar = cc;
				}
			}
		}
	}
	,set_textColor: function(c) {
		if(this.textColor == c) {
			return c;
		}
		this.textColor = c;
		this.rebuild();
		return c;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		if(forSize) {
			var _g = 0;
			var _g1 = this.elements;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(((i) instanceof h2d_Bitmap)) {
					i.set_visible(false);
				}
			}
		}
		h2d_Text.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(forSize) {
			var _g2 = 0;
			var _g11 = this.elements;
			while(_g2 < _g11.length) {
				var i1 = _g11[_g2];
				++_g2;
				i1.set_visible(true);
			}
		}
	}
	,__class__: h2d_HtmlText
});
var hxd_Interactive = function() { };
$hxClasses["hxd.Interactive"] = hxd_Interactive;
hxd_Interactive.__name__ = "hxd.Interactive";
hxd_Interactive.__isInterface__ = true;
hxd_Interactive.prototype = {
	cursor: null
	,handleEvent: null
	,getInteractiveScene: null
	,__class__: hxd_Interactive
};
var h2d_Interactive = function(width,height,parent,shape) {
	this.shapeY = 0;
	this.shapeX = 0;
	this.mouseDownButton = -1;
	this.propagateEvents = false;
	this.cancelEvents = false;
	h2d_Drawable.call(this,parent);
	this.width = width;
	this.height = height;
	this.shape = shape;
	this.set_cursor(hxd_Cursor.Button);
};
$hxClasses["h2d.Interactive"] = h2d_Interactive;
h2d_Interactive.__name__ = "h2d.Interactive";
h2d_Interactive.__interfaces__ = [hxd_Interactive];
h2d_Interactive.__super__ = h2d_Drawable;
h2d_Interactive.prototype = $extend(h2d_Drawable.prototype,{
	width: null
	,height: null
	,cursor: null
	,isEllipse: null
	,cancelEvents: null
	,propagateEvents: null
	,backgroundColor: null
	,enableRightButton: null
	,scene: null
	,mouseDownButton: null
	,parentMask: null
	,invDet: null
	,shape: null
	,shapeX: null
	,shapeY: null
	,onAdd: function() {
		this.scene = this.getScene();
		if(this.scene != null) {
			this.scene.addEventTarget(this);
		}
		this.updateMask();
		h2d_Drawable.prototype.onAdd.call(this);
	}
	,draw: function(ctx) {
		if(this.backgroundColor != null) {
			this.emitTile(ctx,h2d_Tile.fromColor(this.backgroundColor,this.width | 0,this.height | 0,(this.backgroundColor >>> 24) / 255));
		}
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.backgroundColor != null || forSize) {
			this.addBounds(relativeTo,out,0,0,this.width | 0,this.height | 0);
		}
	}
	,onHierarchyMoved: function(parentChanged) {
		h2d_Drawable.prototype.onHierarchyMoved.call(this,parentChanged);
		if(this.scene != null) {
			this.scene.removeEventTarget(this);
			this.scene.addEventTarget(this);
		}
		if(parentChanged) {
			this.updateMask();
		}
	}
	,updateMask: function() {
		this.parentMask = null;
		var p = this.parent;
		while(p != null) {
			var m = ((p) instanceof h2d_Mask) ? p : null;
			if(m != null) {
				this.parentMask = m;
				break;
			}
			p = p.parent;
		}
	}
	,onRemove: function() {
		if(this.scene != null) {
			this.scene.removeEventTarget(this,true);
			this.scene = null;
		}
		h2d_Drawable.prototype.onRemove.call(this);
	}
	,checkBounds: function(e) {
		switch(e.kind._hx_index) {
		case 4:case 6:case 7:case 10:
			return false;
		default:
			return true;
		}
	}
	,getInteractiveScene: function() {
		return this.scene;
	}
	,handleEvent: function(e) {
		if(this.parentMask != null && this.checkBounds(e)) {
			var p = this.parentMask;
			var pt = new h2d_col_Point(e.relX,e.relY);
			this.localToGlobal(pt);
			var saveX = pt.x;
			var saveY = pt.y;
			while(p != null) {
				pt.x = saveX;
				pt.y = saveY;
				var pt1 = p.globalToLocal(pt);
				if(pt1.x < 0 || pt1.y < 0 || pt1.x > p.width || pt1.y > p.height) {
					e.cancel = true;
					return;
				}
				p = p.parentMask;
			}
		}
		if(this.shape == null && this.isEllipse && this.checkBounds(e)) {
			var cx = this.width * 0.5;
			var cy = this.height * 0.5;
			var dx = (e.relX - cx) / cx;
			var dy = (e.relY - cy) / cy;
			if(dx * dx + dy * dy > 1) {
				e.cancel = true;
				return;
			}
		}
		if(this.propagateEvents) {
			e.propagate = true;
		}
		if(this.cancelEvents) {
			e.cancel = true;
		}
		switch(e.kind._hx_index) {
		case 0:
			if(this.enableRightButton || e.button == 0) {
				this.mouseDownButton = e.button;
				this.onPush(e);
			}
			break;
		case 1:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onClick(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 2:
			this.onMove(e);
			break;
		case 3:
			this.onOver(e);
			break;
		case 4:
			this.onOut(e);
			break;
		case 5:
			this.onWheel(e);
			break;
		case 6:
			this.onFocus(e);
			break;
		case 7:
			this.onFocusLost(e);
			break;
		case 8:
			this.onKeyDown(e);
			break;
		case 9:
			this.onKeyUp(e);
			break;
		case 10:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onReleaseOutside(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 11:
			this.onTextInput(e);
			break;
		case 12:
			this.onCheck(e);
			break;
		}
	}
	,calcAbsPos: function() {
		h2d_Drawable.prototype.calcAbsPos.call(this);
		this.invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
	}
	,set_cursor: function(c) {
		this.cursor = c;
		if(this.scene != null && this.scene.events != null) {
			this.scene.events.updateCursor(this);
		}
		return c;
	}
	,focus: function() {
		if(this.scene == null || this.scene.events == null) {
			return;
		}
		this.scene.events.focus(this);
	}
	,blur: function() {
		if(this.hasFocus()) {
			this.scene.events.blur();
		}
	}
	,hasFocus: function() {
		if(this.scene != null && this.scene.events != null) {
			return this.scene.events.currentFocus == this;
		} else {
			return false;
		}
	}
	,onOver: function(e) {
	}
	,onOut: function(e) {
	}
	,onPush: function(e) {
	}
	,onRelease: function(e) {
	}
	,onReleaseOutside: function(e) {
	}
	,onClick: function(e) {
	}
	,onMove: function(e) {
	}
	,onWheel: function(e) {
	}
	,onFocus: function(e) {
	}
	,onFocusLost: function(e) {
	}
	,onKeyUp: function(e) {
	}
	,onKeyDown: function(e) {
	}
	,onCheck: function(e) {
	}
	,onTextInput: function(e) {
	}
	,__class__: h2d_Interactive
});
var h2d_Layers = function(parent) {
	h2d_Object.call(this,parent);
	this.layersIndexes = [];
	this.layerCount = 0;
};
$hxClasses["h2d.Layers"] = h2d_Layers;
h2d_Layers.__name__ = "h2d.Layers";
h2d_Layers.__super__ = h2d_Object;
h2d_Layers.prototype = $extend(h2d_Object.prototype,{
	layersIndexes: null
	,layerCount: null
	,addChild: function(s) {
		this.addChildAt(s,0);
	}
	,addChildAt: function(s,layer) {
		if(s.parent == this) {
			var old = s.allocated;
			s.allocated = false;
			this.removeChild(s);
			s.allocated = old;
		}
		while(layer >= this.layerCount) this.layersIndexes[this.layerCount++] = this.children.length;
		h2d_Object.prototype.addChildAt.call(this,s,this.layersIndexes[layer]);
		var _g = layer;
		var _g1 = this.layerCount;
		while(_g < _g1) {
			var i = _g++;
			this.layersIndexes[i]++;
		}
	}
	,removeChild: function(s) {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.children[i] == s) {
				this.children.splice(i,1);
				if(s.allocated) {
					s.onRemove();
				}
				s.parent = null;
				s.posChanged = true;
				if(s.parentContainer != null) {
					s.setParentContainer(null);
				}
				var k = this.layerCount - 1;
				while(k >= 0 && this.layersIndexes[k] > i) {
					this.layersIndexes[k]--;
					--k;
				}
				if(this.parentContainer != null) {
					this.parentContainer.contentChanged(this);
				}
				break;
			}
		}
	}
	,under: function(s) {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.children[i] == s) {
				var pos = 0;
				var _g2 = 0;
				var _g11 = this.layersIndexes;
				while(_g2 < _g11.length) {
					var l = _g11[_g2];
					++_g2;
					if(l > i) {
						break;
					} else {
						pos = l;
					}
				}
				var p = i;
				while(p > pos) {
					this.children[p] = this.children[p - 1];
					--p;
				}
				this.children[pos] = s;
				if(s.allocated) {
					s.onHierarchyMoved(false);
				}
				return;
			}
		}
	}
	,__class__: h2d_Layers
});
var h2d_Mask = function(width,height,parent) {
	h2d_Object.call(this,parent);
	this.width = width;
	this.height = height;
};
$hxClasses["h2d.Mask"] = h2d_Mask;
h2d_Mask.__name__ = "h2d.Mask";
h2d_Mask.__super__ = h2d_Object;
h2d_Mask.prototype = $extend(h2d_Object.prototype,{
	width: null
	,height: null
	,parentMask: null
	,onHierarchyMoved: function(parentChanged) {
		h2d_Object.prototype.onHierarchyMoved.call(this,parentChanged);
		if(parentChanged) {
			this.updateMask();
		}
	}
	,onAdd: function() {
		h2d_Object.prototype.onAdd.call(this);
		this.updateMask();
	}
	,updateMask: function() {
		this.parentMask = null;
		var p = this.parent;
		while(p != null) {
			var m = ((p) instanceof h2d_Mask) ? p : null;
			if(m != null) {
				this.parentMask = m;
				break;
			}
			p = p.parent;
		}
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		var xMin = out.xMin;
		var yMin = out.yMin;
		var xMax = out.xMax;
		var yMax = out.yMax;
		out.xMin = 1e20;
		out.yMin = 1e20;
		out.xMax = -1e20;
		out.yMax = -1e20;
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		this.addBounds(relativeTo,out,0,0,this.width,this.height);
		var bxMin = out.xMin;
		var byMin = out.yMin;
		var bxMax = out.xMax;
		var byMax = out.yMax;
		out.xMin = xMin;
		out.xMax = xMax;
		out.yMin = yMin;
		out.yMax = yMax;
		h2d_Object.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(out.xMin < bxMin) {
			out.xMin = xMin > bxMin ? bxMin : xMin;
		}
		if(out.yMin < byMin) {
			out.yMin = yMin > byMin ? byMin : yMin;
		}
		if(out.xMax > bxMax) {
			out.xMax = xMax < bxMax ? bxMax : xMax;
		}
		if(out.yMax > byMax) {
			out.yMax = yMax < byMax ? byMax : yMax;
		}
	}
	,drawRec: function(ctx) {
		var x1 = this.absX;
		var y1 = this.absY;
		var x2 = this.width * this.matA + this.height * this.matC + this.absX;
		var y2 = this.width * this.matB + this.height * this.matD + this.absY;
		var tmp;
		if(x1 > x2) {
			tmp = x1;
			x1 = x2;
			x2 = tmp;
		}
		if(y1 > y2) {
			tmp = y1;
			y1 = y2;
			y2 = tmp;
		}
		if(ctx.hasRenderZone) {
			var oldX = ctx.renderX;
			var oldY = ctx.renderY;
			var oldW = ctx.renderW;
			var oldH = ctx.renderH;
			ctx.setRenderZone(x1,y1,x2 - x1,y2 - y1);
			h2d_Object.prototype.drawRec.call(this,ctx);
			ctx.setRenderZone(oldX,oldY,oldW,oldH);
		} else {
			ctx.setRenderZone(x1,y1,x2 - x1,y2 - y1);
			h2d_Object.prototype.drawRec.call(this,ctx);
			ctx.hasRenderZone = false;
			ctx.engine.setRenderZone();
		}
	}
	,__class__: h2d_Mask
});
var h3d_impl_RenderContext = function() {
	this.engine = h3d_Engine.CURRENT;
	this.frame = 0;
	this.time = 0.;
	this.elapsedTime = 1. / hxd_System.getDefaultFrameRate();
	this.textures = new h3d_impl_TextureCache(this);
};
$hxClasses["h3d.impl.RenderContext"] = h3d_impl_RenderContext;
h3d_impl_RenderContext.__name__ = "h3d.impl.RenderContext";
h3d_impl_RenderContext.prototype = {
	engine: null
	,time: null
	,elapsedTime: null
	,frame: null
	,textures: null
	,__class__: h3d_impl_RenderContext
};
var h2d_RenderContext = function(scene) {
	this.tmpBounds = new h2d_col_Bounds();
	this.defaultSmooth = false;
	this.globalAlpha = 1.;
	h3d_impl_RenderContext.call(this);
	this.scene = scene;
	this.bufPos = 0;
	this.manager = new h3d_pass_ShaderManager();
	this.pass = new h3d_mat_Pass("",null);
	this.pass.depth(true,h3d_mat_Compare.Always);
	this.pass.set_culling(h3d_mat_Face.None);
	this.baseShader = new h3d_shader_Base2d();
	this.baseShader.setPriority(100);
	this.baseShader.zValue__ = 0.;
	this.baseShaderList = new hxsl_ShaderList(this.baseShader);
	this.targetsStack = [];
	this.targetsStackIndex = 0;
	this.filterStack = [];
};
$hxClasses["h2d.RenderContext"] = h2d_RenderContext;
h2d_RenderContext.__name__ = "h2d.RenderContext";
h2d_RenderContext.__super__ = h3d_impl_RenderContext;
h2d_RenderContext.prototype = $extend(h3d_impl_RenderContext.prototype,{
	globalAlpha: null
	,bufPos: null
	,scene: null
	,defaultSmooth: null
	,killAlpha: null
	,front2back: null
	,onBeginDraw: null
	,onEnterFilter: null
	,onLeaveFilter: null
	,tmpBounds: null
	,texture: null
	,baseShader: null
	,manager: null
	,compiledShader: null
	,buffers: null
	,fixedBuffer: null
	,pass: null
	,currentShaders: null
	,baseShaderList: null
	,currentObj: null
	,stride: null
	,targetsStack: null
	,targetsStackIndex: null
	,filterStack: null
	,inFilter: null
	,inFilterBlend: null
	,curX: null
	,curY: null
	,curWidth: null
	,curHeight: null
	,hasRenderZone: null
	,renderX: null
	,renderY: null
	,renderW: null
	,renderH: null
	,currentBlend: null
	,baseFlipY: null
	,targetFlipY: null
	,begin: function() {
		this.texture = null;
		this.currentObj = null;
		this.bufPos = 0;
		this.stride = 0;
		this.curX = 0;
		this.curY = 0;
		this.targetFlipY = this.engine.driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) ? -1 : 1;
		this.baseFlipY = this.engine.getCurrentTarget() != null ? this.targetFlipY : 1;
		this.inFilter = null;
		this.curWidth = this.scene.width;
		this.curHeight = this.scene.height;
		this.manager.globals.set("time",this.time);
		var _this = this.baseShader;
		_this.constModified = true;
		_this.pixelAlign__ = false;
		var _this1 = this.baseShader.halfPixelInverse__;
		var x = 0.5 / this.engine.width;
		var y = 0.5 / this.engine.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this1.x = x;
		_this1.y = y;
		_this1.z = 0.;
		_this1.w = 1.;
		var _this2 = this.baseShader.viewport__;
		var x1 = -this.scene.width * 0.5 - this.scene.offsetX;
		var y1 = -this.scene.height * 0.5 - this.scene.offsetY;
		var z = 2 / this.scene.width * this.scene.ratioX;
		var w = -2 * this.baseFlipY / this.scene.height * this.scene.ratioY;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this2.x = x1;
		_this2.y = y1;
		_this2.z = z;
		_this2.w = w;
		var _this3 = this.baseShader.filterMatrixA__;
		var x2 = 1;
		var y2 = 0;
		var z1 = 0;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		_this3.x = x2;
		_this3.y = y2;
		_this3.z = z1;
		_this3.w = 1.;
		var _this4 = this.baseShader.filterMatrixB__;
		var x3 = 0;
		var y3 = 1;
		var z2 = 0;
		if(z2 == null) {
			z2 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		_this4.x = x3;
		_this4.y = y3;
		_this4.z = z2;
		_this4.w = 1.;
		this.baseShaderList.next = null;
		this.initShaders(this.baseShaderList);
		this.engine.selectMaterial(this.pass);
		this.textures.begin();
	}
	,initShaders: function(shaders) {
		this.currentShaders = shaders;
		this.compiledShader = this.manager.compileShaders(shaders);
		if(this.buffers == null) {
			this.buffers = new h3d_shader_Buffers(this.compiledShader);
		} else {
			var _this = this.buffers;
			var s = this.compiledShader;
			_this.vertex.grow(s.vertex);
			_this.fragment.grow(s.fragment);
		}
		this.manager.fillGlobals(this.buffers,this.compiledShader);
		this.engine.selectShader(this.compiledShader);
		this.engine.uploadShaderBuffers(this.buffers,0);
	}
	,end: function() {
		this.texture = null;
		this.currentObj = null;
		this.baseShaderList.next = null;
		if(this.targetsStackIndex != 0) {
			throw new js__$Boot_HaxeError("Missing popTarget()");
		}
	}
	,pushFilter: function(spr) {
		if(this.filterStack.length == 0 && this.onEnterFilter != null) {
			if(!this.onEnterFilter(spr)) {
				return false;
			}
		}
		this.filterStack.push(spr);
		this.inFilter = spr;
		return true;
	}
	,popFilter: function() {
		var spr = this.filterStack.pop();
		if(this.filterStack.length > 0) {
			this.inFilter = this.filterStack[this.filterStack.length - 1];
		} else {
			this.inFilter = null;
			if(this.onLeaveFilter != null) {
				this.onLeaveFilter(spr);
			}
		}
	}
	,pushTarget: function(t,startX,startY,width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(startY == null) {
			startY = 0;
		}
		if(startX == null) {
			startX = 0;
		}
		this.engine.pushTarget(t);
		this.initShaders(this.baseShaderList);
		if(width < 0) {
			width = t == null ? this.scene.width : t.width;
		}
		if(height < 0) {
			height = t == null ? this.scene.height : t.height;
		}
		var _this = this.baseShader.halfPixelInverse__;
		var x = 0.5 / (t == null ? this.engine.width : t.width);
		var y = 0.5 / (t == null ? this.engine.height : t.height);
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		_this.w = 1.;
		var _this1 = this.baseShader.viewport__;
		var x1 = -width * 0.5 - startX;
		var y1 = -height * 0.5 - startY;
		var z = 2 / width;
		var w = -2 * this.targetFlipY / height;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this1.x = x1;
		_this1.y = y1;
		_this1.z = z;
		_this1.w = w;
		this.targetsStackIndex++;
		if(this.targetsStackIndex > this.targetsStack.length) {
			this.targetsStack.push({ t : t, x : startX, y : startY, w : width, h : height, hasRZ : this.hasRenderZone, rzX : this.renderX, rzY : this.renderY, rzW : this.renderW, rzH : this.renderH});
		} else {
			var o = this.targetsStack[this.targetsStackIndex - 1];
			o.t = t;
			o.x = startX;
			o.y = startY;
			o.w = width;
			o.h = height;
			o.hasRZ = this.hasRenderZone;
			o.rzX = this.renderX;
			o.rzY = this.renderY;
			o.rzW = this.renderW;
			o.rzH = this.renderH;
		}
		this.curX = startX;
		this.curY = startY;
		this.curWidth = width;
		this.curHeight = height;
		this.currentBlend = null;
		if(this.hasRenderZone) {
			this.hasRenderZone = false;
			this.engine.setRenderZone();
		}
	}
	,popTarget: function(restore) {
		if(restore == null) {
			restore = true;
		}
		if(this.targetsStackIndex <= 0) {
			throw new js__$Boot_HaxeError("Too many popTarget()");
		}
		var pinf = this.targetsStack[--this.targetsStackIndex];
		this.engine.popTarget();
		if(restore) {
			var tinf = this.targetsStack[this.targetsStackIndex - 1];
			var t;
			var startX;
			var startY;
			var width;
			var height;
			var ratioX;
			var ratioY;
			var offsetX;
			var offsetY;
			if(tinf == null) {
				t = null;
				startX = 0;
				startY = 0;
				width = this.scene.width;
				height = this.scene.height;
				ratioX = this.scene.ratioX;
				ratioY = this.scene.ratioY;
				offsetX = this.scene.offsetX;
				offsetY = this.scene.offsetY;
			} else {
				t = tinf.t;
				startX = tinf.x;
				startY = tinf.y;
				width = tinf.w;
				height = tinf.h;
				ratioX = 1;
				ratioY = 1;
				offsetX = 0;
				offsetY = 0;
			}
			this.initShaders(this.baseShaderList);
			var _this = this.baseShader.halfPixelInverse__;
			var x = 0.5 / (t == null ? this.engine.width : t.width);
			var y = 0.5 / (t == null ? this.engine.height : t.height);
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = 0.;
			_this.w = 1.;
			var _this1 = this.baseShader.viewport__;
			var x1 = -width * 0.5 - startX - offsetX;
			var y1 = -height * 0.5 - startY - offsetY;
			var z = 2 / width * ratioX;
			var w = -2 * (t == null ? this.baseFlipY : this.targetFlipY) / height * ratioY;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			_this1.x = x1;
			_this1.y = y1;
			_this1.z = z;
			_this1.w = w;
			this.curX = startX;
			this.curY = startY;
			this.curWidth = width;
			this.curHeight = height;
		}
		if(pinf.hasRZ) {
			this.setRenderZone(pinf.rzX,pinf.rzY,pinf.rzW,pinf.rzH);
		}
	}
	,setRenderZone: function(x,y,w,h) {
		this.hasRenderZone = true;
		this.renderX = x;
		this.renderY = y;
		this.renderW = w;
		this.renderH = h;
		var scaleX = this.engine.width * this.scene.ratioX / this.scene.width;
		var scaleY = this.engine.height * this.scene.ratioY / this.scene.height;
		if(this.inFilter != null) {
			var fa = this.baseShader.filterMatrixA__;
			var fb = this.baseShader.filterMatrixB__;
			var x2 = x + w;
			var y2 = y + h;
			var rx1 = x * fa.x + y * fa.y + fa.z;
			var ry1 = x * fb.x + y * fb.y + fb.z;
			var rx2 = x2 * fa.x + y2 * fa.y + fa.z;
			var ry2 = x2 * fb.x + y2 * fb.y + fb.z;
			x = rx1;
			y = ry1;
			w = rx2 - rx1;
			h = ry2 - ry1;
		}
		this.engine.setRenderZone((x - this.curX + this.scene.viewportX) * scaleX + 1e-10 | 0,(y - this.curY + this.scene.viewportY) * scaleY + 1e-10 | 0,w * scaleX + 1e-10 | 0,h * scaleY + 1e-10 | 0);
	}
	,drawScene: function() {
		this.scene.drawRec(this);
	}
	,beforeDraw: function() {
		if(this.texture == null) {
			this.texture = h3d_mat_Texture.fromColor(16711935);
		}
		this.baseShader.texture__ = this.texture;
		this.texture.set_filter((this.currentObj.smooth == null ? this.defaultSmooth : this.currentObj.smooth) ? h3d_mat_Filter.Linear : h3d_mat_Filter.Nearest);
		this.texture.set_wrap(this.currentObj.tileWrap && (this.currentObj.filter == null || this.inFilter != null) ? h3d_mat_Wrap.Repeat : h3d_mat_Wrap.Clamp);
		var blend = this.currentObj.blendMode;
		if(this.inFilter == this.currentObj && blend == h2d_BlendMode.Erase) {
			blend = h2d_BlendMode.Add;
		}
		if(this.inFilterBlend != null) {
			blend = this.inFilterBlend;
		}
		if(blend != this.currentBlend) {
			this.currentBlend = blend;
			this.pass.setBlendMode(blend);
			if(blend == h2d_BlendMode.Alpha || blend == h2d_BlendMode.Add) {
				this.pass.set_blendAlphaSrc(h3d_mat_Blend.One);
				if(this.inFilterBlend != null) {
					this.pass.set_blendSrc(h3d_mat_Blend.One);
				}
			}
		}
		this.manager.fillParams(this.buffers,this.compiledShader,this.currentShaders);
		this.engine.selectMaterial(this.pass);
		this.engine.uploadShaderBuffers(this.buffers,1);
		this.engine.uploadShaderBuffers(this.buffers,2);
		this.engine.uploadShaderBuffers(this.buffers,3);
	}
	,beginDrawObject: function(obj,texture) {
		if(!this.beginDraw(obj,texture,true)) {
			return false;
		}
		if(this.inFilter == obj) {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else if(this.inFilterBlend != null) {
			var _this1 = this.baseShader.color__;
			var x1 = this.globalAlpha;
			var y1 = this.globalAlpha;
			var z1 = this.globalAlpha;
			var w1 = this.globalAlpha;
			if(w1 == null) {
				w1 = 1.;
			}
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			_this1.x = x1;
			_this1.y = y1;
			_this1.z = z1;
			_this1.w = w1;
		} else {
			var _this2 = this.baseShader.color__;
			var x2 = obj.color.x;
			var y2 = obj.color.y;
			var z2 = obj.color.z;
			var w2 = obj.color.w * this.globalAlpha;
			if(w2 == null) {
				w2 = 1.;
			}
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			_this2.x = x2;
			_this2.y = y2;
			_this2.z = z2;
			_this2.w = w2;
		}
		var _this3 = this.baseShader.absoluteMatrixA__;
		var x3 = obj.matA;
		var y3 = obj.matC;
		var z3 = obj.absX;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y3 == null) {
			y3 = 0.;
		}
		if(x3 == null) {
			x3 = 0.;
		}
		_this3.x = x3;
		_this3.y = y3;
		_this3.z = z3;
		_this3.w = 1.;
		var _this4 = this.baseShader.absoluteMatrixB__;
		var x4 = obj.matB;
		var y4 = obj.matD;
		var z4 = obj.absY;
		if(z4 == null) {
			z4 = 0.;
		}
		if(y4 == null) {
			y4 = 0.;
		}
		if(x4 == null) {
			x4 = 0.;
		}
		_this4.x = x4;
		_this4.y = y4;
		_this4.z = z4;
		_this4.w = 1.;
		this.beforeDraw();
		return true;
	}
	,drawTile: function(obj,tile) {
		var matA;
		var matB;
		var matC;
		var matD;
		var absX;
		var absY;
		if(this.inFilter != null) {
			var f1 = this.baseShader.filterMatrixA__;
			var f2 = this.baseShader.filterMatrixB__;
			matA = obj.matA * f1.x + obj.matB * f1.y;
			matB = obj.matA * f2.x + obj.matB * f2.y;
			matC = obj.matC * f1.x + obj.matD * f1.y;
			matD = obj.matC * f2.x + obj.matD * f2.y;
			absX = obj.absX * f1.x + obj.absY * f1.y + f1.z;
			absY = obj.absX * f2.x + obj.absY * f2.y + f2.z;
		} else {
			matA = obj.matA;
			matB = obj.matB;
			matC = obj.matC;
			matD = obj.matD;
			absX = obj.absX;
			absY = obj.absY;
		}
		if(matB == 0 && matC == 0) {
			var tx = tile.dx + tile.width * 0.5;
			var ty = tile.dy + tile.height * 0.5;
			var f = obj.matA;
			var a = f < 0 ? -f : f;
			var f3 = obj.matD;
			var b = f3 < 0 ? -f3 : f3;
			var tr = (tile.width > tile.height ? tile.width : tile.height) * 1.5 * (a < b ? b : a);
			var cx = absX + tx * matA - this.curX;
			var cy = absY + ty * matD - this.curY;
			if(cx < -tr || cy < -tr || cx - tr > this.curWidth || cy - tr > this.curHeight) {
				return false;
			}
		} else {
			var xMin = 1e20;
			var yMin = 1e20;
			var xMax = -1e20;
			var yMax = -1e20;
			var hw = tile.width * 0.5;
			var hh = tile.height * 0.5;
			var px = tile.dx * matA + tile.dy * matC;
			var py = tile.dx * matB + tile.dy * matD;
			if(px < xMin) {
				xMin = px;
			}
			if(px > xMax) {
				xMax = px;
			}
			if(py < yMin) {
				yMin = py;
			}
			if(py > yMax) {
				yMax = py;
			}
			var x = tile.width;
			var px1 = (x + tile.dx) * matA + tile.dy * matC;
			var py1 = (x + tile.dx) * matB + tile.dy * matD;
			if(px1 < xMin) {
				xMin = px1;
			}
			if(px1 > xMax) {
				xMax = px1;
			}
			if(py1 < yMin) {
				yMin = py1;
			}
			if(py1 > yMax) {
				yMax = py1;
			}
			var y = tile.height;
			var px2 = tile.dx * matA + (y + tile.dy) * matC;
			var py2 = tile.dx * matB + (y + tile.dy) * matD;
			if(px2 < xMin) {
				xMin = px2;
			}
			if(px2 > xMax) {
				xMax = px2;
			}
			if(py2 < yMin) {
				yMin = py2;
			}
			if(py2 > yMax) {
				yMax = py2;
			}
			var x1 = tile.width;
			var y1 = tile.height;
			var px3 = (x1 + tile.dx) * matA + (y1 + tile.dy) * matC;
			var py3 = (x1 + tile.dx) * matB + (y1 + tile.dy) * matD;
			if(px3 < xMin) {
				xMin = px3;
			}
			if(px3 > xMax) {
				xMax = px3;
			}
			if(py3 < yMin) {
				yMin = py3;
			}
			if(py3 > yMax) {
				yMax = py3;
			}
			var cx1 = absX - this.curX;
			var cy1 = absY - this.curY;
			if(cx1 + xMax < 0 || cy1 + yMax < 0 || cx1 + xMin > this.curWidth || cy1 + yMin > this.curHeight) {
				return false;
			}
		}
		if(!this.beginDraw(obj,tile.innerTex,true,true)) {
			return false;
		}
		if(this.inFilter == obj) {
			var _this = this.baseShader.color__;
			var x2 = obj.color.x;
			var y2 = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			_this.x = x2;
			_this.y = y2;
			_this.z = z;
			_this.w = w;
		} else if(this.inFilterBlend != null) {
			var _this1 = this.baseShader.color__;
			var x3 = this.globalAlpha;
			var y3 = this.globalAlpha;
			var z1 = this.globalAlpha;
			var w1 = this.globalAlpha;
			if(w1 == null) {
				w1 = 1.;
			}
			if(z1 == null) {
				z1 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			_this1.x = x3;
			_this1.y = y3;
			_this1.z = z1;
			_this1.w = w1;
		} else {
			var _this2 = this.baseShader.color__;
			var x4 = obj.color.x;
			var y4 = obj.color.y;
			var z2 = obj.color.z;
			var w2 = obj.color.w * this.globalAlpha;
			if(w2 == null) {
				w2 = 1.;
			}
			if(z2 == null) {
				z2 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			_this2.x = x4;
			_this2.y = y4;
			_this2.z = z2;
			_this2.w = w2;
		}
		var _this3 = this.baseShader.absoluteMatrixA__;
		var x5 = tile.width * obj.matA;
		var y5 = tile.height * obj.matC;
		var z3 = obj.absX + tile.dx * obj.matA + tile.dy * obj.matC;
		if(z3 == null) {
			z3 = 0.;
		}
		if(y5 == null) {
			y5 = 0.;
		}
		if(x5 == null) {
			x5 = 0.;
		}
		_this3.x = x5;
		_this3.y = y5;
		_this3.z = z3;
		_this3.w = 1.;
		var _this4 = this.baseShader.absoluteMatrixB__;
		var x6 = tile.width * obj.matB;
		var y6 = tile.height * obj.matD;
		var z4 = obj.absY + tile.dx * obj.matB + tile.dy * obj.matD;
		if(z4 == null) {
			z4 = 0.;
		}
		if(y6 == null) {
			y6 = 0.;
		}
		if(x6 == null) {
			x6 = 0.;
		}
		_this4.x = x6;
		_this4.y = y6;
		_this4.z = z4;
		_this4.w = 1.;
		var _this5 = this.baseShader.uvPos__;
		var x7 = tile.u;
		var y7 = tile.v;
		var z5 = tile.u2 - tile.u;
		var w3 = tile.v2 - tile.v;
		if(w3 == null) {
			w3 = 1.;
		}
		if(z5 == null) {
			z5 = 0.;
		}
		if(y7 == null) {
			y7 = 0.;
		}
		if(x7 == null) {
			x7 = 0.;
		}
		_this5.x = x7;
		_this5.y = y7;
		_this5.z = z5;
		_this5.w = w3;
		this.beforeDraw();
		if(this.fixedBuffer == null || this.fixedBuffer.isDisposed()) {
			this.fixedBuffer = new h3d_Buffer(4,8,[h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat]);
			var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
			var k = this1;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v1 = 0;
			if(k.pos == k.array.length) {
				var newSize1 = k.array.length << 1;
				if(newSize1 < 128) {
					newSize1 = 128;
				}
				var newArray1 = new Float32Array(newSize1);
				newArray1.set(k.array);
				k.array = newArray1;
			}
			k.array[k.pos++] = v1;
			var v2 = 0;
			if(k.pos == k.array.length) {
				var newSize2 = k.array.length << 1;
				if(newSize2 < 128) {
					newSize2 = 128;
				}
				var newArray2 = new Float32Array(newSize2);
				newArray2.set(k.array);
				k.array = newArray2;
			}
			k.array[k.pos++] = v2;
			var v3 = 0;
			if(k.pos == k.array.length) {
				var newSize3 = k.array.length << 1;
				if(newSize3 < 128) {
					newSize3 = 128;
				}
				var newArray3 = new Float32Array(newSize3);
				newArray3.set(k.array);
				k.array = newArray3;
			}
			k.array[k.pos++] = v3;
			var v4 = 1;
			if(k.pos == k.array.length) {
				var newSize4 = k.array.length << 1;
				if(newSize4 < 128) {
					newSize4 = 128;
				}
				var newArray4 = new Float32Array(newSize4);
				newArray4.set(k.array);
				k.array = newArray4;
			}
			k.array[k.pos++] = v4;
			var v5 = 1;
			if(k.pos == k.array.length) {
				var newSize5 = k.array.length << 1;
				if(newSize5 < 128) {
					newSize5 = 128;
				}
				var newArray5 = new Float32Array(newSize5);
				newArray5.set(k.array);
				k.array = newArray5;
			}
			k.array[k.pos++] = v5;
			var v6 = 1;
			if(k.pos == k.array.length) {
				var newSize6 = k.array.length << 1;
				if(newSize6 < 128) {
					newSize6 = 128;
				}
				var newArray6 = new Float32Array(newSize6);
				newArray6.set(k.array);
				k.array = newArray6;
			}
			k.array[k.pos++] = v6;
			var v7 = 1;
			if(k.pos == k.array.length) {
				var newSize7 = k.array.length << 1;
				if(newSize7 < 128) {
					newSize7 = 128;
				}
				var newArray7 = new Float32Array(newSize7);
				newArray7.set(k.array);
				k.array = newArray7;
			}
			k.array[k.pos++] = v7;
			var v8 = 0;
			if(k.pos == k.array.length) {
				var newSize8 = k.array.length << 1;
				if(newSize8 < 128) {
					newSize8 = 128;
				}
				var newArray8 = new Float32Array(newSize8);
				newArray8.set(k.array);
				k.array = newArray8;
			}
			k.array[k.pos++] = v8;
			var v9 = 1;
			if(k.pos == k.array.length) {
				var newSize9 = k.array.length << 1;
				if(newSize9 < 128) {
					newSize9 = 128;
				}
				var newArray9 = new Float32Array(newSize9);
				newArray9.set(k.array);
				k.array = newArray9;
			}
			k.array[k.pos++] = v9;
			var v10 = 0;
			if(k.pos == k.array.length) {
				var newSize10 = k.array.length << 1;
				if(newSize10 < 128) {
					newSize10 = 128;
				}
				var newArray10 = new Float32Array(newSize10);
				newArray10.set(k.array);
				k.array = newArray10;
			}
			k.array[k.pos++] = v10;
			var v11 = 1;
			if(k.pos == k.array.length) {
				var newSize11 = k.array.length << 1;
				if(newSize11 < 128) {
					newSize11 = 128;
				}
				var newArray11 = new Float32Array(newSize11);
				newArray11.set(k.array);
				k.array = newArray11;
			}
			k.array[k.pos++] = v11;
			var v12 = 1;
			if(k.pos == k.array.length) {
				var newSize12 = k.array.length << 1;
				if(newSize12 < 128) {
					newSize12 = 128;
				}
				var newArray12 = new Float32Array(newSize12);
				newArray12.set(k.array);
				k.array = newArray12;
			}
			k.array[k.pos++] = v12;
			var v13 = 1;
			if(k.pos == k.array.length) {
				var newSize13 = k.array.length << 1;
				if(newSize13 < 128) {
					newSize13 = 128;
				}
				var newArray13 = new Float32Array(newSize13);
				newArray13.set(k.array);
				k.array = newArray13;
			}
			k.array[k.pos++] = v13;
			var v14 = 1;
			if(k.pos == k.array.length) {
				var newSize14 = k.array.length << 1;
				if(newSize14 < 128) {
					newSize14 = 128;
				}
				var newArray14 = new Float32Array(newSize14);
				newArray14.set(k.array);
				k.array = newArray14;
			}
			k.array[k.pos++] = v14;
			var v15 = 1;
			if(k.pos == k.array.length) {
				var newSize15 = k.array.length << 1;
				if(newSize15 < 128) {
					newSize15 = 128;
				}
				var newArray15 = new Float32Array(newSize15);
				newArray15.set(k.array);
				k.array = newArray15;
			}
			k.array[k.pos++] = v15;
			var v16 = 1;
			if(k.pos == k.array.length) {
				var newSize16 = k.array.length << 1;
				if(newSize16 < 128) {
					newSize16 = 128;
				}
				var newArray16 = new Float32Array(newSize16);
				newArray16.set(k.array);
				k.array = newArray16;
			}
			k.array[k.pos++] = v16;
			var v17 = 0;
			if(k.pos == k.array.length) {
				var newSize17 = k.array.length << 1;
				if(newSize17 < 128) {
					newSize17 = 128;
				}
				var newArray17 = new Float32Array(newSize17);
				newArray17.set(k.array);
				k.array = newArray17;
			}
			k.array[k.pos++] = v17;
			var v18 = 1;
			if(k.pos == k.array.length) {
				var newSize18 = k.array.length << 1;
				if(newSize18 < 128) {
					newSize18 = 128;
				}
				var newArray18 = new Float32Array(newSize18);
				newArray18.set(k.array);
				k.array = newArray18;
			}
			k.array[k.pos++] = v18;
			var v19 = 0;
			if(k.pos == k.array.length) {
				var newSize19 = k.array.length << 1;
				if(newSize19 < 128) {
					newSize19 = 128;
				}
				var newArray19 = new Float32Array(newSize19);
				newArray19.set(k.array);
				k.array = newArray19;
			}
			k.array[k.pos++] = v19;
			var v20 = 1;
			if(k.pos == k.array.length) {
				var newSize20 = k.array.length << 1;
				if(newSize20 < 128) {
					newSize20 = 128;
				}
				var newArray20 = new Float32Array(newSize20);
				newArray20.set(k.array);
				k.array = newArray20;
			}
			k.array[k.pos++] = v20;
			var v21 = 1;
			if(k.pos == k.array.length) {
				var newSize21 = k.array.length << 1;
				if(newSize21 < 128) {
					newSize21 = 128;
				}
				var newArray21 = new Float32Array(newSize21);
				newArray21.set(k.array);
				k.array = newArray21;
			}
			k.array[k.pos++] = v21;
			var v22 = 1;
			if(k.pos == k.array.length) {
				var newSize22 = k.array.length << 1;
				if(newSize22 < 128) {
					newSize22 = 128;
				}
				var newArray22 = new Float32Array(newSize22);
				newArray22.set(k.array);
				k.array = newArray22;
			}
			k.array[k.pos++] = v22;
			var v23 = 1;
			if(k.pos == k.array.length) {
				var newSize23 = k.array.length << 1;
				if(newSize23 < 128) {
					newSize23 = 128;
				}
				var newArray23 = new Float32Array(newSize23);
				newArray23.set(k.array);
				k.array = newArray23;
			}
			k.array[k.pos++] = v23;
			var v24 = 1;
			if(k.pos == k.array.length) {
				var newSize24 = k.array.length << 1;
				if(newSize24 < 128) {
					newSize24 = 128;
				}
				var newArray24 = new Float32Array(newSize24);
				newArray24.set(k.array);
				k.array = newArray24;
			}
			k.array[k.pos++] = v24;
			var v25 = 1;
			if(k.pos == k.array.length) {
				var newSize25 = k.array.length << 1;
				if(newSize25 < 128) {
					newSize25 = 128;
				}
				var newArray25 = new Float32Array(newSize25);
				newArray25.set(k.array);
				k.array = newArray25;
			}
			k.array[k.pos++] = v25;
			var v26 = 1;
			if(k.pos == k.array.length) {
				var newSize26 = k.array.length << 1;
				if(newSize26 < 128) {
					newSize26 = 128;
				}
				var newArray26 = new Float32Array(newSize26);
				newArray26.set(k.array);
				k.array = newArray26;
			}
			k.array[k.pos++] = v26;
			var v27 = 1;
			if(k.pos == k.array.length) {
				var newSize27 = k.array.length << 1;
				if(newSize27 < 128) {
					newSize27 = 128;
				}
				var newArray27 = new Float32Array(newSize27);
				newArray27.set(k.array);
				k.array = newArray27;
			}
			k.array[k.pos++] = v27;
			var v28 = 1;
			if(k.pos == k.array.length) {
				var newSize28 = k.array.length << 1;
				if(newSize28 < 128) {
					newSize28 = 128;
				}
				var newArray28 = new Float32Array(newSize28);
				newArray28.set(k.array);
				k.array = newArray28;
			}
			k.array[k.pos++] = v28;
			var v29 = 1;
			if(k.pos == k.array.length) {
				var newSize29 = k.array.length << 1;
				if(newSize29 < 128) {
					newSize29 = 128;
				}
				var newArray29 = new Float32Array(newSize29);
				newArray29.set(k.array);
				k.array = newArray29;
			}
			k.array[k.pos++] = v29;
			var v30 = 1;
			if(k.pos == k.array.length) {
				var newSize30 = k.array.length << 1;
				if(newSize30 < 128) {
					newSize30 = 128;
				}
				var newArray30 = new Float32Array(newSize30);
				newArray30.set(k.array);
				k.array = newArray30;
			}
			k.array[k.pos++] = v30;
			var v31 = 1;
			if(k.pos == k.array.length) {
				var newSize31 = k.array.length << 1;
				if(newSize31 < 128) {
					newSize31 = 128;
				}
				var newArray31 = new Float32Array(newSize31);
				newArray31.set(k.array);
				k.array = newArray31;
			}
			k.array[k.pos++] = v31;
			this.fixedBuffer.uploadVector(k,0,4);
		}
		var _this6 = this.engine;
		_this6.renderBuffer(this.fixedBuffer,_this6.mem.quadIndexes,2,0,-1);
		return true;
	}
	,beginDraw: function(obj,texture,isRelative,hasUVPos) {
		if(hasUVPos == null) {
			hasUVPos = false;
		}
		if(this.onBeginDraw != null && !this.onBeginDraw(obj)) {
			return false;
		}
		var stride = 8;
		var shaderChanged = false;
		var paramsChanged = false;
		var objShaders = obj.shaders;
		var curShaders = this.currentShaders.next;
		while(objShaders != null && curShaders != null) {
			var s = objShaders.s;
			var t = curShaders.s;
			objShaders = objShaders.next;
			curShaders = curShaders.next;
			var prevInst = t.instance;
			if(s != t) {
				paramsChanged = true;
			}
			s.updateConstants(this.manager.globals);
			if(s.instance != prevInst) {
				shaderChanged = true;
			}
		}
		if(objShaders != null || curShaders != null || this.baseShader.isRelative__ != isRelative || this.baseShader.hasUVPos__ != hasUVPos || this.baseShader.killAlpha__ != this.killAlpha) {
			shaderChanged = true;
		}
		if(shaderChanged) {
			var _this = this.baseShader;
			_this.constModified = true;
			_this.hasUVPos__ = hasUVPos;
			var _this1 = this.baseShader;
			_this1.constModified = true;
			_this1.isRelative__ = isRelative;
			var _this2 = this.baseShader;
			_this2.constModified = true;
			_this2.killAlpha__ = this.killAlpha;
			this.baseShader.updateConstants(this.manager.globals);
			this.baseShaderList.next = obj.shaders;
			this.initShaders(this.baseShaderList);
		} else if(paramsChanged) {
			if(this.currentShaders != this.baseShaderList) {
				throw new js__$Boot_HaxeError("!");
			}
			this.currentShaders.next = obj.shaders;
		}
		this.texture = texture;
		this.stride = stride;
		this.currentObj = obj;
		return true;
	}
	,__class__: h2d_RenderContext
});
var h2d_TileGroup = function(t,parent) {
	h2d_Drawable.call(this,parent);
	this.tile = t;
	this.rangeMin = this.rangeMax = -1;
	this.curColor = new h3d_Vector(1,1,1,1);
	this.content = new h2d_TileLayerContent();
};
$hxClasses["h2d.TileGroup"] = h2d_TileGroup;
h2d_TileGroup.__name__ = "h2d.TileGroup";
h2d_TileGroup.__super__ = h2d_Drawable;
h2d_TileGroup.prototype = $extend(h2d_Drawable.prototype,{
	content: null
	,curColor: null
	,tile: null
	,rangeMin: null
	,rangeMax: null
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		this.addBounds(relativeTo,out,this.content.xMin,this.content.yMin,this.content.xMax - this.content.xMin,this.content.yMax - this.content.yMin);
	}
	,clear: function() {
		this.content.clear();
	}
	,onRemove: function() {
		this.content.dispose();
		h2d_Drawable.prototype.onRemove.call(this);
	}
	,setDefaultColor: function(rgb,alpha) {
		if(alpha == null) {
			alpha = 1.0;
		}
		this.curColor.x = (rgb >> 16 & 255) / 255;
		this.curColor.y = (rgb >> 8 & 255) / 255;
		this.curColor.z = (rgb & 255) / 255;
		this.curColor.w = alpha;
	}
	,draw: function(ctx) {
		this.drawWith(ctx,this);
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		var _this = this.content;
		if(_this.buffer == null || _this.buffer.isDisposed()) {
			_this.alloc(h3d_Engine.CURRENT);
		}
	}
	,drawWith: function(ctx,obj) {
		var max = this.content.triCount();
		if(max == 0) {
			return;
		}
		if(!ctx.beginDrawObject(obj,this.tile.innerTex)) {
			return;
		}
		var min = this.rangeMin < 0 ? 0 : this.rangeMin * 2;
		if(this.rangeMax > 0 && this.rangeMax < max * 2) {
			max = this.rangeMax * 2;
		}
		this.content.doRender(ctx.engine,min,max - min);
	}
	,__class__: h2d_TileGroup
});
var h2d_ScaleGrid = function(tile,borderW,borderH,parent) {
	h2d_TileGroup.call(this,tile,parent);
	this.set_borderWidth(borderW);
	this.set_borderHeight(borderH);
	this.set_width(tile.width);
	this.set_height(tile.height);
};
$hxClasses["h2d.ScaleGrid"] = h2d_ScaleGrid;
h2d_ScaleGrid.__name__ = "h2d.ScaleGrid";
h2d_ScaleGrid.__super__ = h2d_TileGroup;
h2d_ScaleGrid.prototype = $extend(h2d_TileGroup.prototype,{
	borderWidth: null
	,borderHeight: null
	,width: null
	,height: null
	,tileBorders: null
	,contentTile: null
	,set_width: function(w) {
		if(this.width == w) {
			return w;
		}
		this.width = w;
		this.clear();
		return w;
	}
	,set_height: function(h) {
		if(this.height == h) {
			return h;
		}
		this.height = h;
		this.clear();
		return h;
	}
	,set_borderWidth: function(w) {
		if(this.borderWidth == w) {
			return w;
		}
		this.borderWidth = w;
		this.clear();
		return w;
	}
	,set_borderHeight: function(h) {
		if(this.borderHeight == h) {
			return h;
		}
		this.borderHeight = h;
		this.clear();
		return h;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		this.checkUpdate();
		h2d_TileGroup.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
	}
	,checkUpdate: function() {
		if(this.content.isEmpty() || this.tile != this.contentTile) {
			this.clear();
			this.contentTile = this.tile;
			this.updateContent();
		}
	}
	,updateContent: function() {
		var bw = this.borderWidth;
		var bh = this.borderHeight;
		var _this = this.content;
		var color = this.curColor;
		var t = this.tile.sub(0,0,bw,bh);
		_this.add(0,0,color.x,color.y,color.z,color.w,t);
		var _this1 = this.content;
		var x = this.width - bw;
		var color1 = this.curColor;
		var t1 = this.tile.sub(this.tile.width - bw,0,bw,bh);
		_this1.add(x,0,color1.x,color1.y,color1.z,color1.w,t1);
		var _this2 = this.content;
		var y = this.height - bh;
		var color2 = this.curColor;
		var t2 = this.tile.sub(0,this.tile.height - bh,bw,bh);
		_this2.add(0,y,color2.x,color2.y,color2.z,color2.w,t2);
		var _this3 = this.content;
		var x1 = this.width - bw;
		var y1 = this.height - bh;
		var color3 = this.curColor;
		var t3 = this.tile.sub(this.tile.width - bw,this.tile.height - bh,bw,bh);
		_this3.add(x1,y1,color3.x,color3.y,color3.z,color3.w,t3);
		var sizeX = this.tile.width - bw * 2;
		var sizeY = this.tile.height - bh * 2;
		if(!this.tileBorders) {
			var w = this.width - bw * 2;
			var h = this.height - bh * 2;
			var t4 = this.tile.sub(bw,0,sizeX,bh);
			t4.scaleToSize(w,bh);
			var color4 = this.curColor;
			this.content.add(bw,0,color4.x,color4.y,color4.z,color4.w,t4);
			var t5 = this.tile.sub(bw,this.tile.height - bh,sizeX,bh);
			t5.scaleToSize(w,bh);
			var color5 = this.curColor;
			this.content.add(bw,h + bh,color5.x,color5.y,color5.z,color5.w,t5);
			var t6 = this.tile.sub(0,bh,bw,sizeY);
			t6.scaleToSize(bw,h);
			var color6 = this.curColor;
			this.content.add(0,bh,color6.x,color6.y,color6.z,color6.w,t6);
			var t7 = this.tile.sub(this.tile.width - bw,bh,bw,sizeY);
			t7.scaleToSize(bw,h);
			var color7 = this.curColor;
			this.content.add(w + bw,bh,color7.x,color7.y,color7.z,color7.w,t7);
		} else {
			var rw = (this.width - bw * 2) / sizeX | 0;
			var _g = 0;
			var _g1 = rw;
			while(_g < _g1) {
				var x2 = _g++;
				var _this4 = this.content;
				var color8 = this.curColor;
				var t8 = this.tile.sub(bw,0,sizeX,bh);
				_this4.add(bw + x2 * sizeX,0,color8.x,color8.y,color8.z,color8.w,t8);
				var _this5 = this.content;
				var y2 = this.height - bh;
				var color9 = this.curColor;
				var t9 = this.tile.sub(bw,this.tile.height - bh,sizeX,bh);
				_this5.add(bw + x2 * sizeX,y2,color9.x,color9.y,color9.z,color9.w,t9);
			}
			var dx = this.width - bw * 2 - rw * sizeX;
			if(dx > 0) {
				var _this6 = this.content;
				var color10 = this.curColor;
				var t10 = this.tile.sub(bw,0,dx,bh);
				_this6.add(bw + rw * sizeX,0,color10.x,color10.y,color10.z,color10.w,t10);
				var _this7 = this.content;
				var y3 = this.height - bh;
				var color11 = this.curColor;
				var t11 = this.tile.sub(bw,this.tile.height - bh,dx,bh);
				_this7.add(bw + rw * sizeX,y3,color11.x,color11.y,color11.z,color11.w,t11);
			}
			var rh = (this.height - bh * 2) / sizeY | 0;
			var _g2 = 0;
			var _g3 = rh;
			while(_g2 < _g3) {
				var y4 = _g2++;
				var _this8 = this.content;
				var color12 = this.curColor;
				var t12 = this.tile.sub(0,bh,bw,sizeY);
				_this8.add(0,bh + y4 * sizeY,color12.x,color12.y,color12.z,color12.w,t12);
				var _this9 = this.content;
				var x3 = this.width - bw;
				var color13 = this.curColor;
				var t13 = this.tile.sub(this.tile.width - bw,bh,bw,sizeY);
				_this9.add(x3,bh + y4 * sizeY,color13.x,color13.y,color13.z,color13.w,t13);
			}
			var dy = this.height - bh * 2 - rh * sizeY;
			if(dy > 0) {
				var _this10 = this.content;
				var color14 = this.curColor;
				var t14 = this.tile.sub(0,bh,bw,dy);
				_this10.add(0,bh + rh * sizeY,color14.x,color14.y,color14.z,color14.w,t14);
				var _this11 = this.content;
				var x4 = this.width - bw;
				var color15 = this.curColor;
				var t15 = this.tile.sub(this.tile.width - bw,bh,bw,dy);
				_this11.add(x4,bh + rh * sizeY,color15.x,color15.y,color15.z,color15.w,t15);
			}
		}
		var t16 = this.tile.sub(bw,bh,sizeX,sizeY);
		t16.scaleToSize(this.width - bw * 2,this.height - bh * 2);
		var color16 = this.curColor;
		this.content.add(bw,bh,color16.x,color16.y,color16.z,color16.w,t16);
	}
	,sync: function(ctx) {
		this.checkUpdate();
		h2d_TileGroup.prototype.sync.call(this,ctx);
	}
	,__class__: h2d_ScaleGrid
});
var h2d_ScaleModeAlign = $hxEnums["h2d.ScaleModeAlign"] = { __ename__ : true, __constructs__ : ["Left","Right","Center","Top","Bottom"]
	,Left: {_hx_index:0,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Right: {_hx_index:1,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Center: {_hx_index:2,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Top: {_hx_index:3,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Bottom: {_hx_index:4,__enum__:"h2d.ScaleModeAlign",toString:$estr}
};
h2d_ScaleModeAlign.__empty_constructs__ = [h2d_ScaleModeAlign.Left,h2d_ScaleModeAlign.Right,h2d_ScaleModeAlign.Center,h2d_ScaleModeAlign.Top,h2d_ScaleModeAlign.Bottom];
var h2d_ScaleMode = $hxEnums["h2d.ScaleMode"] = { __ename__ : true, __constructs__ : ["Resize","Stretch","LetterBox","Fixed","Zoom","AutoZoom"]
	,Resize: {_hx_index:0,__enum__:"h2d.ScaleMode",toString:$estr}
	,Stretch: ($_=function(width,height) { return {_hx_index:1,width:width,height:height,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["width","height"],$_)
	,LetterBox: ($_=function(width,height,integerScale,horizontalAlign,verticalAlign) { return {_hx_index:2,width:width,height:height,integerScale:integerScale,horizontalAlign:horizontalAlign,verticalAlign:verticalAlign,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["width","height","integerScale","horizontalAlign","verticalAlign"],$_)
	,Fixed: ($_=function(width,height,zoom,horizontalAlign,verticalAlign) { return {_hx_index:3,width:width,height:height,zoom:zoom,horizontalAlign:horizontalAlign,verticalAlign:verticalAlign,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["width","height","zoom","horizontalAlign","verticalAlign"],$_)
	,Zoom: ($_=function(level) { return {_hx_index:4,level:level,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["level"],$_)
	,AutoZoom: ($_=function(minWidth,minHeight,integerScaling) { return {_hx_index:5,minWidth:minWidth,minHeight:minHeight,integerScaling:integerScaling,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["minWidth","minHeight","integerScaling"],$_)
};
h2d_ScaleMode.__empty_constructs__ = [h2d_ScaleMode.Resize];
var hxd_InteractiveScene = function() { };
$hxClasses["hxd.InteractiveScene"] = hxd_InteractiveScene;
hxd_InteractiveScene.__name__ = "hxd.InteractiveScene";
hxd_InteractiveScene.__isInterface__ = true;
hxd_InteractiveScene.prototype = {
	setEvents: null
	,handleEvent: null
	,dispatchEvent: null
	,dispatchListeners: null
	,isInteractiveVisible: null
	,__class__: hxd_InteractiveScene
};
var h2d_Scene = function() {
	this.scaleMode = h2d_ScaleMode.Resize;
	h2d_Layers.call(this,null);
	var e = h3d_Engine.CURRENT;
	this.ctx = new h2d_RenderContext(this);
	this.width = e.width;
	this.height = e.height;
	this.offsetX = 0;
	this.offsetY = 0;
	this.ratioX = 1;
	this.ratioY = 1;
	this.viewportX = 0;
	this.viewportY = 0;
	this.interactive = [];
	this.eventListeners = [];
	this.shapePoint = new h2d_col_Point();
	this.window = hxd_Window.getInstance();
	this.posChanged = true;
};
$hxClasses["h2d.Scene"] = h2d_Scene;
h2d_Scene.__name__ = "h2d.Scene";
h2d_Scene.__interfaces__ = [hxd_InteractiveScene,h3d_IDrawable];
h2d_Scene.__super__ = h2d_Layers;
h2d_Scene.prototype = $extend(h2d_Layers.prototype,{
	width: null
	,height: null
	,viewportX: null
	,viewportY: null
	,offsetX: null
	,offsetY: null
	,ratioX: null
	,ratioY: null
	,scaleMode: null
	,interactive: null
	,eventListeners: null
	,ctx: null
	,window: null
	,events: null
	,shapePoint: null
	,setEvents: function(events) {
		this.events = events;
	}
	,checkResize: function() {
		var _gthis = this;
		var engine = h3d_Engine.CURRENT;
		var _g = this.scaleMode;
		switch(_g._hx_index) {
		case 0:
			var w = engine.width;
			var h = engine.height;
			if(w != _gthis.width || h != _gthis.height) {
				_gthis.width = w;
				_gthis.height = h;
				_gthis.posChanged = true;
			}
			this.ratioX = 1;
			this.ratioY = 1;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.viewportX = 0;
			_gthis.viewportY = 0;
			break;
		case 1:
			var _height = _g.height;
			var _width = _g.width;
			if(_width != _gthis.width || _height != _gthis.height) {
				_gthis.width = _width;
				_gthis.height = _height;
				_gthis.posChanged = true;
			}
			this.ratioX = 1;
			this.ratioY = 1;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.viewportX = 0;
			_gthis.viewportY = 0;
			break;
		case 2:
			var verticalAlign = _g.verticalAlign;
			var horizontalAlign = _g.horizontalAlign;
			var integerScale = _g.integerScale;
			var _height1 = _g.height;
			var _width1 = _g.width;
			if(_width1 != _gthis.width || _height1 != _gthis.height) {
				_gthis.width = _width1;
				_gthis.height = _height1;
				_gthis.posChanged = true;
			}
			var a = engine.width / _width1;
			var b = engine.height / _height1;
			var zoom = a > b ? b : a;
			if(integerScale) {
				zoom = zoom | 0;
				if(zoom == 0) {
					zoom = 1;
				}
			}
			_gthis.ratioX = _gthis.width * zoom / engine.width;
			_gthis.ratioY = _gthis.height * zoom / engine.height;
			var horizontal = horizontalAlign;
			var vertical = verticalAlign;
			if(horizontal == null) {
				horizontal = h2d_ScaleModeAlign.Center;
			}
			switch(horizontal._hx_index) {
			case 0:
				_gthis.offsetX = (engine.width - _gthis.width * zoom) / (2 * zoom);
				_gthis.viewportX = 0;
				break;
			case 1:
				_gthis.offsetX = -((engine.width - _gthis.width * zoom) / (2 * zoom));
				_gthis.viewportX = (engine.width - _gthis.width * zoom) / zoom;
				break;
			default:
				_gthis.offsetX = 0;
				_gthis.viewportX = (engine.width - _gthis.width * zoom) / (2 * zoom);
			}
			if(vertical == null) {
				vertical = h2d_ScaleModeAlign.Center;
			}
			switch(vertical._hx_index) {
			case 3:
				_gthis.offsetY = (engine.height - _gthis.height * zoom) / (2 * zoom);
				_gthis.viewportY = 0;
				break;
			case 4:
				_gthis.offsetY = -((engine.height - _gthis.height * zoom) / (2 * zoom));
				_gthis.viewportY = (engine.height - _gthis.height * zoom) / zoom;
				break;
			default:
				_gthis.offsetY = 0;
				_gthis.viewportY = (engine.height - _gthis.height * zoom) / (2 * zoom);
			}
			break;
		case 3:
			var verticalAlign1 = _g.verticalAlign;
			var horizontalAlign1 = _g.horizontalAlign;
			var zoom1 = _g.zoom;
			var _height2 = _g.height;
			var _width2 = _g.width;
			if(_width2 != _gthis.width || _height2 != _gthis.height) {
				_gthis.width = _width2;
				_gthis.height = _height2;
				_gthis.posChanged = true;
			}
			_gthis.ratioX = _gthis.width * zoom1 / engine.width;
			_gthis.ratioY = _gthis.height * zoom1 / engine.height;
			var horizontal1 = horizontalAlign1;
			var vertical1 = verticalAlign1;
			if(horizontal1 == null) {
				horizontal1 = h2d_ScaleModeAlign.Center;
			}
			switch(horizontal1._hx_index) {
			case 0:
				_gthis.offsetX = (engine.width - _gthis.width * zoom1) / (2 * zoom1);
				_gthis.viewportX = 0;
				break;
			case 1:
				_gthis.offsetX = -((engine.width - _gthis.width * zoom1) / (2 * zoom1));
				_gthis.viewportX = (engine.width - _gthis.width * zoom1) / zoom1;
				break;
			default:
				_gthis.offsetX = 0;
				_gthis.viewportX = (engine.width - _gthis.width * zoom1) / (2 * zoom1);
			}
			if(vertical1 == null) {
				vertical1 = h2d_ScaleModeAlign.Center;
			}
			switch(vertical1._hx_index) {
			case 3:
				_gthis.offsetY = (engine.height - _gthis.height * zoom1) / (2 * zoom1);
				_gthis.viewportY = 0;
				break;
			case 4:
				_gthis.offsetY = -((engine.height - _gthis.height * zoom1) / (2 * zoom1));
				_gthis.viewportY = (engine.height - _gthis.height * zoom1) / zoom1;
				break;
			default:
				_gthis.offsetY = 0;
				_gthis.viewportY = (engine.height - _gthis.height * zoom1) / (2 * zoom1);
			}
			break;
		case 4:
			var level = _g.level;
			var w1 = Math.ceil(engine.width / level);
			var h1 = Math.ceil(engine.height / level);
			if(w1 != _gthis.width || h1 != _gthis.height) {
				_gthis.width = w1;
				_gthis.height = h1;
				_gthis.posChanged = true;
			}
			_gthis.ratioX = _gthis.width * level / engine.width;
			_gthis.ratioY = _gthis.height * level / engine.height;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.viewportX = 0;
			_gthis.viewportY = 0;
			break;
		case 5:
			var integerScaling = _g.integerScaling;
			var minHeight = _g.minHeight;
			var minWidth = _g.minWidth;
			var a1 = engine.width / minWidth;
			var b1 = engine.height / minHeight;
			var zoom2 = a1 > b1 ? b1 : a1;
			if(integerScaling) {
				zoom2 = zoom2 | 0;
				if(zoom2 == 0) {
					zoom2 = 1;
				}
			}
			var w2 = Math.ceil(engine.width / zoom2);
			var h2 = Math.ceil(engine.height / zoom2);
			if(w2 != _gthis.width || h2 != _gthis.height) {
				_gthis.width = w2;
				_gthis.height = h2;
				_gthis.posChanged = true;
			}
			_gthis.ratioX = _gthis.width * zoom2 / engine.width;
			_gthis.ratioY = _gthis.height * zoom2 / engine.height;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.viewportX = 0;
			_gthis.viewportY = 0;
			break;
		}
	}
	,dispatchListeners: function(event) {
		this.screenToLocal(event);
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l(event);
			if(!event.propagate) {
				break;
			}
		}
	}
	,isInteractiveVisible: function(i) {
		var s = i;
		while(s != this) {
			if(s == null || !s.visible) {
				return false;
			}
			s = s.parent;
		}
		return true;
	}
	,screenToLocal: function(e) {
		var x = e.relX * this.width / (this.window.get_width() * this.ratioX * this.scaleX) - this.x - this.viewportX;
		var y = e.relY * this.height / (this.window.get_height() * this.ratioY * this.scaleY) - this.y - this.viewportY;
		var rx = x * this.matA + y * this.matB + this.absX;
		var ry = x * this.matC + y * this.matD + this.absY;
		e.relX = rx;
		e.relY = ry;
	}
	,dispatchEvent: function(event,to) {
		var i = to;
		this.screenToLocal(event);
		var rx = event.relX;
		var ry = event.relY;
		var dx = rx - i.absX;
		var dy = ry - i.absY;
		var w1 = i.width * i.matA;
		var h1 = i.width * i.matC;
		var ky = h1 * dx + w1 * dy;
		var w2 = i.height * i.matB;
		var h2 = i.height * i.matD;
		var kx = w2 * dy + h2 * dx;
		var max = w1 * h2 - h1 * w2;
		event.relX = kx / max * i.width;
		event.relY = ky / max * i.height;
		i.handleEvent(event);
	}
	,handleEvent: function(event,last) {
		this.screenToLocal(event);
		var rx = event.relX;
		var ry = event.relY;
		var index = last == null ? 0 : this.interactive.indexOf(last) + 1;
		var pt = this.shapePoint;
		var _g = index;
		var _g1 = this.interactive.length;
		while(_g < _g1) {
			var idx = _g++;
			var i = this.interactive[idx];
			if(i == null) {
				break;
			}
			var dx = rx - i.absX;
			var dy = ry - i.absY;
			if(i.shape != null) {
				pt.x = (dx * i.matD - dy * i.matC) * i.invDet + i.shapeX;
				pt.y = (-dx * i.matB + dy * i.matA) * i.invDet + i.shapeY;
				if(!i.shape.contains(pt)) {
					continue;
				}
				dx = pt.x - i.shapeX;
				dy = pt.y - i.shapeY;
			} else {
				var w1 = i.width * i.matA;
				var h1 = i.width * i.matC;
				var ky = h1 * dx + w1 * dy;
				if(ky < 0) {
					continue;
				}
				var w2 = i.height * i.matB;
				var h2 = i.height * i.matD;
				var kx = w2 * dy + h2 * dx;
				if(kx < 0) {
					continue;
				}
				var max = w1 * h2 - h1 * w2;
				if(ky >= max || kx >= max) {
					continue;
				}
				dx = kx / max * i.width;
				dy = ky / max * i.height;
			}
			var visible = true;
			var p = i;
			while(p != null) {
				if(!p.visible) {
					visible = false;
					break;
				}
				p = p.parent;
			}
			if(!visible) {
				continue;
			}
			event.relX = dx;
			event.relY = dy;
			i.handleEvent(event);
			if(event.cancel) {
				event.cancel = false;
				event.propagate = false;
				continue;
			}
			return i;
		}
		return null;
	}
	,addEventListener: function(f) {
		this.eventListeners.push(f);
	}
	,startDrag: function(onEvent,onCancel,refEvent) {
		var _gthis = this;
		this.events.startDrag(function(e) {
			_gthis.screenToLocal(e);
			onEvent(e);
		},onCancel,refEvent);
	}
	,stopDrag: function() {
		this.events.stopDrag();
	}
	,addEventTarget: function(i) {
		var i1 = i;
		var lv = 0;
		while(i1 != null) {
			i1 = i1.parent;
			++lv;
		}
		var level = lv;
		var _g = 0;
		var _g1 = this.interactive.length;
		while(_g < _g1) {
			var index = _g++;
			var i11 = i;
			var i2 = this.interactive[index];
			var lv1 = level;
			var i3 = i2;
			var lv2 = 0;
			while(i3 != null) {
				i3 = i3.parent;
				++lv2;
			}
			var lv21 = lv2;
			var p1 = i11;
			var p2 = i2;
			while(lv1 > lv21) {
				i11 = p1;
				p1 = p1.parent;
				--lv1;
			}
			while(lv21 > lv1) {
				i2 = p2;
				p2 = p2.parent;
				--lv21;
			}
			while(p1 != p2) {
				i11 = p1;
				p1 = p1.parent;
				i2 = p2;
				p2 = p2.parent;
			}
			var id = -1;
			var _g2 = 0;
			var _g11 = p1.children.length;
			while(_g2 < _g11) {
				var k = _g2++;
				if(p1.children[k] == i11) {
					id = k;
					break;
				}
			}
			var tmp = id;
			var id1 = -1;
			var _g3 = 0;
			var _g12 = p2.children.length;
			while(_g3 < _g12) {
				var k1 = _g3++;
				if(p2.children[k1] == i2) {
					id1 = k1;
					break;
				}
			}
			if(tmp > id1) {
				this.interactive.splice(index,0,i);
				return;
			}
		}
		this.interactive.push(i);
	}
	,removeEventTarget: function(i,notify) {
		if(notify == null) {
			notify = false;
		}
		HxOverrides.remove(this.interactive,i);
		if(notify && this.events != null) {
			this.events.onRemove(i);
		}
	}
	,setElapsedTime: function(v) {
		this.ctx.elapsedTime = v;
	}
	,render: function(engine) {
		this.ctx.engine = engine;
		this.ctx.frame++;
		this.ctx.time += this.ctx.elapsedTime;
		this.ctx.globalAlpha = this.alpha;
		this.sync(this.ctx);
		if(this.children.length == 0) {
			return;
		}
		this.ctx.begin();
		this.ctx.drawScene();
		this.ctx.end();
	}
	,sync: function(ctx) {
		if(!this.allocated) {
			this.onAdd();
		}
		h2d_Layers.prototype.sync.call(this,ctx);
	}
	,onAdd: function() {
		this.checkResize();
		h2d_Layers.prototype.onAdd.call(this);
		this.window.addResizeEvent($bind(this,this.checkResize));
	}
	,onRemove: function() {
		h2d_Layers.prototype.onRemove.call(this);
		this.window.removeResizeEvent($bind(this,this.checkResize));
	}
	,__class__: h2d_Scene
});
var h2d_Align = $hxEnums["h2d.Align"] = { __ename__ : true, __constructs__ : ["Left","Right","Center","MultilineRight","MultilineCenter"]
	,Left: {_hx_index:0,__enum__:"h2d.Align",toString:$estr}
	,Right: {_hx_index:1,__enum__:"h2d.Align",toString:$estr}
	,Center: {_hx_index:2,__enum__:"h2d.Align",toString:$estr}
	,MultilineRight: {_hx_index:3,__enum__:"h2d.Align",toString:$estr}
	,MultilineCenter: {_hx_index:4,__enum__:"h2d.Align",toString:$estr}
};
h2d_Align.__empty_constructs__ = [h2d_Align.Left,h2d_Align.Right,h2d_Align.Center,h2d_Align.MultilineRight,h2d_Align.MultilineCenter];
var h2d_TextInput = function(font,parent) {
	this.maxHistorySize = 100;
	this.lastClick = 0.;
	this.lastChange = 0.;
	this.redo = [];
	this.undo = [];
	this.scrollX = 0.;
	this.cursorBlink = 0.;
	this.canEdit = true;
	this.cursorBlinkTime = 0.5;
	this.cursorIndex = -1;
	var _gthis = this;
	h2d_Text.call(this,font,parent);
	this.interactive = new h2d_Interactive(0,0);
	this.interactive.set_cursor(hxd_Cursor.TextInput);
	this.interactive.onPush = function(e) {
		_gthis.onPush(e);
		if(!e.cancel && e.button == 0) {
			if(!_gthis.interactive.hasFocus()) {
				e.kind = hxd_EventKind.EFocus;
				_gthis.onFocus(e);
				e.kind = hxd_EventKind.EPush;
				if(e.cancel) {
					return;
				}
				_gthis.interactive.focus();
			}
			_gthis.cursorBlink = 0;
			var startIndex = _gthis.textPos(e.relX,e.relY);
			_gthis.cursorIndex = startIndex;
			_gthis.selectionRange = null;
			var pt = new h2d_col_Point();
			var scene = _gthis.getScene();
			scene.startDrag(function(e1) {
				pt.x = e1.relX;
				pt.y = e1.relY;
				_gthis.globalToLocal(pt);
				var index = _gthis.textPos(pt.x,pt.y);
				if(index == startIndex) {
					_gthis.selectionRange = null;
				} else if(index < startIndex) {
					_gthis.selectionRange = { start : index, length : startIndex - index};
				} else {
					_gthis.selectionRange = { start : startIndex, length : index - startIndex};
				}
				_gthis.selectionSize = 0;
				_gthis.cursorIndex = index;
				if(e1.kind == hxd_EventKind.ERelease || _gthis.getScene() != scene) {
					scene.stopDrag();
				}
			});
		}
	};
	this.interactive.onKeyDown = function(e2) {
		_gthis.onKeyDown(e2);
		_gthis.handleKey(e2);
	};
	this.interactive.onTextInput = function(e3) {
		_gthis.onTextInput(e3);
		_gthis.handleKey(e3);
	};
	this.interactive.onFocusLost = function(e4) {
		_gthis.cursorIndex = -1;
		_gthis.selectionRange = null;
		_gthis.onFocusLost(e4);
	};
	this.interactive.onClick = function(e5) {
		_gthis.onClick(e5);
		if(e5.cancel) {
			return;
		}
		var t = Date.now() / 1000;
		if(t - _gthis.lastClick < 0.3 && _gthis.text.length != 0) {
			_gthis.selectionRange = { start : 0, length : _gthis.text.length};
			_gthis.selectionSize = 0;
			_gthis.cursorIndex = _gthis.text.length;
		}
		_gthis.lastClick = t;
	};
	this.interactive.onKeyUp = function(e6) {
		_gthis.onKeyUp(e6);
	};
	this.interactive.onRelease = function(e7) {
		_gthis.onRelease(e7);
	};
	this.interactive.onFocus = function(e8) {
		_gthis.onFocus(e8);
	};
	this.interactive.onKeyUp = function(e9) {
		_gthis.onKeyUp(e9);
	};
	this.interactive.onMove = function(e10) {
		_gthis.onMove(e10);
	};
	this.interactive.onOver = function(e11) {
		_gthis.onOver(e11);
	};
	this.interactive.onOut = function(e12) {
		_gthis.onOut(e12);
	};
	this.interactive.set_cursor(hxd_Cursor.TextInput);
	this.addChildAt(this.interactive,0);
};
$hxClasses["h2d.TextInput"] = h2d_TextInput;
h2d_TextInput.__name__ = "h2d.TextInput";
h2d_TextInput.__super__ = h2d_Text;
h2d_TextInput.prototype = $extend(h2d_Text.prototype,{
	cursorIndex: null
	,cursorTile: null
	,selectionTile: null
	,cursorBlinkTime: null
	,inputWidth: null
	,selectionRange: null
	,canEdit: null
	,interactive: null
	,cursorText: null
	,cursorX: null
	,cursorXIndex: null
	,cursorBlink: null
	,scrollX: null
	,selectionPos: null
	,selectionSize: null
	,undo: null
	,redo: null
	,lastChange: null
	,lastClick: null
	,maxHistorySize: null
	,constraintSize: function(width,height) {
	}
	,handleKey: function(e) {
		if(e.cancel || this.cursorIndex < 0) {
			return;
		}
		var oldIndex = this.cursorIndex;
		var oldText = this.text;
		switch(e.keyCode) {
		case 8:
			if(this.selectionRange != null) {
				if(!this.canEdit) {
					return;
				}
				this.beforeChange();
				this.cutSelection();
				this.onChange();
			} else if(this.cursorIndex > 0 && this.canEdit) {
				this.beforeChange();
				this.cursorIndex--;
				this.set_text(HxOverrides.substr(this.text,0,this.cursorIndex) + HxOverrides.substr(this.text,this.cursorIndex + 1,null));
				this.onChange();
			}
			break;
		case 13:case 108:
			this.cursorIndex = -1;
			this.interactive.blur();
			return;
		case 35:
			this.cursorIndex = this.text.length;
			break;
		case 36:
			this.cursorIndex = 0;
			break;
		case 37:
			if(this.cursorIndex > 0) {
				this.cursorIndex--;
			}
			break;
		case 39:
			if(this.cursorIndex < this.text.length) {
				this.cursorIndex++;
			}
			break;
		case 46:
			if(this.selectionRange != null) {
				if(!this.canEdit) {
					return;
				}
				this.beforeChange();
				this.cutSelection();
				this.onChange();
			} else if(this.cursorIndex < this.text.length && this.canEdit) {
				this.beforeChange();
				this.set_text(HxOverrides.substr(this.text,0,this.cursorIndex) + HxOverrides.substr(this.text,this.cursorIndex + 1,null));
				this.onChange();
			}
			break;
		case 89:
			if(hxd_Key.isDown(17)) {
				if(this.redo.length > 0 && this.canEdit) {
					this.undo.push(this.curHistoryState());
					this.setState(this.redo.pop());
				}
				return;
			} else {
				if(e.kind == hxd_EventKind.EKeyDown) {
					return;
				}
				if(e.charCode != 0 && this.canEdit) {
					if(!this.font.hasChar(e.charCode)) {
						return;
					}
					this.beforeChange();
					if(this.selectionRange != null) {
						this.cutSelection();
					}
					var code = e.charCode;
					this.set_text(HxOverrides.substr(this.text,0,this.cursorIndex) + String.fromCodePoint(code) + HxOverrides.substr(this.text,this.cursorIndex,null));
					this.cursorIndex++;
					this.onChange();
				}
			}
			break;
		case 90:
			if(hxd_Key.isDown(17)) {
				if(this.undo.length > 0 && this.canEdit) {
					this.redo.push(this.curHistoryState());
					this.setState(this.undo.pop());
				}
				return;
			} else {
				if(e.kind == hxd_EventKind.EKeyDown) {
					return;
				}
				if(e.charCode != 0 && this.canEdit) {
					if(!this.font.hasChar(e.charCode)) {
						return;
					}
					this.beforeChange();
					if(this.selectionRange != null) {
						this.cutSelection();
					}
					var code1 = e.charCode;
					this.set_text(HxOverrides.substr(this.text,0,this.cursorIndex) + String.fromCodePoint(code1) + HxOverrides.substr(this.text,this.cursorIndex,null));
					this.cursorIndex++;
					this.onChange();
				}
			}
			break;
		default:
			if(e.kind == hxd_EventKind.EKeyDown) {
				return;
			}
			if(e.charCode != 0 && this.canEdit) {
				if(!this.font.hasChar(e.charCode)) {
					return;
				}
				this.beforeChange();
				if(this.selectionRange != null) {
					this.cutSelection();
				}
				var code2 = e.charCode;
				this.set_text(HxOverrides.substr(this.text,0,this.cursorIndex) + String.fromCodePoint(code2) + HxOverrides.substr(this.text,this.cursorIndex,null));
				this.cursorIndex++;
				this.onChange();
			}
		}
		this.cursorBlink = 0.;
		if(hxd_Key.isDown(16) && this.text == oldText) {
			if(this.cursorIndex == oldIndex) {
				return;
			}
			if(this.selectionRange == null) {
				this.selectionRange = oldIndex < this.cursorIndex ? { start : oldIndex, length : this.cursorIndex - oldIndex} : { start : this.cursorIndex, length : oldIndex - this.cursorIndex};
			} else if(oldIndex == this.selectionRange.start) {
				this.selectionRange.length += oldIndex - this.cursorIndex;
				this.selectionRange.start = this.cursorIndex;
			} else {
				this.selectionRange.length += this.cursorIndex - oldIndex;
			}
			if(this.selectionRange.length == 0) {
				this.selectionRange = null;
			} else if(this.selectionRange.length < 0) {
				this.selectionRange.start += this.selectionRange.length;
				this.selectionRange.length = -this.selectionRange.length;
			}
			this.selectionSize = 0;
		} else {
			this.selectionRange = null;
		}
	}
	,cutSelection: function() {
		if(this.selectionRange == null) {
			return false;
		}
		this.cursorIndex = this.selectionRange.start;
		var end = this.cursorIndex + this.selectionRange.length;
		this.set_text(HxOverrides.substr(this.text,0,this.cursorIndex) + HxOverrides.substr(this.text,end,null));
		this.selectionRange = null;
		return true;
	}
	,setState: function(h) {
		this.set_text(h.t);
		this.cursorIndex = h.c;
		this.selectionRange = h.sel;
		if(this.selectionRange != null) {
			this.cursorIndex = this.selectionRange.start + this.selectionRange.length;
		}
	}
	,curHistoryState: function() {
		return { t : this.text, c : this.cursorIndex, sel : this.selectionRange == null ? null : { start : this.selectionRange.start, length : this.selectionRange.length}};
	}
	,beforeChange: function() {
		var t = Date.now() / 1000;
		if(t - this.lastChange < 1) {
			this.lastChange = t;
			return;
		}
		this.lastChange = t;
		this.undo.push(this.curHistoryState());
		this.redo = [];
		while(this.undo.length > this.maxHistorySize) this.undo.shift();
	}
	,set_text: function(t) {
		h2d_Text.prototype.set_text.call(this,t);
		if(this.cursorIndex > t.length) {
			this.cursorIndex = t.length;
		}
		return t;
	}
	,set_font: function(f) {
		h2d_Text.prototype.set_font.call(this,f);
		this.cursorTile = h2d_Tile.fromColor(16777215,1,this.font.size);
		this.cursorTile.dy = 2;
		this.selectionTile = h2d_Tile.fromColor(3381759,0,Math.ceil(this.font.lineHeight));
		return f;
	}
	,initGlyphs: function(text,rebuild,handleAlign,lines) {
		if(handleAlign == null) {
			handleAlign = true;
		}
		if(rebuild == null) {
			rebuild = true;
		}
		h2d_Text.prototype.initGlyphs.call(this,text,rebuild,handleAlign,lines);
		if(rebuild) {
			this.calcWidth += this.cursorTile.width;
			if(this.inputWidth != null && this.calcWidth > this.inputWidth) {
				this.calcWidth = this.inputWidth;
			}
		}
	}
	,textPos: function(x,y) {
		x += this.scrollX;
		var pos = 0;
		while(pos < this.text.length) {
			if(this.calcTextWidth(HxOverrides.substr(this.text,0,pos + 1)) > x) {
				break;
			}
			++pos;
		}
		return pos;
	}
	,sync: function(ctx) {
		var tmp = this.inputWidth != null ? this.inputWidth : this.maxWidth != null ? Math.ceil(this.maxWidth) : this.get_textWidth();
		this.interactive.width = tmp;
		this.interactive.height = this.font.lineHeight;
		h2d_Text.prototype.sync.call(this,ctx);
	}
	,draw: function(ctx) {
		if(this.inputWidth != null) {
			var h = this.localToGlobal(new h2d_col_Point(this.inputWidth,this.font.lineHeight));
			ctx.setRenderZone(this.absX,this.absY,h.x - this.absX,h.y - this.absY);
		}
		if(this.cursorIndex >= 0 && (this.text != this.cursorText || this.cursorIndex != this.cursorXIndex)) {
			if(this.cursorIndex > this.text.length) {
				this.cursorIndex = this.text.length;
			}
			this.cursorText = this.text;
			this.cursorXIndex = this.cursorIndex;
			this.cursorX = this.calcTextWidth(HxOverrides.substr(this.text,0,this.cursorIndex));
			if(this.inputWidth != null && this.cursorX - this.scrollX >= this.inputWidth) {
				this.scrollX = this.cursorX - this.inputWidth + 1;
			} else if(this.cursorX < this.scrollX) {
				this.scrollX = this.cursorX;
			}
		}
		this.absX -= this.scrollX * this.matA;
		this.absY -= this.scrollX * this.matC;
		if(this.selectionRange != null) {
			if(this.selectionSize == 0) {
				this.selectionPos = this.calcTextWidth(HxOverrides.substr(this.text,0,this.selectionRange.start));
				this.selectionSize = this.calcTextWidth(HxOverrides.substr(this.text,this.selectionRange.start,this.selectionRange.length));
				if(this.selectionRange.start + this.selectionRange.length == this.text.length) {
					this.selectionSize += this.cursorTile.width;
				}
			}
			this.selectionTile.dx += this.selectionPos;
			this.selectionTile.width += this.selectionSize;
			this.emitTile(ctx,this.selectionTile);
			this.selectionTile.dx -= this.selectionPos;
			this.selectionTile.width -= this.selectionSize;
		}
		h2d_Text.prototype.draw.call(this,ctx);
		this.absX += this.scrollX * this.matA;
		this.absY += this.scrollX * this.matC;
		if(this.cursorIndex >= 0) {
			this.cursorBlink += ctx.elapsedTime;
			if(this.cursorBlink % (this.cursorBlinkTime * 2) < this.cursorBlinkTime) {
				this.cursorTile.dx += this.cursorX - this.scrollX;
				this.emitTile(ctx,this.cursorTile);
				this.cursorTile.dx -= this.cursorX - this.scrollX;
			}
		}
		if(this.inputWidth != null) {
			ctx.hasRenderZone = false;
			ctx.engine.setRenderZone();
		}
	}
	,focus: function() {
		this.interactive.focus();
		if(this.cursorIndex < 0) {
			this.cursorIndex = 0;
			if(this.text != "") {
				this.selectionRange = { start : 0, length : this.text.length};
			}
		}
	}
	,onOut: function(e) {
	}
	,onOver: function(e) {
	}
	,onMove: function(e) {
	}
	,onClick: function(e) {
	}
	,onPush: function(e) {
	}
	,onRelease: function(e) {
	}
	,onKeyDown: function(e) {
	}
	,onKeyUp: function(e) {
	}
	,onTextInput: function(e) {
	}
	,onFocus: function(e) {
	}
	,onFocusLost: function(e) {
	}
	,onChange: function() {
	}
	,drawRec: function(ctx) {
		var old = this.interactive.visible;
		this.interactive.set_visible(false);
		this.interactive.draw(ctx);
		h2d_Text.prototype.drawRec.call(this,ctx);
		this.interactive.set_visible(old);
	}
	,__class__: h2d_TextInput
});
var h2d_Tile = function(tex,x,y,w,h,dx,dy) {
	if(dy == null) {
		dy = 0;
	}
	if(dx == null) {
		dx = 0;
	}
	this.innerTex = tex;
	this.x = x;
	this.y = y;
	this.width = w;
	this.height = h;
	this.dx = dx;
	this.dy = dy;
	if(tex != null) {
		this.setTexture(tex);
	}
};
$hxClasses["h2d.Tile"] = h2d_Tile;
h2d_Tile.__name__ = "h2d.Tile";
h2d_Tile.fromColor = function(color,width,height,alpha,allocPos) {
	if(alpha == null) {
		alpha = 1.;
	}
	if(height == null) {
		height = 1;
	}
	if(width == null) {
		width = 1;
	}
	var t = new h2d_Tile(h3d_mat_Texture.fromColor(color,alpha,allocPos),0,0,1,1);
	t.width = width;
	t.height = height;
	return t;
};
h2d_Tile.fromTexture = function(t) {
	return new h2d_Tile(t,0,0,t.width,t.height);
};
h2d_Tile.fromPixels = function(pixels,allocPos) {
	var pix2 = pixels.makeSquare(true);
	var t = h3d_mat_Texture.fromPixels(pix2);
	if(pix2 != pixels) {
		pix2.dispose();
	}
	return new h2d_Tile(t,0,0,pixels.width,pixels.height);
};
h2d_Tile.prototype = {
	innerTex: null
	,u: null
	,v: null
	,u2: null
	,v2: null
	,dx: null
	,dy: null
	,x: null
	,y: null
	,width: null
	,height: null
	,setTexture: function(tex) {
		this.innerTex = tex;
		if(tex != null) {
			this.u = this.x / tex.width;
			this.v = this.y / tex.height;
			this.u2 = (this.x + this.width) / tex.width;
			this.v2 = (this.y + this.height) / tex.height;
		}
	}
	,sub: function(x,y,w,h,dx,dy) {
		if(dy == null) {
			dy = 0.;
		}
		if(dx == null) {
			dx = 0.;
		}
		return new h2d_Tile(this.innerTex,this.x + x,this.y + y,w,h,dx,dy);
	}
	,setPosition: function(x,y) {
		this.x = x;
		this.y = y;
		var tex = this.innerTex;
		if(tex != null) {
			this.u = x / tex.width;
			this.v = y / tex.height;
			this.u2 = (x + this.width) / tex.width;
			this.v2 = (y + this.height) / tex.height;
		}
	}
	,setSize: function(w,h) {
		this.width = w;
		this.height = h;
		var tex = this.innerTex;
		if(tex != null) {
			this.u2 = (this.x + w) / tex.width;
			this.v2 = (this.y + h) / tex.height;
		}
	}
	,scaleToSize: function(w,h) {
		this.width = w;
		this.height = h;
	}
	,clone: function() {
		var t = new h2d_Tile(null,this.x,this.y,this.width,this.height,this.dx,this.dy);
		t.innerTex = this.innerTex;
		t.u = this.u;
		t.u2 = this.u2;
		t.v = this.v;
		t.v2 = this.v2;
		return t;
	}
	,__class__: h2d_Tile
};
var h2d_TileLayerContent = function() {
	h3d_prim_Primitive.call(this);
	this.clear();
};
$hxClasses["h2d.TileLayerContent"] = h2d_TileLayerContent;
h2d_TileLayerContent.__name__ = "h2d.TileLayerContent";
h2d_TileLayerContent.__super__ = h3d_prim_Primitive;
h2d_TileLayerContent.prototype = $extend(h3d_prim_Primitive.prototype,{
	tmp: null
	,xMin: null
	,yMin: null
	,xMax: null
	,yMax: null
	,clear: function() {
		var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
		this.tmp = this1;
		if(this.buffer != null) {
			this.buffer.dispose();
		}
		this.buffer = null;
		this.xMin = Infinity;
		this.yMin = Infinity;
		this.xMax = -Infinity;
		this.yMax = -Infinity;
	}
	,isEmpty: function() {
		return this.triCount() == 0;
	}
	,triCount: function() {
		if(this.buffer == null) {
			return this.tmp.pos >> 4;
		} else {
			return this.buffer.totalVertices() >> 1;
		}
	}
	,add: function(x,y,r,g,b,a,t) {
		var sx = x + t.dx;
		var sy = y + t.dy;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = sx;
		var this2 = this.tmp;
		if(this2.pos == this2.array.length) {
			var newSize1 = this2.array.length << 1;
			if(newSize1 < 128) {
				newSize1 = 128;
			}
			var newArray1 = new Float32Array(newSize1);
			newArray1.set(this2.array);
			this2.array = newArray1;
		}
		this2.array[this2.pos++] = sy;
		var this3 = this.tmp;
		var v = t.u;
		if(this3.pos == this3.array.length) {
			var newSize2 = this3.array.length << 1;
			if(newSize2 < 128) {
				newSize2 = 128;
			}
			var newArray2 = new Float32Array(newSize2);
			newArray2.set(this3.array);
			this3.array = newArray2;
		}
		this3.array[this3.pos++] = v;
		var this4 = this.tmp;
		var v1 = t.v;
		if(this4.pos == this4.array.length) {
			var newSize3 = this4.array.length << 1;
			if(newSize3 < 128) {
				newSize3 = 128;
			}
			var newArray3 = new Float32Array(newSize3);
			newArray3.set(this4.array);
			this4.array = newArray3;
		}
		this4.array[this4.pos++] = v1;
		var this5 = this.tmp;
		if(this5.pos == this5.array.length) {
			var newSize4 = this5.array.length << 1;
			if(newSize4 < 128) {
				newSize4 = 128;
			}
			var newArray4 = new Float32Array(newSize4);
			newArray4.set(this5.array);
			this5.array = newArray4;
		}
		this5.array[this5.pos++] = r;
		var this6 = this.tmp;
		if(this6.pos == this6.array.length) {
			var newSize5 = this6.array.length << 1;
			if(newSize5 < 128) {
				newSize5 = 128;
			}
			var newArray5 = new Float32Array(newSize5);
			newArray5.set(this6.array);
			this6.array = newArray5;
		}
		this6.array[this6.pos++] = g;
		var this7 = this.tmp;
		if(this7.pos == this7.array.length) {
			var newSize6 = this7.array.length << 1;
			if(newSize6 < 128) {
				newSize6 = 128;
			}
			var newArray6 = new Float32Array(newSize6);
			newArray6.set(this7.array);
			this7.array = newArray6;
		}
		this7.array[this7.pos++] = b;
		var this8 = this.tmp;
		if(this8.pos == this8.array.length) {
			var newSize7 = this8.array.length << 1;
			if(newSize7 < 128) {
				newSize7 = 128;
			}
			var newArray7 = new Float32Array(newSize7);
			newArray7.set(this8.array);
			this8.array = newArray7;
		}
		this8.array[this8.pos++] = a;
		var this9 = this.tmp;
		var v2 = sx + t.width;
		if(this9.pos == this9.array.length) {
			var newSize8 = this9.array.length << 1;
			if(newSize8 < 128) {
				newSize8 = 128;
			}
			var newArray8 = new Float32Array(newSize8);
			newArray8.set(this9.array);
			this9.array = newArray8;
		}
		this9.array[this9.pos++] = v2;
		var this10 = this.tmp;
		if(this10.pos == this10.array.length) {
			var newSize9 = this10.array.length << 1;
			if(newSize9 < 128) {
				newSize9 = 128;
			}
			var newArray9 = new Float32Array(newSize9);
			newArray9.set(this10.array);
			this10.array = newArray9;
		}
		this10.array[this10.pos++] = sy;
		var this11 = this.tmp;
		var v3 = t.u2;
		if(this11.pos == this11.array.length) {
			var newSize10 = this11.array.length << 1;
			if(newSize10 < 128) {
				newSize10 = 128;
			}
			var newArray10 = new Float32Array(newSize10);
			newArray10.set(this11.array);
			this11.array = newArray10;
		}
		this11.array[this11.pos++] = v3;
		var this12 = this.tmp;
		var v4 = t.v;
		if(this12.pos == this12.array.length) {
			var newSize11 = this12.array.length << 1;
			if(newSize11 < 128) {
				newSize11 = 128;
			}
			var newArray11 = new Float32Array(newSize11);
			newArray11.set(this12.array);
			this12.array = newArray11;
		}
		this12.array[this12.pos++] = v4;
		var this13 = this.tmp;
		if(this13.pos == this13.array.length) {
			var newSize12 = this13.array.length << 1;
			if(newSize12 < 128) {
				newSize12 = 128;
			}
			var newArray12 = new Float32Array(newSize12);
			newArray12.set(this13.array);
			this13.array = newArray12;
		}
		this13.array[this13.pos++] = r;
		var this14 = this.tmp;
		if(this14.pos == this14.array.length) {
			var newSize13 = this14.array.length << 1;
			if(newSize13 < 128) {
				newSize13 = 128;
			}
			var newArray13 = new Float32Array(newSize13);
			newArray13.set(this14.array);
			this14.array = newArray13;
		}
		this14.array[this14.pos++] = g;
		var this15 = this.tmp;
		if(this15.pos == this15.array.length) {
			var newSize14 = this15.array.length << 1;
			if(newSize14 < 128) {
				newSize14 = 128;
			}
			var newArray14 = new Float32Array(newSize14);
			newArray14.set(this15.array);
			this15.array = newArray14;
		}
		this15.array[this15.pos++] = b;
		var this16 = this.tmp;
		if(this16.pos == this16.array.length) {
			var newSize15 = this16.array.length << 1;
			if(newSize15 < 128) {
				newSize15 = 128;
			}
			var newArray15 = new Float32Array(newSize15);
			newArray15.set(this16.array);
			this16.array = newArray15;
		}
		this16.array[this16.pos++] = a;
		var this17 = this.tmp;
		if(this17.pos == this17.array.length) {
			var newSize16 = this17.array.length << 1;
			if(newSize16 < 128) {
				newSize16 = 128;
			}
			var newArray16 = new Float32Array(newSize16);
			newArray16.set(this17.array);
			this17.array = newArray16;
		}
		this17.array[this17.pos++] = sx;
		var this18 = this.tmp;
		var v5 = sy + t.height;
		if(this18.pos == this18.array.length) {
			var newSize17 = this18.array.length << 1;
			if(newSize17 < 128) {
				newSize17 = 128;
			}
			var newArray17 = new Float32Array(newSize17);
			newArray17.set(this18.array);
			this18.array = newArray17;
		}
		this18.array[this18.pos++] = v5;
		var this19 = this.tmp;
		var v6 = t.u;
		if(this19.pos == this19.array.length) {
			var newSize18 = this19.array.length << 1;
			if(newSize18 < 128) {
				newSize18 = 128;
			}
			var newArray18 = new Float32Array(newSize18);
			newArray18.set(this19.array);
			this19.array = newArray18;
		}
		this19.array[this19.pos++] = v6;
		var this20 = this.tmp;
		var v7 = t.v2;
		if(this20.pos == this20.array.length) {
			var newSize19 = this20.array.length << 1;
			if(newSize19 < 128) {
				newSize19 = 128;
			}
			var newArray19 = new Float32Array(newSize19);
			newArray19.set(this20.array);
			this20.array = newArray19;
		}
		this20.array[this20.pos++] = v7;
		var this21 = this.tmp;
		if(this21.pos == this21.array.length) {
			var newSize20 = this21.array.length << 1;
			if(newSize20 < 128) {
				newSize20 = 128;
			}
			var newArray20 = new Float32Array(newSize20);
			newArray20.set(this21.array);
			this21.array = newArray20;
		}
		this21.array[this21.pos++] = r;
		var this22 = this.tmp;
		if(this22.pos == this22.array.length) {
			var newSize21 = this22.array.length << 1;
			if(newSize21 < 128) {
				newSize21 = 128;
			}
			var newArray21 = new Float32Array(newSize21);
			newArray21.set(this22.array);
			this22.array = newArray21;
		}
		this22.array[this22.pos++] = g;
		var this23 = this.tmp;
		if(this23.pos == this23.array.length) {
			var newSize22 = this23.array.length << 1;
			if(newSize22 < 128) {
				newSize22 = 128;
			}
			var newArray22 = new Float32Array(newSize22);
			newArray22.set(this23.array);
			this23.array = newArray22;
		}
		this23.array[this23.pos++] = b;
		var this24 = this.tmp;
		if(this24.pos == this24.array.length) {
			var newSize23 = this24.array.length << 1;
			if(newSize23 < 128) {
				newSize23 = 128;
			}
			var newArray23 = new Float32Array(newSize23);
			newArray23.set(this24.array);
			this24.array = newArray23;
		}
		this24.array[this24.pos++] = a;
		var this25 = this.tmp;
		var v8 = sx + t.width;
		if(this25.pos == this25.array.length) {
			var newSize24 = this25.array.length << 1;
			if(newSize24 < 128) {
				newSize24 = 128;
			}
			var newArray24 = new Float32Array(newSize24);
			newArray24.set(this25.array);
			this25.array = newArray24;
		}
		this25.array[this25.pos++] = v8;
		var this26 = this.tmp;
		var v9 = sy + t.height;
		if(this26.pos == this26.array.length) {
			var newSize25 = this26.array.length << 1;
			if(newSize25 < 128) {
				newSize25 = 128;
			}
			var newArray25 = new Float32Array(newSize25);
			newArray25.set(this26.array);
			this26.array = newArray25;
		}
		this26.array[this26.pos++] = v9;
		var this27 = this.tmp;
		var v10 = t.u2;
		if(this27.pos == this27.array.length) {
			var newSize26 = this27.array.length << 1;
			if(newSize26 < 128) {
				newSize26 = 128;
			}
			var newArray26 = new Float32Array(newSize26);
			newArray26.set(this27.array);
			this27.array = newArray26;
		}
		this27.array[this27.pos++] = v10;
		var this28 = this.tmp;
		var v11 = t.v2;
		if(this28.pos == this28.array.length) {
			var newSize27 = this28.array.length << 1;
			if(newSize27 < 128) {
				newSize27 = 128;
			}
			var newArray27 = new Float32Array(newSize27);
			newArray27.set(this28.array);
			this28.array = newArray27;
		}
		this28.array[this28.pos++] = v11;
		var this29 = this.tmp;
		if(this29.pos == this29.array.length) {
			var newSize28 = this29.array.length << 1;
			if(newSize28 < 128) {
				newSize28 = 128;
			}
			var newArray28 = new Float32Array(newSize28);
			newArray28.set(this29.array);
			this29.array = newArray28;
		}
		this29.array[this29.pos++] = r;
		var this30 = this.tmp;
		if(this30.pos == this30.array.length) {
			var newSize29 = this30.array.length << 1;
			if(newSize29 < 128) {
				newSize29 = 128;
			}
			var newArray29 = new Float32Array(newSize29);
			newArray29.set(this30.array);
			this30.array = newArray29;
		}
		this30.array[this30.pos++] = g;
		var this31 = this.tmp;
		if(this31.pos == this31.array.length) {
			var newSize30 = this31.array.length << 1;
			if(newSize30 < 128) {
				newSize30 = 128;
			}
			var newArray30 = new Float32Array(newSize30);
			newArray30.set(this31.array);
			this31.array = newArray30;
		}
		this31.array[this31.pos++] = b;
		var this32 = this.tmp;
		if(this32.pos == this32.array.length) {
			var newSize31 = this32.array.length << 1;
			if(newSize31 < 128) {
				newSize31 = 128;
			}
			var newArray31 = new Float32Array(newSize31);
			newArray31.set(this32.array);
			this32.array = newArray31;
		}
		this32.array[this32.pos++] = a;
		var x1 = x + t.dx;
		var y1 = y + t.dy;
		if(x1 < this.xMin) {
			this.xMin = x1;
		}
		if(y1 < this.yMin) {
			this.yMin = y1;
		}
		x1 += t.width;
		y1 += t.height;
		if(x1 > this.xMax) {
			this.xMax = x1;
		}
		if(y1 > this.yMax) {
			this.yMax = y1;
		}
	}
	,alloc: function(engine) {
		if(this.tmp == null) {
			this.clear();
		}
		if(this.tmp.pos > 0) {
			this.buffer = h3d_Buffer.ofFloats(this.tmp,8,[h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat]);
		}
	}
	,doRender: function(engine,min,len) {
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(h3d_Engine.CURRENT);
		}
		if(this.buffer != null) {
			var start = min;
			var max = len;
			if(max == null) {
				max = -1;
			}
			if(start == null) {
				start = 0;
			}
			engine.renderBuffer(this.buffer,engine.mem.quadIndexes,2,start,max);
		}
	}
	,__class__: h2d_TileLayerContent
});
var h2d_col_Bounds = function() {
	this.xMin = 1e20;
	this.yMin = 1e20;
	this.xMax = -1e20;
	this.yMax = -1e20;
};
$hxClasses["h2d.col.Bounds"] = h2d_col_Bounds;
h2d_col_Bounds.__name__ = "h2d.col.Bounds";
h2d_col_Bounds.prototype = {
	xMin: null
	,yMin: null
	,xMax: null
	,yMax: null
	,__class__: h2d_col_Bounds
};
var h2d_col_Collider = function() { };
$hxClasses["h2d.col.Collider"] = h2d_col_Collider;
h2d_col_Collider.__name__ = "h2d.col.Collider";
h2d_col_Collider.__isInterface__ = true;
h2d_col_Collider.prototype = {
	contains: null
	,__class__: h2d_col_Collider
};
var h2d_col_Matrix = function() {
	this.a = 1;
	this.b = 0;
	this.c = 0;
	this.d = 1;
	this.x = 0;
	this.y = 0;
};
$hxClasses["h2d.col.Matrix"] = h2d_col_Matrix;
h2d_col_Matrix.__name__ = "h2d.col.Matrix";
h2d_col_Matrix.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,x: null
	,y: null
	,__class__: h2d_col_Matrix
};
var h2d_col_Point = function(x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["h2d.col.Point"] = h2d_col_Point;
h2d_col_Point.__name__ = "h2d.col.Point";
h2d_col_Point.prototype = {
	x: null
	,y: null
	,__class__: h2d_col_Point
};
var h2d_filter_Filter = function() {
	this.enable = true;
	this.smooth = false;
	this.boundsExtend = 0.;
	this.autoBounds = true;
};
$hxClasses["h2d.filter.Filter"] = h2d_filter_Filter;
h2d_filter_Filter.__name__ = "h2d.filter.Filter";
h2d_filter_Filter.prototype = {
	autoBounds: null
	,boundsExtend: null
	,smooth: null
	,enable: null
	,get_enable: function() {
		return this.enable;
	}
	,sync: function(ctx,s) {
	}
	,bind: function(s) {
	}
	,unbind: function(s) {
	}
	,getBounds: function(s,bounds) {
		s.getBounds(s,bounds);
		bounds.xMin -= this.boundsExtend;
		bounds.yMin -= this.boundsExtend;
		bounds.xMax += this.boundsExtend;
		bounds.yMax += this.boundsExtend;
	}
	,draw: function(ctx,input) {
		return input;
	}
	,__class__: h2d_filter_Filter
};
var h2d_filter_Blur = function(radius,gain,quality,linear) {
	if(linear == null) {
		linear = 0.;
	}
	if(quality == null) {
		quality = 1.;
	}
	if(gain == null) {
		gain = 1.;
	}
	if(radius == null) {
		radius = 1.;
	}
	h2d_filter_Filter.call(this);
	this.smooth = true;
	this.pass = new h3d_pass_Blur(radius,gain,linear,quality);
};
$hxClasses["h2d.filter.Blur"] = h2d_filter_Blur;
h2d_filter_Blur.__name__ = "h2d.filter.Blur";
h2d_filter_Blur.__super__ = h2d_filter_Filter;
h2d_filter_Blur.prototype = $extend(h2d_filter_Filter.prototype,{
	pass: null
	,sync: function(ctx,s) {
		this.boundsExtend = this.pass.radius * 2;
	}
	,draw: function(ctx,t) {
		var out = t.innerTex;
		var old = out.filter;
		out.set_filter(h3d_mat_Filter.Linear);
		this.pass.apply(ctx,out);
		out.set_filter(old);
		return t;
	}
	,__class__: h2d_filter_Blur
});
var h2d_filter_ColorMatrix = function(m) {
	h2d_filter_Filter.call(this);
	this.pass = new h3d_pass_ColorMatrix(m);
	var _this = this.pass.shader;
	_this.constModified = true;
	_this.useAlpha__ = true;
};
$hxClasses["h2d.filter.ColorMatrix"] = h2d_filter_ColorMatrix;
h2d_filter_ColorMatrix.__name__ = "h2d.filter.ColorMatrix";
h2d_filter_ColorMatrix.__super__ = h2d_filter_Filter;
h2d_filter_ColorMatrix.prototype = $extend(h2d_filter_Filter.prototype,{
	pass: null
	,draw: function(ctx,t) {
		var tout = ctx.textures.allocTileTarget("colorMatrixOut",t);
		this.pass.apply(t.innerTex,tout);
		return h2d_Tile.fromTexture(tout);
	}
	,__class__: h2d_filter_ColorMatrix
});
var h2d_filter_Glow = function(color,alpha,radius,gain,quality,smoothColor) {
	if(smoothColor == null) {
		smoothColor = false;
	}
	if(quality == null) {
		quality = 1.;
	}
	if(gain == null) {
		gain = 1.;
	}
	if(radius == null) {
		radius = 1.;
	}
	if(alpha == null) {
		alpha = 1.;
	}
	if(color == null) {
		color = 16777215;
	}
	h2d_filter_Blur.call(this,radius,gain,quality);
	this.color = color;
	this.alpha = alpha;
	this.smoothColor = smoothColor;
	var _this = this.pass.shader;
	_this.constModified = true;
	_this.hasFixedColor__ = true;
};
$hxClasses["h2d.filter.Glow"] = h2d_filter_Glow;
h2d_filter_Glow.__name__ = "h2d.filter.Glow";
h2d_filter_Glow.__super__ = h2d_filter_Blur;
h2d_filter_Glow.prototype = $extend(h2d_filter_Blur.prototype,{
	color: null
	,alpha: null
	,knockout: null
	,smoothColor: null
	,setParams: function() {
		var _this = this.pass.shader.fixedColor__;
		var c = this.color;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		_this.w = (c >>> 24) / 255;
		this.pass.shader.fixedColor__.w = this.smoothColor ? this.alpha * 1.5 : this.alpha;
		var _this1 = this.pass.shader;
		_this1.constModified = true;
		_this1.smoothFixedColor__ = this.smoothColor;
	}
	,draw: function(ctx,t) {
		this.setParams();
		var tex = t.innerTex;
		var old = tex.filter;
		var save = ctx.textures.allocTileTarget("glowSave",t);
		h3d_pass_Copy.run(tex,save,h2d_BlendMode.None);
		tex.set_filter(h3d_mat_Filter.Linear);
		this.pass.apply(ctx,tex);
		tex.set_filter(old);
		if(this.knockout) {
			h3d_pass_Copy.run(save,tex,h2d_BlendMode.Erase);
		} else {
			h3d_pass_Copy.run(save,tex,h2d_BlendMode.Alpha);
		}
		return t;
	}
	,__class__: h2d_filter_Glow
});
var h3d_BufferFlag = $hxEnums["h3d.BufferFlag"] = { __ename__ : true, __constructs__ : ["Dynamic","Triangles","Quads","Managed","RawFormat","NoAlloc","UniformBuffer"]
	,Dynamic: {_hx_index:0,__enum__:"h3d.BufferFlag",toString:$estr}
	,Triangles: {_hx_index:1,__enum__:"h3d.BufferFlag",toString:$estr}
	,Quads: {_hx_index:2,__enum__:"h3d.BufferFlag",toString:$estr}
	,Managed: {_hx_index:3,__enum__:"h3d.BufferFlag",toString:$estr}
	,RawFormat: {_hx_index:4,__enum__:"h3d.BufferFlag",toString:$estr}
	,NoAlloc: {_hx_index:5,__enum__:"h3d.BufferFlag",toString:$estr}
	,UniformBuffer: {_hx_index:6,__enum__:"h3d.BufferFlag",toString:$estr}
};
h3d_BufferFlag.__empty_constructs__ = [h3d_BufferFlag.Dynamic,h3d_BufferFlag.Triangles,h3d_BufferFlag.Quads,h3d_BufferFlag.Managed,h3d_BufferFlag.RawFormat,h3d_BufferFlag.NoAlloc,h3d_BufferFlag.UniformBuffer];
var h3d_Buffer = function(vertices,stride,flags,allocPos) {
	this.id = h3d_Buffer.GUID++;
	this.vertices = vertices;
	var this1 = 0;
	this.flags = this1;
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f._hx_index;
		}
	}
	if((this.flags & 1 << h3d_BufferFlag.NoAlloc._hx_index) == 0) {
		h3d_Engine.CURRENT.mem.allocBuffer(this,stride);
	}
};
$hxClasses["h3d.Buffer"] = h3d_Buffer;
h3d_Buffer.__name__ = "h3d.Buffer";
h3d_Buffer.ofFloats = function(v,stride,flags,allocPos) {
	var nvert = v.pos / stride | 0;
	var b = new h3d_Buffer(nvert,stride,flags,allocPos);
	b.uploadVector(v,0,nvert);
	return b;
};
h3d_Buffer.ofSubFloats = function(v,stride,vertices,flags,allocPos) {
	var b = new h3d_Buffer(vertices,stride,flags,allocPos);
	b.uploadVector(v,0,vertices);
	return b;
};
h3d_Buffer.prototype = {
	id: null
	,buffer: null
	,position: null
	,vertices: null
	,next: null
	,flags: null
	,isDisposed: function() {
		if(this.buffer != null) {
			return this.buffer.vbuf == null;
		} else {
			return true;
		}
	}
	,dispose: function() {
		if(this.buffer != null) {
			this.buffer.freeBuffer(this);
			this.buffer = null;
			if(this.next != null) {
				this.next.dispose();
			}
		}
	}
	,totalVertices: function() {
		var count = 0;
		var b = this;
		while(b != null) {
			count += b.vertices;
			b = b.next;
		}
		return count;
	}
	,uploadVector: function(buf,bufPos,vertices,startVertice) {
		if(startVertice == null) {
			startVertice = 0;
		}
		var cur = this;
		while(cur != null && startVertice >= cur.vertices) {
			startVertice -= cur.vertices;
			cur = cur.next;
		}
		while(vertices > 0) {
			if(cur == null) {
				throw new js__$Boot_HaxeError("Too many vertices");
			}
			var count = vertices + startVertice > cur.vertices ? cur.vertices - startVertice : vertices;
			cur.buffer.uploadVertexBuffer(cur.position + startVertice,count,buf,bufPos);
			startVertice = 0;
			bufPos += count * this.buffer.stride;
			vertices -= count;
			cur = cur.next;
		}
	}
	,__class__: h3d_Buffer
};
var h3d_Camera = function(fovY,zoom,screenRatio,zNear,zFar,rightHanded) {
	if(rightHanded == null) {
		rightHanded = false;
	}
	if(zFar == null) {
		zFar = 4000.;
	}
	if(zNear == null) {
		zNear = 0.02;
	}
	if(screenRatio == null) {
		screenRatio = 1.333333;
	}
	if(zoom == null) {
		zoom = 1.;
	}
	if(fovY == null) {
		fovY = 25.;
	}
	this.viewY = 0.;
	this.viewX = 0.;
	this.fovY = fovY;
	this.zoom = zoom;
	this.screenRatio = screenRatio;
	this.zNear = zNear;
	this.zFar = zFar;
	this.rightHanded = rightHanded;
	this.pos = new h3d_Vector(2,3,4);
	this.up = new h3d_Vector(0,0,1);
	this.target = new h3d_Vector(0,0,0);
	this.m = new h3d_Matrix();
	this.mcam = new h3d_Matrix();
	this.mproj = new h3d_Matrix();
	this.frustum = new h3d_col_Frustum();
	this.update();
};
$hxClasses["h3d.Camera"] = h3d_Camera;
h3d_Camera.__name__ = "h3d.Camera";
h3d_Camera.prototype = {
	zoom: null
	,screenRatio: null
	,fovY: null
	,zNear: null
	,zFar: null
	,orthoBounds: null
	,rightHanded: null
	,mproj: null
	,mcam: null
	,m: null
	,pos: null
	,up: null
	,target: null
	,viewX: null
	,viewY: null
	,follow: null
	,frustum: null
	,minv: null
	,miview: null
	,needInv: null
	,getInverseViewProj: function() {
		if(this.minv == null) {
			this.minv = new h3d_Matrix();
		}
		if(this.needInv) {
			this.minv.initInverse(this.m);
			this.needInv = false;
		}
		return this.minv;
	}
	,unproject: function(screenX,screenY,camZ) {
		var p = new h3d_Vector(screenX,screenY,camZ);
		var m = this.getInverseViewProj();
		var px = p.x * m._11 + p.y * m._21 + p.z * m._31 + p.w * m._41;
		var py = p.x * m._12 + p.y * m._22 + p.z * m._32 + p.w * m._42;
		var pz = p.x * m._13 + p.y * m._23 + p.z * m._33 + p.w * m._43;
		var iw = 1 / (p.x * m._14 + p.y * m._24 + p.z * m._34 + p.w * m._44);
		p.x = px * iw;
		p.y = py * iw;
		p.z = pz * iw;
		p.w = 1;
		return p;
	}
	,update: function() {
		if(this.follow != null) {
			var _this = this.pos;
			var x = 0;
			var y = 0;
			var z = 0;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = 1.;
			var _this1 = this.target;
			var x1 = 0;
			var y1 = 0;
			var z1 = 0;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			_this1.x = x1;
			_this1.y = y1;
			_this1.z = z1;
			_this1.w = 1.;
			this.follow.pos.localToGlobal(this.pos);
			this.follow.target.localToGlobal(this.target);
			if(this.follow.pos.name != null) {
				var p = this.follow.pos;
				while(p != null) {
					if(p.currentAnimation != null) {
						var v = p.currentAnimation.getPropValue(this.follow.pos.name,"FOVY");
						if(v != null) {
							this.fovY = v;
							break;
						}
					}
					p = p.parent;
				}
			}
		}
		this.makeCameraMatrix(this.mcam);
		this.makeFrustumMatrix(this.mproj);
		this.m.multiply(this.mcam,this.mproj);
		this.needInv = true;
		if(this.miview != null) {
			this.miview._44 = 0;
		}
		this.frustum.loadMatrix(this.m);
	}
	,getFrustumCorners: function(zMax) {
		if(zMax == null) {
			zMax = 1.;
		}
		return [this.unproject(-1,1,0),this.unproject(1,1,0),this.unproject(1,-1,0),this.unproject(-1,-1,0),this.unproject(-1,1,zMax),this.unproject(1,1,zMax),this.unproject(1,-1,zMax),this.unproject(-1,-1,zMax)];
	}
	,makeCameraMatrix: function(m) {
		var _this = this.target;
		var v = this.pos;
		var x = _this.x - v.x;
		var y = _this.y - v.y;
		var z = _this.z - v.z;
		var w = _this.w - v.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var az_x = x;
		var az_y = y;
		var az_z = z;
		var az_w = w;
		if(this.rightHanded) {
			az_x *= -1;
			az_y *= -1;
			az_z *= -1;
		}
		var k = 1. / Math.sqrt(az_x * az_x + az_y * az_y + az_z * az_z);
		az_x *= k;
		az_y *= k;
		az_z *= k;
		var _this1 = this.up;
		var x1 = _this1.y * az_z - _this1.z * az_y;
		var y1 = _this1.z * az_x - _this1.x * az_z;
		var z1 = _this1.x * az_y - _this1.y * az_x;
		var w1 = 1;
		if(w1 == null) {
			w1 = 1.;
		}
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var ax_x = x1;
		var ax_y = y1;
		var ax_z = z1;
		var ax_w = w1;
		var k1 = 1. / Math.sqrt(ax_x * ax_x + ax_y * ax_y + ax_z * ax_z);
		ax_x *= k1;
		ax_y *= k1;
		ax_z *= k1;
		if(Math.sqrt(ax_x * ax_x + ax_y * ax_y + ax_z * ax_z) == 0) {
			ax_x = az_y;
			ax_y = az_z;
			ax_z = az_x;
		}
		var x2 = az_y * ax_z - az_z * ax_y;
		var y2 = az_z * ax_x - az_x * ax_z;
		var z2 = az_x * ax_y - az_y * ax_x;
		var w2 = 1;
		if(w2 == null) {
			w2 = 1.;
		}
		if(z2 == null) {
			z2 = 0.;
		}
		if(y2 == null) {
			y2 = 0.;
		}
		if(x2 == null) {
			x2 = 0.;
		}
		var ay_x = x2;
		var ay_y = y2;
		var ay_z = z2;
		var ay_w = w2;
		m._11 = ax_x;
		m._12 = ay_x;
		m._13 = az_x;
		m._14 = 0;
		m._21 = ax_y;
		m._22 = ay_y;
		m._23 = az_y;
		m._24 = 0;
		m._31 = ax_z;
		m._32 = ay_z;
		m._33 = az_z;
		m._34 = 0;
		var v1 = this.pos;
		m._41 = -(ax_x * v1.x + ax_y * v1.y + ax_z * v1.z);
		var v2 = this.pos;
		m._42 = -(ay_x * v2.x + ay_y * v2.y + ay_z * v2.z);
		var v3 = this.pos;
		m._43 = -(az_x * v3.x + az_y * v3.y + az_z * v3.z);
		m._44 = 1;
	}
	,makeFrustumMatrix: function(m) {
		m.zero();
		var bounds = this.orthoBounds;
		if(bounds != null) {
			var w = 1 / (bounds.xMax - bounds.xMin);
			var h = 1 / (bounds.yMax - bounds.yMin);
			var d = 1 / (bounds.zMax - bounds.zMin);
			m._11 = 2 * w;
			m._22 = 2 * h;
			m._33 = d;
			m._41 = -(bounds.xMin + bounds.xMax) * w;
			m._42 = -(bounds.yMin + bounds.yMax) * h;
			m._43 = -bounds.zMin * d;
			m._44 = 1;
		} else {
			var degToRad = Math.PI / 180;
			var halfFovX = Math.atan(Math.tan(this.fovY * 0.5 * degToRad) * this.screenRatio);
			var scale = this.zoom / Math.tan(halfFovX);
			m._11 = scale;
			m._22 = scale * this.screenRatio;
			m._33 = this.zFar / (this.zFar - this.zNear);
			m._34 = 1;
			m._43 = -(this.zNear * this.zFar) / (this.zFar - this.zNear);
		}
		m._11 += this.viewX * m._14;
		m._21 += this.viewX * m._24;
		m._31 += this.viewX * m._34;
		m._41 += this.viewX * m._44;
		m._12 += this.viewY * m._14;
		m._22 += this.viewY * m._24;
		m._32 += this.viewY * m._34;
		m._42 += this.viewY * m._44;
		if(this.rightHanded) {
			m._33 *= -1;
			m._34 *= -1;
		}
	}
	,__class__: h3d_Camera
};
var h3d__$Engine_TargetTmp = function(t,n,l,m) {
	this.t = t;
	this.next = n;
	this.layer = l;
	this.mipLevel = m;
};
$hxClasses["h3d._Engine.TargetTmp"] = h3d__$Engine_TargetTmp;
h3d__$Engine_TargetTmp.__name__ = "h3d._Engine.TargetTmp";
h3d__$Engine_TargetTmp.prototype = {
	t: null
	,next: null
	,layer: null
	,mipLevel: null
	,__class__: h3d__$Engine_TargetTmp
};
var h3d_Engine = function() {
	this.resCache = new haxe_ds_ObjectMap();
	this.ready = false;
	this.textureColorCache = new haxe_ds_IntMap();
	this.tmpVector = new h3d_Vector();
	this.backgroundColor = -16777216;
	this.hardware = !h3d_Engine.SOFTWARE_DRIVER;
	this.antiAlias = h3d_Engine.ANTIALIASING;
	this.autoResize = true;
	this.set_fullScreen(!hxd_System.getValue(hxd_SystemValue.IsWindowed));
	this.window = hxd_Window.getInstance();
	this.realFps = hxd_System.getDefaultFrameRate();
	this.lastTime = Date.now() / 1000;
	this.window.addResizeEvent($bind(this,this.onWindowResize));
	this.driver = new h3d_impl_GlDriver(this.antiAlias);
	h3d_Engine.CURRENT = this;
};
$hxClasses["h3d.Engine"] = h3d_Engine;
h3d_Engine.__name__ = "h3d.Engine";
h3d_Engine.prototype = {
	driver: null
	,mem: null
	,hardware: null
	,width: null
	,height: null
	,debug: null
	,drawTriangles: null
	,drawCalls: null
	,shaderSwitches: null
	,backgroundColor: null
	,autoResize: null
	,fullScreen: null
	,realFps: null
	,lastTime: null
	,antiAlias: null
	,tmpVector: null
	,window: null
	,targetTmp: null
	,targetStack: null
	,currentTargetTex: null
	,currentTargetLayer: null
	,currentTargetMip: null
	,needFlushTarget: null
	,textureColorCache: null
	,ready: null
	,resCache: null
	,init: function() {
		this.driver.init($bind(this,this.onCreate),!this.hardware);
	}
	,selectShader: function(shader) {
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		if(this.driver.selectShader(shader)) {
			this.shaderSwitches++;
		}
	}
	,selectMaterial: function(pass) {
		this.driver.selectMaterial(pass);
	}
	,uploadShaderBuffers: function(buffers,which) {
		this.driver.uploadShaderBuffers(buffers,which);
	}
	,selectBuffer: function(buf) {
		if(buf.isDisposed()) {
			return false;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.selectBuffer(buf);
		return true;
	}
	,renderBuffer: function(b,indexes,vertPerTri,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		if(indexes.isDisposed()) {
			return;
		}
		while(true) {
			var ntri = b.vertices / vertPerTri | 0;
			var pos = b.position / vertPerTri | 0;
			if(startTri > 0) {
				if(startTri >= ntri) {
					startTri -= ntri;
					b = b.next;
					if(!(b != null)) {
						break;
					} else {
						continue;
					}
				}
				pos += startTri;
				ntri -= startTri;
				startTri = 0;
			}
			if(drawTri >= 0) {
				if(drawTri == 0) {
					return;
				}
				drawTri -= ntri;
				if(drawTri < 0) {
					ntri += drawTri;
					drawTri = 0;
				}
			}
			if(ntri > 0 && this.selectBuffer(b)) {
				this.driver.draw(indexes.ibuf,pos * 3,ntri);
				this.drawTriangles += ntri;
				this.drawCalls++;
			}
			b = b.next;
			if(!(b != null)) {
				break;
			}
		}
	}
	,renderIndexed: function(b,indexes,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		if(b.next != null) {
			throw new js__$Boot_HaxeError("Buffer is split");
		}
		if(indexes.isDisposed()) {
			return;
		}
		var maxTri = indexes.count / 3 | 0;
		if(drawTri < 0) {
			drawTri = maxTri - startTri;
		}
		if(drawTri > 0 && this.selectBuffer(b)) {
			this.driver.draw(indexes.ibuf,startTri * 3,drawTri);
			this.drawTriangles += drawTri;
			this.drawCalls++;
		}
	}
	,set_debug: function(d) {
		this.debug = d;
		this.driver.setDebug(this.debug);
		return d;
	}
	,onCreate: function(disposed) {
		h3d_Engine.CURRENT = this;
		if(this.autoResize) {
			this.width = this.window.get_width();
			this.height = this.window.get_height();
		}
		if(disposed) {
			this.mem.onContextLost();
		} else {
			this.mem = new h3d_impl_MemoryManager(this.driver);
			this.mem.init();
		}
		this.hardware = this.driver.hasFeature(h3d_impl_Feature.HardwareAccelerated);
		this.set_debug(this.debug);
		this.set_fullScreen(this.fullScreen);
		this.resize(this.width,this.height);
		if(disposed) {
			this.onContextLost();
		} else {
			this.onReady();
		}
		this.ready = true;
	}
	,onContextLost: function() {
	}
	,onReady: function() {
	}
	,onWindowResize: function() {
		if(this.autoResize && !this.driver.isDisposed()) {
			var w = this.window.get_width();
			var h = this.window.get_height();
			if(w != this.width || h != this.height) {
				this.resize(w,h);
			}
			this.onResized();
		}
	}
	,set_fullScreen: function(v) {
		this.fullScreen = v;
		if(this.mem != null && hxd_System.getValue(hxd_SystemValue.IsWindowed)) {
			this.window.setFullScreen(v);
		}
		return v;
	}
	,onResized: function() {
	}
	,resize: function(width,height) {
		if(width < 32) {
			width = 32;
		}
		if(height < 32) {
			height = 32;
		}
		this.width = width;
		this.height = height;
		if(!this.driver.isDisposed()) {
			this.driver.resize(width,height);
		}
	}
	,begin: function() {
		if(this.driver.isDisposed()) {
			return false;
		}
		this.drawTriangles = 0;
		this.shaderSwitches = 0;
		this.drawCalls = 0;
		this.targetStack = null;
		this.needFlushTarget = this.currentTargetTex != null;
		this.driver.begin(hxd_Timer.frameCount);
		if(this.backgroundColor != null) {
			this.clear(this.backgroundColor,1,0);
		}
		return true;
	}
	,end: function() {
		this.driver.end();
	}
	,getCurrentTarget: function() {
		if(this.targetStack == null) {
			return null;
		} else {
			return this.targetStack.t;
		}
	}
	,pushTarget: function(tex,layer,mipLevel) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
		var c = this.targetTmp;
		if(c == null) {
			c = new h3d__$Engine_TargetTmp(tex,this.targetStack,layer,mipLevel);
		} else {
			this.targetTmp = c.next;
			c.t = tex;
			c.next = this.targetStack;
			c.mipLevel = mipLevel;
			c.layer = layer;
		}
		this.targetStack = c;
		this.updateNeedFlush();
	}
	,updateNeedFlush: function() {
		var t = this.targetStack;
		if(t == null) {
			this.needFlushTarget = this.currentTargetTex != null;
		} else {
			this.needFlushTarget = this.currentTargetTex != t.t || this.currentTargetLayer != t.layer || this.currentTargetMip != t.mipLevel;
		}
	}
	,popTarget: function() {
		var c = this.targetStack;
		if(c == null) {
			throw new js__$Boot_HaxeError("popTarget() with no matching pushTarget()");
		}
		this.targetStack = c.next;
		this.updateNeedFlush();
		c.t = null;
		c.next = this.targetTmp;
		this.targetTmp = c;
	}
	,doFlushTarget: function() {
		var t = this.targetStack;
		if(t == null) {
			this.driver.setRenderTarget(null);
			this.currentTargetTex = null;
		} else {
			this.driver.setRenderTarget(t.t,t.layer,t.mipLevel);
			this.currentTargetTex = t.t;
			this.currentTargetLayer = t.layer;
			this.currentTargetMip = t.mipLevel;
		}
		this.needFlushTarget = false;
	}
	,clear: function(color,depth,stencil) {
		if(color != null) {
			var _this = this.tmpVector;
			_this.x = (color >> 16 & 255) / 255;
			_this.y = (color >> 8 & 255) / 255;
			_this.z = (color & 255) / 255;
			_this.w = (color >>> 24) / 255;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.clear(color == null ? null : this.tmpVector,depth,stencil);
	}
	,setRenderZone: function(x,y,width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.setRenderZone(x,y,width,height);
	}
	,render: function(obj) {
		if(!this.begin()) {
			return false;
		}
		obj.render(this);
		this.end();
		var delta = Date.now() / 1000 - this.lastTime;
		this.lastTime += delta;
		if(delta > 0) {
			var curFps = 1. / delta;
			if(curFps > this.realFps * 2) {
				curFps = this.realFps * 2;
			} else if(curFps < this.realFps * 0.5) {
				curFps = this.realFps * 0.5;
			}
			var f = delta / .5;
			if(f > 0.3) {
				f = 0.3;
			}
			this.realFps = this.realFps * (1 - f) + curFps * f;
		}
		return true;
	}
	,__class__: h3d_Engine
};
var h3d_Indexes = function(count,is32) {
	if(is32 == null) {
		is32 = false;
	}
	this.mem = h3d_Engine.CURRENT.mem;
	this.count = count;
	this.is32 = is32;
	this.mem.allocIndexes(this);
};
$hxClasses["h3d.Indexes"] = h3d_Indexes;
h3d_Indexes.__name__ = "h3d.Indexes";
h3d_Indexes.alloc = function(i,startPos,length) {
	if(length == null) {
		length = -1;
	}
	if(startPos == null) {
		startPos = 0;
	}
	if(length < 0) {
		length = i.length;
	}
	var idx = new h3d_Indexes(length);
	idx.upload(i,0,length);
	return idx;
};
h3d_Indexes.prototype = {
	mem: null
	,ibuf: null
	,is32: null
	,count: null
	,isDisposed: function() {
		return this.ibuf == null;
	}
	,upload: function(indexes,pos,count,bufferPos) {
		if(bufferPos == null) {
			bufferPos = 0;
		}
		this.mem.driver.uploadIndexBuffer(this.ibuf,pos,count,indexes,bufferPos);
	}
	,dispose: function() {
		if(this.ibuf != null) {
			this.mem.deleteIndexes(this);
		}
	}
	,__class__: h3d_Indexes
};
var h3d_Matrix = function() {
};
$hxClasses["h3d.Matrix"] = h3d_Matrix;
h3d_Matrix.__name__ = "h3d.Matrix";
h3d_Matrix.I = function() {
	var m = new h3d_Matrix();
	m.identity();
	return m;
};
h3d_Matrix.L = function(a) {
	var m = new h3d_Matrix();
	m.loadValues(a);
	return m;
};
h3d_Matrix.prototype = {
	_11: null
	,_12: null
	,_13: null
	,_14: null
	,_21: null
	,_22: null
	,_23: null
	,_24: null
	,_31: null
	,_32: null
	,_33: null
	,_34: null
	,_41: null
	,_42: null
	,_43: null
	,_44: null
	,zero: function() {
		this._11 = 0.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 0.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 0.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 0.0;
	}
	,identity: function() {
		this._11 = 1.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 1.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 1.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	,multiply3x4: function(a,b) {
		var m11 = a._11;
		var m12 = a._12;
		var m13 = a._13;
		var m21 = a._21;
		var m22 = a._22;
		var m23 = a._23;
		var a31 = a._31;
		var a32 = a._32;
		var a33 = a._33;
		var a41 = a._41;
		var a42 = a._42;
		var a43 = a._43;
		var b11 = b._11;
		var b12 = b._12;
		var b13 = b._13;
		var b21 = b._21;
		var b22 = b._22;
		var b23 = b._23;
		var b31 = b._31;
		var b32 = b._32;
		var b33 = b._33;
		var b41 = b._41;
		var b42 = b._42;
		var b43 = b._43;
		this._11 = m11 * b11 + m12 * b21 + m13 * b31;
		this._12 = m11 * b12 + m12 * b22 + m13 * b32;
		this._13 = m11 * b13 + m12 * b23 + m13 * b33;
		this._14 = 0;
		this._21 = m21 * b11 + m22 * b21 + m23 * b31;
		this._22 = m21 * b12 + m22 * b22 + m23 * b32;
		this._23 = m21 * b13 + m22 * b23 + m23 * b33;
		this._24 = 0;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33;
		this._34 = 0;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
		this._44 = 1;
	}
	,multiply: function(a,b) {
		var a11 = a._11;
		var a12 = a._12;
		var a13 = a._13;
		var a14 = a._14;
		var a21 = a._21;
		var a22 = a._22;
		var a23 = a._23;
		var a24 = a._24;
		var a31 = a._31;
		var a32 = a._32;
		var a33 = a._33;
		var a34 = a._34;
		var a41 = a._41;
		var a42 = a._42;
		var a43 = a._43;
		var a44 = a._44;
		var b11 = b._11;
		var b12 = b._12;
		var b13 = b._13;
		var b14 = b._14;
		var b21 = b._21;
		var b22 = b._22;
		var b23 = b._23;
		var b24 = b._24;
		var b31 = b._31;
		var b32 = b._32;
		var b33 = b._33;
		var b34 = b._34;
		var b41 = b._41;
		var b42 = b._42;
		var b43 = b._43;
		var b44 = b._44;
		this._11 = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		this._12 = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		this._13 = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		this._14 = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
		this._21 = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		this._22 = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		this._23 = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		this._24 = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		this._34 = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		this._44 = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
	}
	,inverse3x4: function(m) {
		var m11 = m._11;
		var m12 = m._12;
		var m13 = m._13;
		var m21 = m._21;
		var m22 = m._22;
		var m23 = m._23;
		var m31 = m._31;
		var m32 = m._32;
		var m33 = m._33;
		var m41 = m._41;
		var m42 = m._42;
		var m43 = m._43;
		this._11 = m22 * m33 - m23 * m32;
		this._12 = m13 * m32 - m12 * m33;
		this._13 = m12 * m23 - m13 * m22;
		this._14 = 0;
		this._21 = m23 * m31 - m21 * m33;
		this._22 = m11 * m33 - m13 * m31;
		this._23 = m13 * m21 - m11 * m23;
		this._24 = 0;
		this._31 = m21 * m32 - m22 * m31;
		this._32 = m12 * m31 - m11 * m32;
		this._33 = m11 * m22 - m12 * m21;
		this._34 = 0;
		this._41 = -m21 * m32 * m43 + m21 * m33 * m42 + m31 * m22 * m43 - m31 * m23 * m42 - m41 * m22 * m33 + m41 * m23 * m32;
		this._42 = m11 * m32 * m43 - m11 * m33 * m42 - m31 * m12 * m43 + m31 * m13 * m42 + m41 * m12 * m33 - m41 * m13 * m32;
		this._43 = -m11 * m22 * m43 + m11 * m23 * m42 + m21 * m12 * m43 - m21 * m13 * m42 - m41 * m12 * m23 + m41 * m13 * m22;
		this._44 = m11 * m22 * m33 - m11 * m23 * m32 - m21 * m12 * m33 + m21 * m13 * m32 + m31 * m12 * m23 - m31 * m13 * m22;
		this._44 = 1;
		var det = m11 * this._11 + m12 * this._21 + m13 * this._31;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		var invDet = 1.0 / det;
		this._11 *= invDet;
		this._12 *= invDet;
		this._13 *= invDet;
		this._21 *= invDet;
		this._22 *= invDet;
		this._23 *= invDet;
		this._31 *= invDet;
		this._32 *= invDet;
		this._33 *= invDet;
		this._41 *= invDet;
		this._42 *= invDet;
		this._43 *= invDet;
	}
	,initInverse: function(m) {
		var m11 = m._11;
		var m12 = m._12;
		var m13 = m._13;
		var m14 = m._14;
		var m21 = m._21;
		var m22 = m._22;
		var m23 = m._23;
		var m24 = m._24;
		var m31 = m._31;
		var m32 = m._32;
		var m33 = m._33;
		var m34 = m._34;
		var m41 = m._41;
		var m42 = m._42;
		var m43 = m._43;
		var m44 = m._44;
		this._11 = m22 * m33 * m44 - m22 * m34 * m43 - m32 * m23 * m44 + m32 * m24 * m43 + m42 * m23 * m34 - m42 * m24 * m33;
		this._12 = -m12 * m33 * m44 + m12 * m34 * m43 + m32 * m13 * m44 - m32 * m14 * m43 - m42 * m13 * m34 + m42 * m14 * m33;
		this._13 = m12 * m23 * m44 - m12 * m24 * m43 - m22 * m13 * m44 + m22 * m14 * m43 + m42 * m13 * m24 - m42 * m14 * m23;
		this._14 = -m12 * m23 * m34 + m12 * m24 * m33 + m22 * m13 * m34 - m22 * m14 * m33 - m32 * m13 * m24 + m32 * m14 * m23;
		this._21 = -m21 * m33 * m44 + m21 * m34 * m43 + m31 * m23 * m44 - m31 * m24 * m43 - m41 * m23 * m34 + m41 * m24 * m33;
		this._22 = m11 * m33 * m44 - m11 * m34 * m43 - m31 * m13 * m44 + m31 * m14 * m43 + m41 * m13 * m34 - m41 * m14 * m33;
		this._23 = -m11 * m23 * m44 + m11 * m24 * m43 + m21 * m13 * m44 - m21 * m14 * m43 - m41 * m13 * m24 + m41 * m14 * m23;
		this._24 = m11 * m23 * m34 - m11 * m24 * m33 - m21 * m13 * m34 + m21 * m14 * m33 + m31 * m13 * m24 - m31 * m14 * m23;
		this._31 = m21 * m32 * m44 - m21 * m34 * m42 - m31 * m22 * m44 + m31 * m24 * m42 + m41 * m22 * m34 - m41 * m24 * m32;
		this._32 = -m11 * m32 * m44 + m11 * m34 * m42 + m31 * m12 * m44 - m31 * m14 * m42 - m41 * m12 * m34 + m41 * m14 * m32;
		this._33 = m11 * m22 * m44 - m11 * m24 * m42 - m21 * m12 * m44 + m21 * m14 * m42 + m41 * m12 * m24 - m41 * m14 * m22;
		this._34 = -m11 * m22 * m34 + m11 * m24 * m32 + m21 * m12 * m34 - m21 * m14 * m32 - m31 * m12 * m24 + m31 * m14 * m22;
		this._41 = -m21 * m32 * m43 + m21 * m33 * m42 + m31 * m22 * m43 - m31 * m23 * m42 - m41 * m22 * m33 + m41 * m23 * m32;
		this._42 = m11 * m32 * m43 - m11 * m33 * m42 - m31 * m12 * m43 + m31 * m13 * m42 + m41 * m12 * m33 - m41 * m13 * m32;
		this._43 = -m11 * m22 * m43 + m11 * m23 * m42 + m21 * m12 * m43 - m21 * m13 * m42 - m41 * m12 * m23 + m41 * m13 * m22;
		this._44 = m11 * m22 * m33 - m11 * m23 * m32 - m21 * m12 * m33 + m21 * m13 * m32 + m31 * m12 * m23 - m31 * m13 * m22;
		var det = m11 * this._11 + m12 * this._21 + m13 * this._31 + m14 * this._41;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		det = 1.0 / det;
		this._11 *= det;
		this._12 *= det;
		this._13 *= det;
		this._14 *= det;
		this._21 *= det;
		this._22 *= det;
		this._23 *= det;
		this._24 *= det;
		this._31 *= det;
		this._32 *= det;
		this._33 *= det;
		this._34 *= det;
		this._41 *= det;
		this._42 *= det;
		this._43 *= det;
		this._44 *= det;
	}
	,loadValues: function(a) {
		this._11 = a[0];
		this._12 = a[1];
		this._13 = a[2];
		this._14 = a[3];
		this._21 = a[4];
		this._22 = a[5];
		this._23 = a[6];
		this._24 = a[7];
		this._31 = a[8];
		this._32 = a[9];
		this._33 = a[10];
		this._34 = a[11];
		this._41 = a[12];
		this._42 = a[13];
		this._43 = a[14];
		this._44 = a[15];
	}
	,__class__: h3d_Matrix
};
var h3d_Quat = function(x,y,z,w) {
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["h3d.Quat"] = h3d_Quat;
h3d_Quat.__name__ = "h3d.Quat";
h3d_Quat.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,toMatrix: function(m) {
		if(m == null) {
			m = new h3d_Matrix();
		}
		var xx = this.x * this.x;
		var xy = this.x * this.y;
		var xz = this.x * this.z;
		var xw = this.x * this.w;
		var yy = this.y * this.y;
		var yz = this.y * this.z;
		var yw = this.y * this.w;
		var zz = this.z * this.z;
		var zw = this.z * this.w;
		m._11 = 1 - 2 * (yy + zz);
		m._12 = 2 * (xy + zw);
		m._13 = 2 * (xz - yw);
		m._14 = 0;
		m._21 = 2 * (xy - zw);
		m._22 = 1 - 2 * (xx + zz);
		m._23 = 2 * (yz + xw);
		m._24 = 0;
		m._31 = 2 * (xz + yw);
		m._32 = 2 * (yz - xw);
		m._33 = 1 - 2 * (xx + yy);
		m._34 = 0;
		m._41 = 0;
		m._42 = 0;
		m._43 = 0;
		m._44 = 1;
		return m;
	}
	,__class__: h3d_Quat
};
var h3d_Vector = function(x,y,z,w) {
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["h3d.Vector"] = h3d_Vector;
h3d_Vector.__name__ = "h3d.Vector";
h3d_Vector.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,normalize: function() {
		var k = this.x * this.x + this.y * this.y + this.z * this.z;
		if(k < 1e-10) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		this.x *= k;
		this.y *= k;
		this.z *= k;
	}
	,__class__: h3d_Vector
};
var h3d_anim_AnimatedObject = function() { };
$hxClasses["h3d.anim.AnimatedObject"] = h3d_anim_AnimatedObject;
h3d_anim_AnimatedObject.__name__ = "h3d.anim.AnimatedObject";
var h3d_anim_Animation = function(name,frameCount,sampling) {
	this.name = name;
	this.frameCount = frameCount;
	this.sampling = sampling;
	this.objects = [];
	this.lastEvent = -1;
	this.frame = 0.;
	this.speed = 1.;
	this.loop = true;
	this.pause = false;
};
$hxClasses["h3d.anim.Animation"] = h3d_anim_Animation;
h3d_anim_Animation.__name__ = "h3d.anim.Animation";
h3d_anim_Animation.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_anim_Animation.prototype = {
	name: null
	,frameCount: null
	,sampling: null
	,frame: null
	,speed: null
	,onAnimEnd: null
	,onEvent: null
	,pause: null
	,loop: null
	,events: null
	,isInstance: null
	,objects: null
	,lastEvent: null
	,getPropValue: function(objectName,propName) {
		return null;
	}
	,sync: function(decompose) {
		if(decompose == null) {
			decompose = false;
		}
		throw new js__$Boot_HaxeError("assert");
	}
	,isPlaying: function() {
		if(!this.pause) {
			return (this.speed < 0 ? -this.speed : this.speed) > 0.000001;
		} else {
			return false;
		}
	}
	,endFrame: function() {
		return this.frameCount;
	}
	,update: function(dt) {
		if(!this.isInstance) {
			throw new js__$Boot_HaxeError("You must instanciate this animation first");
		}
		if(!this.isPlaying()) {
			return 0;
		}
		if(this.events != null && this.onEvent != null) {
			var f0 = this.frame | 0;
			var f1 = this.frame + dt * this.speed * this.sampling | 0;
			if(f1 >= this.frameCount) {
				f1 = this.frameCount - 1;
			}
			var _g = f0;
			var _g1 = f1 + 1;
			while(_g < _g1) {
				var f = _g++;
				if(f == this.lastEvent) {
					continue;
				}
				this.lastEvent = f;
				if(this.events[f] != null) {
					var oldF = this.frame;
					var oldDT = dt;
					dt -= (f - this.frame) / (this.speed * this.sampling);
					this.frame = f;
					var _g2 = 0;
					var _g11 = this.events[f];
					while(_g2 < _g11.length) {
						var e = _g11[_g2];
						++_g2;
						this.onEvent(e);
					}
					if(this.frame == f && f == this.frameCount - 1) {
						this.frame = oldF;
						dt = oldDT;
						break;
					} else {
						return dt;
					}
				}
			}
		}
		if(this.onAnimEnd != null) {
			var end = this.endFrame();
			var et = this.speed == 0 ? 0 : (end - this.frame) / (this.speed * this.sampling);
			if(et <= dt && et > 0) {
				this.frame = end;
				dt -= et;
				this.onAnimEnd();
				if(this.frame == end && this.isPlaying()) {
					if(this.loop) {
						this.frame = 0;
					} else {
						dt = 0;
					}
				}
				return dt;
			}
		}
		this.frame += dt * this.speed * this.sampling;
		if(this.frame >= this.frameCount) {
			if(this.loop) {
				this.frame %= this.frameCount;
			} else {
				this.frame = this.frameCount;
			}
		}
		return 0;
	}
	,__class__: h3d_anim_Animation
};
var h3d_col_Collider = function() { };
$hxClasses["h3d.col.Collider"] = h3d_col_Collider;
h3d_col_Collider.__name__ = "h3d.col.Collider";
h3d_col_Collider.__isInterface__ = true;
h3d_col_Collider.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_col_Collider.prototype = {
	rayIntersection: null
	,__class__: h3d_col_Collider
};
var h3d_col_Bounds = function() {
	this.xMin = 1e20;
	this.xMax = -1e20;
	this.yMin = 1e20;
	this.yMax = -1e20;
	this.zMin = 1e20;
	this.zMax = -1e20;
};
$hxClasses["h3d.col.Bounds"] = h3d_col_Bounds;
h3d_col_Bounds.__name__ = "h3d.col.Bounds";
h3d_col_Bounds.__interfaces__ = [h3d_col_Collider];
h3d_col_Bounds.prototype = {
	xMin: null
	,xMax: null
	,yMin: null
	,yMax: null
	,zMin: null
	,zMax: null
	,rayIntersection: function(r,bestMatch) {
		var minTx = (this.xMin - r.px) / r.lx;
		var minTy = (this.yMin - r.py) / r.ly;
		var minTz = (this.zMin - r.pz) / r.lz;
		var maxTx = (this.xMax - r.px) / r.lx;
		var maxTy = (this.yMax - r.py) / r.ly;
		var maxTz = (this.zMax - r.pz) / r.lz;
		var realMinTx = minTx > maxTx ? maxTx : minTx;
		var realMinTy = minTy > maxTy ? maxTy : minTy;
		var realMinTz = minTz > maxTz ? maxTz : minTz;
		var realMaxTx = minTx < maxTx ? maxTx : minTx;
		var realMaxTy = minTy < maxTy ? maxTy : minTy;
		var realMaxTz = minTz < maxTz ? maxTz : minTz;
		var a = realMaxTx > realMaxTy ? realMaxTy : realMaxTx;
		var minmax = a > realMaxTz ? realMaxTz : a;
		var a1 = realMinTx < realMinTy ? realMinTy : realMinTx;
		var maxmin = a1 < realMinTz ? realMinTz : a1;
		if(minmax < maxmin) {
			return -1;
		}
		return maxmin;
	}
	,intersection: function(a,b) {
		var a1 = a.xMin;
		var b1 = b.xMin;
		var xMin = a1 < b1 ? b1 : a1;
		var a2 = a.yMin;
		var b2 = b.yMin;
		var yMin = a2 < b2 ? b2 : a2;
		var a3 = a.zMin;
		var b3 = b.zMin;
		var zMin = a3 < b3 ? b3 : a3;
		var a4 = a.xMax;
		var b4 = b.xMax;
		var xMax = a4 > b4 ? b4 : a4;
		var a5 = a.yMax;
		var b5 = b.yMax;
		var yMax = a5 > b5 ? b5 : a5;
		var a6 = a.zMax;
		var b6 = b.zMax;
		var zMax = a6 > b6 ? b6 : a6;
		this.xMin = xMin;
		this.xMax = xMax;
		this.yMin = yMin;
		this.yMax = yMax;
		this.zMin = zMin;
		this.zMax = zMax;
	}
	,scaleCenter: function(v) {
		var dx = (this.xMax - this.xMin) * 0.5 * v;
		var dy = (this.yMax - this.yMin) * 0.5 * v;
		var dz = (this.zMax - this.zMin) * 0.5 * v;
		var mx = (this.xMax + this.xMin) * 0.5;
		var my = (this.yMax + this.yMin) * 0.5;
		var mz = (this.zMax + this.zMin) * 0.5;
		this.xMin = mx - dx;
		this.yMin = my - dy;
		this.zMin = mz - dz;
		this.xMax = mx + dx;
		this.yMax = my + dy;
		this.zMax = mz + dz;
	}
	,__class__: h3d_col_Bounds
};
var h3d_col_Frustum = function(mvp) {
	this.checkNearFar = true;
	this.pleft = new h3d_col_Plane(1,0,0,0.0);
	this.pright = new h3d_col_Plane(1,0,0,0.0);
	this.ptop = new h3d_col_Plane(1,0,0,0.0);
	this.pbottom = new h3d_col_Plane(1,0,0,0.0);
	this.pnear = new h3d_col_Plane(1,0,0,0.0);
	this.pfar = new h3d_col_Plane(1,0,0,0.0);
	if(mvp != null) {
		this.loadMatrix(mvp);
	}
};
$hxClasses["h3d.col.Frustum"] = h3d_col_Frustum;
h3d_col_Frustum.__name__ = "h3d.col.Frustum";
h3d_col_Frustum.prototype = {
	pleft: null
	,pright: null
	,ptop: null
	,pbottom: null
	,pnear: null
	,pfar: null
	,checkNearFar: null
	,loadMatrix: function(mvp) {
		var _this = this.pleft;
		var p_nx = mvp._14 + mvp._11;
		var p_ny = mvp._24 + mvp._21;
		var p_nz = mvp._34 + mvp._31;
		var p_d = -(mvp._44 + mvp._41);
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this1 = this.pright;
		var p_nx1 = mvp._14 - mvp._11;
		var p_ny1 = mvp._24 - mvp._21;
		var p_nz1 = mvp._34 - mvp._31;
		var p_d1 = mvp._41 - mvp._44;
		_this1.nx = p_nx1;
		_this1.ny = p_ny1;
		_this1.nz = p_nz1;
		_this1.d = p_d1;
		var _this2 = this.ptop;
		var p_nx2 = mvp._14 - mvp._12;
		var p_ny2 = mvp._24 - mvp._22;
		var p_nz2 = mvp._34 - mvp._32;
		var p_d2 = mvp._42 - mvp._44;
		_this2.nx = p_nx2;
		_this2.ny = p_ny2;
		_this2.nz = p_nz2;
		_this2.d = p_d2;
		var _this3 = this.pbottom;
		var p_nx3 = mvp._14 + mvp._12;
		var p_ny3 = mvp._24 + mvp._22;
		var p_nz3 = mvp._34 + mvp._32;
		var p_d3 = -(mvp._44 + mvp._42);
		_this3.nx = p_nx3;
		_this3.ny = p_ny3;
		_this3.nz = p_nz3;
		_this3.d = p_d3;
		var _this4 = this.pnear;
		var p_nx4 = mvp._13;
		var p_ny4 = mvp._23;
		var p_nz4 = mvp._33;
		var p_d4 = -mvp._43;
		_this4.nx = p_nx4;
		_this4.ny = p_ny4;
		_this4.nz = p_nz4;
		_this4.d = p_d4;
		var _this5 = this.pfar;
		var p_nx5 = mvp._14 - mvp._13;
		var p_ny5 = mvp._24 - mvp._23;
		var p_nz5 = mvp._34 - mvp._33;
		var p_d5 = mvp._43 - mvp._44;
		_this5.nx = p_nx5;
		_this5.ny = p_ny5;
		_this5.nz = p_nz5;
		_this5.d = p_d5;
		var _this6 = this.pleft;
		var len = 1. / Math.sqrt(_this6.nx * _this6.nx + _this6.ny * _this6.ny + _this6.nz * _this6.nz);
		_this6.nx *= len;
		_this6.ny *= len;
		_this6.nz *= len;
		_this6.d *= len;
		var _this7 = this.pright;
		var len1 = 1. / Math.sqrt(_this7.nx * _this7.nx + _this7.ny * _this7.ny + _this7.nz * _this7.nz);
		_this7.nx *= len1;
		_this7.ny *= len1;
		_this7.nz *= len1;
		_this7.d *= len1;
		var _this8 = this.ptop;
		var len2 = 1. / Math.sqrt(_this8.nx * _this8.nx + _this8.ny * _this8.ny + _this8.nz * _this8.nz);
		_this8.nx *= len2;
		_this8.ny *= len2;
		_this8.nz *= len2;
		_this8.d *= len2;
		var _this9 = this.pbottom;
		var len3 = 1. / Math.sqrt(_this9.nx * _this9.nx + _this9.ny * _this9.ny + _this9.nz * _this9.nz);
		_this9.nx *= len3;
		_this9.ny *= len3;
		_this9.nz *= len3;
		_this9.d *= len3;
		var _this10 = this.pnear;
		var len4 = 1. / Math.sqrt(_this10.nx * _this10.nx + _this10.ny * _this10.ny + _this10.nz * _this10.nz);
		_this10.nx *= len4;
		_this10.ny *= len4;
		_this10.nz *= len4;
		_this10.d *= len4;
		var _this11 = this.pfar;
		var len5 = 1. / Math.sqrt(_this11.nx * _this11.nx + _this11.ny * _this11.ny + _this11.nz * _this11.nz);
		_this11.nx *= len5;
		_this11.ny *= len5;
		_this11.nz *= len5;
		_this11.d *= len5;
	}
	,hasSphere: function(s) {
		var x = s.x;
		var y = s.y;
		var z = s.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var p_x = x;
		var p_y = y;
		var p_z = z;
		var _this = this.pleft;
		if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
			return false;
		}
		var _this1 = this.pright;
		if(_this1.nx * p_x + _this1.ny * p_y + _this1.nz * p_z - _this1.d < -s.r) {
			return false;
		}
		var _this2 = this.ptop;
		if(_this2.nx * p_x + _this2.ny * p_y + _this2.nz * p_z - _this2.d < -s.r) {
			return false;
		}
		var _this3 = this.pbottom;
		if(_this3.nx * p_x + _this3.ny * p_y + _this3.nz * p_z - _this3.d < -s.r) {
			return false;
		}
		if(this.checkNearFar) {
			var _this4 = this.pnear;
			if(_this4.nx * p_x + _this4.ny * p_y + _this4.nz * p_z - _this4.d < -s.r) {
				return false;
			}
			var _this5 = this.pfar;
			if(_this5.nx * p_x + _this5.ny * p_y + _this5.nz * p_z - _this5.d < -s.r) {
				return false;
			}
		}
		return true;
	}
	,__class__: h3d_col_Frustum
};
var h3d_col_Ray = function() {
};
$hxClasses["h3d.col.Ray"] = h3d_col_Ray;
h3d_col_Ray.__name__ = "h3d.col.Ray";
h3d_col_Ray.prototype = {
	px: null
	,py: null
	,pz: null
	,lx: null
	,ly: null
	,lz: null
	,normalize: function() {
		var l = this.lx * this.lx + this.ly * this.ly + this.lz * this.lz;
		if(l == 1.) {
			return;
		}
		if(l < 1e-10) {
			l = 0;
		} else {
			l = 1. / Math.sqrt(l);
		}
		this.lx *= l;
		this.ly *= l;
		this.lz *= l;
	}
	,__class__: h3d_col_Ray
};
var h3d_col_Plane = function(nx,ny,nz,d) {
	this.nx = nx;
	this.ny = ny;
	this.nz = nz;
	this.d = d;
};
$hxClasses["h3d.col.Plane"] = h3d_col_Plane;
h3d_col_Plane.__name__ = "h3d.col.Plane";
h3d_col_Plane.prototype = {
	nx: null
	,ny: null
	,nz: null
	,d: null
	,__class__: h3d_col_Plane
};
var h3d_col_Sphere = function(x,y,z,r) {
	if(r == null) {
		r = 0.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var sx = x;
	var sy = y;
	var sz = z;
	var sr = r;
	if(sr == null) {
		sr = 0.;
	}
	if(sz == null) {
		sz = 0.;
	}
	if(sy == null) {
		sy = 0.;
	}
	if(sx == null) {
		sx = 0.;
	}
	this.x = sx;
	this.y = sy;
	this.z = sz;
	this.r = sr;
};
$hxClasses["h3d.col.Sphere"] = h3d_col_Sphere;
h3d_col_Sphere.__name__ = "h3d.col.Sphere";
h3d_col_Sphere.__interfaces__ = [h3d_col_Collider];
h3d_col_Sphere.prototype = {
	x: null
	,y: null
	,z: null
	,r: null
	,rayIntersection: function(r,bestMatch) {
		var r2 = this.r * this.r;
		var px = r.px + r.lx;
		var py = r.py + r.ly;
		var pz = r.pz + r.lz;
		var a = r.lx * r.lx + r.ly * r.ly + r.lz * r.lz;
		var b = 2 * r.lx * (this.x - px) + 2 * r.ly * (this.y - py) + 2 * r.lz * (this.z - pz);
		var c = this.x * this.x + this.y * this.y + this.z * this.z + (px * px + py * py + pz * pz) - 2 * (this.x * px + this.y * py + this.z * pz) - r2;
		var d = b * b - 4 * a * c;
		if(d < 0) {
			return -1;
		}
		d = Math.sqrt(d);
		var t = (-b + d) / (2 * a);
		return 1 - t;
	}
	,__class__: h3d_col_Sphere
};
var h3d_impl_Feature = $hxEnums["h3d.impl.Feature"] = { __ename__ : true, __constructs__ : ["StandardDerivatives","FloatTextures","AllocDepthBuffer","HardwareAccelerated","MultipleRenderTargets","Queries","SRGBTextures","ShaderModel3","BottomLeftCoords","Wireframe"]
	,StandardDerivatives: {_hx_index:0,__enum__:"h3d.impl.Feature",toString:$estr}
	,FloatTextures: {_hx_index:1,__enum__:"h3d.impl.Feature",toString:$estr}
	,AllocDepthBuffer: {_hx_index:2,__enum__:"h3d.impl.Feature",toString:$estr}
	,HardwareAccelerated: {_hx_index:3,__enum__:"h3d.impl.Feature",toString:$estr}
	,MultipleRenderTargets: {_hx_index:4,__enum__:"h3d.impl.Feature",toString:$estr}
	,Queries: {_hx_index:5,__enum__:"h3d.impl.Feature",toString:$estr}
	,SRGBTextures: {_hx_index:6,__enum__:"h3d.impl.Feature",toString:$estr}
	,ShaderModel3: {_hx_index:7,__enum__:"h3d.impl.Feature",toString:$estr}
	,BottomLeftCoords: {_hx_index:8,__enum__:"h3d.impl.Feature",toString:$estr}
	,Wireframe: {_hx_index:9,__enum__:"h3d.impl.Feature",toString:$estr}
};
h3d_impl_Feature.__empty_constructs__ = [h3d_impl_Feature.StandardDerivatives,h3d_impl_Feature.FloatTextures,h3d_impl_Feature.AllocDepthBuffer,h3d_impl_Feature.HardwareAccelerated,h3d_impl_Feature.MultipleRenderTargets,h3d_impl_Feature.Queries,h3d_impl_Feature.SRGBTextures,h3d_impl_Feature.ShaderModel3,h3d_impl_Feature.BottomLeftCoords,h3d_impl_Feature.Wireframe];
var h3d_impl_RenderFlag = $hxEnums["h3d.impl.RenderFlag"] = { __ename__ : true, __constructs__ : ["CameraHandness"]
	,CameraHandness: {_hx_index:0,__enum__:"h3d.impl.RenderFlag",toString:$estr}
};
h3d_impl_RenderFlag.__empty_constructs__ = [h3d_impl_RenderFlag.CameraHandness];
var h3d_impl_InputNames = function(names) {
	this.id = h3d_impl_InputNames.UID++;
	this.names = names;
};
$hxClasses["h3d.impl.InputNames"] = h3d_impl_InputNames;
h3d_impl_InputNames.__name__ = "h3d.impl.InputNames";
h3d_impl_InputNames.get = function(names) {
	var key = names.join("|");
	var _this = h3d_impl_InputNames.CACHE;
	var i = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
	if(i == null) {
		i = new h3d_impl_InputNames(names.slice());
		var _this1 = h3d_impl_InputNames.CACHE;
		if(__map_reserved[key] != null) {
			_this1.setReserved(key,i);
		} else {
			_this1.h[key] = i;
		}
	}
	return i;
};
h3d_impl_InputNames.prototype = {
	id: null
	,names: null
	,__class__: h3d_impl_InputNames
};
var h3d_impl_Driver = function() { };
$hxClasses["h3d.impl.Driver"] = h3d_impl_Driver;
h3d_impl_Driver.__name__ = "h3d.impl.Driver";
h3d_impl_Driver.prototype = {
	hasFeature: function(f) {
		return false;
	}
	,setRenderFlag: function(r,value) {
	}
	,isSupportedFormat: function(fmt) {
		return false;
	}
	,isDisposed: function() {
		return true;
	}
	,begin: function(frame) {
	}
	,generateMipMaps: function(texture) {
		throw new js__$Boot_HaxeError("Mipmaps auto generation is not supported on this platform");
	}
	,clear: function(color,depth,stencil) {
	}
	,init: function(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
	}
	,resize: function(width,height) {
	}
	,selectShader: function(shader) {
		return false;
	}
	,selectMaterial: function(pass) {
	}
	,uploadShaderBuffers: function(buffers,which) {
	}
	,selectBuffer: function(buffer) {
	}
	,draw: function(ibuf,startIndex,ntriangles) {
	}
	,setRenderZone: function(x,y,width,height) {
	}
	,setRenderTarget: function(tex,layer,mipLevel) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
	}
	,allocDepthBuffer: function(b) {
		return null;
	}
	,disposeDepthBuffer: function(b) {
	}
	,getDefaultDepthBuffer: function() {
		return null;
	}
	,end: function() {
	}
	,setDebug: function(b) {
	}
	,allocTexture: function(t) {
		return null;
	}
	,allocIndexes: function(count,is32) {
		return null;
	}
	,allocVertexes: function(m) {
		return null;
	}
	,disposeTexture: function(t) {
	}
	,disposeIndexes: function(i) {
	}
	,disposeVertexes: function(v) {
	}
	,uploadIndexBuffer: function(i,startIndice,indiceCount,buf,bufPos) {
	}
	,uploadVertexBuffer: function(v,startVertex,vertexCount,buf,bufPos) {
	}
	,uploadTextureBitmap: function(t,bmp,mipLevel,side) {
	}
	,uploadTexturePixels: function(t,pixels,mipLevel,side) {
	}
	,copyTexture: function(from,to) {
		return false;
	}
	,__class__: h3d_impl_Driver
};
var h3d_impl__$GlDriver_CompiledShader = function(s,vertex,shader) {
	this.s = s;
	this.vertex = vertex;
	this.shader = shader;
};
$hxClasses["h3d.impl._GlDriver.CompiledShader"] = h3d_impl__$GlDriver_CompiledShader;
h3d_impl__$GlDriver_CompiledShader.__name__ = "h3d.impl._GlDriver.CompiledShader";
h3d_impl__$GlDriver_CompiledShader.prototype = {
	s: null
	,vertex: null
	,globals: null
	,params: null
	,textures: null
	,buffers: null
	,shader: null
	,__class__: h3d_impl__$GlDriver_CompiledShader
};
var h3d_impl__$GlDriver_CompiledAttribute = function() {
};
$hxClasses["h3d.impl._GlDriver.CompiledAttribute"] = h3d_impl__$GlDriver_CompiledAttribute;
h3d_impl__$GlDriver_CompiledAttribute.__name__ = "h3d.impl._GlDriver.CompiledAttribute";
h3d_impl__$GlDriver_CompiledAttribute.prototype = {
	index: null
	,type: null
	,size: null
	,offset: null
	,divisor: null
	,__class__: h3d_impl__$GlDriver_CompiledAttribute
};
var h3d_impl__$GlDriver_CompiledProgram = function() {
};
$hxClasses["h3d.impl._GlDriver.CompiledProgram"] = h3d_impl__$GlDriver_CompiledProgram;
h3d_impl__$GlDriver_CompiledProgram.__name__ = "h3d.impl._GlDriver.CompiledProgram";
h3d_impl__$GlDriver_CompiledProgram.prototype = {
	p: null
	,vertex: null
	,fragment: null
	,stride: null
	,inputs: null
	,attribs: null
	,hasAttribIndex: null
	,__class__: h3d_impl__$GlDriver_CompiledProgram
};
var h3d_impl_GlDriver = function(antiAlias) {
	if(antiAlias == null) {
		antiAlias = 0;
	}
	this.features = new haxe_ds_EnumValueMap();
	this.maxCompressedTexturesSupport = 0;
	this.rightHanded = false;
	this.firstShader = true;
	this.boundTextures = [];
	this.curTargets = [];
	var _g = [];
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	this.currentDivisor = _g;
	this.curColorMask = -1;
	this.lastActiveIndex = 0;
	this.curStEnabled = false;
	this.curStMaskBits = -1;
	this.curStOpBits = -1;
	this.curMatBits = -1;
	this.maxIdxCurAttribs = 0;
	this.curAttribs = [];
	this.canvas = hxd_Window.getInstance().canvas;
	var options = { alpha : false, stencil : true, antialias : antiAlias > 0};
	if(h3d_impl_GlDriver.ALLOW_WEBGL2) {
		this.gl = this.canvas.getContext("webgl2",options);
	}
	if(this.gl == null) {
		this.gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.canvas,options);
	}
	if(this.gl == null) {
		throw new js__$Boot_HaxeError("Could not acquire GL context");
	}
	if(typeof(WebGLDebugUtils) != "undefined") {
		this.gl = WebGLDebugUtils.makeDebugContext(this.gl);
		this.glDebug = true;
	}
	this.commonFB = this.gl.createFramebuffer();
	this.programs = new haxe_ds_IntMap();
	this.defStencil = new h3d_mat_Stencil();
	var v = this.gl.getParameter(7938);
	var reg = new EReg("ES ([0-9]+\\.[0-9]+)","");
	if(reg.match(v)) {
		this.glES = parseFloat(reg.matched(1));
	}
	var reg1 = new EReg("[0-9]+\\.[0-9]+","");
	var v1 = this.gl.getParameter(35724);
	if(reg1.match(v1)) {
		this.glES = parseFloat(reg1.matched(0));
		this.shaderVersion = Math.round(parseFloat(reg1.matched(0)) * 100);
	}
	this.drawMode = 4;
	this.makeFeatures();
	hxsl_SharedShader.UNROLL_LOOPS = !this.hasFeature(h3d_impl_Feature.ShaderModel3);
};
$hxClasses["h3d.impl.GlDriver"] = h3d_impl_GlDriver;
h3d_impl_GlDriver.__name__ = "h3d.impl.GlDriver";
h3d_impl_GlDriver.__super__ = h3d_impl_Driver;
h3d_impl_GlDriver.prototype = $extend(h3d_impl_Driver.prototype,{
	canvas: null
	,mrtExt: null
	,gl: null
	,commonFB: null
	,curAttribs: null
	,maxIdxCurAttribs: null
	,curShader: null
	,curBuffer: null
	,curIndexBuffer: null
	,curMatBits: null
	,curStOpBits: null
	,curStMaskBits: null
	,curStEnabled: null
	,defStencil: null
	,programs: null
	,frame: null
	,lastActiveIndex: null
	,curColorMask: null
	,currentDivisor: null
	,bufferWidth: null
	,bufferHeight: null
	,curTarget: null
	,curTargets: null
	,numTargets: null
	,curTargetLayer: null
	,curTargetMip: null
	,debug: null
	,glDebug: null
	,boundTextures: null
	,glES: null
	,shaderVersion: null
	,firstShader: null
	,rightHanded: null
	,maxCompressedTexturesSupport: null
	,drawMode: null
	,setRenderFlag: function(r,value) {
		this.rightHanded = value > 0;
	}
	,setDebug: function(d) {
		this.debug = d;
	}
	,begin: function(frame) {
		this.frame = frame;
		this.resetStream();
		this.gl.useProgram(null);
		this.curShader = null;
		this.curBuffer = null;
	}
	,getDriverName: function(details) {
		var render = this.gl.getParameter(7937);
		if(details) {
			render += " GLv" + Std.string(this.gl.getParameter(7938));
		} else {
			render = render.split("/").shift();
		}
		render = render.split("WebGL ").join("");
		return "OpenGL " + render;
	}
	,compileShader: function(glout,shader) {
		var type = shader.vertex ? 35633 : 35632;
		var s = this.gl.createShader(type);
		if(shader.code == null) {
			shader.code = glout.run(shader.data);
			shader.data.funs = null;
		}
		this.gl.shaderSource(s,shader.code);
		this.gl.compileShader(s);
		var log = this.gl.getShaderInfoLog(s);
		if(this.gl.getShaderParameter(s,35713) != 1) {
			var log1 = this.gl.getShaderInfoLog(s);
			var lid = Std.parseInt(HxOverrides.substr(log1,9,null));
			var line = lid == null ? null : shader.code.split("\n")[lid - 1];
			if(line == null) {
				line = "";
			} else {
				line = "(" + StringTools.trim(line) + ")";
			}
			var codeLines = shader.code.split("\n");
			var _g = 0;
			var _g1 = codeLines.length;
			while(_g < _g1) {
				var i = _g++;
				codeLines[i] = i + 1 + "\t" + codeLines[i];
			}
			throw new js__$Boot_HaxeError("An error occurred compiling the shaders: " + log1 + line + "\n\n" + codeLines.join("\n"));
		}
		return new h3d_impl__$GlDriver_CompiledShader(s,shader.vertex,shader);
	}
	,initShader: function(p,s,shader) {
		var prefix = s.vertex ? "vertex" : "fragment";
		s.globals = this.gl.getUniformLocation(p.p,prefix + "Globals");
		s.params = this.gl.getUniformLocation(p.p,prefix + "Params");
		s.textures = [];
		var index = 0;
		var curT = null;
		var mode = 0;
		var name = "";
		var t = shader.textures;
		while(t != null) {
			var tt = t.type;
			var tmp;
			if(tt._hx_index == 17) {
				var _g = tt.size;
				tmp = true;
			} else {
				tmp = false;
			}
			if(tmp) {
				tt = hxsl_Type.TSampler2D;
			}
			if(tt != curT) {
				curT = tt;
				switch(tt._hx_index) {
				case 10:
					mode = 3553;
					name = "Textures";
					break;
				case 11:
					mode = 35866;
					name = "TexturesArray";
					break;
				case 12:
					mode = 34067;
					name = "TexturesCube";
					break;
				default:
					throw new js__$Boot_HaxeError("Unsupported texture type " + Std.string(tt));
				}
				index = 0;
			}
			s.textures.push({ u : this.gl.getUniformLocation(p.p,prefix + name + "[" + index + "]"), t : curT, mode : mode});
			++index;
			t = t.next;
		}
		if(shader.bufferCount > 0) {
			var _g1 = [];
			var _g11 = 0;
			var _g2 = shader.bufferCount;
			while(_g11 < _g2) {
				var i = _g11++;
				_g1.push(this.gl.getUniformBlockIndex(p.p,"uniform_buffer" + i));
			}
			s.buffers = _g1;
			var _g3 = 0;
			var _g4 = shader.bufferCount;
			while(_g3 < _g4) {
				var i1 = _g3++;
				this.gl.uniformBlockBinding(p.p,s.buffers[i1],i1);
			}
		}
	}
	,selectShader: function(shader) {
		var p = this.programs.h[shader.id];
		if(p == null) {
			p = new h3d_impl__$GlDriver_CompiledProgram();
			var glout = new hxsl_GlslOut();
			glout.glES = this.glES;
			glout.version = this.shaderVersion;
			p.vertex = this.compileShader(glout,shader.vertex);
			p.fragment = this.compileShader(glout,shader.fragment);
			p.p = this.gl.createProgram();
			this.gl.attachShader(p.p,p.vertex.s);
			this.gl.attachShader(p.p,p.fragment.s);
			var log = null;
			try {
				this.gl.linkProgram(p.p);
				if(this.gl.getProgramParameter(p.p,35714) != 1) {
					log = this.gl.getProgramInfoLog(p.p);
				}
			} catch( e ) {
				throw new js__$Boot_HaxeError("Shader linkage error: " + Std.string(((e) instanceof js__$Boot_HaxeError) ? e.val : e) + " (" + this.getDriverName(false) + ")");
			}
			this.gl.deleteShader(p.vertex.s);
			this.gl.deleteShader(p.fragment.s);
			if(log != null) {
				this.gl.deleteProgram(p.p);
				throw new js__$Boot_HaxeError("Program linkage failure: " + log + "\nVertex=\n" + shader.vertex.code + "\n\nFragment=\n" + shader.fragment.code);
			}
			this.firstShader = false;
			this.initShader(p,p.vertex,shader.vertex);
			this.initShader(p,p.fragment,shader.fragment);
			var attribNames = [];
			p.attribs = [];
			p.hasAttribIndex = [];
			p.stride = 0;
			var _g = 0;
			var _g1 = shader.vertex.data.vars;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				if(v.kind._hx_index == 1) {
					var t = 5126;
					var size;
					var _g2 = v.type;
					switch(_g2._hx_index) {
					case 3:
						size = 1;
						break;
					case 5:
						var _g21 = _g2.t;
						var n = _g2.size;
						size = n;
						break;
					case 9:
						var n1 = _g2.size;
						t = 5120;
						size = n1;
						break;
					default:
						throw new js__$Boot_HaxeError("assert " + Std.string(v.type));
					}
					var index = this.gl.getAttribLocation(p.p,glout.varNames.h.hasOwnProperty(v.id) ? glout.varNames.h[v.id] : v.name);
					if(index < 0) {
						p.stride += size;
						continue;
					}
					var a = new h3d_impl__$GlDriver_CompiledAttribute();
					a.type = t;
					a.size = size;
					a.index = index;
					a.offset = p.stride;
					a.divisor = 0;
					if(v.qualifiers != null) {
						var _g4 = 0;
						var _g5 = v.qualifiers;
						while(_g4 < _g5.length) {
							var q = _g5[_g4];
							++_g4;
							if(q._hx_index == 9) {
								var n2 = q.v;
								a.divisor = n2;
							}
						}
					}
					p.attribs.push(a);
					p.hasAttribIndex[a.index] = true;
					attribNames.push(v.name);
					p.stride += size;
				}
			}
			p.inputs = h3d_impl_InputNames.get(attribNames);
			this.programs.h[shader.id] = p;
		}
		if(this.curShader == p) {
			return false;
		}
		this.gl.useProgram(p.p);
		var _g3 = 0;
		var _g11 = p.attribs;
		while(_g3 < _g11.length) {
			var a1 = _g11[_g3];
			++_g3;
			if(!this.curAttribs[a1.index]) {
				this.gl.enableVertexAttribArray(a1.index);
				this.curAttribs[a1.index] = true;
				if(this.maxIdxCurAttribs < a1.index) {
					this.maxIdxCurAttribs = a1.index;
				}
			}
		}
		var lastIdxCurAttribTrue = 0;
		var _g22 = 0;
		var _g31 = this.maxIdxCurAttribs + 1;
		while(_g22 < _g31) {
			var i = _g22++;
			if(this.curAttribs[i] && !p.hasAttribIndex[i]) {
				this.gl.disableVertexAttribArray(i);
				this.curAttribs[i] = false;
			} else if(this.curAttribs[i]) {
				lastIdxCurAttribTrue = i;
			}
		}
		this.maxIdxCurAttribs = lastIdxCurAttribTrue;
		this.curShader = p;
		this.curBuffer = null;
		var _g41 = 0;
		var _g51 = this.boundTextures.length;
		while(_g41 < _g51) {
			var i1 = _g41++;
			this.boundTextures[i1] = null;
		}
		return true;
	}
	,uploadShaderBuffers: function(buf,which) {
		this.uploadBuffer(this.curShader.vertex,buf.vertex,which);
		this.uploadBuffer(this.curShader.fragment,buf.fragment,which);
	}
	,uploadBuffer: function(s,buf,which) {
		switch(which) {
		case 0:
			if(s.globals != null) {
				var a = buf.globals.subarray(0,s.shader.globalsSize * 4);
				this.gl.uniform4fv(s.globals,a);
			}
			break;
		case 1:
			if(s.params != null) {
				var a1 = buf.params.subarray(0,s.shader.paramsSize * 4);
				this.gl.uniform4fv(s.params,a1);
			}
			break;
		case 2:
			var tcount = s.textures.length;
			var _g = 0;
			var _g1 = s.textures.length;
			while(_g < _g1) {
				var i = _g++;
				var t = buf.tex[i];
				var pt = s.textures[i];
				if(t == null || t.t == null && t.realloc == null) {
					switch(pt.t._hx_index) {
					case 10:
						var color = h3d_mat_Defaults.loadingTextureColor;
						t = h3d_mat_Texture.fromColor(color,(color >>> 24) / 255);
						break;
					case 12:
						t = h3d_mat_Texture.defaultCubeTexture();
						break;
					default:
						throw new js__$Boot_HaxeError("Missing texture");
					}
				}
				if(t != null && t.t == null && t.realloc != null) {
					t.alloc();
					t.realloc();
				}
				t.set_lastFrame(this.frame);
				if(pt.u == null) {
					continue;
				}
				var idx = s.vertex ? i : this.curShader.vertex.textures.length + i;
				if(this.boundTextures[idx] == t.t) {
					continue;
				}
				this.boundTextures[idx] = t.t;
				var mode = this.getBindType(t);
				if(mode != pt.mode) {
					throw new js__$Boot_HaxeError("Texture format mismatch: " + Std.string(t) + " should be " + Std.string(pt.t));
				}
				this.gl.activeTexture(33984 + idx);
				this.gl.uniform1i(pt.u,idx);
				this.gl.bindTexture(mode,t.t.t);
				this.lastActiveIndex = idx;
				var mip = t.mipMap._hx_index;
				var filter = t.filter._hx_index;
				var wrap = t.wrap._hx_index;
				var bits = mip | filter << 3 | wrap << 6;
				if(bits != t.t.bits) {
					t.t.bits = bits;
					var flags = h3d_impl_GlDriver.TFILTERS[mip][filter];
					this.gl.texParameteri(mode,10240,flags[0]);
					this.gl.texParameteri(mode,10241,flags[1]);
					var w = h3d_impl_GlDriver.TWRAP[wrap];
					this.gl.texParameteri(mode,10242,w);
					this.gl.texParameteri(mode,10243,w);
				}
			}
			break;
		case 3:
			if(s.buffers != null) {
				var _g2 = 0;
				var _g11 = s.buffers.length;
				while(_g2 < _g11) {
					var i1 = _g2++;
					this.gl.bindBufferBase(35345,i1,buf.buffers[i1].buffer.vbuf.b);
				}
			}
			break;
		}
	}
	,selectMaterial: function(pass) {
		var bits = pass.bits;
		if(this.curTarget == null == this.rightHanded) {
			switch(pass.culling._hx_index) {
			case 1:
				bits = bits & -4 | 2;
				break;
			case 2:
				bits = bits & -4 | 1;
				break;
			default:
			}
		}
		this.selectMaterialBits(bits);
		if(this.curColorMask != pass.colorMask) {
			var m = pass.colorMask;
			this.gl.colorMask((m & 1) != 0,(m & 2) != 0,(m & 4) != 0,(m & 8) != 0);
			this.curColorMask = m;
		}
		var s = this.defStencil;
		if(pass.stencil == null) {
			if(this.curStEnabled) {
				this.gl.disable(2960);
				this.curStEnabled = false;
			}
		} else {
			s = pass.stencil;
			if(!this.curStEnabled) {
				this.gl.enable(2960);
				this.curStEnabled = true;
			}
		}
		this.selectStencilBits(s.opBits,s.maskBits);
	}
	,selectMaterialBits: function(bits) {
		var diff = bits ^ this.curMatBits;
		if(this.curMatBits < 0) {
			diff = -1;
		}
		if(diff == 0) {
			return;
		}
		var wireframe = (bits & 268435456) != 0;
		this.drawMode = wireframe ? 3 : 4;
		if((diff & 3) != 0) {
			var cull = bits & 3;
			if(cull == 0) {
				this.gl.disable(2884);
			} else {
				if(this.curMatBits < 0 || (this.curMatBits & 3) == 0) {
					this.gl.enable(2884);
				}
				this.gl.cullFace(h3d_impl_GlDriver.FACES[cull]);
			}
		}
		if((diff & 4194240) != 0) {
			var csrc = bits >> 6 & 15;
			var cdst = bits >> 10 & 15;
			var asrc = bits >> 14 & 15;
			var adst = bits >> 18 & 15;
			if(csrc == asrc && cdst == adst) {
				if(csrc == 0 && cdst == 1) {
					this.gl.disable(3042);
				} else {
					if(this.curMatBits < 0 || (this.curMatBits >> 6 & 15) == 0 && (this.curMatBits >> 10 & 15) == 1) {
						this.gl.enable(3042);
					}
					this.gl.blendFunc(h3d_impl_GlDriver.BLEND[csrc],h3d_impl_GlDriver.BLEND[cdst]);
				}
			} else {
				if(this.curMatBits < 0 || (this.curMatBits >> 6 & 15) == 0 && (this.curMatBits >> 10 & 15) == 1) {
					this.gl.enable(3042);
				}
				this.gl.blendFuncSeparate(h3d_impl_GlDriver.BLEND[csrc],h3d_impl_GlDriver.BLEND[cdst],h3d_impl_GlDriver.BLEND[asrc],h3d_impl_GlDriver.BLEND[adst]);
			}
		}
		if((diff & 264241152) != 0) {
			var cop = bits >> 22 & 7;
			var aop = bits >> 25 & 7;
			if(cop == aop) {
				this.gl.blendEquation(h3d_impl_GlDriver.OP[cop]);
			} else {
				this.gl.blendEquationSeparate(h3d_impl_GlDriver.OP[cop],h3d_impl_GlDriver.OP[aop]);
			}
		}
		if((diff & 4) != 0) {
			this.gl.depthMask((bits >> 2 & 1) != 0);
		}
		if((diff & 56) != 0) {
			var cmp = bits >> 3 & 7;
			if(cmp == 0) {
				this.gl.disable(2929);
			} else {
				if(this.curMatBits < 0 || (this.curMatBits >> 3 & 7) == 0) {
					this.gl.enable(2929);
				}
				this.gl.depthFunc(h3d_impl_GlDriver.COMPARE[cmp]);
			}
		}
		this.curMatBits = bits;
	}
	,selectStencilBits: function(opBits,maskBits) {
		var diffOp = opBits ^ this.curStOpBits;
		var diffMask = maskBits ^ this.curStMaskBits;
		if((diffOp | diffMask) == 0) {
			return;
		}
		if((diffOp & 4088) != 0) {
			this.gl.stencilOpSeparate(h3d_impl_GlDriver.FACES[2],h3d_impl_GlDriver.STENCIL_OP[opBits >> 6 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 9 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 3 & 7]);
		}
		if((diffOp & 16744448) != 0) {
			this.gl.stencilOpSeparate(h3d_impl_GlDriver.FACES[1],h3d_impl_GlDriver.STENCIL_OP[opBits >> 18 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 21 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 15 & 7]);
		}
		if((diffOp & 7 | diffMask & 16711935) != 0) {
			this.gl.stencilFuncSeparate(h3d_impl_GlDriver.FACES[2],h3d_impl_GlDriver.COMPARE[opBits & 7],maskBits >> 16 & 255,maskBits & 255);
		}
		if((diffOp & 28672 | diffMask & 16711935) != 0) {
			this.gl.stencilFuncSeparate(h3d_impl_GlDriver.FACES[1],h3d_impl_GlDriver.COMPARE[opBits >> 12 & 7],maskBits >> 16 & 255,maskBits & 255);
		}
		if((diffMask & 65280) != 0) {
			var w = maskBits >> 8 & 255;
			this.gl.stencilMaskSeparate(h3d_impl_GlDriver.FACES[2],w);
			this.gl.stencilMaskSeparate(h3d_impl_GlDriver.FACES[1],w);
		}
		this.curStOpBits = opBits;
		this.curStMaskBits = maskBits;
	}
	,clear: function(color,depth,stencil) {
		var bits = 0;
		if(color != null) {
			this.gl.colorMask(true,true,true,true);
			this.curColorMask = 15;
			this.gl.clearColor(color.x,color.y,color.z,color.w);
			bits |= 16384;
		}
		if(depth != null) {
			this.gl.depthMask(true);
			if(this.curMatBits >= 0) {
				this.curMatBits |= 4;
			}
			this.gl.clearDepth(depth);
			bits |= 256;
		}
		if(stencil != null) {
			this.selectStencilBits(this.defStencil.opBits,this.defStencil.maskBits);
			this.gl.clearStencil(stencil);
			bits |= 1024;
		}
		if(bits != 0) {
			this.gl.clear(bits);
		}
		if(this.curTarget != null) {
			this.curTarget.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		}
	}
	,resize: function(width,height) {
		if(this.canvas.style.width == "") {
			this.canvas.style.width = (width / window.devicePixelRatio | 0) + "px";
			this.canvas.style.height = (height / window.devicePixelRatio | 0) + "px";
		}
		this.canvas.width = width;
		this.canvas.height = height;
		this.bufferWidth = width;
		this.bufferHeight = height;
		this.gl.viewport(0,0,width,height);
		if(this.defaultDepth != null) {
			this.disposeDepthBuffer(this.defaultDepth);
			this.defaultDepth.width = this.bufferWidth;
			this.defaultDepth.height = this.bufferHeight;
			this.defaultDepth.b = this.allocDepthBuffer(this.defaultDepth);
		}
	}
	,getChannels: function(t) {
		switch(t.internalFmt) {
		case 6407:
			return 6407;
		case 6408:
			return 6408;
		case 32856:
			return 32993;
		case 32857:
			return 6408;
		case 6403:case 33321:case 33325:case 33326:
			return 6403;
		case 33319:case 33323:case 33327:case 33328:
			return 33319;
		case 33777:case 33778:case 33779:
			return 6408;
		case 34837:case 34843:
			return 6407;
		case 35898:
			return 6407;
		case 35904:case 35905:
			return 6407;
		case 34836:case 34842:case 35906:case 35907:
			return 6408;
		default:
			throw new js__$Boot_HaxeError("Invalid format " + t.internalFmt);
		}
	}
	,isSupportedFormat: function(fmt) {
		switch(fmt._hx_index) {
		case 2:
			return true;
		case 3:case 4:
			return this.hasFeature(h3d_impl_Feature.FloatTextures);
		case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 16:case 17:
			return this.glES >= 3;
		case 14:case 15:
			return this.hasFeature(h3d_impl_Feature.SRGBTextures);
		case 18:
			var n = fmt.v;
			return n <= this.maxCompressedTexturesSupport;
		default:
			return false;
		}
	}
	,getBindType: function(t) {
		var isCube = (t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0;
		var isArray = (t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0;
		if(isCube) {
			return 34067;
		} else if(isArray) {
			return 35866;
		} else {
			return 3553;
		}
	}
	,allocTexture: function(t) {
		var _gthis = this;
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		var tt = this.gl.createTexture();
		var bind = this.getBindType(t);
		var tt1 = { t : tt, width : t.width, height : t.height, internalFmt : 6408, pixelFmt : 5121, bits : -1, bind : bind};
		var _g = t.format;
		switch(_g._hx_index) {
		case 1:
			tt1.internalFmt = 32856;
			break;
		case 2:
			break;
		case 3:
			if(this.hasFeature(h3d_impl_Feature.FloatTextures)) {
				tt1.pixelFmt = 5131;
				tt1.internalFmt = 34842;
			} else {
				throw new js__$Boot_HaxeError("Unsupported texture format " + Std.string(t.format));
			}
			break;
		case 4:
			if(this.hasFeature(h3d_impl_Feature.FloatTextures)) {
				tt1.internalFmt = 34836;
				tt1.pixelFmt = 5126;
			} else {
				throw new js__$Boot_HaxeError("Unsupported texture format " + Std.string(t.format));
			}
			break;
		case 5:
			tt1.internalFmt = 33321;
			break;
		case 6:
			tt1.internalFmt = 33325;
			tt1.pixelFmt = 5131;
			break;
		case 7:
			tt1.internalFmt = 33326;
			tt1.pixelFmt = 5126;
			break;
		case 8:
			tt1.internalFmt = 33323;
			break;
		case 9:
			tt1.internalFmt = 33327;
			tt1.pixelFmt = 5131;
			break;
		case 10:
			tt1.internalFmt = 33328;
			tt1.pixelFmt = 5126;
			break;
		case 11:
			tt1.internalFmt = 6407;
			break;
		case 12:
			tt1.internalFmt = 34843;
			tt1.pixelFmt = 5131;
			break;
		case 13:
			tt1.internalFmt = 34837;
			tt1.pixelFmt = 5126;
			break;
		case 14:
			tt1.internalFmt = 35905;
			break;
		case 15:
			tt1.internalFmt = 35907;
			break;
		case 16:
			tt1.internalFmt = 32857;
			tt1.pixelFmt = 33640;
			break;
		case 17:
			tt1.internalFmt = 35898;
			tt1.pixelFmt = 35899;
			break;
		case 18:
			var n = _g.v;
			if(n <= this.maxCompressedTexturesSupport) {
				if((t.width & 3) != 0 || (t.height & 3) != 0) {
					throw new js__$Boot_HaxeError("Compressed texture " + Std.string(t) + " has size " + t.width + "x" + t.height + " - must be a multiple of 4");
				}
				switch(n) {
				case 1:
					tt1.internalFmt = 33777;
					break;
				case 2:
					tt1.internalFmt = 33778;
					break;
				case 3:
					tt1.internalFmt = 33779;
					break;
				default:
					throw new js__$Boot_HaxeError("Unsupported texture format " + Std.string(t.format));
				}
			} else {
				throw new js__$Boot_HaxeError("Unsupported texture format " + Std.string(t.format));
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported texture format " + Std.string(t.format));
		}
		t.set_lastFrame(this.frame);
		t.flags &= -1 - (1 << h3d_mat_TextureFlags.WasCleared._hx_index);
		this.gl.bindTexture(bind,tt1.t);
		var outOfMem = false;
		if((t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0) {
			var _g2 = 0;
			while(_g2 < 6) {
				var i = _g2++;
				this.gl.texImage2D(h3d_impl_GlDriver.CUBE_FACES[i],0,tt1.internalFmt,tt1.width,tt1.height,0,this.getChannels(tt1),tt1.pixelFmt,null);
				var tmp;
				if(!h3d_impl_GlDriver.outOfMemoryCheck) {
					tmp = false;
				} else {
					var err = _gthis.gl.getError();
					if(err == 1285) {
						outOfMem = true;
						tmp = true;
					} else {
						if(err != 0) {
							throw new js__$Boot_HaxeError("Failed to alloc texture " + Std.string(t.format) + "(error " + err + ")");
						}
						tmp = false;
					}
				}
				if(tmp) {
					break;
				}
			}
		} else if((t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0) {
			this.gl.texImage3D(35866,0,tt1.internalFmt,tt1.width,tt1.height,t.get_layerCount(),0,this.getChannels(tt1),tt1.pixelFmt,null);
			if(!(!h3d_impl_GlDriver.outOfMemoryCheck)) {
				var err1 = _gthis.gl.getError();
				if(err1 == 1285) {
					outOfMem = true;
				} else if(err1 != 0) {
					throw new js__$Boot_HaxeError("Failed to alloc texture " + Std.string(t.format) + "(error " + err1 + ")");
				}
			}
		} else {
			var _g21 = t.format;
			var tmp1;
			if(_g21._hx_index == 18) {
				var _g3 = _g21.v;
				tmp1 = true;
			} else {
				tmp1 = false;
			}
			if(!tmp1) {
				this.gl.texImage2D(bind,0,tt1.internalFmt,tt1.width,tt1.height,0,this.getChannels(tt1),tt1.pixelFmt,null);
			}
			if(!(!h3d_impl_GlDriver.outOfMemoryCheck)) {
				var err2 = _gthis.gl.getError();
				if(err2 == 1285) {
					outOfMem = true;
				} else if(err2 != 0) {
					throw new js__$Boot_HaxeError("Failed to alloc texture " + Std.string(t.format) + "(error " + err2 + ")");
				}
			}
		}
		this.restoreBind();
		if(outOfMem) {
			this.gl.deleteTexture(tt1.t);
			return null;
		}
		return tt1;
	}
	,restoreBind: function() {
		var t = this.boundTextures[this.lastActiveIndex];
		if(t == null) {
			this.gl.bindTexture(3553,null);
		} else {
			this.gl.bindTexture(t.bind,t.t);
		}
	}
	,allocDepthBuffer: function(b) {
		var r = this.gl.createRenderbuffer();
		if(b.format == null) {
			b.format = this.glES >= 3 ? h3d_mat_DepthFormat.Depth24Stencil8 : h3d_mat_DepthFormat.Depth16;
		}
		var format;
		switch(b.format._hx_index) {
		case 0:
			format = 33189;
			break;
		case 1:
			if(this.glES >= 3) {
				format = 33190;
			} else {
				throw new js__$Boot_HaxeError("Unsupported depth format " + Std.string(b.format));
			}
			break;
		case 2:
			format = 34041;
			break;
		default:
			throw new js__$Boot_HaxeError("Unsupported depth format " + Std.string(b.format));
		}
		this.gl.bindRenderbuffer(36161,r);
		this.gl.renderbufferStorage(36161,format,b.width,b.height);
		this.gl.bindRenderbuffer(36161,null);
		return { r : r};
	}
	,disposeDepthBuffer: function(b) {
		if(b.b != null && b.b.r != null) {
			this.gl.deleteRenderbuffer(b.b.r);
			b.b = null;
		}
	}
	,defaultDepth: null
	,getDefaultDepthBuffer: function() {
		if(this.defaultDepth != null) {
			return this.defaultDepth;
		}
		this.defaultDepth = new h3d_mat_DepthBuffer(0,0);
		this.defaultDepth.width = this.bufferWidth;
		this.defaultDepth.height = this.bufferHeight;
		this.defaultDepth.b = this.allocDepthBuffer(this.defaultDepth);
		return this.defaultDepth;
	}
	,allocVertexes: function(m) {
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		var b = this.gl.createBuffer();
		this.gl.bindBuffer(34962,b);
		if(m.size * m.stride == 0) {
			throw new js__$Boot_HaxeError("assert");
		}
		this.gl.bufferData(34962,m.size * m.stride * 4,(m.flags & 1 << h3d_BufferFlag.Dynamic._hx_index) != 0 ? 35048 : 35044);
		var outOfMem = h3d_impl_GlDriver.outOfMemoryCheck && this.gl.getError() == 1285;
		this.gl.bindBuffer(34962,null);
		if(outOfMem) {
			this.gl.deleteBuffer(b);
			return null;
		}
		return { b : b, stride : m.stride};
	}
	,allocIndexes: function(count,is32) {
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		var b = this.gl.createBuffer();
		var size = is32 ? 4 : 2;
		this.gl.bindBuffer(34963,b);
		this.gl.bufferData(34963,count * size,35044);
		var outOfMem = h3d_impl_GlDriver.outOfMemoryCheck && this.gl.getError() == 1285;
		this.gl.bindBuffer(34963,null);
		this.curIndexBuffer = null;
		if(outOfMem) {
			this.gl.deleteBuffer(b);
			return null;
		}
		return { b : b, is32 : is32};
	}
	,disposeTexture: function(t) {
		var tt = t.t;
		if(tt == null) {
			return;
		}
		t.t = null;
		var _g = 0;
		var _g1 = this.boundTextures.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.boundTextures[i] == tt) {
				this.boundTextures[i] = null;
			}
		}
		this.gl.deleteTexture(tt.t);
	}
	,disposeIndexes: function(i) {
		this.gl.deleteBuffer(i.b);
	}
	,disposeVertexes: function(v) {
		this.gl.deleteBuffer(v.b);
	}
	,generateMipMaps: function(t) {
		var bind = this.getBindType(t);
		this.gl.bindTexture(bind,t.t.t);
		this.gl.generateMipmap(bind);
		this.restoreBind();
	}
	,uploadTextureBitmap: function(t,bmp,mipLevel,side) {
		if(t.format != hxd_PixelFormat.RGBA || (t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0) {
			var pixels = bmp.getPixels();
			this.uploadTexturePixels(t,pixels,mipLevel,side);
			pixels.dispose();
		} else {
			var img = bmp.ctx;
			this.gl.bindTexture(3553,t.t.t);
			this.gl.texImage2D(3553,mipLevel,t.t.internalFmt,this.getChannels(t.t),t.t.pixelFmt,img.getImageData(0,0,bmp.ctx.canvas.width,bmp.ctx.canvas.height));
			this.restoreBind();
		}
	}
	,resetStream: function() {
	}
	,uploadTexturePixels: function(t,pixels,mipLevel,side) {
		var cubic = (t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0;
		var bind = this.getBindType(t);
		if((t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0) {
			throw new js__$Boot_HaxeError("TODO:texImage3D");
		}
		var face = cubic ? h3d_impl_GlDriver.CUBE_FACES[side] : 3553;
		this.gl.bindTexture(bind,t.t.t);
		pixels.convert(t.format);
		pixels.setFlip(false);
		var bufLen = pixels.stride * pixels.height;
		var buffer;
		switch(t.format._hx_index) {
		case 4:case 7:case 10:case 13:
			buffer = new Float32Array(pixels.bytes.b.buffer,pixels.offset,bufLen >> 2);
			break;
		case 3:case 6:case 9:case 12:
			buffer = new Uint16Array(pixels.bytes.b.buffer,pixels.offset,bufLen >> 1);
			break;
		case 16:case 17:
			buffer = new Uint32Array(pixels.bytes.b.buffer,pixels.offset,bufLen >> 2);
			break;
		default:
			buffer = new Uint8Array(pixels.bytes.b.buffer,pixels.offset,bufLen);
		}
		var _g1 = t.format;
		var tmp;
		if(_g1._hx_index == 18) {
			var _g2 = _g1.v;
			tmp = true;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.gl.compressedTexImage2D(face,mipLevel,t.t.internalFmt,pixels.width,pixels.height,0,buffer);
		} else {
			this.gl.texImage2D(face,mipLevel,t.t.internalFmt,pixels.width,pixels.height,0,this.getChannels(t.t),t.t.pixelFmt,buffer);
		}
		t.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		this.restoreBind();
	}
	,uploadVertexBuffer: function(v,startVertex,vertexCount,buf,bufPos) {
		var stride = v.stride;
		this.gl.bindBuffer(34962,v.b);
		var buf1 = buf.array;
		var sub = new Float32Array(buf1.buffer,bufPos * 4,vertexCount * stride);
		this.gl.bufferSubData(34962,startVertex * stride * 4,sub);
		this.gl.bindBuffer(34962,null);
	}
	,uploadIndexBuffer: function(i,startIndice,indiceCount,buf,bufPos) {
		var bits = i.is32 ? 2 : 1;
		this.gl.bindBuffer(34963,i.b);
		var buf1 = new Uint16Array(buf);
		var sub = new Uint16Array(buf1.buffer,bufPos << bits,indiceCount);
		this.gl.bufferSubData(34963,startIndice << bits,sub);
		this.gl.bindBuffer(34963,null);
		this.curIndexBuffer = null;
	}
	,selectBuffer: function(v) {
		if(v == this.curBuffer) {
			return;
		}
		if(this.curBuffer != null && v.buffer == this.curBuffer.buffer && (v.buffer.flags & 1 << h3d_BufferFlag.RawFormat._hx_index) != 0 == ((this.curBuffer.flags & 1 << h3d_BufferFlag.RawFormat._hx_index) != 0)) {
			this.curBuffer = v;
			return;
		}
		if(this.curShader == null) {
			throw new js__$Boot_HaxeError("No shader selected");
		}
		this.curBuffer = v;
		var m = v.buffer.vbuf;
		if(m.stride < this.curShader.stride) {
			throw new js__$Boot_HaxeError("Buffer stride (" + m.stride + ") and shader stride (" + this.curShader.stride + ") mismatch");
		}
		this.gl.bindBuffer(34962,m.b);
		if((v.flags & 1 << h3d_BufferFlag.RawFormat._hx_index) != 0) {
			var _g = 0;
			var _g1 = this.curShader.attribs;
			while(_g < _g1.length) {
				var a = _g1[_g];
				++_g;
				var pos = a.offset;
				this.gl.vertexAttribPointer(a.index,a.size,a.type,false,m.stride * 4,pos * 4);
				if(this.currentDivisor[a.index] != a.divisor) {
					this.currentDivisor[a.index] = a.divisor;
					this.gl.vertexAttribDivisor(a.index,a.divisor);
				}
			}
		} else {
			var offset = 8;
			var _g2 = 0;
			var _g11 = this.curShader.attribs.length;
			while(_g2 < _g11) {
				var i = _g2++;
				var a1 = this.curShader.attribs[i];
				var pos1;
				var _g3 = this.curShader.inputs.names[i];
				switch(_g3) {
				case "normal":
					if(m.stride < 6) {
						throw new js__$Boot_HaxeError("Buffer is missing NORMAL data, set it to RAW format ?");
					}
					pos1 = 3;
					break;
				case "position":
					pos1 = 0;
					break;
				case "uv":
					if(m.stride < 8) {
						throw new js__$Boot_HaxeError("Buffer is missing UV data, set it to RAW format ?");
					}
					pos1 = 6;
					break;
				default:
					var s = _g3;
					pos1 = offset;
					offset += a1.size;
					if(offset > m.stride) {
						throw new js__$Boot_HaxeError("Buffer is missing '" + s + "' data, set it to RAW format ?");
					}
				}
				this.gl.vertexAttribPointer(a1.index,a1.size,a1.type,false,m.stride * 4,pos1 * 4);
				if(this.currentDivisor[a1.index] != a1.divisor) {
					this.currentDivisor[a1.index] = a1.divisor;
					this.gl.vertexAttribDivisor(a1.index,a1.divisor);
				}
			}
		}
	}
	,draw: function(ibuf,startIndex,ntriangles) {
		if(ibuf != this.curIndexBuffer) {
			this.curIndexBuffer = ibuf;
			this.gl.bindBuffer(34963,ibuf.b);
		}
		if(ibuf.is32) {
			this.gl.drawElements(this.drawMode,ntriangles * 3,5125,startIndex * 4);
		} else {
			this.gl.drawElements(this.drawMode,ntriangles * 3,5123,startIndex * 2);
		}
	}
	,end: function() {
	}
	,isDisposed: function() {
		return this.gl.isContextLost();
	}
	,setRenderZone: function(x,y,width,height) {
		if(x == 0 && y == 0 && width < 0 && height < 0) {
			this.gl.disable(3089);
		} else {
			this.gl.enable(3089);
			if(this.curTarget == null) {
				y = this.bufferHeight - (y + height);
			}
			this.gl.scissor(x,y,width,height);
		}
	}
	,setDrawBuffers: function(k) {
		if(this.glES >= 3) {
			this.gl.drawBuffers(h3d_impl_GlDriver.CBUFFERS[k]);
		} else if(this.mrtExt != null) {
			this.mrtExt.drawBuffersWEBGL(h3d_impl_GlDriver.CBUFFERS[k]);
		}
	}
	,unbindTargets: function() {
		if(this.curTarget != null && this.numTargets > 1) {
			while(this.numTargets > 1) {
				this.gl.framebufferTexture2D(36160,36064 + --this.numTargets,3553,null,0);
				this.curTargets[this.numTargets] = null;
			}
			this.setDrawBuffers(1);
		}
	}
	,setRenderTarget: function(tex,layer,mipLevel) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
		this.unbindTargets();
		this.curTarget = tex;
		if(tex == null) {
			this.gl.bindFramebuffer(36160,null);
			this.gl.viewport(0,0,this.bufferWidth,this.bufferHeight);
			return;
		}
		if(tex.depthBuffer != null && (tex.depthBuffer.width != tex.width || tex.depthBuffer.height != tex.height)) {
			throw new js__$Boot_HaxeError("Invalid depth buffer size : does not match render target size");
		}
		if(mipLevel > 0 && this.glES == 1) {
			throw new js__$Boot_HaxeError("Cannot render to mipLevel in WebGL1, use upload() instead");
		}
		if(tex.t == null) {
			tex.alloc();
		}
		if((tex.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) != 0 && (tex.flags & 1 << h3d_mat_TextureFlags.WasCleared._hx_index) == 0) {
			var bind = this.getBindType(tex);
			this.gl.bindTexture(bind,tex.t.t);
			this.gl.generateMipmap(bind);
			this.restoreBind();
		}
		tex.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		tex.set_lastFrame(this.frame);
		this.curTargetLayer = layer;
		this.curTargetMip = mipLevel;
		this.gl.bindFramebuffer(36160,this.commonFB);
		if((tex.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0) {
			this.gl.framebufferTextureLayer(36160,36064,tex.t.t,mipLevel,layer);
		} else {
			this.gl.framebufferTexture2D(36160,36064,(tex.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0 ? h3d_impl_GlDriver.CUBE_FACES[layer] : 3553,tex.t.t,mipLevel);
		}
		if(tex.depthBuffer != null) {
			this.gl.framebufferRenderbuffer(36160,36096,36161,tex.depthBuffer.b.r);
			this.gl.framebufferRenderbuffer(36160,36128,36161,tex.depthBuffer.hasStencil() ? tex.depthBuffer.b.r : null);
		} else {
			this.gl.framebufferRenderbuffer(36160,36096,36161,null);
			this.gl.framebufferRenderbuffer(36160,36128,36161,null);
		}
		this.gl.viewport(0,0,tex.width >> mipLevel,tex.height >> mipLevel);
		var _g = 0;
		var _g1 = this.boundTextures.length;
		while(_g < _g1) {
			var i = _g++;
			this.boundTextures[i] = null;
		}
		if(this.glDebug) {
			var code = this.gl.checkFramebufferStatus(36160);
			if(code != 36053) {
				throw new js__$Boot_HaxeError("Invalid frame buffer: " + code);
			}
		}
	}
	,init: function(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
		var ready = false;
		if(window.document.readyState == "complete") {
			var f = onCreate;
			haxe_Timer.delay(function() {
				f(false);
			},1);
		} else {
			window.addEventListener("load",function(_) {
				if(!ready) {
					ready = true;
					onCreate(false);
				}
			});
		}
	}
	,hasFeature: function(f) {
		return this.features.get(f);
	}
	,features: null
	,makeFeatures: function() {
		var _g = 0;
		var _g1 = h3d_impl_Feature.__empty_constructs__.slice();
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.features.set(f,this.checkFeature(f));
		}
		if(this.gl.getExtension("WEBGL_compressed_texture_s3tc") != null) {
			this.maxCompressedTexturesSupport = 3;
		}
	}
	,checkFeature: function(f) {
		switch(f._hx_index) {
		case 0:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("OES_standard_derivatives") != null;
			}
			break;
		case 1:
			if(this.glES >= 3) {
				if(this.gl.getExtension("EXT_color_buffer_float") != null) {
					return this.gl.getExtension("OES_texture_float_linear") != null;
				} else {
					return false;
				}
			} else if(this.gl.getExtension("OES_texture_float") != null && this.gl.getExtension("OES_texture_float_linear") != null && this.gl.getExtension("OES_texture_half_float") != null) {
				return this.gl.getExtension("OES_texture_half_float_linear") != null;
			} else {
				return false;
			}
			break;
		case 4:
			if(this.glES >= 3) {
				return true;
			} else if(this.mrtExt == null) {
				return (this.mrtExt = this.gl.getExtension("WEBGL_draw_buffers")) != null;
			} else {
				return true;
			}
			break;
		case 6:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("EXT_sRGB") != null;
			}
			break;
		case 7:
			if(this.glES >= 3) {
				return true;
			} else {
				return false;
			}
			break;
		case 2:case 3:case 8:case 9:
			return true;
		default:
			return false;
		}
	}
	,__class__: h3d_impl_GlDriver
});
var h3d_impl__$ManagedBuffer_FreeCell = function(pos,count,next) {
	this.pos = pos;
	this.count = count;
	this.next = next;
};
$hxClasses["h3d.impl._ManagedBuffer.FreeCell"] = h3d_impl__$ManagedBuffer_FreeCell;
h3d_impl__$ManagedBuffer_FreeCell.__name__ = "h3d.impl._ManagedBuffer.FreeCell";
h3d_impl__$ManagedBuffer_FreeCell.prototype = {
	pos: null
	,count: null
	,next: null
	,__class__: h3d_impl__$ManagedBuffer_FreeCell
};
var h3d_impl_ManagedBuffer = function(stride,size,flags) {
	var this1 = 0;
	this.flags = this1;
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f._hx_index;
		}
	}
	this.size = size;
	this.stride = stride;
	this.freeList = new h3d_impl__$ManagedBuffer_FreeCell(0,size,null);
	this.mem = h3d_Engine.CURRENT.mem;
	this.mem.allocManaged(this);
};
$hxClasses["h3d.impl.ManagedBuffer"] = h3d_impl_ManagedBuffer;
h3d_impl_ManagedBuffer.__name__ = "h3d.impl.ManagedBuffer";
h3d_impl_ManagedBuffer.prototype = {
	mem: null
	,stride: null
	,size: null
	,flags: null
	,vbuf: null
	,freeList: null
	,next: null
	,uploadVertexBuffer: function(start,vertices,buf,bufPos) {
		if(bufPos == null) {
			bufPos = 0;
		}
		this.mem.driver.uploadVertexBuffer(this.vbuf,start,vertices,buf,bufPos);
	}
	,allocPosition: function(nvert,align) {
		var free = this.freeList;
		while(free != null) {
			if(free.count >= nvert) {
				var d = (align - free.pos % align) % align;
				if(d == 0) {
					break;
				}
				if(free.count >= nvert + d) {
					free.next = new h3d_impl__$ManagedBuffer_FreeCell(free.pos + d,free.count - d,free.next);
					free.count = d;
					free = free.next;
					break;
				}
			}
			free = free.next;
		}
		if(free == null) {
			return -1;
		}
		var pos = free.pos;
		free.pos += nvert;
		free.count -= nvert;
		return pos;
	}
	,allocBuffer: function(b) {
		var align = (b.flags & 1 << h3d_BufferFlag.Quads._hx_index) != 0 ? 4 : (b.flags & 1 << h3d_BufferFlag.Triangles._hx_index) != 0 ? 3 : 1;
		var p = this.allocPosition(b.vertices,align);
		if(p < 0) {
			return false;
		}
		b.position = p;
		b.buffer = this;
		return true;
	}
	,freeBuffer: function(b) {
		var prev = null;
		var f = this.freeList;
		var nvert = b.vertices;
		var end = b.position + nvert;
		while(f != null) {
			if(f.pos == end) {
				f.pos -= nvert;
				f.count += nvert;
				if(prev != null && prev.pos + prev.count == f.pos) {
					prev.count += f.count;
					prev.next = f.next;
				}
				nvert = 0;
				break;
			}
			if(f.pos > end) {
				if(prev != null && prev.pos + prev.count == b.position) {
					prev.count += nvert;
				} else {
					var n = new h3d_impl__$ManagedBuffer_FreeCell(b.position,nvert,f);
					if(prev == null) {
						this.freeList = n;
					} else {
						prev.next = n;
					}
				}
				nvert = 0;
				break;
			}
			prev = f;
			f = f.next;
		}
		if(nvert != 0) {
			throw new js__$Boot_HaxeError("assert");
		}
		if(this.freeList.count == this.size && (this.flags & 1 << h3d_BufferFlag.Managed._hx_index) == 0) {
			this.dispose();
		}
	}
	,dispose: function() {
		this.mem.freeManaged(this);
	}
	,__class__: h3d_impl_ManagedBuffer
};
var h3d_impl_MemoryManager = function(driver) {
	this.bufferCount = 0;
	this.texMemory = 0;
	this.usedMemory = 0;
	this.driver = driver;
};
$hxClasses["h3d.impl.MemoryManager"] = h3d_impl_MemoryManager;
h3d_impl_MemoryManager.__name__ = "h3d.impl.MemoryManager";
h3d_impl_MemoryManager.prototype = {
	driver: null
	,buffers: null
	,indexes: null
	,textures: null
	,depths: null
	,triIndexes: null
	,quadIndexes: null
	,usedMemory: null
	,texMemory: null
	,bufferCount: null
	,init: function() {
		this.indexes = [];
		this.textures = [];
		this.buffers = [];
		this.depths = [];
		this.initIndexes();
	}
	,initIndexes: function() {
		var this1 = new Array(0);
		var indices = this1;
		var _g = 0;
		while(_g < 65533) {
			var i = _g++;
			indices.push(i);
		}
		this.triIndexes = h3d_Indexes.alloc(indices);
		var this2 = new Array(0);
		var indices1 = this2;
		var p = 0;
		var _g1 = 0;
		var _g2 = 16383;
		while(_g1 < _g2) {
			var i1 = _g1++;
			var k = i1 << 2;
			indices1.push(k);
			indices1.push(k + 1);
			indices1.push(k + 2);
			indices1.push(k + 2);
			indices1.push(k + 1);
			indices1.push(k + 3);
		}
		indices1.push(65533);
		this.quadIndexes = h3d_Indexes.alloc(indices1);
	}
	,garbage: function() {
	}
	,cleanManagedBuffers: function() {
		var _g = 1;
		var _g1 = this.buffers.length;
		while(_g < _g1) {
			var i = _g++;
			var b = this.buffers[i];
			var prev = null;
			while(b != null) {
				if(b.freeList.count == b.size) {
					b.dispose();
					if(prev == null) {
						this.buffers[i] = b.next;
					} else {
						prev.next = b.next;
					}
				} else {
					prev = b;
				}
				b = b.next;
			}
		}
	}
	,allocManaged: function(m) {
		if(m.vbuf != null) {
			return;
		}
		var mem = m.size * m.stride * 4;
		if(mem == 0) {
			return;
		}
		while(this.usedMemory + mem > 4294967296. || this.bufferCount >= 65536 || (m.vbuf = this.driver.allocVertexes(m)) == null) {
			if(this.driver.isDisposed()) {
				return;
			}
			var size = this.usedMemory - this.freeMemorySize();
			this.garbage();
			this.cleanManagedBuffers();
			if(this.usedMemory - this.freeMemorySize() == size) {
				if(this.bufferCount >= 65536) {
					throw new js__$Boot_HaxeError("Too many buffers");
				}
				throw new js__$Boot_HaxeError("Memory full (" + Math.ceil(size / 1024) + " KB," + this.bufferCount + " buffers)");
			}
		}
		this.usedMemory += mem;
		this.bufferCount++;
	}
	,freeManaged: function(m) {
		if(m.vbuf == null) {
			return;
		}
		this.driver.disposeVertexes(m.vbuf);
		m.vbuf = null;
		this.usedMemory -= m.size * m.stride * 4;
		this.bufferCount--;
		if((m.flags & 1 << h3d_BufferFlag.Managed._hx_index) == 0) {
			var c = this.buffers[0];
			var prev = null;
			while(c != null) {
				if(c == m) {
					if(prev == null) {
						this.buffers[0] = m.next;
					} else {
						prev.next = m.next;
					}
					break;
				}
				prev = c;
				c = c.next;
			}
		}
	}
	,allocBuffer: function(b,stride) {
		var max = (b.flags & 1 << h3d_BufferFlag.Quads._hx_index) != 0 ? 65532 : (b.flags & 1 << h3d_BufferFlag.Triangles._hx_index) != 0 ? 65533 : 65534;
		if(b.vertices > max) {
			if(max == 65534) {
				throw new js__$Boot_HaxeError("Cannot split buffer with " + b.vertices + " vertices if it's not Quads/Triangles");
			}
			var rem = b.vertices - max;
			b.vertices = max;
			this.allocBuffer(b,stride);
			var n = b;
			while(n.next != null) n = n.next;
			var flags = [];
			var _g = 0;
			var _g1 = h3d_impl_MemoryManager.ALL_FLAGS;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				if((b.flags & 1 << f._hx_index) != 0) {
					flags.push(f);
				}
			}
			n.next = new h3d_Buffer(rem,stride,flags);
			return;
		}
		if((b.flags & 1 << h3d_BufferFlag.Managed._hx_index) == 0) {
			var flags1 = null;
			if((b.flags & 1 << h3d_BufferFlag.Dynamic._hx_index) != 0) {
				if(flags1 == null) {
					flags1 = [];
				}
				flags1.push(h3d_BufferFlag.Dynamic);
			}
			if((b.flags & 1 << h3d_BufferFlag.UniformBuffer._hx_index) != 0) {
				if(flags1 == null) {
					flags1 = [];
				}
				flags1.push(h3d_BufferFlag.UniformBuffer);
			}
			var m = new h3d_impl_ManagedBuffer(stride,b.vertices,flags1);
			m.next = this.buffers[0];
			this.buffers[0] = m;
			if(!m.allocBuffer(b)) {
				throw new js__$Boot_HaxeError("assert");
			}
			return;
		}
		var m1 = this.buffers[stride];
		var prev = null;
		while(m1 != null) {
			if(m1.allocBuffer(b)) {
				return;
			}
			prev = m1;
			m1 = m1.next;
		}
		var align = (b.flags & 1 << h3d_BufferFlag.Triangles._hx_index) != 0 ? 3 : (b.flags & 1 << h3d_BufferFlag.Quads._hx_index) != 0 ? 4 : 0;
		if(m1 == null && align > 0) {
			var total = b.vertices;
			var size = total;
			while(size > 2048) {
				m1 = this.buffers[stride];
				size >>= 1;
				size -= size % align;
				b.vertices = size;
				while(m1 != null) {
					if(m1.allocBuffer(b)) {
						var flags2 = [];
						var _g2 = 0;
						var _g11 = h3d_impl_MemoryManager.ALL_FLAGS;
						while(_g2 < _g11.length) {
							var f1 = _g11[_g2];
							++_g2;
							if((b.flags & 1 << f1._hx_index) != 0) {
								flags2.push(f1);
							}
						}
						b.next = new h3d_Buffer(total - size,stride,flags2);
						return;
					}
					m1 = m1.next;
				}
			}
			b.vertices = total;
		}
		m1 = new h3d_impl_ManagedBuffer(stride,65533,[h3d_BufferFlag.Managed]);
		if(prev == null) {
			this.buffers[stride] = m1;
		} else {
			prev.next = m1;
		}
		if(!m1.allocBuffer(b)) {
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,deleteIndexes: function(i) {
		HxOverrides.remove(this.indexes,i);
		this.driver.disposeIndexes(i.ibuf);
		i.ibuf = null;
		this.usedMemory -= i.count * (i.is32 ? 4 : 2);
	}
	,allocIndexes: function(i) {
		i.ibuf = this.driver.allocIndexes(i.count,i.is32);
		this.indexes.push(i);
		this.usedMemory += i.count * (i.is32 ? 4 : 2);
	}
	,bpp: function(t) {
		return 4;
	}
	,cleanTextures: function(force) {
		if(force == null) {
			force = true;
		}
		this.textures.sort($bind(this,this.sortByLRU));
		var _g = 0;
		var _g1 = this.textures;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(t.realloc == null || t.t == null && t.realloc == null) {
				continue;
			}
			if(force || t.get_lastFrame() < hxd_Timer.frameCount - 3600) {
				t.dispose();
				return true;
			}
		}
		return false;
	}
	,sortByLRU: function(t1,t2) {
		return t1.get_lastFrame() - t2.get_lastFrame();
	}
	,deleteTexture: function(t) {
		if(!HxOverrides.remove(this.textures,t)) {
			return;
		}
		this.driver.disposeTexture(t);
		this.texMemory -= t.width * t.height * this.bpp(t);
	}
	,allocTexture: function(t) {
		var free = this.cleanTextures(false);
		t.t = this.driver.allocTexture(t);
		if(t.t == null) {
			if(this.driver.isDisposed()) {
				return;
			}
			if(!this.cleanTextures(true)) {
				throw new js__$Boot_HaxeError("Maximum texture memory reached");
			}
			this.allocTexture(t);
			return;
		}
		this.textures.push(t);
		this.texMemory += t.width * t.height * this.bpp(t);
	}
	,allocDepth: function(b) {
		var free = this.cleanTextures(false);
		b.b = this.driver.allocDepthBuffer(b);
		if(b.b == null) {
			if(this.driver.isDisposed()) {
				return;
			}
			if(!this.cleanTextures(true)) {
				throw new js__$Boot_HaxeError("Maximum texture memory reached");
			}
			this.allocDepth(b);
			return;
		}
		this.depths.push(b);
		this.texMemory += b.width * b.height * 4;
	}
	,deleteDepth: function(b) {
		if(!HxOverrides.remove(this.depths,b)) {
			return;
		}
		this.driver.disposeDepthBuffer(b);
		this.texMemory -= b.width * b.height * 4;
	}
	,onContextLost: function() {
		this.dispose();
		this.initIndexes();
	}
	,dispose: function() {
		if(this.triIndexes != null) {
			this.triIndexes.dispose();
		}
		if(this.quadIndexes != null) {
			this.quadIndexes.dispose();
		}
		this.triIndexes = null;
		this.quadIndexes = null;
		var _g = 0;
		var _g1 = this.textures.slice();
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			t.dispose();
		}
		var _g2 = 0;
		var _g3 = this.depths.slice();
		while(_g2 < _g3.length) {
			var b = _g3[_g2];
			++_g2;
			b.dispose();
		}
		var _g4 = 0;
		var _g5 = this.buffers.slice();
		while(_g4 < _g5.length) {
			var b1 = _g5[_g4];
			++_g4;
			var b2 = b1;
			while(b2 != null) {
				b2.dispose();
				b2 = b2.next;
			}
		}
		var _g6 = 0;
		var _g7 = this.indexes.slice();
		while(_g6 < _g7.length) {
			var i = _g7[_g6];
			++_g6;
			i.dispose();
		}
		this.buffers = [];
		this.indexes = [];
		this.textures = [];
		this.bufferCount = 0;
		this.usedMemory = 0;
		this.texMemory = 0;
	}
	,freeMemorySize: function() {
		var size = 0;
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			var b1 = b;
			while(b1 != null) {
				var free = b1.freeList;
				while(free != null) {
					size += free.count * b1.stride * 4;
					free = free.next;
				}
				b1 = b1.next;
			}
		}
		return size;
	}
	,__class__: h3d_impl_MemoryManager
};
var h3d_impl_TextureCache = function(ctx) {
	this.position = 0;
	this.ctx = ctx;
	this.cache = [];
	var engine = h3d_Engine.CURRENT;
	this.defaultFormat = h3d_mat_Texture.nativeFormat;
	this.defaultDepthBuffer = h3d_mat_DepthBuffer.getDefault();
};
$hxClasses["h3d.impl.TextureCache"] = h3d_impl_TextureCache;
h3d_impl_TextureCache.__name__ = "h3d.impl.TextureCache";
h3d_impl_TextureCache.prototype = {
	cache: null
	,position: null
	,defaultDepthBuffer: null
	,ctx: null
	,defaultFormat: null
	,begin: function() {
		while(this.cache.length > this.position) {
			var t = this.cache.pop();
			if(t != null) {
				t.dispose();
			}
		}
		this.position = 0;
	}
	,lookupTarget: function(name,width,height,format,isCube) {
		var t = this.cache[this.position];
		var _g = this.position + 1;
		var _g1 = this.cache.length;
		while(_g < _g1) {
			var i = _g++;
			var t2 = this.cache[i];
			if(t2 != null && !(t2.t == null && t2.realloc == null) && t2.width == width && t2.height == height && t2.format == format && isCube == ((t2.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0)) {
				this.cache[this.position] = t2;
				this.cache[i] = t;
				return t2;
			}
		}
		if(t != null && t.name == name) {
			t.dispose();
			t = null;
		}
		var flags = [h3d_mat_TextureFlags.Target];
		if(isCube) {
			flags.push(h3d_mat_TextureFlags.Cube);
		}
		var newt = new h3d_mat_Texture(width,height,flags,format);
		if(t != null) {
			this.cache.splice(this.position,0,newt);
		} else {
			this.cache[this.position] = newt;
		}
		return newt;
	}
	,allocTarget: function(name,width,height,defaultDepth,format,isCube) {
		if(isCube == null) {
			isCube = false;
		}
		if(defaultDepth == null) {
			defaultDepth = true;
		}
		var t = this.cache[this.position];
		if(format == null) {
			format = this.defaultFormat;
		}
		if(t == null || t.t == null && t.realloc == null || t.width != width || t.height != height || t.format != format || isCube != ((t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0)) {
			t = this.lookupTarget(name,width,height,format,isCube);
		}
		t.depthBuffer = defaultDepth ? this.defaultDepthBuffer : null;
		t.setName(name);
		this.position++;
		return t;
	}
	,allocTileTarget: function(name,tile,defaultDepth,format) {
		if(defaultDepth == null) {
			defaultDepth = false;
		}
		return this.allocTarget(name,Math.ceil(tile.width + tile.x) - Math.floor(tile.x),Math.ceil(tile.height + tile.y) - Math.floor(tile.y),defaultDepth,format);
	}
	,__class__: h3d_impl_TextureCache
};
var hxd_impl_AnyProps = function() { };
$hxClasses["hxd.impl.AnyProps"] = hxd_impl_AnyProps;
hxd_impl_AnyProps.__name__ = "hxd.impl.AnyProps";
hxd_impl_AnyProps.prototype = {
	props: null
	,set_props: function(p) {
		this.props = p;
		this.refreshProps();
		return p;
	}
	,getDefaultProps: function(kind) {
		return { };
	}
	,refreshProps: function() {
	}
	,__class__: hxd_impl_AnyProps
};
var h3d_mat_BaseMaterial = function(shader) {
	if(shader != null) {
		this.addPass(new h3d_mat_Pass("default",null)).addShader(shader);
	}
};
$hxClasses["h3d.mat.BaseMaterial"] = h3d_mat_BaseMaterial;
h3d_mat_BaseMaterial.__name__ = "h3d.mat.BaseMaterial";
h3d_mat_BaseMaterial.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_mat_BaseMaterial.__super__ = hxd_impl_AnyProps;
h3d_mat_BaseMaterial.prototype = $extend(hxd_impl_AnyProps.prototype,{
	passes: null
	,addPass: function(p) {
		var prev = null;
		var cur = this.passes;
		while(cur != null) {
			prev = cur;
			cur = cur.nextPass;
		}
		if(prev == null) {
			this.passes = p;
		} else {
			prev.nextPass = p;
		}
		p.nextPass = null;
		return p;
	}
	,removePass: function(p) {
		var prev = null;
		var cur = this.passes;
		while(cur != null) {
			if(cur == p) {
				if(prev == null) {
					this.passes = p.nextPass;
				} else {
					prev.nextPass = p.nextPass;
				}
				p.nextPass = null;
				return true;
			}
			prev = cur;
			cur = cur.nextPass;
		}
		return false;
	}
	,getPass: function(name) {
		var p = this.passes;
		while(p != null) {
			if(p.name == name) {
				return p;
			}
			p = p.nextPass;
		}
		return null;
	}
	,__class__: h3d_mat_BaseMaterial
});
var h3d_mat_Face = $hxEnums["h3d.mat.Face"] = { __ename__ : true, __constructs__ : ["None","Back","Front","Both"]
	,None: {_hx_index:0,__enum__:"h3d.mat.Face",toString:$estr}
	,Back: {_hx_index:1,__enum__:"h3d.mat.Face",toString:$estr}
	,Front: {_hx_index:2,__enum__:"h3d.mat.Face",toString:$estr}
	,Both: {_hx_index:3,__enum__:"h3d.mat.Face",toString:$estr}
};
h3d_mat_Face.__empty_constructs__ = [h3d_mat_Face.None,h3d_mat_Face.Back,h3d_mat_Face.Front,h3d_mat_Face.Both];
var h3d_mat_Blend = $hxEnums["h3d.mat.Blend"] = { __ename__ : true, __constructs__ : ["One","Zero","SrcAlpha","SrcColor","DstAlpha","DstColor","OneMinusSrcAlpha","OneMinusSrcColor","OneMinusDstAlpha","OneMinusDstColor","ConstantColor","ConstantAlpha","OneMinusConstantColor","OneMinusConstantAlpha","SrcAlphaSaturate"]
	,One: {_hx_index:0,__enum__:"h3d.mat.Blend",toString:$estr}
	,Zero: {_hx_index:1,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcAlpha: {_hx_index:2,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcColor: {_hx_index:3,__enum__:"h3d.mat.Blend",toString:$estr}
	,DstAlpha: {_hx_index:4,__enum__:"h3d.mat.Blend",toString:$estr}
	,DstColor: {_hx_index:5,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusSrcAlpha: {_hx_index:6,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusSrcColor: {_hx_index:7,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusDstAlpha: {_hx_index:8,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusDstColor: {_hx_index:9,__enum__:"h3d.mat.Blend",toString:$estr}
	,ConstantColor: {_hx_index:10,__enum__:"h3d.mat.Blend",toString:$estr}
	,ConstantAlpha: {_hx_index:11,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusConstantColor: {_hx_index:12,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusConstantAlpha: {_hx_index:13,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcAlphaSaturate: {_hx_index:14,__enum__:"h3d.mat.Blend",toString:$estr}
};
h3d_mat_Blend.__empty_constructs__ = [h3d_mat_Blend.One,h3d_mat_Blend.Zero,h3d_mat_Blend.SrcAlpha,h3d_mat_Blend.SrcColor,h3d_mat_Blend.DstAlpha,h3d_mat_Blend.DstColor,h3d_mat_Blend.OneMinusSrcAlpha,h3d_mat_Blend.OneMinusSrcColor,h3d_mat_Blend.OneMinusDstAlpha,h3d_mat_Blend.OneMinusDstColor,h3d_mat_Blend.ConstantColor,h3d_mat_Blend.ConstantAlpha,h3d_mat_Blend.OneMinusConstantColor,h3d_mat_Blend.OneMinusConstantAlpha,h3d_mat_Blend.SrcAlphaSaturate];
var h3d_mat_Compare = $hxEnums["h3d.mat.Compare"] = { __ename__ : true, __constructs__ : ["Always","Never","Equal","NotEqual","Greater","GreaterEqual","Less","LessEqual"]
	,Always: {_hx_index:0,__enum__:"h3d.mat.Compare",toString:$estr}
	,Never: {_hx_index:1,__enum__:"h3d.mat.Compare",toString:$estr}
	,Equal: {_hx_index:2,__enum__:"h3d.mat.Compare",toString:$estr}
	,NotEqual: {_hx_index:3,__enum__:"h3d.mat.Compare",toString:$estr}
	,Greater: {_hx_index:4,__enum__:"h3d.mat.Compare",toString:$estr}
	,GreaterEqual: {_hx_index:5,__enum__:"h3d.mat.Compare",toString:$estr}
	,Less: {_hx_index:6,__enum__:"h3d.mat.Compare",toString:$estr}
	,LessEqual: {_hx_index:7,__enum__:"h3d.mat.Compare",toString:$estr}
};
h3d_mat_Compare.__empty_constructs__ = [h3d_mat_Compare.Always,h3d_mat_Compare.Never,h3d_mat_Compare.Equal,h3d_mat_Compare.NotEqual,h3d_mat_Compare.Greater,h3d_mat_Compare.GreaterEqual,h3d_mat_Compare.Less,h3d_mat_Compare.LessEqual];
var h3d_mat_StencilOp = $hxEnums["h3d.mat.StencilOp"] = { __ename__ : true, __constructs__ : ["Keep","Zero","Replace","Increment","IncrementWrap","Decrement","DecrementWrap","Invert"]
	,Keep: {_hx_index:0,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Zero: {_hx_index:1,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Replace: {_hx_index:2,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Increment: {_hx_index:3,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,IncrementWrap: {_hx_index:4,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Decrement: {_hx_index:5,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,DecrementWrap: {_hx_index:6,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Invert: {_hx_index:7,__enum__:"h3d.mat.StencilOp",toString:$estr}
};
h3d_mat_StencilOp.__empty_constructs__ = [h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Zero,h3d_mat_StencilOp.Replace,h3d_mat_StencilOp.Increment,h3d_mat_StencilOp.IncrementWrap,h3d_mat_StencilOp.Decrement,h3d_mat_StencilOp.DecrementWrap,h3d_mat_StencilOp.Invert];
var h3d_mat_MipMap = $hxEnums["h3d.mat.MipMap"] = { __ename__ : true, __constructs__ : ["None","Nearest","Linear"]
	,None: {_hx_index:0,__enum__:"h3d.mat.MipMap",toString:$estr}
	,Nearest: {_hx_index:1,__enum__:"h3d.mat.MipMap",toString:$estr}
	,Linear: {_hx_index:2,__enum__:"h3d.mat.MipMap",toString:$estr}
};
h3d_mat_MipMap.__empty_constructs__ = [h3d_mat_MipMap.None,h3d_mat_MipMap.Nearest,h3d_mat_MipMap.Linear];
var h3d_mat_Filter = $hxEnums["h3d.mat.Filter"] = { __ename__ : true, __constructs__ : ["Nearest","Linear"]
	,Nearest: {_hx_index:0,__enum__:"h3d.mat.Filter",toString:$estr}
	,Linear: {_hx_index:1,__enum__:"h3d.mat.Filter",toString:$estr}
};
h3d_mat_Filter.__empty_constructs__ = [h3d_mat_Filter.Nearest,h3d_mat_Filter.Linear];
var h3d_mat_Wrap = $hxEnums["h3d.mat.Wrap"] = { __ename__ : true, __constructs__ : ["Clamp","Repeat"]
	,Clamp: {_hx_index:0,__enum__:"h3d.mat.Wrap",toString:$estr}
	,Repeat: {_hx_index:1,__enum__:"h3d.mat.Wrap",toString:$estr}
};
h3d_mat_Wrap.__empty_constructs__ = [h3d_mat_Wrap.Clamp,h3d_mat_Wrap.Repeat];
var h3d_mat_Operation = $hxEnums["h3d.mat.Operation"] = { __ename__ : true, __constructs__ : ["Add","Sub","ReverseSub","Min","Max"]
	,Add: {_hx_index:0,__enum__:"h3d.mat.Operation",toString:$estr}
	,Sub: {_hx_index:1,__enum__:"h3d.mat.Operation",toString:$estr}
	,ReverseSub: {_hx_index:2,__enum__:"h3d.mat.Operation",toString:$estr}
	,Min: {_hx_index:3,__enum__:"h3d.mat.Operation",toString:$estr}
	,Max: {_hx_index:4,__enum__:"h3d.mat.Operation",toString:$estr}
};
h3d_mat_Operation.__empty_constructs__ = [h3d_mat_Operation.Add,h3d_mat_Operation.Sub,h3d_mat_Operation.ReverseSub,h3d_mat_Operation.Min,h3d_mat_Operation.Max];
var h3d_mat_TextureFlags = $hxEnums["h3d.mat.TextureFlags"] = { __ename__ : true, __constructs__ : ["Target","Cube","MipMapped","ManualMipMapGen","IsNPOT","NoAlloc","Dynamic","AlphaPremultiplied","WasCleared","Loading","Serialize","IsArray"]
	,Target: {_hx_index:0,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Cube: {_hx_index:1,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,MipMapped: {_hx_index:2,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,ManualMipMapGen: {_hx_index:3,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,IsNPOT: {_hx_index:4,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,NoAlloc: {_hx_index:5,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Dynamic: {_hx_index:6,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,AlphaPremultiplied: {_hx_index:7,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,WasCleared: {_hx_index:8,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Loading: {_hx_index:9,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Serialize: {_hx_index:10,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,IsArray: {_hx_index:11,__enum__:"h3d.mat.TextureFlags",toString:$estr}
};
h3d_mat_TextureFlags.__empty_constructs__ = [h3d_mat_TextureFlags.Target,h3d_mat_TextureFlags.Cube,h3d_mat_TextureFlags.MipMapped,h3d_mat_TextureFlags.ManualMipMapGen,h3d_mat_TextureFlags.IsNPOT,h3d_mat_TextureFlags.NoAlloc,h3d_mat_TextureFlags.Dynamic,h3d_mat_TextureFlags.AlphaPremultiplied,h3d_mat_TextureFlags.WasCleared,h3d_mat_TextureFlags.Loading,h3d_mat_TextureFlags.Serialize,h3d_mat_TextureFlags.IsArray];
var h3d_mat_Defaults = function() { };
$hxClasses["h3d.mat.Defaults"] = h3d_mat_Defaults;
h3d_mat_Defaults.__name__ = "h3d.mat.Defaults";
h3d_mat_Defaults.get_shadowShader = function() {
	var s = h3d_mat_Defaults.shadowShader;
	if(s == null) {
		s = new h3d_shader_Shadow();
		h3d_mat_Defaults.set_shadowShader(s);
		h3d_mat_Defaults.shadowShader.setPriority(-1);
	}
	return s;
};
h3d_mat_Defaults.set_shadowShader = function(s) {
	return h3d_mat_Defaults.shadowShader = s;
};
var h3d_mat_DepthFormat = $hxEnums["h3d.mat.DepthFormat"] = { __ename__ : true, __constructs__ : ["Depth16","Depth24","Depth24Stencil8"]
	,Depth16: {_hx_index:0,__enum__:"h3d.mat.DepthFormat",toString:$estr}
	,Depth24: {_hx_index:1,__enum__:"h3d.mat.DepthFormat",toString:$estr}
	,Depth24Stencil8: {_hx_index:2,__enum__:"h3d.mat.DepthFormat",toString:$estr}
};
h3d_mat_DepthFormat.__empty_constructs__ = [h3d_mat_DepthFormat.Depth16,h3d_mat_DepthFormat.Depth24,h3d_mat_DepthFormat.Depth24Stencil8];
var h3d_mat_DepthBuffer = function(width,height,format) {
	this.width = width;
	this.height = height;
	this.format = format;
	if(width > 0) {
		this.alloc();
	}
};
$hxClasses["h3d.mat.DepthBuffer"] = h3d_mat_DepthBuffer;
h3d_mat_DepthBuffer.__name__ = "h3d.mat.DepthBuffer";
h3d_mat_DepthBuffer.getDefault = function() {
	return h3d_Engine.CURRENT.driver.getDefaultDepthBuffer();
};
h3d_mat_DepthBuffer.prototype = {
	b: null
	,width: null
	,height: null
	,format: null
	,hasStencil: function() {
		switch(this.format._hx_index) {
		case 0:case 1:
			return false;
		case 2:
			return true;
		}
	}
	,alloc: function() {
		h3d_Engine.CURRENT.mem.allocDepth(this);
	}
	,dispose: function() {
		if(this.b != null) {
			h3d_Engine.CURRENT.mem.deleteDepth(this);
			this.b = null;
		}
	}
	,isDisposed: function() {
		return this.b == null;
	}
	,__class__: h3d_mat_DepthBuffer
};
var h3d_mat_Material = function(texture) {
	this.mshader = new h3d_shader_BaseMesh();
	this.set_blendMode(h2d_BlendMode.None);
	h3d_mat_BaseMaterial.call(this,this.mshader);
	this.set_texture(texture);
};
$hxClasses["h3d.mat.Material"] = h3d_mat_Material;
h3d_mat_Material.__name__ = "h3d.mat.Material";
h3d_mat_Material.__super__ = h3d_mat_BaseMaterial;
h3d_mat_Material.prototype = $extend(h3d_mat_BaseMaterial.prototype,{
	mshader: null
	,castShadows: null
	,receiveShadows: null
	,staticShadows: null
	,textureShader: null
	,blendMode: null
	,set_castShadows: function(v) {
		if(this.castShadows == v) {
			return v;
		}
		if(this.passes != null) {
			if(v) {
				this.addPass(new h3d_mat_Pass("shadow",null,this.passes)).set_isStatic(this.staticShadows);
			} else {
				this.removePass(this.getPass("shadow"));
			}
		}
		return this.castShadows = v;
	}
	,set_receiveShadows: function(v) {
		if(v == this.receiveShadows) {
			return v;
		}
		if(this.passes != null) {
			var shadows = h3d_mat_Defaults.get_shadowShader();
			if(v) {
				this.passes.addShader(shadows);
			} else {
				this.passes.removeShader(shadows);
			}
		}
		return this.receiveShadows = v;
	}
	,set_blendMode: function(v) {
		if(this.passes != null) {
			this.passes.setBlendMode(v);
			switch(v._hx_index) {
			case 0:
				this.passes.set_depthWrite(true);
				this.passes.setPassName("default");
				break;
			case 1:
				this.passes.set_depthWrite(true);
				this.passes.setPassName("alpha");
				break;
			case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:
				this.passes.set_depthWrite(false);
				this.passes.setPassName("additive");
				break;
			}
		}
		return this.blendMode = v;
	}
	,set_texture: function(t) {
		if(t == null) {
			if(this.textureShader != null) {
				this.passes.removeShader(this.textureShader);
				this.textureShader = null;
			}
		} else {
			if(this.textureShader == null) {
				this.textureShader = new h3d_shader_Texture();
				this.passes.addShader(this.textureShader);
			}
			this.textureShader.texture__ = t;
		}
		return t;
	}
	,getDefaultProps: function(type) {
		var props;
		if(type == null) {
			props = { kind : "Opaque", shadows : true, culling : true, light : true};
		} else {
			switch(type) {
			case "particles3D":case "trail3D":
				props = { kind : "Alpha", shadows : false, culling : false, light : true};
				break;
			case "ui":
				props = { kind : "Alpha", shadows : false, culling : false, light : false};
				break;
			default:
				props = { kind : "Opaque", shadows : true, culling : true, light : true};
			}
		}
		return props;
	}
	,refreshProps: function() {
		if(this.props == null || this.passes == null) {
			return;
		}
		var props = this.props;
		switch(props.kind) {
		case "Add":
			this.set_blendMode(h2d_BlendMode.Add);
			break;
		case "Alpha":
			this.set_blendMode(h2d_BlendMode.Alpha);
			break;
		case "AlphaKill":case "Opaque":
			this.set_blendMode(h2d_BlendMode.None);
			break;
		case "SoftAdd":
			this.set_blendMode(h2d_BlendMode.SoftAdd);
			break;
		}
		var tshader = this.textureShader;
		if(tshader != null) {
			tshader.constModified = true;
			tshader.killAlpha__ = props.kind == "AlphaKill";
			tshader.killAlphaThreshold__ = 0.5;
		}
		this.passes.set_culling(props.culling ? h3d_mat_Face.Back : h3d_mat_Face.None);
		this.passes.set_enableLights(props.light);
		var v = props.shadows;
		this.set_castShadows(v);
		this.set_receiveShadows(v);
		if(this.castShadows && this.receiveShadows) {
			this.getPass("shadow").set_culling(this.passes.culling);
		}
	}
	,__class__: h3d_mat_Material
});
var h3d_mat_MaterialDatabase = function() {
};
$hxClasses["h3d.mat.MaterialDatabase"] = h3d_mat_MaterialDatabase;
h3d_mat_MaterialDatabase.__name__ = "h3d.mat.MaterialDatabase";
h3d_mat_MaterialDatabase.prototype = {
	__class__: h3d_mat_MaterialDatabase
};
var h3d_mat_MaterialSetup = function(name) {
	if(this.database == null) {
		this.database = new h3d_mat_MaterialDatabase();
	}
	this.name = name;
};
$hxClasses["h3d.mat.MaterialSetup"] = h3d_mat_MaterialSetup;
h3d_mat_MaterialSetup.__name__ = "h3d.mat.MaterialSetup";
h3d_mat_MaterialSetup.prototype = {
	name: null
	,database: null
	,createRenderer: function() {
		return new h3d_scene_fwd_Renderer();
	}
	,createLightSystem: function() {
		return new h3d_scene_fwd_LightSystem();
	}
	,createMaterial: function() {
		return new h3d_mat_Material();
	}
	,__class__: h3d_mat_MaterialSetup
};
var h3d_mat_Pass = function(name,shaders,parent) {
	this.layer = 0;
	this.bits = 0;
	this.parentPass = parent;
	this.shaders = shaders;
	this.setPassName(name);
	this.set_culling(h3d_mat_Face.Back);
	var src = h3d_mat_Blend.One;
	var dst = h3d_mat_Blend.Zero;
	this.set_blendSrc(src);
	this.set_blendAlphaSrc(src);
	this.set_blendDst(dst);
	this.set_blendAlphaDst(dst);
	this.depth(true,h3d_mat_Compare.Less);
	this.set_blendOp(this.set_blendAlphaOp(h3d_mat_Operation.Add));
	this.colorMask = 15;
};
$hxClasses["h3d.mat.Pass"] = h3d_mat_Pass;
h3d_mat_Pass.__name__ = "h3d.mat.Pass";
h3d_mat_Pass.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_mat_Pass.prototype = {
	name: null
	,flags: null
	,passId: null
	,bits: null
	,parentPass: null
	,parentShaders: null
	,shaders: null
	,nextPass: null
	,enableLights: null
	,dynamicParameters: null
	,isStatic: null
	,batchMode: null
	,culling: null
	,depthWrite: null
	,depthTest: null
	,blendSrc: null
	,blendDst: null
	,blendAlphaSrc: null
	,blendAlphaDst: null
	,blendOp: null
	,blendAlphaOp: null
	,colorMask: null
	,layer: null
	,stencil: null
	,setPassName: function(name) {
		this.name = name;
		this.passId = hxsl_Globals.allocID(name);
	}
	,setBlendMode: function(b) {
		switch(b._hx_index) {
		case 0:
			var src = h3d_mat_Blend.One;
			var dst = h3d_mat_Blend.Zero;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 1:
			var src1 = h3d_mat_Blend.SrcAlpha;
			var dst1 = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src1);
			this.set_blendAlphaSrc(src1);
			this.set_blendDst(dst1);
			this.set_blendAlphaDst(dst1);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 2:
			var src2 = h3d_mat_Blend.SrcAlpha;
			var dst2 = h3d_mat_Blend.One;
			this.set_blendSrc(src2);
			this.set_blendAlphaSrc(src2);
			this.set_blendDst(dst2);
			this.set_blendAlphaDst(dst2);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 3:
			var src3 = h3d_mat_Blend.One;
			var dst3 = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src3);
			this.set_blendAlphaSrc(src3);
			this.set_blendDst(dst3);
			this.set_blendAlphaDst(dst3);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 4:
			var src4 = h3d_mat_Blend.OneMinusDstColor;
			var dst4 = h3d_mat_Blend.One;
			this.set_blendSrc(src4);
			this.set_blendAlphaSrc(src4);
			this.set_blendDst(dst4);
			this.set_blendAlphaDst(dst4);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 5:
			var src5 = h3d_mat_Blend.DstColor;
			var dst5 = h3d_mat_Blend.Zero;
			this.set_blendSrc(src5);
			this.set_blendAlphaSrc(src5);
			this.set_blendDst(dst5);
			this.set_blendAlphaDst(dst5);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 6:
			var src6 = h3d_mat_Blend.DstColor;
			var dst6 = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src6);
			this.set_blendAlphaSrc(src6);
			this.set_blendDst(dst6);
			this.set_blendAlphaDst(dst6);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 7:
			var src7 = h3d_mat_Blend.Zero;
			var dst7 = h3d_mat_Blend.OneMinusSrcColor;
			this.set_blendSrc(src7);
			this.set_blendAlphaSrc(src7);
			this.set_blendDst(dst7);
			this.set_blendAlphaDst(dst7);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 8:
			var src8 = h3d_mat_Blend.One;
			var dst8 = h3d_mat_Blend.OneMinusSrcColor;
			this.set_blendSrc(src8);
			this.set_blendAlphaSrc(src8);
			this.set_blendDst(dst8);
			this.set_blendAlphaDst(dst8);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 9:
			var src9 = h3d_mat_Blend.SrcAlpha;
			var dst9 = h3d_mat_Blend.One;
			this.set_blendSrc(src9);
			this.set_blendAlphaSrc(src9);
			this.set_blendDst(dst9);
			this.set_blendAlphaDst(dst9);
			this.set_blendOp(h3d_mat_Operation.ReverseSub);
			this.set_blendAlphaOp(h3d_mat_Operation.ReverseSub);
			break;
		case 10:
			this.set_blendSrc(h3d_mat_Blend.Zero);
			this.set_blendAlphaSrc(h3d_mat_Blend.Zero);
			this.set_blendDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaSrc(h3d_mat_Blend.Zero);
			this.set_blendAlphaDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaOp(h3d_mat_Operation.Max);
			this.set_blendOp(h3d_mat_Operation.Max);
			break;
		case 11:
			this.set_blendSrc(h3d_mat_Blend.Zero);
			this.set_blendAlphaSrc(h3d_mat_Blend.Zero);
			this.set_blendDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaSrc(h3d_mat_Blend.Zero);
			this.set_blendAlphaDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaOp(h3d_mat_Operation.Min);
			this.set_blendOp(h3d_mat_Operation.Min);
			break;
		}
	}
	,depth: function(write,test) {
		this.set_depthWrite(write);
		this.set_depthTest(test);
	}
	,addShader: function(s) {
		if(s == null) {
			return null;
		}
		this.shaders = hxsl_ShaderList.addSort(s,this.shaders);
		return s;
	}
	,removeShader: function(s) {
		var sl = this.shaders;
		var prev = null;
		while(sl != null) {
			if(sl.s == s) {
				if(prev == null) {
					this.shaders = sl.next;
				} else {
					prev.next = sl.next;
				}
				return true;
			}
			prev = sl;
			sl = sl.next;
		}
		return false;
	}
	,getShadersRec: function() {
		if(this.parentPass == null || this.parentShaders == this.parentPass.shaders) {
			return this.shaders;
		}
		var s = this.shaders;
		var prev = null;
		while(s != null && s != this.parentShaders) {
			prev = s;
			s = s.next;
		}
		this.parentShaders = this.parentPass.shaders;
		if(prev == null) {
			this.shaders = this.parentShaders;
		} else {
			prev.next = this.parentShaders;
		}
		return this.shaders;
	}
	,set_enableLights: function(v) {
		this.flags = this.flags & -2 | (v ? 1 : 0);
		return this.enableLights = v;
	}
	,set_isStatic: function(v) {
		this.flags = this.flags & -5 | (v ? 1 : 0) << 2;
		return this.isStatic = v;
	}
	,set_culling: function(v) {
		this.bits = this.bits & -4 | v._hx_index;
		return this.culling = v;
	}
	,set_depthWrite: function(v) {
		this.bits = this.bits & -5 | (v ? 1 : 0) << 2;
		return this.depthWrite = v;
	}
	,set_depthTest: function(v) {
		this.bits = this.bits & -57 | v._hx_index << 3;
		return this.depthTest = v;
	}
	,set_blendSrc: function(v) {
		this.bits = this.bits & -961 | v._hx_index << 6;
		return this.blendSrc = v;
	}
	,set_blendDst: function(v) {
		this.bits = this.bits & -15361 | v._hx_index << 10;
		return this.blendDst = v;
	}
	,set_blendAlphaSrc: function(v) {
		this.bits = this.bits & -245761 | v._hx_index << 14;
		return this.blendAlphaSrc = v;
	}
	,set_blendAlphaDst: function(v) {
		this.bits = this.bits & -3932161 | v._hx_index << 18;
		return this.blendAlphaDst = v;
	}
	,set_blendOp: function(v) {
		this.bits = this.bits & -29360129 | v._hx_index << 22;
		return this.blendOp = v;
	}
	,set_blendAlphaOp: function(v) {
		this.bits = this.bits & -234881025 | v._hx_index << 25;
		return this.blendAlphaOp = v;
	}
	,__class__: h3d_mat_Pass
};
var h3d_mat_Stencil = function() {
	this.opBits = 0;
	this.maskBits = 0;
	this.setOp(h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Keep);
	this.setFunc(h3d_mat_Compare.Always);
};
$hxClasses["h3d.mat.Stencil"] = h3d_mat_Stencil;
h3d_mat_Stencil.__name__ = "h3d.mat.Stencil";
h3d_mat_Stencil.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_mat_Stencil.prototype = {
	maskBits: null
	,opBits: null
	,readMask: null
	,writeMask: null
	,reference: null
	,frontTest: null
	,frontPass: null
	,frontSTfail: null
	,frontDPfail: null
	,backTest: null
	,backPass: null
	,backSTfail: null
	,backDPfail: null
	,setFront: function(stfail,dpfail,pass) {
		this.set_frontSTfail(stfail);
		this.set_frontDPfail(dpfail);
		this.set_frontPass(pass);
	}
	,setBack: function(stfail,dpfail,pass) {
		this.set_backSTfail(stfail);
		this.set_backDPfail(dpfail);
		this.set_backPass(pass);
	}
	,setOp: function(stfail,dpfail,pass) {
		this.setFront(stfail,dpfail,pass);
		this.setBack(stfail,dpfail,pass);
	}
	,setFunc: function(f,reference,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		if(reference == null) {
			reference = 0;
		}
		this.set_frontTest(this.set_backTest(f));
		this.set_reference(reference);
		this.set_readMask(readMask);
		this.set_writeMask(writeMask);
	}
	,set_readMask: function(v) {
		this.maskBits = this.maskBits & -256 | v & 255;
		return this.readMask = v;
	}
	,set_writeMask: function(v) {
		this.maskBits = this.maskBits & -65281 | (v & 255) << 8;
		return this.writeMask = v;
	}
	,set_reference: function(v) {
		this.maskBits = this.maskBits & -16711681 | (v & 255) << 16;
		return this.reference = v;
	}
	,set_frontTest: function(v) {
		this.opBits = this.opBits & -8 | v._hx_index;
		return this.frontTest = v;
	}
	,set_frontPass: function(v) {
		this.opBits = this.opBits & -57 | v._hx_index << 3;
		return this.frontPass = v;
	}
	,set_frontSTfail: function(v) {
		this.opBits = this.opBits & -449 | v._hx_index << 6;
		return this.frontSTfail = v;
	}
	,set_frontDPfail: function(v) {
		this.opBits = this.opBits & -3585 | v._hx_index << 9;
		return this.frontDPfail = v;
	}
	,set_backTest: function(v) {
		this.opBits = this.opBits & -28673 | v._hx_index << 12;
		return this.backTest = v;
	}
	,set_backPass: function(v) {
		this.opBits = this.opBits & -229377 | v._hx_index << 15;
		return this.backPass = v;
	}
	,set_backSTfail: function(v) {
		this.opBits = this.opBits & -1835009 | v._hx_index << 18;
		return this.backSTfail = v;
	}
	,set_backDPfail: function(v) {
		this.opBits = this.opBits & -14680065 | v._hx_index << 21;
		return this.backDPfail = v;
	}
	,__class__: h3d_mat_Stencil
};
var hxd_PixelFormat = $hxEnums["hxd.PixelFormat"] = { __ename__ : true, __constructs__ : ["ARGB","BGRA","RGBA","RGBA16F","RGBA32F","R8","R16F","R32F","RG8","RG16F","RG32F","RGB8","RGB16F","RGB32F","SRGB","SRGB_ALPHA","RGB10A2","RG11B10UF","S3TC"]
	,ARGB: {_hx_index:0,__enum__:"hxd.PixelFormat",toString:$estr}
	,BGRA: {_hx_index:1,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA: {_hx_index:2,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA16F: {_hx_index:3,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA32F: {_hx_index:4,__enum__:"hxd.PixelFormat",toString:$estr}
	,R8: {_hx_index:5,__enum__:"hxd.PixelFormat",toString:$estr}
	,R16F: {_hx_index:6,__enum__:"hxd.PixelFormat",toString:$estr}
	,R32F: {_hx_index:7,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG8: {_hx_index:8,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG16F: {_hx_index:9,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG32F: {_hx_index:10,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB8: {_hx_index:11,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB16F: {_hx_index:12,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB32F: {_hx_index:13,__enum__:"hxd.PixelFormat",toString:$estr}
	,SRGB: {_hx_index:14,__enum__:"hxd.PixelFormat",toString:$estr}
	,SRGB_ALPHA: {_hx_index:15,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB10A2: {_hx_index:16,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG11B10UF: {_hx_index:17,__enum__:"hxd.PixelFormat",toString:$estr}
	,S3TC: ($_=function(v) { return {_hx_index:18,v:v,__enum__:"hxd.PixelFormat",toString:$estr}; },$_.__params__ = ["v"],$_)
};
hxd_PixelFormat.__empty_constructs__ = [hxd_PixelFormat.ARGB,hxd_PixelFormat.BGRA,hxd_PixelFormat.RGBA,hxd_PixelFormat.RGBA16F,hxd_PixelFormat.RGBA32F,hxd_PixelFormat.R8,hxd_PixelFormat.R16F,hxd_PixelFormat.R32F,hxd_PixelFormat.RG8,hxd_PixelFormat.RG16F,hxd_PixelFormat.RG32F,hxd_PixelFormat.RGB8,hxd_PixelFormat.RGB16F,hxd_PixelFormat.RGB32F,hxd_PixelFormat.SRGB,hxd_PixelFormat.SRGB_ALPHA,hxd_PixelFormat.RGB10A2,hxd_PixelFormat.RG11B10UF];
var h3d_mat_Texture = function(w,h,flags,format,allocPos) {
	var engine = h3d_Engine.CURRENT;
	this.mem = engine.mem;
	if(format == null) {
		format = h3d_mat_Texture.nativeFormat;
	}
	this.id = ++h3d_mat_Texture.UID;
	this.format = format;
	var this1 = 0;
	this.flags = this1;
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f._hx_index;
		}
	}
	var tw = 1;
	var th = 1;
	while(tw < w) tw <<= 1;
	while(th < h) th <<= 1;
	if(tw != w || th != h) {
		this.flags |= 1 << h3d_mat_TextureFlags.IsNPOT._hx_index;
	}
	if((this.flags & 1 << h3d_mat_TextureFlags.Target._hx_index) != 0) {
		this.realloc = function() {
		};
	}
	this.width = w;
	this.height = h;
	this.set_mipMap((this.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) != 0 ? h3d_mat_MipMap.Nearest : h3d_mat_MipMap.None);
	this.set_filter(h3d_mat_Filter.Linear);
	this.set_wrap(h3d_mat_Wrap.Clamp);
	this.bits &= 32767;
	if((this.flags & 1 << h3d_mat_TextureFlags.NoAlloc._hx_index) == 0) {
		this.alloc();
	}
};
$hxClasses["h3d.mat.Texture"] = h3d_mat_Texture;
h3d_mat_Texture.__name__ = "h3d.mat.Texture";
h3d_mat_Texture.fromPixels = function(pixels,allocPos) {
	var t = new h3d_mat_Texture(pixels.width,pixels.height,null,null,allocPos);
	t.uploadPixels(pixels);
	return t;
};
h3d_mat_Texture.fromColor = function(color,alpha,allocPos) {
	if(alpha == null) {
		alpha = 1.;
	}
	var engine = h3d_Engine.CURRENT;
	var aval = alpha * 255 | 0;
	if(aval < 0) {
		aval = 0;
	} else if(aval > 255) {
		aval = 255;
	}
	var key = color & 16777215 | aval << 24;
	var t = engine.textureColorCache.h[key];
	if(t != null) {
		return t;
	}
	var t1 = new h3d_mat_Texture(1,1,null,null,allocPos);
	t1.clear(color,alpha);
	t1.realloc = function() {
		t1.clear(color,alpha);
	};
	engine.textureColorCache.h[key] = t1;
	return t1;
};
h3d_mat_Texture.defaultCubeTexture = function() {
	var engine = h3d_Engine.CURRENT;
	var t = engine.resCache.h[h3d_mat_Texture.__id__];
	if(t != null) {
		return t;
	}
	t = new h3d_mat_Texture(1,1,[h3d_mat_TextureFlags.Cube]);
	t.clear(2105376);
	t.realloc = function() {
		t.clear(2105376);
	};
	engine.resCache.set(h3d_mat_Texture,t);
	return t;
};
h3d_mat_Texture.prototype = {
	t: null
	,mem: null
	,id: null
	,name: null
	,width: null
	,height: null
	,flags: null
	,format: null
	,bits: null
	,waitLoads: null
	,mipMap: null
	,filter: null
	,wrap: null
	,realloc: null
	,depthBuffer: null
	,_lastFrame: null
	,set_lastFrame: function(lf) {
		if(this._lastFrame != h3d_mat_Texture.PREVENT_AUTO_DISPOSE) {
			this._lastFrame = lf;
		}
		return this._lastFrame;
	}
	,get_lastFrame: function() {
		return this._lastFrame;
	}
	,get_layerCount: function() {
		if((this.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0) {
			return 6;
		} else {
			return 1;
		}
	}
	,alloc: function() {
		if(this.t == null) {
			this.mem.allocTexture(this);
		}
	}
	,toString: function() {
		var str = this.name;
		if(this.name == null) {
			str = "Texture_" + this.id;
		}
		return str + "(" + this.width + "x" + this.height + ")";
	}
	,setName: function(n) {
		this.name = n;
	}
	,set_mipMap: function(m) {
		this.bits = this.bits & -4 | m._hx_index;
		return this.mipMap = m;
	}
	,set_filter: function(f) {
		this.bits = this.bits & -25 | f._hx_index << 3;
		return this.filter = f;
	}
	,set_wrap: function(w) {
		this.bits = this.bits & -193 | w._hx_index << 6;
		return this.wrap = w;
	}
	,resize: function(width,height) {
		this.dispose();
		var tw = 1;
		var th = 1;
		while(tw < width) tw <<= 1;
		while(th < height) th <<= 1;
		if(tw != width || th != height) {
			this.flags |= 1 << h3d_mat_TextureFlags.IsNPOT._hx_index;
		} else {
			this.flags &= -1 - (1 << h3d_mat_TextureFlags.IsNPOT._hx_index);
		}
		this.width = width;
		this.height = height;
		if((this.flags & 1 << h3d_mat_TextureFlags.NoAlloc._hx_index) == 0) {
			this.alloc();
		}
	}
	,clear: function(color,alpha,layer) {
		if(layer == null) {
			layer = -1;
		}
		if(alpha == null) {
			alpha = 1.;
		}
		this.alloc();
		if((this.flags & 1 << h3d_mat_TextureFlags.Target._hx_index) != 0 || true) {
			var engine = h3d_Engine.CURRENT;
			color |= ((alpha < 0. ? 0. : alpha > 1. ? 1. : alpha) * 255 | 0) << 24;
			if(layer < 0) {
				var _g = 0;
				var _g1 = this.get_layerCount();
				while(_g < _g1) {
					var i = _g++;
					engine.pushTarget(this,i);
					engine.clear(color);
					engine.popTarget();
				}
			} else {
				engine.pushTarget(this,layer);
				engine.clear(color);
				engine.popTarget();
			}
		} else {
			var p = hxd_Pixels.alloc(this.width,this.height,h3d_mat_Texture.nativeFormat);
			var k = 0;
			var b = color & 255;
			var g = color >> 8 & 255;
			var r = color >> 16 & 255;
			var a = alpha * 255 | 0;
			if(a < 0) {
				a = 0;
			} else if(a > 255) {
				a = 255;
			}
			switch(h3d_mat_Texture.nativeFormat._hx_index) {
			case 1:
				var tmp = r;
				r = b;
				b = tmp;
				break;
			case 2:
				break;
			default:
				throw new js__$Boot_HaxeError("TODO");
			}
			var _g11 = 0;
			var _g2 = this.width * this.height;
			while(_g11 < _g2) {
				var i1 = _g11++;
				p.bytes.b[k++] = r;
				p.bytes.b[k++] = g;
				p.bytes.b[k++] = b;
				p.bytes.b[k++] = a;
			}
			if(layer < 0) {
				var _g3 = 0;
				var _g4 = this.get_layerCount();
				while(_g3 < _g4) {
					var i2 = _g3++;
					this.uploadPixels(p,0,i2);
				}
			} else {
				this.uploadPixels(p,0,layer);
			}
			p.dispose();
		}
	}
	,checkMipMapGen: function(mipLevel,layer) {
		if(mipLevel == 0 && (this.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) != 0 && (this.flags & 1 << h3d_mat_TextureFlags.ManualMipMapGen._hx_index) == 0 && ((this.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) == 0 || layer == 5)) {
			this.mem.driver.generateMipMaps(this);
		}
	}
	,uploadBitmap: function(bmp,mipLevel,layer) {
		if(layer == null) {
			layer = 0;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		this.alloc();
		var width = bmp.ctx.canvas.width;
		var height = bmp.ctx.canvas.height;
		if(width != this.width >> mipLevel || height != this.height >> mipLevel) {
			throw new js__$Boot_HaxeError("Invalid upload size : " + width + "x" + height + " should be " + (this.width >> mipLevel) + "x" + (this.height >> mipLevel));
		}
		this.mem.driver.uploadTextureBitmap(this,bmp,mipLevel,layer);
		this.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		this.checkMipMapGen(mipLevel,layer);
	}
	,uploadPixels: function(pixels,mipLevel,layer) {
		if(layer == null) {
			layer = 0;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		this.alloc();
		var width = pixels.width;
		var height = pixels.height;
		if(width != this.width >> mipLevel || height != this.height >> mipLevel) {
			throw new js__$Boot_HaxeError("Invalid upload size : " + width + "x" + height + " should be " + (this.width >> mipLevel) + "x" + (this.height >> mipLevel));
		}
		this.mem.driver.uploadTexturePixels(this,pixels,mipLevel,layer);
		this.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		this.checkMipMapGen(mipLevel,layer);
	}
	,dispose: function() {
		if(this.t != null) {
			this.mem.deleteTexture(this);
		}
	}
	,__class__: h3d_mat_Texture
};
var h3d_pass_Base = function(name) {
	this.name = name;
};
$hxClasses["h3d.pass.Base"] = h3d_pass_Base;
h3d_pass_Base.__name__ = "h3d.pass.Base";
h3d_pass_Base.prototype = {
	ctx: null
	,name: null
	,setContext: function(ctx) {
		this.ctx = ctx;
	}
	,draw: function(passes,sort) {
	}
	,__class__: h3d_pass_Base
};
var h3d_pass_ScreenFx = function(shader,output) {
	this.shader = shader;
	this.shaders = new hxsl_ShaderList(shader);
	this.manager = new h3d_pass_ShaderManager(output);
	this.pass = new h3d_mat_Pass("screenfx",new hxsl_ShaderList(shader));
	this.pass.set_culling(h3d_mat_Face.None);
	this.pass.depth(false,h3d_mat_Compare.Always);
};
$hxClasses["h3d.pass.ScreenFx"] = h3d_pass_ScreenFx;
h3d_pass_ScreenFx.__name__ = "h3d.pass.ScreenFx";
h3d_pass_ScreenFx.prototype = {
	shader: null
	,pass: null
	,primitive: null
	,manager: null
	,_engine: null
	,shaders: null
	,buffers: null
	,get_engine: function() {
		if(this._engine == null) {
			this._engine = h3d_Engine.CURRENT;
		}
		return this._engine;
	}
	,render: function() {
		if(this.primitive == null) {
			this.primitive = h3d_prim_Plane2D.get();
		}
		this.shader.flipY__ = this.get_engine().driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) && this.get_engine().getCurrentTarget() != null ? -1 : 1;
		var rts = this.manager.compileShaders(this.shaders);
		this.get_engine().selectMaterial(this.pass);
		this.get_engine().selectShader(rts);
		if(this.buffers == null) {
			this.buffers = new h3d_shader_Buffers(rts);
		} else {
			var _this = this.buffers;
			_this.vertex.grow(rts.vertex);
			_this.fragment.grow(rts.fragment);
		}
		this.manager.fillGlobals(this.buffers,rts);
		this.manager.fillParams(this.buffers,rts,this.shaders);
		this.get_engine().uploadShaderBuffers(this.buffers,0);
		this.get_engine().uploadShaderBuffers(this.buffers,1);
		this.get_engine().uploadShaderBuffers(this.buffers,2);
		this.primitive.render(this.get_engine());
	}
	,dispose: function() {
	}
	,__class__: h3d_pass_ScreenFx
};
var h3d_pass_Blur = function(radius,gain,linear,quality) {
	if(quality == null) {
		quality = 1.;
	}
	if(linear == null) {
		linear = 0.;
	}
	if(gain == null) {
		gain = 1.;
	}
	if(radius == null) {
		radius = 1.;
	}
	this.cubeDir = [h3d_Matrix.L([0,0,-1,0,0,-1,0,0,1,0,0,0]),h3d_Matrix.L([0,0,1,0,0,-1,0,0,-1,0,0,0]),h3d_Matrix.L([1,0,0,0,0,0,1,0,0,1,0,0]),h3d_Matrix.L([1,0,0,0,0,0,-1,0,0,-1,0,0]),h3d_Matrix.L([1,0,0,0,0,-1,0,0,0,1,0,0]),h3d_Matrix.L([-1,0,0,0,0,-1,0,0,0,0,-1,0])];
	h3d_pass_ScreenFx.call(this,new h3d_shader_Blur());
	this.set_radius(radius);
	this.set_quality(quality);
	this.set_gain(gain);
	this.set_linear(linear);
};
$hxClasses["h3d.pass.Blur"] = h3d_pass_Blur;
h3d_pass_Blur.__name__ = "h3d.pass.Blur";
h3d_pass_Blur.__super__ = h3d_pass_ScreenFx;
h3d_pass_Blur.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	cubeDir: null
	,radius: null
	,gain: null
	,linear: null
	,quality: null
	,values: null
	,offsets: null
	,set_radius: function(r) {
		if(this.radius == r) {
			return r;
		}
		this.values = null;
		return this.radius = r;
	}
	,set_quality: function(q) {
		if(this.quality == q) {
			return q;
		}
		this.values = null;
		return this.quality = q;
	}
	,set_gain: function(s) {
		if(this.gain == s) {
			return s;
		}
		this.values = null;
		return this.gain = s;
	}
	,set_linear: function(b) {
		if(this.linear == b) {
			return b;
		}
		this.values = null;
		return this.linear = b;
	}
	,gauss: function(x,s) {
		if(s <= 0) {
			if(x == 0) {
				return 1;
			} else {
				return 0;
			}
		}
		var sq = s * s;
		var p = Math.pow(2.718281828459,-(x * x) / (2 * sq));
		return p / Math.sqrt(2 * Math.PI * sq);
	}
	,calcValues: function() {
		this.values = [];
		this.offsets = [];
		var tot = 0.;
		var f = this.quality;
		var qadj = (f < 0. ? 0. : f > 1. ? 1. : f) * 0.7 + 0.3;
		var width;
		if(this.radius > 0) {
			var a = this.radius - 1;
			width = Math.ceil((a < 1 ? 1 : a) * qadj / 2);
		} else {
			width = 0;
		}
		var sigma = Math.sqrt(this.radius);
		var _g = 0;
		var _g1 = width + 1;
		while(_g < _g1) {
			var i = _g++;
			var i1 = i * 2;
			var i2 = i == 0 ? 0 : i * 2 - 1;
			var g1 = this.gauss(i1,sigma);
			var g2 = this.gauss(i2,sigma);
			var g = g1 + g2;
			this.values[i] = g;
			this.offsets[i] = i == 0 ? 0 : (g1 * i1 + g2 * i2) / (g * i * Math.sqrt(qadj));
			tot += g;
			if(i > 0) {
				tot += g;
			}
		}
		var minVal = this.values[0] * (0.01 / qadj);
		while(this.values.length > 2) {
			var last = this.values[this.values.length - 1];
			if(last > minVal) {
				break;
			}
			tot -= last * 2;
			this.values.pop();
		}
		tot /= this.gain;
		var _g2 = 0;
		var _g3 = this.values.length;
		while(_g2 < _g3) {
			var i3 = _g2++;
			this.values[i3] /= tot;
		}
		if(this.linear > 0) {
			var m = this.gain / (this.values.length * 2 - 1);
			var _g4 = 0;
			var _g5 = this.values.length;
			while(_g4 < _g5) {
				var i4 = _g4++;
				var a1 = this.values[i4];
				this.values[i4] = a1 + this.linear * (m - a1);
				var a2 = this.offsets[i4];
				this.offsets[i4] = a2 + this.linear * ((i4 == 0 ? 0 : (i4 * 2 - 0.5) / (i4 * qadj)) - a2);
			}
		}
	}
	,apply: function(ctx,src,output) {
		if(this.radius <= 0 && this.shader.fixedColor__ == null) {
			if(output != null) {
				h3d_pass_Copy.run(src,output);
			}
			return;
		}
		if(output == null) {
			output = src;
		}
		if(this.values == null) {
			this.calcValues();
		}
		var isCube = (src.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0;
		var faceCount = isCube ? 6 : 1;
		var tmp = ctx.textures.allocTarget(src.name + "BlurTmp",src.width,src.height,false,src.format,isCube);
		var _this = this.shader;
		_this.constModified = true;
		_this.Quality__ = this.values.length;
		this.shader.values__ = this.values;
		this.shader.offsets__ = this.offsets;
		if(isCube) {
			this.shader.cubeTexture__ = src;
			var _this1 = this.shader;
			_this1.constModified = true;
			_this1.isCube__ = true;
		} else {
			this.shader.texture__ = src;
			var _this2 = this.shader;
			_this2.constModified = true;
			_this2.isCube__ = false;
		}
		var _this3 = this.shader.pixel__;
		var x = 1 / src.width;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this3.x = x;
		_this3.y = y;
		_this3.z = 0.;
		_this3.w = 1.;
		var _g = 0;
		var _g1 = faceCount;
		while(_g < _g1) {
			var i = _g++;
			this.get_engine().pushTarget(tmp,i);
			if(isCube) {
				this.shader.cubeDir__ = this.cubeDir[i];
			}
			this.render();
			this.get_engine().popTarget();
		}
		if(isCube) {
			this.shader.cubeTexture__ = tmp;
		} else {
			this.shader.texture__ = tmp;
		}
		var _this4 = this.shader.pixel__;
		var x1 = 0;
		var y1 = 1 / src.height;
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		_this4.x = x1;
		_this4.y = y1;
		_this4.z = 0.;
		_this4.w = 1.;
		var outDepth = output.depthBuffer;
		output.depthBuffer = null;
		var _g2 = 0;
		var _g3 = faceCount;
		while(_g2 < _g3) {
			var i1 = _g2++;
			this.get_engine().pushTarget(output,i1);
			if(isCube) {
				this.shader.cubeDir__ = this.cubeDir[i1];
			}
			this.render();
			this.get_engine().popTarget();
		}
		output.depthBuffer = outDepth;
	}
	,__class__: h3d_pass_Blur
});
var hxsl_Shader = function() {
	this.priority = 0;
	this.initialize();
};
$hxClasses["hxsl.Shader"] = hxsl_Shader;
hxsl_Shader.__name__ = "hxsl.Shader";
hxsl_Shader.prototype = {
	priority: null
	,shader: null
	,instance: null
	,constBits: null
	,constModified: null
	,initialize: function() {
		this.constModified = true;
		if(this.shader != null) {
			return;
		}
		var cl = js_Boot.getClass(this);
		this.shader = cl._SHADER;
		if(this.shader == null) {
			var curClass = cl;
			while(curClass != null && curClass.SRC == null) curClass = curClass.__super__;
			if(curClass == null) {
				throw new js__$Boot_HaxeError(cl.__name__ + " has no shader source");
			}
			this.shader = curClass._SHADER;
			if(this.shader == null) {
				this.shader = new hxsl_SharedShader(curClass.SRC);
				curClass._SHADER = this.shader;
			}
		}
	}
	,setPriority: function(v) {
		this.priority = v;
	}
	,getParamValue: function(index) {
		throw new js__$Boot_HaxeError("assert");
	}
	,getParamFloatValue: function(index) {
		throw new js__$Boot_HaxeError("assert");
	}
	,updateConstants: function(globals) {
		throw new js__$Boot_HaxeError("assert");
	}
	,updateConstantsFinal: function(globals) {
		var c = this.shader.consts;
		while(c != null) {
			if(c.globalId == 0) {
				c = c.next;
				continue;
			}
			var v = globals.map.h[c.globalId];
			var _g = c.v.type;
			switch(_g._hx_index) {
			case 1:
				var v1 = v;
				if(v1 >>> c.bits != 0) {
					throw new js__$Boot_HaxeError("Constant " + c.v.name + " is outside range (" + v1 + " > " + ((1 << c.bits) - 1) + ")");
				}
				this.constBits |= v1 << c.pos;
				break;
			case 2:
				var v2 = v;
				if(v2) {
					this.constBits |= 1 << c.pos;
				}
				break;
			case 17:
				var count = _g.size;
				if(v == null) {
					c = c.next;
					continue;
				}
				var v3 = v;
				var sel = v3.channel;
				if(v3.texture == null) {
					sel = hxsl_Channel.Unknown;
				} else if(sel == null || sel == hxsl_Channel.Unknown) {
					switch(count) {
					case 1:
						if(v3.texture.format == h3d_mat_Texture.nativeFormat) {
							sel = hxsl_Channel.PackedFloat;
						} else {
							throw new js__$Boot_HaxeError("Constant " + c.v.name + " does not define channel select value");
						}
						break;
					case 3:
						if(v3.texture.format == h3d_mat_Texture.nativeFormat) {
							sel = hxsl_Channel.PackedNormal;
						} else {
							throw new js__$Boot_HaxeError("Constant " + c.v.name + " does not define channel select value");
						}
						break;
					default:
						throw new js__$Boot_HaxeError("Constant " + c.v.name + " does not define channel select value");
					}
				}
				this.constBits |= (globals.allocChannelID(v3.texture) << 3 | sel._hx_index) << c.pos;
				break;
			default:
				throw new js__$Boot_HaxeError("assert");
			}
			c = c.next;
		}
		var _this = this.shader;
		var constBits = this.constBits;
		var i = _this.instanceCache.h[constBits];
		this.instance = i == null ? _this.makeInstance(constBits) : i;
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__;
	}
	,__class__: hxsl_Shader
};
var h3d_shader_ScreenShader = function() {
	this.flipY__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.ScreenShader"] = h3d_shader_ScreenShader;
h3d_shader_ScreenShader.__name__ = "h3d.shader.ScreenShader";
h3d_shader_ScreenShader.__super__ = hxsl_Shader;
h3d_shader_ScreenShader.prototype = $extend(hxsl_Shader.prototype,{
	flipY__: null
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_shader_ScreenShader
});
var h3d_pass__$Border_BorderShader = function() {
	this.color__ = new h3d_Vector();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._Border.BorderShader"] = h3d_pass__$Border_BorderShader;
h3d_pass__$Border_BorderShader.__name__ = "h3d.pass._Border.BorderShader";
h3d_pass__$Border_BorderShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$Border_BorderShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	color__: null
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.color__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_pass__$Border_BorderShader
});
var h3d_pass_Border = function(width,height,size) {
	if(size == null) {
		size = 1;
	}
	h3d_pass_ScreenFx.call(this,new h3d_pass__$Border_BorderShader());
	var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
	var bbuf = this1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize1 = bbuf.array.length << 1;
		if(newSize1 < 128) {
			newSize1 = 128;
		}
		var newArray1 = new Float32Array(newSize1);
		newArray1.set(bbuf.array);
		bbuf.array = newArray1;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize2 = bbuf.array.length << 1;
		if(newSize2 < 128) {
			newSize2 = 128;
		}
		var newArray2 = new Float32Array(newSize2);
		newArray2.set(bbuf.array);
		bbuf.array = newArray2;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize3 = bbuf.array.length << 1;
		if(newSize3 < 128) {
			newSize3 = 128;
		}
		var newArray3 = new Float32Array(newSize3);
		newArray3.set(bbuf.array);
		bbuf.array = newArray3;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize4 = bbuf.array.length << 1;
		if(newSize4 < 128) {
			newSize4 = 128;
		}
		var newArray4 = new Float32Array(newSize4);
		newArray4.set(bbuf.array);
		bbuf.array = newArray4;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize5 = bbuf.array.length << 1;
		if(newSize5 < 128) {
			newSize5 = 128;
		}
		var newArray5 = new Float32Array(newSize5);
		newArray5.set(bbuf.array);
		bbuf.array = newArray5;
	}
	bbuf.array[bbuf.pos++] = 1 - size / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize6 = bbuf.array.length << 1;
		if(newSize6 < 128) {
			newSize6 = 128;
		}
		var newArray6 = new Float32Array(newSize6);
		newArray6.set(bbuf.array);
		bbuf.array = newArray6;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize7 = bbuf.array.length << 1;
		if(newSize7 < 128) {
			newSize7 = 128;
		}
		var newArray7 = new Float32Array(newSize7);
		newArray7.set(bbuf.array);
		bbuf.array = newArray7;
	}
	bbuf.array[bbuf.pos++] = 1 - size / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize8 = bbuf.array.length << 1;
		if(newSize8 < 128) {
			newSize8 = 128;
		}
		var newArray8 = new Float32Array(newSize8);
		newArray8.set(bbuf.array);
		bbuf.array = newArray8;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize9 = bbuf.array.length << 1;
		if(newSize9 < 128) {
			newSize9 = 128;
		}
		var newArray9 = new Float32Array(newSize9);
		newArray9.set(bbuf.array);
		bbuf.array = newArray9;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize10 = bbuf.array.length << 1;
		if(newSize10 < 128) {
			newSize10 = 128;
		}
		var newArray10 = new Float32Array(newSize10);
		newArray10.set(bbuf.array);
		bbuf.array = newArray10;
	}
	bbuf.array[bbuf.pos++] = size / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize11 = bbuf.array.length << 1;
		if(newSize11 < 128) {
			newSize11 = 128;
		}
		var newArray11 = new Float32Array(newSize11);
		newArray11.set(bbuf.array);
		bbuf.array = newArray11;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize12 = bbuf.array.length << 1;
		if(newSize12 < 128) {
			newSize12 = 128;
		}
		var newArray12 = new Float32Array(newSize12);
		newArray12.set(bbuf.array);
		bbuf.array = newArray12;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize13 = bbuf.array.length << 1;
		if(newSize13 < 128) {
			newSize13 = 128;
		}
		var newArray13 = new Float32Array(newSize13);
		newArray13.set(bbuf.array);
		bbuf.array = newArray13;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize14 = bbuf.array.length << 1;
		if(newSize14 < 128) {
			newSize14 = 128;
		}
		var newArray14 = new Float32Array(newSize14);
		newArray14.set(bbuf.array);
		bbuf.array = newArray14;
	}
	bbuf.array[bbuf.pos++] = size / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize15 = bbuf.array.length << 1;
		if(newSize15 < 128) {
			newSize15 = 128;
		}
		var newArray15 = new Float32Array(newSize15);
		newArray15.set(bbuf.array);
		bbuf.array = newArray15;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize16 = bbuf.array.length << 1;
		if(newSize16 < 128) {
			newSize16 = 128;
		}
		var newArray16 = new Float32Array(newSize16);
		newArray16.set(bbuf.array);
		bbuf.array = newArray16;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize17 = bbuf.array.length << 1;
		if(newSize17 < 128) {
			newSize17 = 128;
		}
		var newArray17 = new Float32Array(newSize17);
		newArray17.set(bbuf.array);
		bbuf.array = newArray17;
	}
	bbuf.array[bbuf.pos++] = 1 - (height - size) / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize18 = bbuf.array.length << 1;
		if(newSize18 < 128) {
			newSize18 = 128;
		}
		var newArray18 = new Float32Array(newSize18);
		newArray18.set(bbuf.array);
		bbuf.array = newArray18;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize19 = bbuf.array.length << 1;
		if(newSize19 < 128) {
			newSize19 = 128;
		}
		var newArray19 = new Float32Array(newSize19);
		newArray19.set(bbuf.array);
		bbuf.array = newArray19;
	}
	bbuf.array[bbuf.pos++] = 1 - (height - size) / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize20 = bbuf.array.length << 1;
		if(newSize20 < 128) {
			newSize20 = 128;
		}
		var newArray20 = new Float32Array(newSize20);
		newArray20.set(bbuf.array);
		bbuf.array = newArray20;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize21 = bbuf.array.length << 1;
		if(newSize21 < 128) {
			newSize21 = 128;
		}
		var newArray21 = new Float32Array(newSize21);
		newArray21.set(bbuf.array);
		bbuf.array = newArray21;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize22 = bbuf.array.length << 1;
		if(newSize22 < 128) {
			newSize22 = 128;
		}
		var newArray22 = new Float32Array(newSize22);
		newArray22.set(bbuf.array);
		bbuf.array = newArray22;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize23 = bbuf.array.length << 1;
		if(newSize23 < 128) {
			newSize23 = 128;
		}
		var newArray23 = new Float32Array(newSize23);
		newArray23.set(bbuf.array);
		bbuf.array = newArray23;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize24 = bbuf.array.length << 1;
		if(newSize24 < 128) {
			newSize24 = 128;
		}
		var newArray24 = new Float32Array(newSize24);
		newArray24.set(bbuf.array);
		bbuf.array = newArray24;
	}
	bbuf.array[bbuf.pos++] = (width - size) / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize25 = bbuf.array.length << 1;
		if(newSize25 < 128) {
			newSize25 = 128;
		}
		var newArray25 = new Float32Array(newSize25);
		newArray25.set(bbuf.array);
		bbuf.array = newArray25;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize26 = bbuf.array.length << 1;
		if(newSize26 < 128) {
			newSize26 = 128;
		}
		var newArray26 = new Float32Array(newSize26);
		newArray26.set(bbuf.array);
		bbuf.array = newArray26;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize27 = bbuf.array.length << 1;
		if(newSize27 < 128) {
			newSize27 = 128;
		}
		var newArray27 = new Float32Array(newSize27);
		newArray27.set(bbuf.array);
		bbuf.array = newArray27;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize28 = bbuf.array.length << 1;
		if(newSize28 < 128) {
			newSize28 = 128;
		}
		var newArray28 = new Float32Array(newSize28);
		newArray28.set(bbuf.array);
		bbuf.array = newArray28;
	}
	bbuf.array[bbuf.pos++] = (width - size) / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize29 = bbuf.array.length << 1;
		if(newSize29 < 128) {
			newSize29 = 128;
		}
		var newArray29 = new Float32Array(newSize29);
		newArray29.set(bbuf.array);
		bbuf.array = newArray29;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize30 = bbuf.array.length << 1;
		if(newSize30 < 128) {
			newSize30 = 128;
		}
		var newArray30 = new Float32Array(newSize30);
		newArray30.set(bbuf.array);
		bbuf.array = newArray30;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize31 = bbuf.array.length << 1;
		if(newSize31 < 128) {
			newSize31 = 128;
		}
		var newArray31 = new Float32Array(newSize31);
		newArray31.set(bbuf.array);
		bbuf.array = newArray31;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	this.primitive = new h3d_prim_RawPrimitive({ vbuf : bbuf, stride : 2, quads : true},true);
	var _this = this.shader.color__;
	var x = 1;
	var y = 1;
	var z = 1;
	var w = 1;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = w;
};
$hxClasses["h3d.pass.Border"] = h3d_pass_Border;
h3d_pass_Border.__name__ = "h3d.pass.Border";
h3d_pass_Border.__super__ = h3d_pass_ScreenFx;
h3d_pass_Border.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	dispose: function() {
		h3d_pass_ScreenFx.prototype.dispose.call(this);
		this.primitive.dispose();
	}
	,__class__: h3d_pass_Border
});
var h3d_pass_ColorMatrixShader = function() {
	this.maskChannel__ = new h3d_Vector();
	this.maskPower__ = 0;
	this.maskMatB__ = new h3d_Vector();
	this.maskMatA__ = new h3d_Vector();
	this.matrix2__ = new h3d_Matrix();
	this.matrix__ = new h3d_Matrix();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass.ColorMatrixShader"] = h3d_pass_ColorMatrixShader;
h3d_pass_ColorMatrixShader.__name__ = "h3d.pass.ColorMatrixShader";
h3d_pass_ColorMatrixShader.__super__ = h3d_shader_ScreenShader;
h3d_pass_ColorMatrixShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	texture__: null
	,matrix__: null
	,useAlpha__: null
	,useMask__: null
	,maskInvert__: null
	,hasSecondMatrix__: null
	,matrix2__: null
	,mask__: null
	,maskMatA__: null
	,maskMatB__: null
	,maskPower__: null
	,maskChannel__: null
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.useAlpha__) {
			this.constBits |= 1;
		}
		if(this.useMask__) {
			this.constBits |= 2;
		}
		if(this.maskInvert__) {
			this.constBits |= 4;
		}
		if(this.hasSecondMatrix__) {
			this.constBits |= 8;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.matrix__;
		case 3:
			return this.useAlpha__;
		case 4:
			return this.useMask__;
		case 5:
			return this.maskInvert__;
		case 6:
			return this.hasSecondMatrix__;
		case 7:
			return this.matrix2__;
		case 8:
			return this.mask__;
		case 9:
			return this.maskMatA__;
		case 10:
			return this.maskMatB__;
		case 11:
			return this.maskPower__;
		case 12:
			return this.maskChannel__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 11:
			return this.maskPower__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_pass_ColorMatrixShader
});
var h3d_pass_ColorMatrix = function(m) {
	h3d_pass_ScreenFx.call(this,new h3d_pass_ColorMatrixShader());
	if(m != null) {
		this.shader.matrix__ = m;
	} else {
		this.shader.matrix__.identity();
	}
	this.shader.maskPower__ = 1;
	var _this = this.shader.maskChannel__;
	var x = 1;
	var y = 0;
	var z = 0;
	var w = 0;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = w;
};
$hxClasses["h3d.pass.ColorMatrix"] = h3d_pass_ColorMatrix;
h3d_pass_ColorMatrix.__name__ = "h3d.pass.ColorMatrix";
h3d_pass_ColorMatrix.__super__ = h3d_pass_ScreenFx;
h3d_pass_ColorMatrix.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	apply: function(src,out,mask,maskMatrix) {
		this.get_engine().pushTarget(out);
		this.shader.texture__ = src;
		var _this = this.shader;
		_this.constModified = true;
		_this.useMask__ = mask != null;
		if(mask != null) {
			this.shader.mask__ = mask;
			if(maskMatrix == null) {
				var _this1 = this.shader.maskMatA__;
				var x = 1;
				var y = 0;
				var z = 0;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this1.x = x;
				_this1.y = y;
				_this1.z = z;
				_this1.w = 1.;
				var _this2 = this.shader.maskMatB__;
				var x1 = 0;
				var y1 = 1;
				var z1 = 0;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				_this2.x = x1;
				_this2.y = y1;
				_this2.z = z1;
				_this2.w = 1.;
			} else {
				var _this3 = this.shader.maskMatA__;
				var x2 = maskMatrix.a;
				var y2 = maskMatrix.c;
				var z2 = maskMatrix.x;
				if(z2 == null) {
					z2 = 0.;
				}
				if(y2 == null) {
					y2 = 0.;
				}
				if(x2 == null) {
					x2 = 0.;
				}
				_this3.x = x2;
				_this3.y = y2;
				_this3.z = z2;
				_this3.w = 1.;
				var _this4 = this.shader.maskMatB__;
				var x3 = maskMatrix.b;
				var y3 = maskMatrix.d;
				var z3 = maskMatrix.y;
				if(z3 == null) {
					z3 = 0.;
				}
				if(y3 == null) {
					y3 = 0.;
				}
				if(x3 == null) {
					x3 = 0.;
				}
				_this4.x = x3;
				_this4.y = y3;
				_this4.z = z3;
				_this4.w = 1.;
			}
		}
		this.render();
		this.get_engine().popTarget();
	}
	,__class__: h3d_pass_ColorMatrix
});
var h3d_pass__$Copy_CopyShader = function() {
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._Copy.CopyShader"] = h3d_pass__$Copy_CopyShader;
h3d_pass__$Copy_CopyShader.__name__ = "h3d.pass._Copy.CopyShader";
h3d_pass__$Copy_CopyShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$Copy_CopyShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	texture__: null
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_pass__$Copy_CopyShader
});
var h3d_pass_Copy = function() {
	h3d_pass_ScreenFx.call(this,new h3d_pass__$Copy_CopyShader());
};
$hxClasses["h3d.pass.Copy"] = h3d_pass_Copy;
h3d_pass_Copy.__name__ = "h3d.pass.Copy";
h3d_pass_Copy.run = function(from,to,blend,pass) {
	var engine = h3d_Engine.CURRENT;
	if(to != null && from != null && (blend == null || blend == h2d_BlendMode.None) && pass == null && engine.driver.copyTexture(from,to)) {
		return;
	}
	var inst = engine.resCache.h[h3d_pass_Copy.__id__];
	if(inst == null) {
		inst = new h3d_pass_Copy();
		engine.resCache.set(h3d_pass_Copy,inst);
	}
	inst.apply(from,to,blend,pass);
	return;
};
h3d_pass_Copy.__super__ = h3d_pass_ScreenFx;
h3d_pass_Copy.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	apply: function(from,to,blend,customPass,layer) {
		if(to != null) {
			this.get_engine().pushTarget(to,layer != null ? layer : 0);
		}
		this.shader.texture__ = from;
		if(customPass != null) {
			var old = this.pass;
			this.pass = customPass;
			if(blend != null) {
				this.pass.setBlendMode(blend);
			}
			var h = this.shaders;
			while(h.next != null) h = h.next;
			h.next = this.pass.shaders;
			this.render();
			this.pass = old;
			h.next = null;
		} else {
			this.pass.setBlendMode(blend == null ? h2d_BlendMode.None : blend);
			this.render();
		}
		this.shader.texture__ = null;
		if(to != null) {
			this.get_engine().popTarget();
		}
	}
	,__class__: h3d_pass_Copy
});
var h3d_pass__$CubeCopy_CubeCopyShader = function() {
	this.mat__ = new h3d_Matrix();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._CubeCopy.CubeCopyShader"] = h3d_pass__$CubeCopy_CubeCopyShader;
h3d_pass__$CubeCopy_CubeCopyShader.__name__ = "h3d.pass._CubeCopy.CubeCopyShader";
h3d_pass__$CubeCopy_CubeCopyShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$CubeCopy_CubeCopyShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	texture__: null
	,mat__: null
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.mat__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_pass__$CubeCopy_CubeCopyShader
});
var h3d_pass_Default = function(name) {
	this.defaultSort = ($_=new h3d_pass_SortByMaterial(),$bind($_,$_.sort));
	h3d_pass_Base.call(this,name);
	this.manager = new h3d_pass_ShaderManager(this.getOutputs());
	this.initGlobals();
};
$hxClasses["h3d.pass.Default"] = h3d_pass_Default;
h3d_pass_Default.__name__ = "h3d.pass.Default";
h3d_pass_Default.__super__ = h3d_pass_Base;
h3d_pass_Default.prototype = $extend(h3d_pass_Base.prototype,{
	manager: null
	,defaultSort: null
	,getOutputs: function() {
		return [hxsl_Output.Value("output.color")];
	}
	,processShaders: function(p,shaders) {
		var p1 = this.ctx.extraShaders;
		while(p1 != null) {
			shaders = this.ctx.allocShaderList(p1.s,shaders);
			p1 = p1.next;
		}
		return shaders;
	}
	,setupShaders: function(passes) {
		var lightInit = false;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			var shaders = p.pass.getShadersRec();
			shaders = this.processShaders(p,shaders);
			if(p.pass.enableLights && this.ctx.lightSystem != null) {
				if(!lightInit) {
					this.ctx.lightSystem.initGlobals(this.manager.globals);
					lightInit = true;
				}
				shaders = this.ctx.lightSystem.computeLight(p.obj,shaders);
			}
			p.shader = this.manager.compileShaders(shaders,p.pass.batchMode);
			p.shaders = shaders;
			var t = p.shader.fragment.textures;
			if(t == null) {
				p.texture = 0;
			} else {
				var _this = this.manager;
				var opt = true;
				if(opt == null) {
					opt = false;
				}
				var t1;
				if(t.perObjectGlobal != null) {
					var v = _this.globals.map.h[t.perObjectGlobal.gid];
					if(v == null) {
						throw new js__$Boot_HaxeError("Missing global value " + t.perObjectGlobal.path + " for shader " + _this.shaderInfo(shaders,t.perObjectGlobal.path));
					}
					var _g = t.type;
					var t2;
					if(_g._hx_index == 17) {
						var _g1 = _g.size;
						t2 = true;
					} else {
						t2 = false;
					}
					t1 = t2 ? v.texture : v;
				} else {
					var si = shaders;
					var n = t.instance;
					while(--n > 0) si = si.next;
					var v1 = si.s.getParamValue(t.index);
					if(v1 == null && !opt) {
						throw new js__$Boot_HaxeError("Missing param value " + Std.string(si.s) + "." + t.name);
					}
					t1 = v1;
				}
				p.texture = t1 == null ? 0 : t1.id;
			}
		}
	}
	,drawObject: function(p) {
		this.ctx.drawPass = p;
		this.ctx.engine.selectMaterial(p.pass);
		p.obj.draw(this.ctx);
	}
	,draw: function(passes,sort) {
		if(passes.current == null) {
			return;
		}
		var _g = 0;
		var _g1 = this.ctx.sharedGlobals;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			this.manager.globals.map.h[g.gid] = g.value;
		}
		this.setGlobals();
		this.setupShaders(passes);
		if(sort == null) {
			this.defaultSort(passes);
		} else {
			sort(passes);
		}
		this.ctx.currentManager = this.manager;
		var buf = this.ctx.shaderBuffers;
		var prevShader = null;
		var _g2_o = passes.current;
		while(_g2_o != null) {
			var tmp = _g2_o;
			_g2_o = _g2_o.next;
			var p = tmp;
			var v = p.obj.absPos;
			this.manager.globals.map.h[this.globalModelView_id] = v;
			if(p.shader.globals.h.hasOwnProperty(this.globalModelViewInverse_id)) {
				var v1 = p.obj.getInvPos();
				this.manager.globals.map.h[this.globalModelViewInverse_id] = v1;
			}
			if(prevShader != p.shader) {
				prevShader = p.shader;
				this.ctx.engine.selectShader(p.shader);
				if(buf == null) {
					buf = this.ctx.shaderBuffers = new h3d_shader_Buffers(p.shader);
				} else {
					var s = p.shader;
					buf.vertex.grow(s.vertex);
					buf.fragment.grow(s.fragment);
				}
				this.manager.fillGlobals(buf,p.shader);
				this.ctx.engine.uploadShaderBuffers(buf,0);
			}
			if(!p.pass.dynamicParameters) {
				this.manager.fillParams(buf,p.shader,p.shaders);
				this.ctx.engine.uploadShaderBuffers(buf,1);
				this.ctx.engine.uploadShaderBuffers(buf,2);
				this.ctx.engine.uploadShaderBuffers(buf,3);
			}
			this.drawObject(p);
		}
		var _this = this.ctx;
		_this.cachedPos = 0;
		_this.drawPass = null;
	}
	,cameraView_id: null
	,cameraNear_id: null
	,cameraFar_id: null
	,cameraProj_id: null
	,cameraPos_id: null
	,cameraProjDiag_id: null
	,cameraProjFlip_id: null
	,cameraViewProj_id: null
	,cameraInverseViewProj_id: null
	,globalTime_id: null
	,pixelSize_id: null
	,globalModelView_id: null
	,globalModelViewInverse_id: null
	,initGlobals: function() {
		var this1 = hxsl_Globals.allocID("camera.view");
		this.cameraView_id = this1;
		var this2 = hxsl_Globals.allocID("camera.zNear");
		this.cameraNear_id = this2;
		var this3 = hxsl_Globals.allocID("camera.zFar");
		this.cameraFar_id = this3;
		var this4 = hxsl_Globals.allocID("camera.proj");
		this.cameraProj_id = this4;
		var this5 = hxsl_Globals.allocID("camera.position");
		this.cameraPos_id = this5;
		var this6 = hxsl_Globals.allocID("camera.projDiag");
		this.cameraProjDiag_id = this6;
		var this7 = hxsl_Globals.allocID("camera.projFlip");
		this.cameraProjFlip_id = this7;
		var this8 = hxsl_Globals.allocID("camera.viewProj");
		this.cameraViewProj_id = this8;
		var this9 = hxsl_Globals.allocID("camera.inverseViewProj");
		this.cameraInverseViewProj_id = this9;
		var this10 = hxsl_Globals.allocID("global.time");
		this.globalTime_id = this10;
		var this11 = hxsl_Globals.allocID("global.pixelSize");
		this.pixelSize_id = this11;
		var this12 = hxsl_Globals.allocID("global.modelView");
		this.globalModelView_id = this12;
		var this13 = hxsl_Globals.allocID("global.modelViewInverse");
		this.globalModelViewInverse_id = this13;
	}
	,setGlobals: function() {
		var v = this.ctx.camera.mcam;
		this.manager.globals.map.h[this.cameraView_id] = v;
		var v1 = this.ctx.camera.zNear;
		this.manager.globals.map.h[this.cameraNear_id] = v1;
		var v2 = this.ctx.camera.zFar;
		this.manager.globals.map.h[this.cameraFar_id] = v2;
		var v3 = this.ctx.camera.mproj;
		this.manager.globals.map.h[this.cameraProj_id] = v3;
		var v4 = this.ctx.camera.pos;
		this.manager.globals.map.h[this.cameraPos_id] = v4;
		var v5 = new h3d_Vector(this.ctx.camera.mproj._11,this.ctx.camera.mproj._22,this.ctx.camera.mproj._33,this.ctx.camera.mproj._44);
		this.manager.globals.map.h[this.cameraProjDiag_id] = v5;
		var v6 = this.ctx.engine.driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) && this.ctx.engine.getCurrentTarget() != null ? -1 : 1;
		this.manager.globals.map.h[this.cameraProjFlip_id] = v6;
		var v7 = this.ctx.camera.m;
		this.manager.globals.map.h[this.cameraViewProj_id] = v7;
		var v8 = this.ctx.camera.getInverseViewProj();
		this.manager.globals.map.h[this.cameraInverseViewProj_id] = v8;
		var v9 = this.ctx.time;
		this.manager.globals.map.h[this.globalTime_id] = v9;
		var v10 = new h3d_Vector(2 / this.ctx.engine.width,2 / this.ctx.engine.height);
		this.manager.globals.map.h[this.pixelSize_id] = v10;
	}
	,__class__: h3d_pass_Default
});
var h3d_pass_Shadows = function(light) {
	this.pcfScale = 1.0;
	this.pcfQuality = 1;
	this.bias = 0.01;
	this.power = 30.0;
	this.samplingKind = h3d_pass_ShadowSamplingKind.None;
	this.size = 1024;
	this.mode = h3d_pass_RenderMode.None;
	this.enabled = true;
	if(this.format == null) {
		this.format = hxd_PixelFormat.R16F;
	}
	if(!h3d_Engine.CURRENT.driver.isSupportedFormat(this.format)) {
		this.format = h3d_mat_Texture.nativeFormat;
	}
	h3d_pass_Default.call(this,"shadow");
	this.light = light;
	this.blur = new h3d_pass_Blur(5);
	this.blur.set_quality(0.5);
	var _this = this.blur.shader;
	_this.constModified = true;
	_this.isDepth__ = this.format == h3d_mat_Texture.nativeFormat;
};
$hxClasses["h3d.pass.Shadows"] = h3d_pass_Shadows;
h3d_pass_Shadows.__name__ = "h3d.pass.Shadows";
h3d_pass_Shadows.__super__ = h3d_pass_Default;
h3d_pass_Shadows.prototype = $extend(h3d_pass_Default.prototype,{
	lightCamera: null
	,format: null
	,staticTexture: null
	,light: null
	,enabled: null
	,mode: null
	,size: null
	,shader: null
	,blur: null
	,samplingKind: null
	,power: null
	,bias: null
	,pcfQuality: null
	,pcfScale: null
	,set_size: function(s) {
		if(s != this.size && this.staticTexture != null) {
			this.staticTexture.dispose();
			this.staticTexture = null;
		}
		return this.size = s;
	}
	,getShadowProj: function() {
		return this.lightCamera.m;
	}
	,isUsingWorldDist: function() {
		return false;
	}
	,getOutputs: function() {
		if(this.isUsingWorldDist()) {
			return [hxsl_Output.Swiz(hxsl_Output.Value("output.worldDist",1),[hxsl_Component.X,hxsl_Component.X,hxsl_Component.X,hxsl_Component.X])];
		}
		if(this.format == h3d_mat_Texture.nativeFormat) {
			return [hxsl_Output.PackFloat(hxsl_Output.Value("output.depth"))];
		}
		return [hxsl_Output.Swiz(hxsl_Output.Value("output.depth",1),[hxsl_Component.X,hxsl_Component.X,hxsl_Component.X,hxsl_Component.X])];
	}
	,createDefaultShadowMap: function() {
		var tex = h3d_mat_Texture.fromColor(16777215);
		tex.name = "defaultShadowMap";
		return tex;
	}
	,syncShader: function(texture) {
	}
	,filterPasses: function(passes) {
		var _gthis = this;
		if(!this.ctx.computingStatic) {
			switch(this.mode._hx_index) {
			case 0:
				return false;
			case 1:
				var tmp;
				if(this.staticTexture != null) {
					var _this = this.staticTexture;
					tmp = _this.t == null && _this.realloc == null;
				} else {
					tmp = true;
				}
				if(tmp) {
					this.staticTexture = this.createDefaultShadowMap();
				}
				this.syncShader(this.staticTexture);
				return false;
			case 2:
				break;
			case 3:
				var tmp1;
				if(this.staticTexture != null) {
					var _this1 = this.staticTexture;
					tmp1 = _this1.t == null && _this1.realloc == null;
				} else {
					tmp1 = true;
				}
				if(tmp1) {
					this.staticTexture = this.createDefaultShadowMap();
				}
				break;
			}
		}
		switch(this.mode._hx_index) {
		case 0:
			passes.clear();
			break;
		case 1:
			if(this.ctx.computingStatic) {
				var head = null;
				var prev = null;
				var disc = passes.discarded;
				var discQueue = passes.lastDisc;
				var cur = passes.current;
				while(cur != null) {
					if(cur.pass.isStatic == true) {
						if(head == null) {
							prev = cur;
							head = prev;
						} else {
							prev.next = cur;
							prev = cur;
						}
					} else if(disc == null) {
						discQueue = cur;
						disc = discQueue;
					} else {
						discQueue.next = cur;
						discQueue = cur;
					}
					cur = cur.next;
				}
				if(prev != null) {
					prev.next = null;
				}
				if(discQueue != null) {
					discQueue.next = null;
				}
				passes.current = head;
				passes.discarded = disc;
				passes.lastDisc = discQueue;
			} else {
				passes.clear();
			}
			break;
		case 2:
			if(this.ctx.computingStatic) {
				passes.clear();
			}
			break;
		case 3:
			var head1 = null;
			var prev1 = null;
			var disc1 = passes.discarded;
			var discQueue1 = passes.lastDisc;
			var cur1 = passes.current;
			while(cur1 != null) {
				if(cur1.pass.isStatic == _gthis.ctx.computingStatic) {
					if(head1 == null) {
						prev1 = cur1;
						head1 = prev1;
					} else {
						prev1.next = cur1;
						prev1 = cur1;
					}
				} else if(disc1 == null) {
					discQueue1 = cur1;
					disc1 = discQueue1;
				} else {
					discQueue1.next = cur1;
					discQueue1 = cur1;
				}
				cur1 = cur1.next;
			}
			if(prev1 != null) {
				prev1.next = null;
			}
			if(discQueue1 != null) {
				discQueue1.next = null;
			}
			passes.current = head1;
			passes.discarded = disc1;
			passes.lastDisc = discQueue1;
			break;
		}
		return true;
	}
	,__class__: h3d_pass_Shadows
});
var h3d_pass_DirShadowMap = function(light) {
	this.mergePass = new h3d_pass_ScreenFx(new h3d_shader_MinMaxShader());
	h3d_pass_Shadows.call(this,light);
	this.lightCamera = new h3d_Camera();
	this.lightCamera.orthoBounds = new h3d_col_Bounds();
	this.shader = this.dshader = new h3d_shader_DirShadow();
	this.border = new h3d_pass_Border(this.size,this.size);
	this.customDepth = h3d_Engine.CURRENT.driver.hasFeature(h3d_impl_Feature.AllocDepthBuffer);
	if(!this.customDepth) {
		this.depth = h3d_mat_DepthBuffer.getDefault();
	}
};
$hxClasses["h3d.pass.DirShadowMap"] = h3d_pass_DirShadowMap;
h3d_pass_DirShadowMap.__name__ = "h3d.pass.DirShadowMap";
h3d_pass_DirShadowMap.__super__ = h3d_pass_Shadows;
h3d_pass_DirShadowMap.prototype = $extend(h3d_pass_Shadows.prototype,{
	customDepth: null
	,depth: null
	,dshader: null
	,border: null
	,mergePass: null
	,set_mode: function(m) {
		var _this = this.dshader;
		_this.constModified = true;
		_this.enable__ = m != h3d_pass_RenderMode.None;
		return this.mode = m;
	}
	,set_size: function(s) {
		if(this.border != null && this.size != s) {
			this.border.dispose();
			this.border = new h3d_pass_Border(s,s);
		}
		return h3d_pass_Shadows.prototype.set_size.call(this,s);
	}
	,calcShadowBounds: function(camera) {
		var bounds = camera.orthoBounds;
		var mtmp = new h3d_Matrix();
		this.ctx.scene.iterVisibleMeshes(function(m) {
			if(m.primitive == null || !m.material.castShadows) {
				return;
			}
			var b = m.primitive.getBounds();
			if(b.xMin > b.xMax) {
				return;
			}
			var tmp = m.getAbsPos();
			mtmp.multiply3x4(tmp,camera.mcam);
			var x = b.xMin;
			var y = b.yMin;
			var z = b.zMin;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p_x = x;
			var p_y = y;
			var p_z = z;
			var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
			var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
			var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
			p_x = px;
			p_y = py;
			p_z = pz;
			if(p_x < bounds.xMin) {
				bounds.xMin = p_x;
			}
			if(p_x > bounds.xMax) {
				bounds.xMax = p_x;
			}
			if(p_y < bounds.yMin) {
				bounds.yMin = p_y;
			}
			if(p_y > bounds.yMax) {
				bounds.yMax = p_y;
			}
			if(p_z < bounds.zMin) {
				bounds.zMin = p_z;
			}
			if(p_z > bounds.zMax) {
				bounds.zMax = p_z;
			}
			var x1 = b.xMin;
			var y1 = b.yMin;
			var z1 = b.zMax;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var p_x1 = x1;
			var p_y1 = y1;
			var p_z1 = z1;
			var px1 = p_x1 * mtmp._11 + p_y1 * mtmp._21 + p_z1 * mtmp._31 + mtmp._41;
			var py1 = p_x1 * mtmp._12 + p_y1 * mtmp._22 + p_z1 * mtmp._32 + mtmp._42;
			var pz1 = p_x1 * mtmp._13 + p_y1 * mtmp._23 + p_z1 * mtmp._33 + mtmp._43;
			p_x1 = px1;
			p_y1 = py1;
			p_z1 = pz1;
			if(p_x1 < bounds.xMin) {
				bounds.xMin = p_x1;
			}
			if(p_x1 > bounds.xMax) {
				bounds.xMax = p_x1;
			}
			if(p_y1 < bounds.yMin) {
				bounds.yMin = p_y1;
			}
			if(p_y1 > bounds.yMax) {
				bounds.yMax = p_y1;
			}
			if(p_z1 < bounds.zMin) {
				bounds.zMin = p_z1;
			}
			if(p_z1 > bounds.zMax) {
				bounds.zMax = p_z1;
			}
			var x2 = b.xMin;
			var y2 = b.yMax;
			var z2 = b.zMin;
			if(z2 == null) {
				z2 = 0.;
			}
			if(y2 == null) {
				y2 = 0.;
			}
			if(x2 == null) {
				x2 = 0.;
			}
			var p_x2 = x2;
			var p_y2 = y2;
			var p_z2 = z2;
			var px2 = p_x2 * mtmp._11 + p_y2 * mtmp._21 + p_z2 * mtmp._31 + mtmp._41;
			var py2 = p_x2 * mtmp._12 + p_y2 * mtmp._22 + p_z2 * mtmp._32 + mtmp._42;
			var pz2 = p_x2 * mtmp._13 + p_y2 * mtmp._23 + p_z2 * mtmp._33 + mtmp._43;
			p_x2 = px2;
			p_y2 = py2;
			p_z2 = pz2;
			if(p_x2 < bounds.xMin) {
				bounds.xMin = p_x2;
			}
			if(p_x2 > bounds.xMax) {
				bounds.xMax = p_x2;
			}
			if(p_y2 < bounds.yMin) {
				bounds.yMin = p_y2;
			}
			if(p_y2 > bounds.yMax) {
				bounds.yMax = p_y2;
			}
			if(p_z2 < bounds.zMin) {
				bounds.zMin = p_z2;
			}
			if(p_z2 > bounds.zMax) {
				bounds.zMax = p_z2;
			}
			var x3 = b.xMin;
			var y3 = b.yMax;
			var z3 = b.zMax;
			if(z3 == null) {
				z3 = 0.;
			}
			if(y3 == null) {
				y3 = 0.;
			}
			if(x3 == null) {
				x3 = 0.;
			}
			var p_x3 = x3;
			var p_y3 = y3;
			var p_z3 = z3;
			var px3 = p_x3 * mtmp._11 + p_y3 * mtmp._21 + p_z3 * mtmp._31 + mtmp._41;
			var py3 = p_x3 * mtmp._12 + p_y3 * mtmp._22 + p_z3 * mtmp._32 + mtmp._42;
			var pz3 = p_x3 * mtmp._13 + p_y3 * mtmp._23 + p_z3 * mtmp._33 + mtmp._43;
			p_x3 = px3;
			p_y3 = py3;
			p_z3 = pz3;
			if(p_x3 < bounds.xMin) {
				bounds.xMin = p_x3;
			}
			if(p_x3 > bounds.xMax) {
				bounds.xMax = p_x3;
			}
			if(p_y3 < bounds.yMin) {
				bounds.yMin = p_y3;
			}
			if(p_y3 > bounds.yMax) {
				bounds.yMax = p_y3;
			}
			if(p_z3 < bounds.zMin) {
				bounds.zMin = p_z3;
			}
			if(p_z3 > bounds.zMax) {
				bounds.zMax = p_z3;
			}
			var x4 = b.xMax;
			var y4 = b.yMin;
			var z4 = b.zMin;
			if(z4 == null) {
				z4 = 0.;
			}
			if(y4 == null) {
				y4 = 0.;
			}
			if(x4 == null) {
				x4 = 0.;
			}
			var p_x4 = x4;
			var p_y4 = y4;
			var p_z4 = z4;
			var px4 = p_x4 * mtmp._11 + p_y4 * mtmp._21 + p_z4 * mtmp._31 + mtmp._41;
			var py4 = p_x4 * mtmp._12 + p_y4 * mtmp._22 + p_z4 * mtmp._32 + mtmp._42;
			var pz4 = p_x4 * mtmp._13 + p_y4 * mtmp._23 + p_z4 * mtmp._33 + mtmp._43;
			p_x4 = px4;
			p_y4 = py4;
			p_z4 = pz4;
			if(p_x4 < bounds.xMin) {
				bounds.xMin = p_x4;
			}
			if(p_x4 > bounds.xMax) {
				bounds.xMax = p_x4;
			}
			if(p_y4 < bounds.yMin) {
				bounds.yMin = p_y4;
			}
			if(p_y4 > bounds.yMax) {
				bounds.yMax = p_y4;
			}
			if(p_z4 < bounds.zMin) {
				bounds.zMin = p_z4;
			}
			if(p_z4 > bounds.zMax) {
				bounds.zMax = p_z4;
			}
			var x5 = b.xMax;
			var y5 = b.yMin;
			var z5 = b.zMax;
			if(z5 == null) {
				z5 = 0.;
			}
			if(y5 == null) {
				y5 = 0.;
			}
			if(x5 == null) {
				x5 = 0.;
			}
			var p_x5 = x5;
			var p_y5 = y5;
			var p_z5 = z5;
			var px5 = p_x5 * mtmp._11 + p_y5 * mtmp._21 + p_z5 * mtmp._31 + mtmp._41;
			var py5 = p_x5 * mtmp._12 + p_y5 * mtmp._22 + p_z5 * mtmp._32 + mtmp._42;
			var pz5 = p_x5 * mtmp._13 + p_y5 * mtmp._23 + p_z5 * mtmp._33 + mtmp._43;
			p_x5 = px5;
			p_y5 = py5;
			p_z5 = pz5;
			if(p_x5 < bounds.xMin) {
				bounds.xMin = p_x5;
			}
			if(p_x5 > bounds.xMax) {
				bounds.xMax = p_x5;
			}
			if(p_y5 < bounds.yMin) {
				bounds.yMin = p_y5;
			}
			if(p_y5 > bounds.yMax) {
				bounds.yMax = p_y5;
			}
			if(p_z5 < bounds.zMin) {
				bounds.zMin = p_z5;
			}
			if(p_z5 > bounds.zMax) {
				bounds.zMax = p_z5;
			}
			var x6 = b.xMax;
			var y6 = b.yMax;
			var z6 = b.zMin;
			if(z6 == null) {
				z6 = 0.;
			}
			if(y6 == null) {
				y6 = 0.;
			}
			if(x6 == null) {
				x6 = 0.;
			}
			var p_x6 = x6;
			var p_y6 = y6;
			var p_z6 = z6;
			var px6 = p_x6 * mtmp._11 + p_y6 * mtmp._21 + p_z6 * mtmp._31 + mtmp._41;
			var py6 = p_x6 * mtmp._12 + p_y6 * mtmp._22 + p_z6 * mtmp._32 + mtmp._42;
			var pz6 = p_x6 * mtmp._13 + p_y6 * mtmp._23 + p_z6 * mtmp._33 + mtmp._43;
			p_x6 = px6;
			p_y6 = py6;
			p_z6 = pz6;
			if(p_x6 < bounds.xMin) {
				bounds.xMin = p_x6;
			}
			if(p_x6 > bounds.xMax) {
				bounds.xMax = p_x6;
			}
			if(p_y6 < bounds.yMin) {
				bounds.yMin = p_y6;
			}
			if(p_y6 > bounds.yMax) {
				bounds.yMax = p_y6;
			}
			if(p_z6 < bounds.zMin) {
				bounds.zMin = p_z6;
			}
			if(p_z6 > bounds.zMax) {
				bounds.zMax = p_z6;
			}
			var x7 = b.xMax;
			var y7 = b.yMax;
			var z7 = b.zMax;
			if(z7 == null) {
				z7 = 0.;
			}
			if(y7 == null) {
				y7 = 0.;
			}
			if(x7 == null) {
				x7 = 0.;
			}
			var p_x7 = x7;
			var p_y7 = y7;
			var p_z7 = z7;
			var px7 = p_x7 * mtmp._11 + p_y7 * mtmp._21 + p_z7 * mtmp._31 + mtmp._41;
			var py7 = p_x7 * mtmp._12 + p_y7 * mtmp._22 + p_z7 * mtmp._32 + mtmp._42;
			var pz7 = p_x7 * mtmp._13 + p_y7 * mtmp._23 + p_z7 * mtmp._33 + mtmp._43;
			p_x7 = px7;
			p_y7 = py7;
			p_z7 = pz7;
			if(p_x7 < bounds.xMin) {
				bounds.xMin = p_x7;
			}
			if(p_x7 > bounds.xMax) {
				bounds.xMax = p_x7;
			}
			if(p_y7 < bounds.yMin) {
				bounds.yMin = p_y7;
			}
			if(p_y7 > bounds.yMax) {
				bounds.yMax = p_y7;
			}
			if(p_z7 < bounds.zMin) {
				bounds.zMin = p_z7;
			}
			if(p_z7 > bounds.zMax) {
				bounds.zMax = p_z7;
			}
		});
		if(this.mode == h3d_pass_RenderMode.Dynamic) {
			var cameraBounds = new h3d_col_Bounds();
			var _g = 0;
			var _g1 = this.ctx.camera.getFrustumCorners();
			while(_g < _g1.length) {
				var pt = _g1[_g];
				++_g;
				var m1 = camera.mcam;
				var px8 = pt.x * m1._11 + pt.y * m1._21 + pt.z * m1._31 + pt.w * m1._41;
				var py8 = pt.x * m1._12 + pt.y * m1._22 + pt.z * m1._32 + pt.w * m1._42;
				var pz8 = pt.x * m1._13 + pt.y * m1._23 + pt.z * m1._33 + pt.w * m1._43;
				var pw = pt.x * m1._14 + pt.y * m1._24 + pt.z * m1._34 + pt.w * m1._44;
				pt.x = px8;
				pt.y = py8;
				pt.z = pz8;
				pt.w = pw;
				var x8 = pt.x;
				var y8 = pt.y;
				var z8 = pt.z;
				if(x8 < cameraBounds.xMin) {
					cameraBounds.xMin = x8;
				}
				if(x8 > cameraBounds.xMax) {
					cameraBounds.xMax = x8;
				}
				if(y8 < cameraBounds.yMin) {
					cameraBounds.yMin = y8;
				}
				if(y8 > cameraBounds.yMax) {
					cameraBounds.yMax = y8;
				}
				if(z8 < cameraBounds.zMin) {
					cameraBounds.zMin = z8;
				}
				if(z8 > cameraBounds.zMax) {
					cameraBounds.zMax = z8;
				}
			}
			cameraBounds.zMin = bounds.zMin;
			bounds.intersection(bounds,cameraBounds);
		}
		bounds.scaleCenter(1.01);
	}
	,setGlobals: function() {
		h3d_pass_Shadows.prototype.setGlobals.call(this);
		if(this.mode != h3d_pass_RenderMode.Mixed || this.ctx.computingStatic) {
			var _this = this.lightCamera.orthoBounds;
			_this.xMin = 1e20;
			_this.xMax = -1e20;
			_this.yMin = 1e20;
			_this.yMax = -1e20;
			_this.zMin = 1e20;
			_this.zMax = -1e20;
			this.calcShadowBounds(this.lightCamera);
			this.lightCamera.update();
		}
		var v = this.getShadowProj();
		this.manager.globals.map.h[this.cameraViewProj_id] = v;
	}
	,syncShader: function(texture) {
		var _this = this.dshader;
		_this.constModified = true;
		_this.shadowMap__ = texture;
		var _this1 = this.dshader;
		_this1.constModified = true;
		_this1.shadowMapChannel__ = this.format == h3d_mat_Texture.nativeFormat ? hxsl_Channel.PackedFloat : hxsl_Channel.R;
		this.dshader.shadowBias__ = this.bias;
		this.dshader.shadowPower__ = this.power;
		this.dshader.shadowProj__ = this.getShadowProj();
		var _this2 = this.dshader;
		_this2.constModified = true;
		_this2.USE_ESM__ = this.samplingKind == h3d_pass_ShadowSamplingKind.ESM;
		this.dshader.shadowPower__ = this.power;
		var _this3 = this.dshader;
		_this3.constModified = true;
		_this3.USE_PCF__ = this.samplingKind == h3d_pass_ShadowSamplingKind.PCF;
		var _this4 = this.dshader.shadowRes__;
		var x = texture.width;
		var y = texture.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this4.x = x;
		_this4.y = y;
		_this4.z = 0.;
		_this4.w = 1.;
		this.dshader.pcfScale__ = this.pcfScale;
		var _this5 = this.dshader;
		_this5.constModified = true;
		_this5.pcfQuality__ = this.pcfQuality;
	}
	,draw: function(passes,sort) {
		if(!this.enabled) {
			return;
		}
		if(!this.filterPasses(passes)) {
			return;
		}
		var texture = this.ctx.textures.allocTarget("dirShadowMap",this.size,this.size,false,this.format);
		if(this.customDepth && (this.depth == null || this.depth.width != this.size || this.depth.height != this.size || this.depth.isDisposed())) {
			if(this.depth != null) {
				this.depth.dispose();
			}
			this.depth = new h3d_mat_DepthBuffer(this.size,this.size);
		}
		texture.depthBuffer = this.depth;
		if(this.mode != h3d_pass_RenderMode.Mixed || this.ctx.computingStatic) {
			var ct = this.ctx.camera.target;
			var slight = this.light == null ? this.ctx.lightSystem.shadowLight : this.light;
			var ldir = slight == null ? null : slight.getShadowDirection();
			if(ldir == null) {
				var _this = this.lightCamera.target;
				var x = 0;
				var y = 0;
				var z = -1;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				_this.z = z;
				_this.w = 1.;
			} else {
				var _this1 = this.lightCamera.target;
				var x1 = ldir.x;
				var y1 = ldir.y;
				var z1 = ldir.z;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				_this1.x = x1;
				_this1.y = y1;
				_this1.z = z1;
				_this1.w = 1.;
				this.lightCamera.target.normalize();
			}
			this.lightCamera.target.x += ct.x;
			this.lightCamera.target.y += ct.y;
			this.lightCamera.target.z += ct.z;
			var _this2 = this.lightCamera.pos;
			_this2.x = ct.x;
			_this2.y = ct.y;
			_this2.z = ct.z;
			_this2.w = ct.w;
			this.lightCamera.update();
		}
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(16777215,1);
		h3d_pass_Shadows.prototype.draw.call(this,passes,sort);
		if(this.border != null) {
			this.border.render();
		}
		this.ctx.engine.popTarget();
		if(this.mode == h3d_pass_RenderMode.Mixed && !this.ctx.computingStatic) {
			var merge = this.ctx.textures.allocTarget("mergedDirShadowMap",this.size,this.size,false,this.format);
			this.mergePass.shader.texA__ = texture;
			this.mergePass.shader.texB__ = this.staticTexture;
			this.ctx.engine.pushTarget(merge);
			this.mergePass.render();
			this.ctx.engine.popTarget();
			texture = merge;
		}
		if(this.blur.radius > 0 && (this.mode != h3d_pass_RenderMode.Mixed || !this.ctx.computingStatic)) {
			this.blur.apply(this.ctx,texture);
		}
		this.syncShader(texture);
	}
	,__class__: h3d_pass_DirShadowMap
});
var h3d_pass_DefaultShadowMap = function(size,format) {
	if(size == null) {
		size = 1024;
	}
	if(format != null) {
		this.format = format;
	}
	h3d_pass_DirShadowMap.call(this,null);
	this.set_size(size);
	this.color = new h3d_Vector();
	this.set_mode(h3d_pass_RenderMode.Dynamic);
	this.shadowMapId = hxsl_Globals.allocID("shadow.map");
	this.shadowProjId = hxsl_Globals.allocID("shadow.proj");
	this.shadowColorId = hxsl_Globals.allocID("shadow.color");
	this.shadowPowerId = hxsl_Globals.allocID("shadow.power");
	this.shadowBiasId = hxsl_Globals.allocID("shadow.bias");
};
$hxClasses["h3d.pass.DefaultShadowMap"] = h3d_pass_DefaultShadowMap;
h3d_pass_DefaultShadowMap.__name__ = "h3d.pass.DefaultShadowMap";
h3d_pass_DefaultShadowMap.__super__ = h3d_pass_DirShadowMap;
h3d_pass_DefaultShadowMap.prototype = $extend(h3d_pass_DirShadowMap.prototype,{
	shadowMapId: null
	,shadowProjId: null
	,shadowColorId: null
	,shadowPowerId: null
	,shadowBiasId: null
	,color: null
	,draw: function(passes,sort) {
		h3d_pass_DirShadowMap.prototype.draw.call(this,passes,sort);
		this.ctx.setGlobalID(this.shadowMapId,{ texture : this.dshader.shadowMap__, channel : this.format == h3d_mat_Texture.nativeFormat ? hxsl_Channel.PackedFloat : hxsl_Channel.R});
		this.ctx.setGlobalID(this.shadowProjId,this.getShadowProj());
		this.ctx.setGlobalID(this.shadowColorId,this.color);
		this.ctx.setGlobalID(this.shadowPowerId,this.power);
		this.ctx.setGlobalID(this.shadowBiasId,this.bias);
	}
	,__class__: h3d_pass_DefaultShadowMap
});
var h3d_pass__$HardwarePick_FixedColor = function() {
	this.viewport__ = new h3d_Vector();
	this.colorID__ = new h3d_Vector();
	hxsl_Shader.call(this);
};
$hxClasses["h3d.pass._HardwarePick.FixedColor"] = h3d_pass__$HardwarePick_FixedColor;
h3d_pass__$HardwarePick_FixedColor.__name__ = "h3d.pass._HardwarePick.FixedColor";
h3d_pass__$HardwarePick_FixedColor.__super__ = hxsl_Shader;
h3d_pass__$HardwarePick_FixedColor.prototype = $extend(hxsl_Shader.prototype,{
	colorID__: null
	,viewport__: null
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.colorID__;
		case 1:
			return this.viewport__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_pass__$HardwarePick_FixedColor
});
var h3d_pass_PassList = function(current) {
	this.current = current;
	this.discarded = this.lastDisc = null;
};
$hxClasses["h3d.pass.PassList"] = h3d_pass_PassList;
h3d_pass_PassList.__name__ = "h3d.pass.PassList";
h3d_pass_PassList.prototype = {
	current: null
	,discarded: null
	,lastDisc: null
	,clear: function() {
		if(this.current == null) {
			return;
		}
		if(this.discarded == null) {
			this.discarded = this.current;
		} else {
			this.lastDisc.next = this.current;
		}
		var p = this.current;
		while(p.next != null) p = p.next;
		this.lastDisc = p;
		this.current = null;
	}
	,__class__: h3d_pass_PassList
};
var h3d_pass_PassObject = function() {
	this.texture = 0;
};
$hxClasses["h3d.pass.PassObject"] = h3d_pass_PassObject;
h3d_pass_PassObject.__name__ = "h3d.pass.PassObject";
h3d_pass_PassObject.prototype = {
	next: null
	,nextAlloc: null
	,pass: null
	,obj: null
	,index: null
	,shaders: null
	,shader: null
	,depth: null
	,texture: null
	,__class__: h3d_pass_PassObject
};
var h3d_pass_ShaderManager = function(output) {
	this.shaderCache = hxsl_Cache.get();
	this.globals = new hxsl_Globals();
	this.currentOutput = new hxsl_ShaderList(null);
	this.setOutput(output);
};
$hxClasses["h3d.pass.ShaderManager"] = h3d_pass_ShaderManager;
h3d_pass_ShaderManager.__name__ = "h3d.pass.ShaderManager";
h3d_pass_ShaderManager.prototype = {
	globals: null
	,shaderCache: null
	,currentOutput: null
	,setOutput: function(output) {
		if(output == null) {
			output = [hxsl_Output.Value("output.color")];
		}
		this.currentOutput.s = this.shaderCache.getLinkShader(output);
	}
	,fillRec: function(v,type,out,pos) {
		switch(type._hx_index) {
		case 1:
			out[pos] = v;
			return 1;
		case 3:
			out[pos] = v;
			return 1;
		case 5:
			var _g1 = type.t;
			var n = type.size;
			var v1 = v;
			out[pos++] = v1.x;
			out[pos++] = v1.y;
			switch(n) {
			case 3:
				out[pos++] = v1.z;
				break;
			case 4:
				out[pos++] = v1.z;
				out[pos++] = v1.w;
				break;
			}
			return n;
		case 6:
			var m = v;
			out[pos++] = m._11;
			out[pos++] = m._21;
			out[pos++] = m._31;
			out[pos++] = 0;
			out[pos++] = m._12;
			out[pos++] = m._22;
			out[pos++] = m._32;
			out[pos++] = 0;
			out[pos++] = m._13;
			out[pos++] = m._23;
			out[pos++] = m._33;
			out[pos++] = 0;
			return 12;
		case 7:
			var m1 = v;
			out[pos++] = m1._11;
			out[pos++] = m1._21;
			out[pos++] = m1._31;
			out[pos++] = m1._41;
			out[pos++] = m1._12;
			out[pos++] = m1._22;
			out[pos++] = m1._32;
			out[pos++] = m1._42;
			out[pos++] = m1._13;
			out[pos++] = m1._23;
			out[pos++] = m1._33;
			out[pos++] = m1._43;
			out[pos++] = m1._14;
			out[pos++] = m1._24;
			out[pos++] = m1._34;
			out[pos++] = m1._44;
			return 16;
		case 8:
			var m2 = v;
			out[pos++] = m2._11;
			out[pos++] = m2._21;
			out[pos++] = m2._31;
			out[pos++] = m2._41;
			out[pos++] = m2._12;
			out[pos++] = m2._22;
			out[pos++] = m2._32;
			out[pos++] = m2._42;
			out[pos++] = m2._13;
			out[pos++] = m2._23;
			out[pos++] = m2._33;
			out[pos++] = m2._43;
			return 12;
		case 13:
			var vl = type.vl;
			var tot = 0;
			var _g = 0;
			while(_g < vl.length) {
				var vv = vl[_g];
				++_g;
				tot += this.fillRec(Reflect.field(v,vv.name),vv.type,out,pos + tot);
			}
			return tot;
		case 15:
			var _g4 = type.size;
			var _g3 = type.t;
			switch(_g3._hx_index) {
			case 3:
				if(_g4._hx_index == 0) {
					var len = _g4.v;
					var v2 = v;
					var size = 0;
					var count = v2.length < len ? v2.length : len;
					var _g2 = 0;
					var _g11 = count;
					while(_g2 < _g11) {
						var i = _g2++;
						out[pos++] = v2[i];
					}
					return len;
				} else {
					throw new js__$Boot_HaxeError("assert " + Std.string(type));
				}
				break;
			case 5:
				if(_g3.size == 4) {
					if(_g3.t._hx_index == 1) {
						if(_g4._hx_index == 0) {
							var len1 = _g4.v;
							var v3 = v;
							var _g5 = 0;
							var _g12 = len1;
							while(_g5 < _g12) {
								var i1 = _g5++;
								var n1 = v3[i1];
								if(n1 == null) {
									break;
								}
								out[pos++] = n1.x;
								out[pos++] = n1.y;
								out[pos++] = n1.z;
								out[pos++] = n1.w;
							}
							return len1 * 4;
						} else {
							throw new js__$Boot_HaxeError("assert " + Std.string(type));
						}
					} else if(_g4._hx_index == 0) {
						var len2 = _g4.v;
						var t = _g3;
						var v4 = v;
						var size1 = 0;
						var _g6 = 0;
						var _g13 = len2;
						while(_g6 < _g13) {
							var i2 = _g6++;
							var n2 = v4[i2];
							if(n2 == null) {
								break;
							}
							size1 = this.fillRec(n2,t,out,pos);
							pos += size1;
						}
						return len2 * size1;
					} else {
						throw new js__$Boot_HaxeError("assert " + Std.string(type));
					}
				} else if(_g4._hx_index == 0) {
					var len3 = _g4.v;
					var t1 = _g3;
					var v5 = v;
					var size2 = 0;
					var _g7 = 0;
					var _g14 = len3;
					while(_g7 < _g14) {
						var i3 = _g7++;
						var n3 = v5[i3];
						if(n3 == null) {
							break;
						}
						size2 = this.fillRec(n3,t1,out,pos);
						pos += size2;
					}
					return len3 * size2;
				} else {
					throw new js__$Boot_HaxeError("assert " + Std.string(type));
				}
				break;
			case 8:
				if(_g4._hx_index == 0) {
					var len4 = _g4.v;
					var v6 = v;
					var _g8 = 0;
					var _g15 = len4;
					while(_g8 < _g15) {
						var i4 = _g8++;
						var m3 = v6[i4];
						if(m3 == null) {
							break;
						}
						out[pos++] = m3._11;
						out[pos++] = m3._21;
						out[pos++] = m3._31;
						out[pos++] = m3._41;
						out[pos++] = m3._12;
						out[pos++] = m3._22;
						out[pos++] = m3._32;
						out[pos++] = m3._42;
						out[pos++] = m3._13;
						out[pos++] = m3._23;
						out[pos++] = m3._33;
						out[pos++] = m3._43;
					}
					return len4 * 12;
				} else {
					throw new js__$Boot_HaxeError("assert " + Std.string(type));
				}
				break;
			default:
				if(_g4._hx_index == 0) {
					var len5 = _g4.v;
					var t2 = _g3;
					var v7 = v;
					var size3 = 0;
					var _g9 = 0;
					var _g16 = len5;
					while(_g9 < _g16) {
						var i5 = _g9++;
						var n4 = v7[i5];
						if(n4 == null) {
							break;
						}
						size3 = this.fillRec(n4,t2,out,pos);
						pos += size3;
					}
					return len5 * size3;
				} else {
					throw new js__$Boot_HaxeError("assert " + Std.string(type));
				}
			}
			break;
		default:
			throw new js__$Boot_HaxeError("assert " + Std.string(type));
		}
	}
	,shaderInfo: function(shaders,path) {
		var name = path.split(".").pop();
		while(shaders != null) {
			var inst = shaders.s.instance;
			var _g = 0;
			var _g1 = inst.shader.vars;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				if(v.name == name) {
					return shaders.s.toString();
				}
			}
			shaders = shaders.next;
		}
		return "(not found)";
	}
	,fillGlobals: function(buf,s) {
		var _gthis = this;
		var s1 = s.vertex;
		var g = s1.globals;
		var ptr = buf.vertex.globals;
		while(g != null) {
			var v = _gthis.globals.map.h[g.gid];
			if(v == null) {
				if(g.path == "__consts__") {
					_gthis.fillRec(s1.consts,g.type,ptr,g.pos);
					g = g.next;
					continue;
				}
				throw new js__$Boot_HaxeError("Missing global value " + g.path);
			}
			_gthis.fillRec(v,g.type,ptr,g.pos);
			g = g.next;
		}
		var s2 = s.fragment;
		var g1 = s2.globals;
		var ptr1 = buf.fragment.globals;
		while(g1 != null) {
			var v1 = _gthis.globals.map.h[g1.gid];
			if(v1 == null) {
				if(g1.path == "__consts__") {
					_gthis.fillRec(s2.consts,g1.type,ptr1,g1.pos);
					g1 = g1.next;
					continue;
				}
				throw new js__$Boot_HaxeError("Missing global value " + g1.path);
			}
			_gthis.fillRec(v1,g1.type,ptr1,g1.pos);
			g1 = g1.next;
		}
	}
	,fillParams: function(buf,s,shaders) {
		var _gthis = this;
		var curInstance = -1;
		var curInstanceValue = null;
		var buf1 = buf.vertex;
		var s1 = s.vertex;
		var p = s1.params;
		var ptr = buf1.params;
		while(p != null) {
			var v;
			if(p.perObjectGlobal == null) {
				if(p.type == hxsl_Type.TFloat) {
					var index = p.instance;
					var i;
					if(curInstance == index) {
						i = curInstanceValue;
					} else {
						var si = shaders;
						curInstance = index;
						while(--index > 0) si = si.next;
						curInstanceValue = si.s;
						i = curInstanceValue;
					}
					ptr[p.pos] = i.getParamFloatValue(p.index);
					p = p.next;
					continue;
				}
				var index1 = p.instance;
				var v1;
				if(curInstance == index1) {
					v1 = curInstanceValue;
				} else {
					var si1 = shaders;
					curInstance = index1;
					while(--index1 > 0) si1 = si1.next;
					curInstanceValue = si1.s;
					v1 = curInstanceValue;
				}
				v = v1.getParamValue(p.index);
				if(v == null) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(curInstanceValue) + "." + p.name);
				}
			} else if(p.perObjectGlobal != null) {
				var v2 = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v2 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				var _g = p.type;
				var v3;
				if(_g._hx_index == 17) {
					var _g1 = _g.size;
					v3 = true;
				} else {
					v3 = false;
				}
				v = v3 ? v2.texture : v2;
			} else {
				var si2 = shaders;
				var n = p.instance;
				while(--n > 0) si2 = si2.next;
				var v4 = si2.s.getParamValue(p.index);
				if(v4 == null) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si2.s) + "." + p.name);
				}
				v = v4;
			}
			_gthis.fillRec(v,p.type,ptr,p.pos);
			p = p.next;
		}
		var tid = 0;
		var p1 = s1.textures;
		while(p1 != null) {
			var this1 = buf1.tex;
			var index2 = tid++;
			var opt = !h3d_pass_ShaderManager.STRICT;
			if(opt == null) {
				opt = false;
			}
			var val;
			if(p1.perObjectGlobal != null) {
				var v5 = _gthis.globals.map.h[p1.perObjectGlobal.gid];
				if(v5 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p1.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p1.perObjectGlobal.path));
				}
				var _g2 = p1.type;
				var val1;
				if(_g2._hx_index == 17) {
					var _g11 = _g2.size;
					val1 = true;
				} else {
					val1 = false;
				}
				val = val1 ? v5.texture : v5;
			} else {
				var si3 = shaders;
				var n1 = p1.instance;
				while(--n1 > 0) si3 = si3.next;
				var v6 = si3.s.getParamValue(p1.index);
				if(v6 == null && !opt) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si3.s) + "." + p1.name);
				}
				val = v6;
			}
			this1[index2] = val;
			p1 = p1.next;
		}
		var p2 = s1.buffers;
		var bid = 0;
		while(p2 != null) {
			var opt1 = !h3d_pass_ShaderManager.STRICT;
			if(opt1 == null) {
				opt1 = false;
			}
			var b;
			if(p2.perObjectGlobal != null) {
				var v7 = _gthis.globals.map.h[p2.perObjectGlobal.gid];
				if(v7 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p2.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p2.perObjectGlobal.path));
				}
				var _g3 = p2.type;
				var b1;
				if(_g3._hx_index == 17) {
					var _g12 = _g3.size;
					b1 = true;
				} else {
					b1 = false;
				}
				b = b1 ? v7.texture : v7;
			} else {
				var si4 = shaders;
				var n2 = p2.instance;
				while(--n2 > 0) si4 = si4.next;
				var v8 = si4.s.getParamValue(p2.index);
				if(v8 == null && !opt1) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si4.s) + "." + p2.name);
				}
				b = v8;
			}
			buf1.buffers[bid++] = b;
			p2 = p2.next;
		}
		var buf2 = buf.fragment;
		var s2 = s.fragment;
		var p3 = s2.params;
		var ptr1 = buf2.params;
		while(p3 != null) {
			var v9;
			if(p3.perObjectGlobal == null) {
				if(p3.type == hxsl_Type.TFloat) {
					var index3 = p3.instance;
					var i1;
					if(curInstance == index3) {
						i1 = curInstanceValue;
					} else {
						var si5 = shaders;
						curInstance = index3;
						while(--index3 > 0) si5 = si5.next;
						curInstanceValue = si5.s;
						i1 = curInstanceValue;
					}
					ptr1[p3.pos] = i1.getParamFloatValue(p3.index);
					p3 = p3.next;
					continue;
				}
				var index4 = p3.instance;
				var v10;
				if(curInstance == index4) {
					v10 = curInstanceValue;
				} else {
					var si6 = shaders;
					curInstance = index4;
					while(--index4 > 0) si6 = si6.next;
					curInstanceValue = si6.s;
					v10 = curInstanceValue;
				}
				v9 = v10.getParamValue(p3.index);
				if(v9 == null) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(curInstanceValue) + "." + p3.name);
				}
			} else if(p3.perObjectGlobal != null) {
				var v11 = _gthis.globals.map.h[p3.perObjectGlobal.gid];
				if(v11 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p3.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p3.perObjectGlobal.path));
				}
				var _g4 = p3.type;
				var v12;
				if(_g4._hx_index == 17) {
					var _g13 = _g4.size;
					v12 = true;
				} else {
					v12 = false;
				}
				v9 = v12 ? v11.texture : v11;
			} else {
				var si7 = shaders;
				var n3 = p3.instance;
				while(--n3 > 0) si7 = si7.next;
				var v13 = si7.s.getParamValue(p3.index);
				if(v13 == null) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si7.s) + "." + p3.name);
				}
				v9 = v13;
			}
			_gthis.fillRec(v9,p3.type,ptr1,p3.pos);
			p3 = p3.next;
		}
		var tid1 = 0;
		var p4 = s2.textures;
		while(p4 != null) {
			var this2 = buf2.tex;
			var index5 = tid1++;
			var opt2 = !h3d_pass_ShaderManager.STRICT;
			if(opt2 == null) {
				opt2 = false;
			}
			var val2;
			if(p4.perObjectGlobal != null) {
				var v14 = _gthis.globals.map.h[p4.perObjectGlobal.gid];
				if(v14 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p4.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p4.perObjectGlobal.path));
				}
				var _g5 = p4.type;
				var val3;
				if(_g5._hx_index == 17) {
					var _g14 = _g5.size;
					val3 = true;
				} else {
					val3 = false;
				}
				val2 = val3 ? v14.texture : v14;
			} else {
				var si8 = shaders;
				var n4 = p4.instance;
				while(--n4 > 0) si8 = si8.next;
				var v15 = si8.s.getParamValue(p4.index);
				if(v15 == null && !opt2) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si8.s) + "." + p4.name);
				}
				val2 = v15;
			}
			this2[index5] = val2;
			p4 = p4.next;
		}
		var p5 = s2.buffers;
		var bid1 = 0;
		while(p5 != null) {
			var opt3 = !h3d_pass_ShaderManager.STRICT;
			if(opt3 == null) {
				opt3 = false;
			}
			var b2;
			if(p5.perObjectGlobal != null) {
				var v16 = _gthis.globals.map.h[p5.perObjectGlobal.gid];
				if(v16 == null) {
					throw new js__$Boot_HaxeError("Missing global value " + p5.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p5.perObjectGlobal.path));
				}
				var _g6 = p5.type;
				var b3;
				if(_g6._hx_index == 17) {
					var _g15 = _g6.size;
					b3 = true;
				} else {
					b3 = false;
				}
				b2 = b3 ? v16.texture : v16;
			} else {
				var si9 = shaders;
				var n5 = p5.instance;
				while(--n5 > 0) si9 = si9.next;
				var v17 = si9.s.getParamValue(p5.index);
				if(v17 == null && !opt3) {
					throw new js__$Boot_HaxeError("Missing param value " + Std.string(si9.s) + "." + p5.name);
				}
				b2 = v17;
			}
			buf2.buffers[bid1++] = b2;
			p5 = p5.next;
		}
	}
	,compileShaders: function(shaders,batchMode) {
		if(batchMode == null) {
			batchMode = false;
		}
		this.globals.maxChannels = 0;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			s1.updateConstants(this.globals);
		}
		this.currentOutput.next = shaders;
		var s2 = this.shaderCache.link(this.currentOutput,batchMode);
		this.currentOutput.next = null;
		return s2;
	}
	,__class__: h3d_pass_ShaderManager
};
var h3d_pass_RenderMode = $hxEnums["h3d.pass.RenderMode"] = { __ename__ : true, __constructs__ : ["None","Static","Dynamic","Mixed"]
	,None: {_hx_index:0,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Static: {_hx_index:1,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Dynamic: {_hx_index:2,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Mixed: {_hx_index:3,__enum__:"h3d.pass.RenderMode",toString:$estr}
};
h3d_pass_RenderMode.__empty_constructs__ = [h3d_pass_RenderMode.None,h3d_pass_RenderMode.Static,h3d_pass_RenderMode.Dynamic,h3d_pass_RenderMode.Mixed];
var h3d_pass_ShadowSamplingKind = $hxEnums["h3d.pass.ShadowSamplingKind"] = { __ename__ : true, __constructs__ : ["None","PCF","ESM"]
	,None: {_hx_index:0,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
	,PCF: {_hx_index:1,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
	,ESM: {_hx_index:2,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
};
h3d_pass_ShadowSamplingKind.__empty_constructs__ = [h3d_pass_ShadowSamplingKind.None,h3d_pass_ShadowSamplingKind.PCF,h3d_pass_ShadowSamplingKind.ESM];
var h3d_pass_SortByMaterial = function() {
	this.textureCount = 1;
	this.shaderCount = 1;
	this.shaderIdMap = [];
	this.textureIdMap = [];
};
$hxClasses["h3d.pass.SortByMaterial"] = h3d_pass_SortByMaterial;
h3d_pass_SortByMaterial.__name__ = "h3d.pass.SortByMaterial";
h3d_pass_SortByMaterial.prototype = {
	shaderCount: null
	,textureCount: null
	,shaderIdMap: null
	,textureIdMap: null
	,sort: function(passes) {
		var _gthis = this;
		var shaderStart = this.shaderCount;
		var textureStart = this.textureCount;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			if(this.shaderIdMap[p.shader.id] < shaderStart || this.shaderIdMap[p.shader.id] == null) {
				this.shaderIdMap[p.shader.id] = this.shaderCount++;
			}
			if(this.textureIdMap[p.texture] < textureStart || this.textureIdMap[p.shader.id] == null) {
				this.textureIdMap[p.texture] = this.textureCount++;
			}
		}
		var list = passes.current;
		var tmp1;
		if(list == null) {
			tmp1 = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p1;
			var q;
			var e;
			var tail;
			while(true) {
				p1 = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p1 != null) {
					++nmerges;
					q = p1;
					psize = 0;
					var _g = 0;
					var _g1 = insize;
					while(_g < _g1) {
						var i = _g++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else {
							var tmp2;
							if(!(qsize == 0 || q == null)) {
								var d = _gthis.shaderIdMap[p1.shader.id] - _gthis.shaderIdMap[q.shader.id];
								tmp2 = (d != 0 ? d : _gthis.textureIdMap[p1.texture] - _gthis.textureIdMap[q.texture]) <= 0;
							} else {
								tmp2 = true;
							}
							if(tmp2) {
								e = p1;
								p1 = p1.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p1 = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp1 = list;
		}
		passes.current = tmp1;
	}
	,__class__: h3d_pass_SortByMaterial
};
var h3d_prim_Plane2D = function() {
	h3d_prim_Primitive.call(this);
};
$hxClasses["h3d.prim.Plane2D"] = h3d_prim_Plane2D;
h3d_prim_Plane2D.__name__ = "h3d.prim.Plane2D";
h3d_prim_Plane2D.get = function() {
	var engine = h3d_Engine.CURRENT;
	var inst = engine.resCache.h[h3d_prim_Plane2D.__id__];
	if(inst == null) {
		inst = new h3d_prim_Plane2D();
		engine.resCache.set(h3d_prim_Plane2D,inst);
	}
	return inst;
};
h3d_prim_Plane2D.__super__ = h3d_prim_Primitive;
h3d_prim_Plane2D.prototype = $extend(h3d_prim_Primitive.prototype,{
	alloc: function(engine) {
		var this1 = hxd__$FloatBuffer_Float32Expand_$Impl_$._new(0);
		var v = this1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize1 = v.array.length << 1;
			if(newSize1 < 128) {
				newSize1 = 128;
			}
			var newArray1 = new Float32Array(newSize1);
			newArray1.set(v.array);
			v.array = newArray1;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize2 = v.array.length << 1;
			if(newSize2 < 128) {
				newSize2 = 128;
			}
			var newArray2 = new Float32Array(newSize2);
			newArray2.set(v.array);
			v.array = newArray2;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize3 = v.array.length << 1;
			if(newSize3 < 128) {
				newSize3 = 128;
			}
			var newArray3 = new Float32Array(newSize3);
			newArray3.set(v.array);
			v.array = newArray3;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize4 = v.array.length << 1;
			if(newSize4 < 128) {
				newSize4 = 128;
			}
			var newArray4 = new Float32Array(newSize4);
			newArray4.set(v.array);
			v.array = newArray4;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize5 = v.array.length << 1;
			if(newSize5 < 128) {
				newSize5 = 128;
			}
			var newArray5 = new Float32Array(newSize5);
			newArray5.set(v.array);
			v.array = newArray5;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize6 = v.array.length << 1;
			if(newSize6 < 128) {
				newSize6 = 128;
			}
			var newArray6 = new Float32Array(newSize6);
			newArray6.set(v.array);
			v.array = newArray6;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize7 = v.array.length << 1;
			if(newSize7 < 128) {
				newSize7 = 128;
			}
			var newArray7 = new Float32Array(newSize7);
			newArray7.set(v.array);
			v.array = newArray7;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize8 = v.array.length << 1;
			if(newSize8 < 128) {
				newSize8 = 128;
			}
			var newArray8 = new Float32Array(newSize8);
			newArray8.set(v.array);
			v.array = newArray8;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize9 = v.array.length << 1;
			if(newSize9 < 128) {
				newSize9 = 128;
			}
			var newArray9 = new Float32Array(newSize9);
			newArray9.set(v.array);
			v.array = newArray9;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize10 = v.array.length << 1;
			if(newSize10 < 128) {
				newSize10 = 128;
			}
			var newArray10 = new Float32Array(newSize10);
			newArray10.set(v.array);
			v.array = newArray10;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize11 = v.array.length << 1;
			if(newSize11 < 128) {
				newSize11 = 128;
			}
			var newArray11 = new Float32Array(newSize11);
			newArray11.set(v.array);
			v.array = newArray11;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize12 = v.array.length << 1;
			if(newSize12 < 128) {
				newSize12 = 128;
			}
			var newArray12 = new Float32Array(newSize12);
			newArray12.set(v.array);
			v.array = newArray12;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize13 = v.array.length << 1;
			if(newSize13 < 128) {
				newSize13 = 128;
			}
			var newArray13 = new Float32Array(newSize13);
			newArray13.set(v.array);
			v.array = newArray13;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize14 = v.array.length << 1;
			if(newSize14 < 128) {
				newSize14 = 128;
			}
			var newArray14 = new Float32Array(newSize14);
			newArray14.set(v.array);
			v.array = newArray14;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize15 = v.array.length << 1;
			if(newSize15 < 128) {
				newSize15 = 128;
			}
			var newArray15 = new Float32Array(newSize15);
			newArray15.set(v.array);
			v.array = newArray15;
		}
		v.array[v.pos++] = 0;
		this.buffer = h3d_Buffer.ofFloats(v,4,[h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat]);
	}
	,render: function(engine) {
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(engine);
		}
		engine.renderBuffer(this.buffer,engine.mem.quadIndexes,2,0,-1);
	}
	,__class__: h3d_prim_Plane2D
});
var h3d_prim_RawPrimitive = function(inf,persist) {
	if(persist == null) {
		persist = false;
	}
	h3d_prim_Primitive.call(this);
	this.onContextLost = function() {
		return inf;
	};
	this.bounds = inf.bounds;
	this.alloc(null);
	if(!persist) {
		this.onContextLost = null;
	}
};
$hxClasses["h3d.prim.RawPrimitive"] = h3d_prim_RawPrimitive;
h3d_prim_RawPrimitive.__name__ = "h3d.prim.RawPrimitive";
h3d_prim_RawPrimitive.__super__ = h3d_prim_Primitive;
h3d_prim_RawPrimitive.prototype = $extend(h3d_prim_Primitive.prototype,{
	vcount: null
	,tcount: null
	,bounds: null
	,onContextLost: null
	,alloc: function(engine) {
		if(this.onContextLost == null) {
			throw new js__$Boot_HaxeError("Cannot realloc " + Std.string(this));
		}
		var inf = this.onContextLost();
		var flags = [];
		if(inf.ibuf == null) {
			flags.push(inf.quads ? h3d_BufferFlag.Quads : h3d_BufferFlag.Triangles);
		}
		if(inf.stride < 8) {
			flags.push(h3d_BufferFlag.RawFormat);
		}
		this.buffer = h3d_Buffer.ofFloats(inf.vbuf,inf.stride,flags);
		this.vcount = this.buffer.vertices;
		this.tcount = inf.ibuf != null ? inf.ibuf.length / 3 | 0 : inf.quads ? this.vcount >> 1 : this.vcount / 3 | 0;
		if(inf.ibuf != null) {
			this.indexes = h3d_Indexes.alloc(inf.ibuf);
		} else if(this.indexes != null) {
			this.indexes.dispose();
			this.indexes = null;
		}
	}
	,getBounds: function() {
		if(this.bounds == null) {
			throw new js__$Boot_HaxeError("Bounds not defined for " + Std.string(this));
		}
		return this.bounds;
	}
	,__class__: h3d_prim_RawPrimitive
});
var h3d_scene_Object = function(parent) {
	var this1 = 0;
	this.flags = this1;
	this.absPos = new h3d_Matrix();
	this.absPos.identity();
	this.x = 0;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	this.y = 0;
	var f1 = 1;
	var b1 = true;
	if(b1) {
		this.flags |= f1;
	} else {
		this.flags &= ~f1;
	}
	this.z = 0;
	var f2 = 1;
	var b2 = true;
	if(b2) {
		this.flags |= f2;
	} else {
		this.flags &= ~f2;
	}
	this.scaleX = 1;
	var f3 = 1;
	var b3 = true;
	if(b3) {
		this.flags |= f3;
	} else {
		this.flags &= ~f3;
	}
	this.scaleY = 1;
	var f4 = 1;
	var b4 = true;
	if(b4) {
		this.flags |= f4;
	} else {
		this.flags &= ~f4;
	}
	this.scaleZ = 1;
	var f5 = 1;
	var b5 = true;
	if(b5) {
		this.flags |= f5;
	} else {
		this.flags &= ~f5;
	}
	this.qRot = new h3d_Quat();
	var f6 = 1;
	var b6 = this.follow != null;
	if(b6) {
		this.flags |= f6;
	} else {
		this.flags &= ~f6;
	}
	var f7 = 2;
	this.flags |= f7;
	this.children = [];
	if(parent != null) {
		parent.addChild(this);
	}
};
$hxClasses["h3d.scene.Object"] = h3d_scene_Object;
h3d_scene_Object.__name__ = "h3d.scene.Object";
h3d_scene_Object.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_scene_Object.prototype = {
	flags: null
	,children: null
	,parent: null
	,name: null
	,x: null
	,y: null
	,z: null
	,scaleX: null
	,scaleY: null
	,scaleZ: null
	,follow: null
	,defaultTransform: null
	,currentAnimation: null
	,absPos: null
	,invPos: null
	,qRot: null
	,lastFrame: null
	,localToGlobal: function(pt) {
		this.syncPos();
		if(pt == null) {
			pt = new h3d_Vector();
		}
		var m = this.absPos;
		var px = pt.x * m._11 + pt.y * m._21 + pt.z * m._31 + pt.w * m._41;
		var py = pt.x * m._12 + pt.y * m._22 + pt.z * m._32 + pt.w * m._42;
		var pz = pt.x * m._13 + pt.y * m._23 + pt.z * m._33 + pt.w * m._43;
		pt.x = px;
		pt.y = py;
		pt.z = pz;
		return pt;
	}
	,getInvPos: function() {
		this.syncPos();
		if(this.invPos == null) {
			this.invPos = new h3d_Matrix();
			this.invPos._44 = 0;
		}
		if(this.invPos._44 == 0) {
			this.invPos.inverse3x4(this.absPos);
		}
		return this.invPos;
	}
	,addChild: function(o) {
		this.addChildAt(o,this.children.length);
	}
	,addChildAt: function(o,pos) {
		if(pos < 0) {
			pos = 0;
		}
		if(pos > this.children.length) {
			pos = this.children.length;
		}
		var p = this;
		while(p != null) {
			if(p == o) {
				throw new js__$Boot_HaxeError("Recursive addChild");
			}
			p = p.parent;
		}
		if(o.parent != null) {
			var old = (o.flags & 32) != 0;
			var f = 32;
			o.flags &= ~f;
			o.parent.removeChild(o);
			var f1 = 32;
			if(old) {
				o.flags |= f1;
			} else {
				o.flags &= ~f1;
			}
		}
		this.children.splice(pos,0,o);
		if((this.flags & 32) == 0 && (o.flags & 32) != 0) {
			o.onRemove();
		}
		o.parent = this;
		var f2 = 1;
		var b = true;
		if(b) {
			o.flags |= f2;
		} else {
			o.flags &= ~f2;
		}
		if((this.flags & 32) != 0) {
			if((o.flags & 32) == 0) {
				o.onAdd();
			} else {
				o.onParentChanged();
			}
		}
	}
	,iterVisibleMeshes: function(callb) {
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0) {
			return;
		}
		if((this.flags & 4) == 0) {
			var m = ((this) instanceof h3d_scene_Mesh) ? this : null;
			if(m != null) {
				callb(m);
			}
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			o.iterVisibleMeshes(callb);
		}
	}
	,onParentChanged: function() {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onParentChanged();
		}
	}
	,onAdd: function() {
		var f = 32;
		this.flags |= f;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onAdd();
		}
	}
	,onRemove: function() {
		var f = 32;
		this.flags &= ~f;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onRemove();
		}
	}
	,removeChild: function(o) {
		if(HxOverrides.remove(this.children,o)) {
			if((o.flags & 32) != 0) {
				o.onRemove();
			}
			o.parent = null;
			var f = 1;
			var b = true;
			if(b) {
				o.flags |= f;
			} else {
				o.flags &= ~f;
			}
		}
	}
	,getScene: function() {
		var p = this;
		while(p.parent != null) p = p.parent;
		return ((p) instanceof h3d_scene_Scene) ? p : null;
	}
	,getAbsPos: function() {
		this.syncPos();
		return this.absPos;
	}
	,draw: function(ctx) {
	}
	,calcAbsPos: function() {
		this.qRot.toMatrix(this.absPos);
		this.absPos._11 *= this.scaleX;
		this.absPos._12 *= this.scaleX;
		this.absPos._13 *= this.scaleX;
		this.absPos._21 *= this.scaleY;
		this.absPos._22 *= this.scaleY;
		this.absPos._23 *= this.scaleY;
		this.absPos._31 *= this.scaleZ;
		this.absPos._32 *= this.scaleZ;
		this.absPos._33 *= this.scaleZ;
		this.absPos._41 = this.x;
		this.absPos._42 = this.y;
		this.absPos._43 = this.z;
		if(this.follow != null) {
			this.follow.syncPos();
			if((this.flags & 8) != 0) {
				var _this = this.absPos;
				var a = this.absPos;
				var b = this.parent.absPos;
				var m11 = a._11;
				var m12 = a._12;
				var m13 = a._13;
				var m21 = a._21;
				var m22 = a._22;
				var m23 = a._23;
				var a31 = a._31;
				var a32 = a._32;
				var a33 = a._33;
				var a41 = a._41;
				var a42 = a._42;
				var a43 = a._43;
				var b11 = b._11;
				var b12 = b._12;
				var b13 = b._13;
				var b21 = b._21;
				var b22 = b._22;
				var b23 = b._23;
				var b31 = b._31;
				var b32 = b._32;
				var b33 = b._33;
				var b41 = b._41;
				var b42 = b._42;
				var b43 = b._43;
				_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
				_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
				_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
				_this._14 = 0;
				_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
				_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
				_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
				_this._24 = 0;
				_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
				_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
				_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
				_this._34 = 0;
				_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
				_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
				_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
				_this._44 = 1;
				this.absPos._41 = this.x + this.follow.absPos._41;
				this.absPos._42 = this.y + this.follow.absPos._42;
				this.absPos._43 = this.z + this.follow.absPos._43;
			} else {
				this.absPos.multiply3x4(this.absPos,this.follow.absPos);
			}
		} else if(this.parent != null && (this.flags & 2048) == 0) {
			var _this1 = this.absPos;
			var a1 = this.absPos;
			var b1 = this.parent.absPos;
			var m111 = a1._11;
			var m121 = a1._12;
			var m131 = a1._13;
			var m211 = a1._21;
			var m221 = a1._22;
			var m231 = a1._23;
			var a311 = a1._31;
			var a321 = a1._32;
			var a331 = a1._33;
			var a411 = a1._41;
			var a421 = a1._42;
			var a431 = a1._43;
			var b111 = b1._11;
			var b121 = b1._12;
			var b131 = b1._13;
			var b211 = b1._21;
			var b221 = b1._22;
			var b231 = b1._23;
			var b311 = b1._31;
			var b321 = b1._32;
			var b331 = b1._33;
			var b411 = b1._41;
			var b421 = b1._42;
			var b431 = b1._43;
			_this1._11 = m111 * b111 + m121 * b211 + m131 * b311;
			_this1._12 = m111 * b121 + m121 * b221 + m131 * b321;
			_this1._13 = m111 * b131 + m121 * b231 + m131 * b331;
			_this1._14 = 0;
			_this1._21 = m211 * b111 + m221 * b211 + m231 * b311;
			_this1._22 = m211 * b121 + m221 * b221 + m231 * b321;
			_this1._23 = m211 * b131 + m221 * b231 + m231 * b331;
			_this1._24 = 0;
			_this1._31 = a311 * b111 + a321 * b211 + a331 * b311;
			_this1._32 = a311 * b121 + a321 * b221 + a331 * b321;
			_this1._33 = a311 * b131 + a321 * b231 + a331 * b331;
			_this1._34 = 0;
			_this1._41 = a411 * b111 + a421 * b211 + a431 * b311 + b411;
			_this1._42 = a411 * b121 + a421 * b221 + a431 * b321 + b421;
			_this1._43 = a411 * b131 + a421 * b231 + a431 * b331 + b431;
			_this1._44 = 1;
		}
		if(this.defaultTransform != null) {
			var _this2 = this.absPos;
			var a2 = this.defaultTransform;
			var b2 = this.absPos;
			var m112 = a2._11;
			var m122 = a2._12;
			var m132 = a2._13;
			var m212 = a2._21;
			var m222 = a2._22;
			var m232 = a2._23;
			var a312 = a2._31;
			var a322 = a2._32;
			var a332 = a2._33;
			var a412 = a2._41;
			var a422 = a2._42;
			var a432 = a2._43;
			var b112 = b2._11;
			var b122 = b2._12;
			var b132 = b2._13;
			var b212 = b2._21;
			var b222 = b2._22;
			var b232 = b2._23;
			var b312 = b2._31;
			var b322 = b2._32;
			var b332 = b2._33;
			var b412 = b2._41;
			var b422 = b2._42;
			var b432 = b2._43;
			_this2._11 = m112 * b112 + m122 * b212 + m132 * b312;
			_this2._12 = m112 * b122 + m122 * b222 + m132 * b322;
			_this2._13 = m112 * b132 + m122 * b232 + m132 * b332;
			_this2._14 = 0;
			_this2._21 = m212 * b112 + m222 * b212 + m232 * b312;
			_this2._22 = m212 * b122 + m222 * b222 + m232 * b322;
			_this2._23 = m212 * b132 + m222 * b232 + m232 * b332;
			_this2._24 = 0;
			_this2._31 = a312 * b112 + a322 * b212 + a332 * b312;
			_this2._32 = a312 * b122 + a322 * b222 + a332 * b322;
			_this2._33 = a312 * b132 + a322 * b232 + a332 * b332;
			_this2._34 = 0;
			_this2._41 = a412 * b112 + a422 * b212 + a432 * b312 + b412;
			_this2._42 = a412 * b122 + a422 * b222 + a432 * b322 + b422;
			_this2._43 = a412 * b132 + a422 * b232 + a432 * b332 + b432;
			_this2._44 = 1;
		}
		if(this.invPos != null) {
			this.invPos._44 = 0;
		}
	}
	,sync: function(ctx) {
	}
	,syncRec: function(ctx) {
		if(this.currentAnimation != null) {
			var old = this.parent;
			var dt = ctx.elapsedTime;
			while(dt > 0 && this.currentAnimation != null) dt = this.currentAnimation.update(dt);
			if(this.currentAnimation != null && (ctx.visibleFlag && (this.flags & 2) != 0 && (this.flags & 4) == 0 || (this.flags & 64) != 0)) {
				this.currentAnimation.sync();
			}
			if(this.parent == null && old != null) {
				return;
			}
		}
		var old1 = ctx.visibleFlag;
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0) {
			ctx.visibleFlag = false;
		}
		var changed = (this.flags & 1) != 0;
		if(changed) {
			this.calcAbsPos();
		}
		this.sync(ctx);
		var f = 1;
		var b = this.follow != null;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		this.lastFrame = ctx.frame;
		var p = 0;
		var len = this.children.length;
		while(p < len) {
			var c = this.children[p];
			if(c == null) {
				break;
			}
			if(c.lastFrame != ctx.frame) {
				if(changed) {
					var f1 = 1;
					var b1 = true;
					if(b1) {
						c.flags |= f1;
					} else {
						c.flags &= ~f1;
					}
				}
				c.syncRec(ctx);
			}
			if(this.children[p] != c) {
				p = 0;
				len = this.children.length;
			} else {
				++p;
			}
		}
		ctx.visibleFlag = old1;
	}
	,syncPos: function() {
		if(this.parent != null) {
			this.parent.syncPos();
		}
		if((this.flags & 1) != 0) {
			var f = 1;
			var b = this.follow != null;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var f1 = 1;
				var b1 = true;
				if(b1) {
					c.flags |= f1;
				} else {
					c.flags &= ~f1;
				}
			}
		}
	}
	,emit: function(ctx) {
	}
	,emitRec: function(ctx) {
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0 && !ctx.computingStatic) {
			return;
		}
		if((this.flags & 1) != 0) {
			if(this.currentAnimation != null) {
				this.currentAnimation.sync();
			}
			var f = 1;
			var b = this.follow != null;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var f1 = 1;
				var b1 = true;
				if(b1) {
					c.flags |= f1;
				} else {
					c.flags &= ~f1;
				}
			}
		}
		if((this.flags & 4) == 0 || ctx.computingStatic) {
			this.emit(ctx);
		}
		var _g2 = 0;
		var _g11 = this.children;
		while(_g2 < _g11.length) {
			var c1 = _g11[_g2];
			++_g2;
			c1.emitRec(ctx);
		}
	}
	,__class__: h3d_scene_Object
};
var h3d_scene_Mesh = function(primitive,material,parent) {
	h3d_scene_Object.call(this,parent);
	this.set_primitive(primitive);
	if(material == null) {
		material = h3d_mat_MaterialSetup.current.createMaterial();
		material.set_props(material.getDefaultProps());
	}
	this.material = material;
};
$hxClasses["h3d.scene.Mesh"] = h3d_scene_Mesh;
h3d_scene_Mesh.__name__ = "h3d.scene.Mesh";
h3d_scene_Mesh.__super__ = h3d_scene_Object;
h3d_scene_Mesh.prototype = $extend(h3d_scene_Object.prototype,{
	primitive: null
	,material: null
	,draw: function(ctx) {
		this.primitive.render(ctx.engine);
	}
	,emit: function(ctx) {
		var p = this.material.passes;
		while(p != null) {
			ctx.emitPass(p,this).index = 0;
			p = p.nextPass;
		}
	}
	,onAdd: function() {
		h3d_scene_Object.prototype.onAdd.call(this);
		if(this.primitive != null) {
			this.primitive.incref();
		}
	}
	,onRemove: function() {
		if(this.primitive != null) {
			this.primitive.decref();
		}
		h3d_scene_Object.prototype.onRemove.call(this);
	}
	,set_primitive: function(prim) {
		if(prim != this.primitive && (this.flags & 32) != 0) {
			if(this.primitive != null) {
				this.primitive.decref();
			}
			if(prim != null) {
				prim.incref();
			}
		}
		return this.primitive = prim;
	}
	,__class__: h3d_scene_Mesh
});
var h3d_scene_Interactive = function(shape,parent) {
	this.hitPoint = new h3d_Vector();
	this.mouseDownButton = -1;
	this.propagateEvents = false;
	this.cancelEvents = false;
	h3d_scene_Object.call(this,parent);
	this.shape = shape;
	this.set_cursor(hxd_Cursor.Button);
};
$hxClasses["h3d.scene.Interactive"] = h3d_scene_Interactive;
h3d_scene_Interactive.__name__ = "h3d.scene.Interactive";
h3d_scene_Interactive.__interfaces__ = [hxd_Interactive];
h3d_scene_Interactive.__super__ = h3d_scene_Object;
h3d_scene_Interactive.prototype = $extend(h3d_scene_Object.prototype,{
	shape: null
	,preciseShape: null
	,priority: null
	,cursor: null
	,cancelEvents: null
	,propagateEvents: null
	,enableRightButton: null
	,bestMatch: null
	,scene: null
	,mouseDownButton: null
	,hitPoint: null
	,onAdd: function() {
		this.scene = this.getScene();
		if(this.scene != null) {
			this.scene.addEventTarget(this);
		}
		h3d_scene_Object.prototype.onAdd.call(this);
	}
	,onRemove: function() {
		if(this.scene != null) {
			this.scene.removeEventTarget(this);
			this.scene = null;
		}
		h3d_scene_Object.prototype.onRemove.call(this);
	}
	,getInteractiveScene: function() {
		return this.scene;
	}
	,handleEvent: function(e) {
		if(this.propagateEvents) {
			e.propagate = true;
		}
		if(this.cancelEvents) {
			e.cancel = true;
		}
		switch(e.kind._hx_index) {
		case 0:
			if(this.enableRightButton || e.button == 0) {
				this.mouseDownButton = e.button;
				this.onPush(e);
			}
			break;
		case 1:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onClick(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 2:
			this.onMove(e);
			break;
		case 3:
			this.onOver(e);
			break;
		case 4:
			this.onOut(e);
			break;
		case 5:
			this.onWheel(e);
			break;
		case 6:
			this.onFocus(e);
			break;
		case 7:
			this.onFocusLost(e);
			break;
		case 8:
			this.onKeyDown(e);
			break;
		case 9:
			this.onKeyUp(e);
			break;
		case 10:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onReleaseOutside(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 11:
			this.onTextInput(e);
			break;
		case 12:
			this.onCheck(e);
			break;
		}
	}
	,set_cursor: function(c) {
		this.cursor = c;
		if(this.scene != null && this.scene.events != null) {
			this.scene.events.updateCursor(this);
		}
		return c;
	}
	,onOver: function(e) {
	}
	,onOut: function(e) {
	}
	,onPush: function(e) {
	}
	,onRelease: function(e) {
	}
	,onReleaseOutside: function(e) {
	}
	,onClick: function(e) {
	}
	,onMove: function(e) {
	}
	,onWheel: function(e) {
	}
	,onFocus: function(e) {
	}
	,onFocusLost: function(e) {
	}
	,onKeyUp: function(e) {
	}
	,onKeyDown: function(e) {
	}
	,onCheck: function(e) {
	}
	,onTextInput: function(e) {
	}
	,__class__: h3d_scene_Interactive
});
var h3d_scene_Light = function(shader,parent) {
	this.priority = 0;
	this.cullingDistance = -1;
	h3d_scene_Object.call(this,parent);
	this.shader = shader;
};
$hxClasses["h3d.scene.Light"] = h3d_scene_Light;
h3d_scene_Light.__name__ = "h3d.scene.Light";
h3d_scene_Light.__super__ = h3d_scene_Object;
h3d_scene_Light.prototype = $extend(h3d_scene_Object.prototype,{
	shader: null
	,objectDistance: null
	,next: null
	,cullingDistance: null
	,priority: null
	,emit: function(ctx) {
		ctx.emitLight(this);
	}
	,getShadowDirection: function() {
		return null;
	}
	,__class__: h3d_scene_Light
});
var h3d_scene_LightSystem = function() {
	this.ambientLight = new h3d_Vector(1,1,1);
};
$hxClasses["h3d.scene.LightSystem"] = h3d_scene_LightSystem;
h3d_scene_LightSystem.__name__ = "h3d.scene.LightSystem";
h3d_scene_LightSystem.prototype = {
	ambientLight: null
	,shadowLight: null
	,lightCount: null
	,ctx: null
	,initGlobals: function(globals) {
	}
	,cullLights: function() {
		var l = this.ctx.lights;
		var prev = null;
		var s = new h3d_col_Sphere();
		while(l != null) {
			s.x = l.absPos._41;
			s.y = l.absPos._42;
			s.z = l.absPos._43;
			s.r = l.cullingDistance;
			if(l.cullingDistance > 0 && !this.ctx.computingStatic && !this.ctx.camera.frustum.hasSphere(s)) {
				if(prev == null) {
					this.ctx.lights = l.next;
				} else {
					prev.next = l.next;
				}
				l = l.next;
				continue;
			}
			this.lightCount++;
			l.objectDistance = 0.;
			prev = l;
			l = l.next;
		}
	}
	,initLights: function(ctx) {
		this.lightCount = 0;
		this.ctx = ctx;
		this.cullLights();
		if(this.shadowLight == null || (this.shadowLight.flags & 32) == 0) {
			var l = ctx.lights;
			while(l != null) {
				var dir = l.getShadowDirection();
				if(dir != null) {
					this.shadowLight = l;
					break;
				}
				l = l.next;
			}
		}
	}
	,computeLight: function(obj,shaders) {
		return shaders;
	}
	,__class__: h3d_scene_LightSystem
};
var h3d_scene__$RenderContext_SharedGlobal = function(gid,value) {
	this.gid = gid;
	this.value = value;
};
$hxClasses["h3d.scene._RenderContext.SharedGlobal"] = h3d_scene__$RenderContext_SharedGlobal;
h3d_scene__$RenderContext_SharedGlobal.__name__ = "h3d.scene._RenderContext.SharedGlobal";
h3d_scene__$RenderContext_SharedGlobal.prototype = {
	gid: null
	,value: null
	,__class__: h3d_scene__$RenderContext_SharedGlobal
};
var h3d_scene_RenderContext = function() {
	h3d_impl_RenderContext.call(this);
	this.cachedShaderList = [];
	this.cachedPassObjects = [];
};
$hxClasses["h3d.scene.RenderContext"] = h3d_scene_RenderContext;
h3d_scene_RenderContext.__name__ = "h3d.scene.RenderContext";
h3d_scene_RenderContext.__super__ = h3d_impl_RenderContext;
h3d_scene_RenderContext.prototype = $extend(h3d_impl_RenderContext.prototype,{
	camera: null
	,scene: null
	,drawPass: null
	,computingStatic: null
	,sharedGlobals: null
	,lightSystem: null
	,extraShaders: null
	,visibleFlag: null
	,shaderBuffers: null
	,allocPool: null
	,allocFirst: null
	,cachedShaderList: null
	,cachedPassObjects: null
	,cachedPos: null
	,passes: null
	,lights: null
	,currentManager: null
	,start: function() {
		this.sharedGlobals = [];
		this.lights = null;
		this.drawPass = null;
		this.passes = null;
		this.lights = null;
		this.cachedPos = 0;
		this.visibleFlag = true;
		this.time += this.elapsedTime;
		this.frame++;
	}
	,setGlobalID: function(gid,value) {
		var _g = 0;
		var _g1 = this.sharedGlobals;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g.gid == gid) {
				g.value = value;
				return;
			}
		}
		this.sharedGlobals.push(new h3d_scene__$RenderContext_SharedGlobal(gid,value));
	}
	,emitPass: function(pass,obj) {
		var o = this.allocPool;
		if(o == null) {
			o = new h3d_pass_PassObject();
			o.nextAlloc = this.allocFirst;
			this.allocFirst = o;
		} else {
			this.allocPool = o.nextAlloc;
		}
		o.pass = pass;
		o.obj = obj;
		o.next = this.passes;
		this.passes = o;
		return o;
	}
	,allocShaderList: function(s,next) {
		var sl = this.cachedShaderList[this.cachedPos++];
		if(sl == null) {
			sl = new hxsl_ShaderList(null);
			this.cachedShaderList[this.cachedPos - 1] = sl;
		}
		sl.s = s;
		sl.next = next;
		return sl;
	}
	,emitLight: function(l) {
		l.next = this.lights;
		this.lights = l;
	}
	,done: function() {
		this.drawPass = null;
		var p = this.allocFirst;
		while(p != null && p != this.allocPool) {
			p.obj = null;
			p.pass = null;
			p.shader = null;
			p.shaders = null;
			p.next = null;
			p.index = 0;
			p.texture = 0;
			p = p.nextAlloc;
		}
		if(this.allocPool != null) {
			this.allocFirst = this.allocFirst.nextAlloc;
		}
		this.allocPool = this.allocFirst;
		var _g = 0;
		var _g1 = this.cachedShaderList;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.s = null;
			c.next = null;
		}
		this.passes = null;
		this.lights = null;
	}
	,__class__: h3d_scene_RenderContext
});
var h3d_scene_PassObjects = function() {
	this.passes = new h3d_pass_PassList();
};
$hxClasses["h3d.scene.PassObjects"] = h3d_scene_PassObjects;
h3d_scene_PassObjects.__name__ = "h3d.scene.PassObjects";
h3d_scene_PassObjects.prototype = {
	name: null
	,passes: null
	,rendered: null
	,__class__: h3d_scene_PassObjects
};
var h3d_scene_Renderer = function() {
	this.hasSetTarget = false;
	this.emptyPasses = new h3d_pass_PassList();
	this.allPasses = [];
	this.passObjects = new haxe_ds_StringMap();
	this.set_props(this.getDefaultProps());
	var f = $bind(this,this.depthSort);
	this.frontToBack = function(passes) {
		f(true,passes);
	};
	var f1 = $bind(this,this.depthSort);
	this.backToFront = function(passes1) {
		f1(false,passes1);
	};
};
$hxClasses["h3d.scene.Renderer"] = h3d_scene_Renderer;
h3d_scene_Renderer.__name__ = "h3d.scene.Renderer";
h3d_scene_Renderer.__super__ = hxd_impl_AnyProps;
h3d_scene_Renderer.prototype = $extend(hxd_impl_AnyProps.prototype,{
	defaultPass: null
	,passObjects: null
	,allPasses: null
	,emptyPasses: null
	,ctx: null
	,hasSetTarget: null
	,frontToBack: null
	,backToFront: null
	,depthSort: function(frontToBack,passes) {
		var cam = this.ctx.camera.m;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			var z = p.obj.absPos._41 * cam._13 + p.obj.absPos._42 * cam._23 + p.obj.absPos._43 * cam._33 + cam._43;
			var w = p.obj.absPos._41 * cam._14 + p.obj.absPos._42 * cam._24 + p.obj.absPos._43 * cam._34 + cam._44;
			p.depth = z / w;
		}
		if(frontToBack) {
			var list = passes.current;
			var tmp1;
			if(list == null) {
				tmp1 = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p1;
				var q;
				var e;
				var tail;
				while(true) {
					p1 = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p1 != null) {
						++nmerges;
						q = p1;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || (p1.pass.layer == q.pass.layer ? p1.depth > q.depth ? 1 : -1 : p1.pass.layer - q.pass.layer) <= 0) {
								e = p1;
								p1 = p1.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p1 = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp1 = list;
			}
			passes.current = tmp1;
		} else {
			var list1 = passes.current;
			var tmp2;
			if(list1 == null) {
				tmp2 = null;
			} else {
				var insize1 = 1;
				var nmerges1;
				var psize1 = 0;
				var qsize1 = 0;
				var p2;
				var q1;
				var e1;
				var tail1;
				while(true) {
					p2 = list1;
					list1 = null;
					tail1 = null;
					nmerges1 = 0;
					while(p2 != null) {
						++nmerges1;
						q1 = p2;
						psize1 = 0;
						var _g2 = 0;
						var _g11 = insize1;
						while(_g2 < _g11) {
							var i1 = _g2++;
							++psize1;
							q1 = q1.next;
							if(q1 == null) {
								break;
							}
						}
						qsize1 = insize1;
						while(psize1 > 0 || qsize1 > 0 && q1 != null) {
							if(psize1 == 0) {
								e1 = q1;
								q1 = q1.next;
								--qsize1;
							} else if(qsize1 == 0 || q1 == null || (p2.pass.layer == q1.pass.layer ? p2.depth > q1.depth ? -1 : 1 : p2.pass.layer - q1.pass.layer) <= 0) {
								e1 = p2;
								p2 = p2.next;
								--psize1;
							} else {
								e1 = q1;
								q1 = q1.next;
								--qsize1;
							}
							if(tail1 != null) {
								tail1.next = e1;
							} else {
								list1 = e1;
							}
							tail1 = e1;
						}
						p2 = q1;
					}
					tail1.next = null;
					if(nmerges1 <= 1) {
						break;
					}
					insize1 *= 2;
				}
				tmp2 = list1;
			}
			passes.current = tmp2;
		}
	}
	,resetTarget: function() {
		if(this.hasSetTarget) {
			this.ctx.engine.popTarget();
			this.hasSetTarget = false;
		}
	}
	,has: function(name) {
		var _this = this.passObjects;
		return (__map_reserved[name] != null ? _this.getReserved(name) : _this.h[name]) != null;
	}
	,get: function(name) {
		var _this = this.passObjects;
		var p = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(p == null) {
			return this.emptyPasses;
		}
		p.rendered = true;
		return p.passes;
	}
	,render: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,computeStatic: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,start: function() {
	}
	,process: function(passes) {
		this.hasSetTarget = false;
		var _g = 0;
		var _g1 = this.allPasses;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.setContext(this.ctx);
		}
		var _g2 = 0;
		while(_g2 < passes.length) {
			var p1 = passes[_g2];
			++_g2;
			var key = p1.name;
			var _this = this.passObjects;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,p1);
			} else {
				_this.h[key] = p1;
			}
		}
		this.ctx.textures.begin();
		if(this.ctx.computingStatic) {
			this.computeStatic();
		} else {
			this.render();
		}
		this.resetTarget();
		var _g3 = 0;
		while(_g3 < passes.length) {
			var p2 = passes[_g3];
			++_g3;
			var key1 = p2.name;
			var value = null;
			var _this1 = this.passObjects;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,value);
			} else {
				_this1.h[key1] = value;
			}
		}
	}
	,__class__: h3d_scene_Renderer
});
var h3d_scene_Scene = function(createRenderer,createLightSystem) {
	if(createLightSystem == null) {
		createLightSystem = true;
	}
	if(createRenderer == null) {
		createRenderer = true;
	}
	h3d_scene_Object.call(this,null);
	this.window = hxd_Window.getInstance();
	this.eventListeners = [];
	this.hitInteractives = [];
	this.interactives = [];
	this.camera = new h3d_Camera();
	var engine = h3d_Engine.CURRENT;
	if(engine != null) {
		this.camera.screenRatio = engine.width / engine.height;
	}
	this.ctx = new h3d_scene_RenderContext();
	if(createRenderer) {
		this.set_renderer(h3d_mat_MaterialSetup.current.createRenderer());
	}
	if(createLightSystem) {
		this.lightSystem = h3d_mat_MaterialSetup.current.createLightSystem();
	}
};
$hxClasses["h3d.scene.Scene"] = h3d_scene_Scene;
h3d_scene_Scene.__name__ = "h3d.scene.Scene";
h3d_scene_Scene.__interfaces__ = [hxd_InteractiveScene,h3d_IDrawable];
h3d_scene_Scene.__super__ = h3d_scene_Object;
h3d_scene_Scene.prototype = $extend(h3d_scene_Object.prototype,{
	camera: null
	,lightSystem: null
	,renderer: null
	,ctx: null
	,interactives: null
	,events: null
	,hitInteractives: null
	,eventListeners: null
	,window: null
	,setEvents: function(events) {
		this.events = events;
	}
	,dispatchListeners: function(event) {
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l(event);
			if(!event.propagate) {
				break;
			}
		}
	}
	,set_renderer: function(r) {
		this.renderer = r;
		if(r != null) {
			r.ctx = this.ctx;
		}
		return r;
	}
	,sortHitPointByCameraDistance: function(i1,i2) {
		var z1 = i1.hitPoint.w;
		var z2 = i2.hitPoint.w;
		if(z1 > z2) {
			return -1;
		}
		return 1;
	}
	,dispatchEvent: function(event,to) {
		var i = to;
		i.handleEvent(event);
	}
	,isInteractiveVisible: function(i) {
		var o = i;
		while(o != this) {
			if(o == null || (o.flags & 2) == 0) {
				return false;
			}
			o = o.parent;
		}
		return true;
	}
	,handleEvent: function(event,last) {
		if(this.interactives.length == 0) {
			return null;
		}
		if(this.hitInteractives.length == 0) {
			var screenX = (event.relX / this.window.get_width() - 0.5) * 2;
			var screenY = -(event.relY / this.window.get_height() - 0.5) * 2;
			var p0 = this.camera.unproject(screenX,screenY,0);
			var p1 = this.camera.unproject(screenX,screenY,1);
			var x = p0.x;
			var y = p0.y;
			var z = p0.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p1_x = x;
			var p1_y = y;
			var p1_z = z;
			var x1 = p1.x;
			var y1 = p1.y;
			var z1 = p1.z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var p2_x = x1;
			var p2_y = y1;
			var p2_z = z1;
			var r = new h3d_col_Ray();
			r.px = p1_x;
			r.py = p1_y;
			r.pz = p1_z;
			r.lx = p2_x - p1_x;
			r.ly = p2_y - p1_y;
			r.lz = p2_z - p1_z;
			r.normalize();
			var r1 = r;
			var saveR_px = r1.px;
			var saveR_py = r1.py;
			var saveR_pz = r1.pz;
			var saveR_lx = r1.lx;
			var saveR_ly = r1.ly;
			var saveR_lz = r1.lz;
			var priority = -2147483648;
			var _g = 0;
			var _g1 = this.interactives;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(i.priority < priority) {
					continue;
				}
				var p = i;
				while(p != null && (p.flags & 2) != 0) p = p.parent;
				if(p != null) {
					continue;
				}
				var minv = i.getInvPos();
				var x2 = r1.px;
				var y2 = r1.py;
				var z2 = r1.pz;
				if(z2 == null) {
					z2 = 0.;
				}
				if(y2 == null) {
					y2 = 0.;
				}
				if(x2 == null) {
					x2 = 0.;
				}
				var p_x = x2;
				var p_y = y2;
				var p_z = z2;
				var p_w = 1.;
				var px = p_x * minv._11 + p_y * minv._21 + p_z * minv._31 + p_w * minv._41;
				var py = p_x * minv._12 + p_y * minv._22 + p_z * minv._32 + p_w * minv._42;
				var pz = p_x * minv._13 + p_y * minv._23 + p_z * minv._33 + p_w * minv._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				r1.px = p_x;
				r1.py = p_y;
				r1.pz = p_z;
				var x3 = r1.lx;
				var y3 = r1.ly;
				var z3 = r1.lz;
				if(z3 == null) {
					z3 = 0.;
				}
				if(y3 == null) {
					y3 = 0.;
				}
				if(x3 == null) {
					x3 = 0.;
				}
				var l_x = x3;
				var l_y = y3;
				var l_z = z3;
				var l_w = 1.;
				var px1 = l_x * minv._11 + l_y * minv._21 + l_z * minv._31;
				var py1 = l_x * minv._12 + l_y * minv._22 + l_z * minv._32;
				var pz1 = l_x * minv._13 + l_y * minv._23 + l_z * minv._33;
				l_x = px1;
				l_y = py1;
				l_z = pz1;
				r1.lx = l_x;
				r1.ly = l_y;
				r1.lz = l_z;
				r1.normalize();
				if(r1.lx != r1.lx) {
					r1.px = saveR_px;
					r1.py = saveR_py;
					r1.pz = saveR_pz;
					r1.lx = saveR_lx;
					r1.ly = saveR_ly;
					r1.lz = saveR_lz;
					continue;
				}
				var hit = i.shape.rayIntersection(r1,i.bestMatch);
				if(hit < 0) {
					r1.px = saveR_px;
					r1.py = saveR_py;
					r1.pz = saveR_pz;
					r1.lx = saveR_lx;
					r1.ly = saveR_ly;
					r1.lz = saveR_lz;
					continue;
				}
				var x4 = r1.px + hit * r1.lx;
				var y4 = r1.py + hit * r1.ly;
				var z4 = r1.pz + hit * r1.lz;
				if(z4 == null) {
					z4 = 0.;
				}
				if(y4 == null) {
					y4 = 0.;
				}
				if(x4 == null) {
					x4 = 0.;
				}
				var hitPoint_x = x4;
				var hitPoint_y = y4;
				var hitPoint_z = z4;
				r1.px = saveR_px;
				r1.py = saveR_py;
				r1.pz = saveR_pz;
				r1.lx = saveR_lx;
				r1.ly = saveR_ly;
				r1.lz = saveR_lz;
				i.hitPoint.x = hitPoint_x;
				i.hitPoint.y = hitPoint_y;
				i.hitPoint.z = hitPoint_z;
				if(i.priority > priority) {
					while(this.hitInteractives.length > 0) this.hitInteractives.pop();
					priority = i.priority;
				}
				this.hitInteractives.push(i);
			}
			if(this.hitInteractives.length == 0) {
				return null;
			}
			if(this.hitInteractives.length > 1) {
				var _g2 = 0;
				var _g3 = this.hitInteractives;
				while(_g2 < _g3.length) {
					var i1 = _g3[_g2];
					++_g2;
					var m = i1.invPos;
					var wfactor = 0.;
					if(i1.preciseShape != null) {
						var x5 = r1.px;
						var y5 = r1.py;
						var z5 = r1.pz;
						if(z5 == null) {
							z5 = 0.;
						}
						if(y5 == null) {
							y5 = 0.;
						}
						if(x5 == null) {
							x5 = 0.;
						}
						var p_x1 = x5;
						var p_y1 = y5;
						var p_z1 = z5;
						var p_w1 = 1.;
						var px2 = p_x1 * m._11 + p_y1 * m._21 + p_z1 * m._31 + p_w1 * m._41;
						var py2 = p_x1 * m._12 + p_y1 * m._22 + p_z1 * m._32 + p_w1 * m._42;
						var pz2 = p_x1 * m._13 + p_y1 * m._23 + p_z1 * m._33 + p_w1 * m._43;
						p_x1 = px2;
						p_y1 = py2;
						p_z1 = pz2;
						r1.px = p_x1;
						r1.py = p_y1;
						r1.pz = p_z1;
						var x6 = r1.lx;
						var y6 = r1.ly;
						var z6 = r1.lz;
						if(z6 == null) {
							z6 = 0.;
						}
						if(y6 == null) {
							y6 = 0.;
						}
						if(x6 == null) {
							x6 = 0.;
						}
						var l_x1 = x6;
						var l_y1 = y6;
						var l_z1 = z6;
						var l_w1 = 1.;
						var px3 = l_x1 * m._11 + l_y1 * m._21 + l_z1 * m._31;
						var py3 = l_x1 * m._12 + l_y1 * m._22 + l_z1 * m._32;
						var pz3 = l_x1 * m._13 + l_y1 * m._23 + l_z1 * m._33;
						l_x1 = px3;
						l_y1 = py3;
						l_z1 = pz3;
						r1.lx = l_x1;
						r1.ly = l_y1;
						r1.lz = l_z1;
						r1.normalize();
						var hit1 = i1.preciseShape.rayIntersection(r1,i1.bestMatch);
						if(hit1 > 0) {
							var x7 = r1.px + hit1 * r1.lx;
							var y7 = r1.py + hit1 * r1.ly;
							var z7 = r1.pz + hit1 * r1.lz;
							if(z7 == null) {
								z7 = 0.;
							}
							if(y7 == null) {
								y7 = 0.;
							}
							if(x7 == null) {
								x7 = 0.;
							}
							var hitPoint_x1 = x7;
							var hitPoint_y1 = y7;
							var hitPoint_z1 = z7;
							i1.hitPoint.x = hitPoint_x1;
							i1.hitPoint.y = hitPoint_y1;
							i1.hitPoint.z = hitPoint_z1;
						} else {
							wfactor = 1.;
						}
						r1.px = saveR_px;
						r1.py = saveR_py;
						r1.pz = saveR_pz;
						r1.lx = saveR_lx;
						r1.ly = saveR_ly;
						r1.lz = saveR_lz;
					}
					var _this = i1.hitPoint;
					var x8 = _this.x;
					var y8 = _this.y;
					var z8 = _this.z;
					var w = _this.w;
					if(w == null) {
						w = 1.;
					}
					if(z8 == null) {
						z8 = 0.;
					}
					if(y8 == null) {
						y8 = 0.;
					}
					if(x8 == null) {
						x8 = 0.;
					}
					var p_x2 = x8;
					var p_y2 = y8;
					var p_z2 = z8;
					var p_w2 = w;
					p_w2 = 1;
					var m1 = i1.absPos;
					var px4 = p_x2 * m1._11 + p_y2 * m1._21 + p_z2 * m1._31 + p_w2 * m1._41;
					var py4 = p_x2 * m1._12 + p_y2 * m1._22 + p_z2 * m1._32 + p_w2 * m1._42;
					var pz4 = p_x2 * m1._13 + p_y2 * m1._23 + p_z2 * m1._33 + p_w2 * m1._43;
					p_x2 = px4;
					p_y2 = py4;
					p_z2 = pz4;
					var m2 = this.camera.m;
					var px5 = p_x2 * m2._11 + p_y2 * m2._21 + p_z2 * m2._31 + p_w2 * m2._41;
					var py5 = p_x2 * m2._12 + p_y2 * m2._22 + p_z2 * m2._32 + p_w2 * m2._42;
					var pz5 = p_x2 * m2._13 + p_y2 * m2._23 + p_z2 * m2._33 + p_w2 * m2._43;
					var iw = 1 / (p_x2 * m2._14 + p_y2 * m2._24 + p_z2 * m2._34 + p_w2 * m2._44);
					p_x2 = px5 * iw;
					p_y2 = py5 * iw;
					p_z2 = pz5 * iw;
					p_w2 = 1;
					i1.hitPoint.w = p_z2 + wfactor;
				}
				this.hitInteractives.sort($bind(this,this.sortHitPointByCameraDistance));
			}
			this.hitInteractives.unshift(null);
		}
		while(this.hitInteractives.length > 0) {
			var i2 = this.hitInteractives.pop();
			if(i2 == null) {
				return null;
			}
			event.relX = i2.hitPoint.x;
			event.relY = i2.hitPoint.y;
			event.relZ = i2.hitPoint.z;
			i2.handleEvent(event);
			if(event.cancel) {
				event.cancel = false;
				event.propagate = false;
				continue;
			}
			if(!event.propagate) {
				while(this.hitInteractives.length > 0) this.hitInteractives.pop();
			}
			return i2;
		}
		return null;
	}
	,addEventTarget: function(i) {
		if(this.interactives.indexOf(i) >= 0) {
			throw new js__$Boot_HaxeError("assert");
		}
		this.interactives.push(i);
	}
	,removeEventTarget: function(i) {
		if(HxOverrides.remove(this.interactives,i)) {
			if(this.events != null) {
				this.events.onRemove(i);
			}
			HxOverrides.remove(this.hitInteractives,i);
		}
	}
	,setElapsedTime: function(elapsedTime) {
		this.ctx.elapsedTime = elapsedTime;
	}
	,render: function(engine) {
		if((this.flags & 32) == 0) {
			this.onAdd();
		}
		var t = engine.getCurrentTarget();
		if(t == null) {
			this.camera.screenRatio = engine.width / engine.height;
		} else {
			this.camera.screenRatio = t.width / t.height;
		}
		this.camera.update();
		if(this.camera.rightHanded) {
			engine.driver.setRenderFlag(h3d_impl_RenderFlag.CameraHandness,1);
		}
		this.ctx.camera = this.camera;
		this.ctx.engine = engine;
		this.ctx.scene = this;
		this.ctx.start();
		this.renderer.start();
		this.syncRec(this.ctx);
		this.emitRec(this.ctx);
		var list = this.ctx.passes;
		var tmp;
		if(list == null) {
			tmp = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p;
			var q;
			var e;
			var tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					var _g = 0;
					var _g1 = insize;
					while(_g < _g1) {
						var i = _g++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else if(qsize == 0 || q == null || p.pass.passId - q.pass.passId <= 0) {
							e = p;
							p = p.next;
							--psize;
						} else {
							e = q;
							q = q.next;
							--qsize;
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp = list;
		}
		this.ctx.passes = tmp;
		var curPass = this.ctx.passes;
		var passes = [];
		var passIndex = -1;
		while(curPass != null) {
			var passId = curPass.pass.passId;
			var p1 = curPass;
			var prev = null;
			while(p1 != null && p1.pass.passId == passId) {
				prev = p1;
				p1 = p1.next;
			}
			prev.next = null;
			var pobjs = this.ctx.cachedPassObjects[++passIndex];
			if(pobjs == null) {
				pobjs = new h3d_scene_PassObjects();
				this.ctx.cachedPassObjects[passIndex] = pobjs;
			}
			pobjs.name = curPass.pass.name;
			var _this = pobjs.passes;
			_this.current = curPass;
			_this.discarded = _this.lastDisc = null;
			passes.push(pobjs);
			curPass = p1;
		}
		if(this.lightSystem != null) {
			this.ctx.lightSystem = this.lightSystem;
			this.lightSystem.initLights(this.ctx);
		}
		this.renderer.process(passes);
		if(this.camera.rightHanded) {
			engine.driver.setRenderFlag(h3d_impl_RenderFlag.CameraHandness,0);
		}
		this.ctx.done();
		this.ctx.scene = null;
		this.ctx.camera = null;
		this.ctx.engine = null;
		var _g2 = 0;
		var _g11 = passIndex;
		while(_g2 < _g11) {
			var i1 = _g2++;
			var p2 = this.ctx.cachedPassObjects[i1];
			p2.name = null;
			var _this1 = p2.passes;
			_this1.current = null;
			_this1.discarded = _this1.lastDisc = null;
		}
	}
	,__class__: h3d_scene_Scene
});
var h3d_scene_fwd_LightSystem = function() {
	this.perPixelLighting = true;
	this.maxLightsPerObject = 6;
	h3d_scene_LightSystem.call(this);
	var _this = this.ambientLight;
	var x = 0.5;
	var y = 0.5;
	var z = 0.5;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = 1.;
	this.ambientShader = new h3d_shader_AmbientLight();
	this.set_additiveLighting(true);
};
$hxClasses["h3d.scene.fwd.LightSystem"] = h3d_scene_fwd_LightSystem;
h3d_scene_fwd_LightSystem.__name__ = "h3d.scene.fwd.LightSystem";
h3d_scene_fwd_LightSystem.__super__ = h3d_scene_LightSystem;
h3d_scene_fwd_LightSystem.prototype = $extend(h3d_scene_LightSystem.prototype,{
	maxLightsPerObject: null
	,ambientShader: null
	,perPixelLighting: null
	,set_additiveLighting: function(b) {
		var value = this.ambientShader;
		var _this = ((value) instanceof h3d_shader_AmbientLight) ? value : null;
		_this.constModified = true;
		return _this.additive__ = b;
	}
	,initLights: function(ctx) {
		h3d_scene_LightSystem.prototype.initLights.call(this,ctx);
		if(this.lightCount <= this.maxLightsPerObject) {
			var list = ctx.lights;
			var cmp = $bind(this,this.sortLight);
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			ctx.lights = tmp;
		}
	}
	,initGlobals: function(globals) {
		globals.set("global.ambientLight",this.ambientLight);
		globals.set("global.perPixelLighting",this.perPixelLighting);
	}
	,sortLight: function(l1,l2) {
		var p = l1.priority - l2.priority;
		if(p != 0) {
			return -p;
		}
		if(l1.objectDistance < l2.objectDistance) {
			return -1;
		} else {
			return 1;
		}
	}
	,computeLight: function(obj,shaders) {
		var _gthis = this;
		if(this.lightCount > this.maxLightsPerObject) {
			var l = this.ctx.lights;
			while(l != null) {
				if((obj.flags & 16) != 0) {
					var dx = l.absPos._41 - this.ctx.camera.target.x;
					var dy = l.absPos._42 - this.ctx.camera.target.y;
					var dz = l.absPos._43 - this.ctx.camera.target.z;
					if(dz == null) {
						dz = 0.;
					}
					l.objectDistance = dx * dx + dy * dy + dz * dz;
				} else {
					var dx1 = l.absPos._41 - obj.absPos._41;
					var dy1 = l.absPos._42 - obj.absPos._42;
					var dz1 = l.absPos._43 - obj.absPos._43;
					if(dz1 == null) {
						dz1 = 0.;
					}
					l.objectDistance = dx1 * dx1 + dy1 * dy1 + dz1 * dz1;
				}
				l = l.next;
			}
			var list = this.ctx.lights;
			var cmp = $bind(this,this.sortLight);
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			this.ctx.lights = tmp;
		}
		shaders = _gthis.ctx.allocShaderList(this.ambientShader,shaders);
		var l1 = this.ctx.lights;
		var i1 = 0;
		while(l1 != null) {
			if(i1++ == this.maxLightsPerObject) {
				break;
			}
			shaders = _gthis.ctx.allocShaderList(l1.shader,shaders);
			l1 = l1.next;
		}
		return shaders;
	}
	,__class__: h3d_scene_fwd_LightSystem
});
var h3d_scene_fwd_DepthPass = function() {
	this.enableSky = false;
	h3d_pass_Default.call(this,"depth");
	this.depthMapId = hxsl_Globals.allocID("depthMap");
};
$hxClasses["h3d.scene.fwd.DepthPass"] = h3d_scene_fwd_DepthPass;
h3d_scene_fwd_DepthPass.__name__ = "h3d.scene.fwd.DepthPass";
h3d_scene_fwd_DepthPass.__super__ = h3d_pass_Default;
h3d_scene_fwd_DepthPass.prototype = $extend(h3d_pass_Default.prototype,{
	depthMapId: null
	,enableSky: null
	,getOutputs: function() {
		return [hxsl_Output.PackFloat(hxsl_Output.Value("output.depth"))];
	}
	,draw: function(passes,sort) {
		var texture = this.ctx.textures.allocTarget("depthMap",this.ctx.engine.width,this.ctx.engine.height,true);
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(this.enableSky ? 0 : 16711680,1);
		h3d_pass_Default.prototype.draw.call(this,passes,sort);
		this.ctx.engine.popTarget();
		this.ctx.setGlobalID(this.depthMapId,{ texture : texture});
	}
	,__class__: h3d_scene_fwd_DepthPass
});
var h3d_scene_fwd_NormalPass = function() {
	h3d_pass_Default.call(this,"normal");
	this.normalMapId = hxsl_Globals.allocID("normalMap");
};
$hxClasses["h3d.scene.fwd.NormalPass"] = h3d_scene_fwd_NormalPass;
h3d_scene_fwd_NormalPass.__name__ = "h3d.scene.fwd.NormalPass";
h3d_scene_fwd_NormalPass.__super__ = h3d_pass_Default;
h3d_scene_fwd_NormalPass.prototype = $extend(h3d_pass_Default.prototype,{
	normalMapId: null
	,getOutputs: function() {
		return [hxsl_Output.PackNormal(hxsl_Output.Value("output.normal"))];
	}
	,draw: function(passes,sort) {
		var texture = this.ctx.textures.allocTarget("normalMap",this.ctx.engine.width,this.ctx.engine.height);
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(8421504,1);
		h3d_pass_Default.prototype.draw.call(this,passes,sort);
		this.ctx.engine.popTarget();
		this.ctx.setGlobalID(this.normalMapId,texture);
	}
	,__class__: h3d_scene_fwd_NormalPass
});
var h3d_scene_fwd_Renderer = function() {
	this.shadow = new h3d_pass_DefaultShadowMap(1024);
	this.normal = new h3d_scene_fwd_NormalPass();
	this.depth = new h3d_scene_fwd_DepthPass();
	h3d_scene_Renderer.call(this);
	this.defaultPass = new h3d_pass_Default("default");
	this.allPasses = [this.defaultPass,this.depth,this.normal,this.shadow];
};
$hxClasses["h3d.scene.fwd.Renderer"] = h3d_scene_fwd_Renderer;
h3d_scene_fwd_Renderer.__name__ = "h3d.scene.fwd.Renderer";
h3d_scene_fwd_Renderer.__super__ = h3d_scene_Renderer;
h3d_scene_fwd_Renderer.prototype = $extend(h3d_scene_Renderer.prototype,{
	depth: null
	,normal: null
	,shadow: null
	,renderPass: function(p,passes,sort) {
		p.draw(passes,sort);
	}
	,render: function() {
		if(this.has("shadow")) {
			this.renderPass(this.shadow,this.get("shadow"));
		}
		if(this.has("depth")) {
			this.renderPass(this.depth,this.get("depth"));
		}
		if(this.has("normal")) {
			this.renderPass(this.normal,this.get("normal"));
		}
		this.renderPass(this.defaultPass,this.get("default"));
		this.renderPass(this.defaultPass,this.get("alpha"),this.backToFront);
		this.renderPass(this.defaultPass,this.get("additive"));
	}
	,__class__: h3d_scene_fwd_Renderer
});
var h3d_shader_AmbientLight = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.AmbientLight"] = h3d_shader_AmbientLight;
h3d_shader_AmbientLight.__name__ = "h3d.shader.AmbientLight";
h3d_shader_AmbientLight.__super__ = hxsl_Shader;
h3d_shader_AmbientLight.prototype = $extend(hxsl_Shader.prototype,{
	additive__: null
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 2;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.additive__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_AmbientLight
});
var h3d_shader_Base2d = function() {
	this.viewport__ = new h3d_Vector();
	this.halfPixelInverse__ = new h3d_Vector();
	this.uvPos__ = new h3d_Vector();
	this.filterMatrixB__ = new h3d_Vector();
	this.filterMatrixA__ = new h3d_Vector();
	this.absoluteMatrixB__ = new h3d_Vector();
	this.absoluteMatrixA__ = new h3d_Vector();
	this.color__ = new h3d_Vector();
	this.zValue__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.Base2d"] = h3d_shader_Base2d;
h3d_shader_Base2d.__name__ = "h3d.shader.Base2d";
h3d_shader_Base2d.__super__ = hxsl_Shader;
h3d_shader_Base2d.prototype = $extend(hxsl_Shader.prototype,{
	zValue__: null
	,texture__: null
	,isRelative__: null
	,color__: null
	,absoluteMatrixA__: null
	,absoluteMatrixB__: null
	,filterMatrixA__: null
	,filterMatrixB__: null
	,hasUVPos__: null
	,uvPos__: null
	,killAlpha__: null
	,pixelAlign__: null
	,halfPixelInverse__: null
	,viewport__: null
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isRelative__) {
			this.constBits |= 1;
		}
		if(this.hasUVPos__) {
			this.constBits |= 2;
		}
		if(this.killAlpha__) {
			this.constBits |= 4;
		}
		if(this.pixelAlign__) {
			this.constBits |= 8;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.zValue__;
		case 1:
			return this.texture__;
		case 2:
			return this.isRelative__;
		case 3:
			return this.color__;
		case 4:
			return this.absoluteMatrixA__;
		case 5:
			return this.absoluteMatrixB__;
		case 6:
			return this.filterMatrixA__;
		case 7:
			return this.filterMatrixB__;
		case 8:
			return this.hasUVPos__;
		case 9:
			return this.uvPos__;
		case 10:
			return this.killAlpha__;
		case 11:
			return this.pixelAlign__;
		case 12:
			return this.halfPixelInverse__;
		case 13:
			return this.viewport__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.zValue__;
		}
		return 0.;
	}
	,__class__: h3d_shader_Base2d
});
var h3d_shader_BaseMesh = function() {
	this.specularColor__ = new h3d_Vector();
	this.specularAmount__ = 0;
	this.specularPower__ = 0;
	this.color__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.color__;
	var x = 1;
	var y = 1;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = 1.;
	var _this1 = this.specularColor__;
	var x1 = 1;
	var y1 = 1;
	var z1 = 1;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	_this1.x = x1;
	_this1.y = y1;
	_this1.z = z1;
	_this1.w = 1.;
	this.specularPower__ = 50;
	this.specularAmount__ = 1;
};
$hxClasses["h3d.shader.BaseMesh"] = h3d_shader_BaseMesh;
h3d_shader_BaseMesh.__name__ = "h3d.shader.BaseMesh";
h3d_shader_BaseMesh.__super__ = hxsl_Shader;
h3d_shader_BaseMesh.prototype = $extend(hxsl_Shader.prototype,{
	color__: null
	,specularPower__: null
	,specularAmount__: null
	,specularColor__: null
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.color__;
		case 1:
			return this.specularPower__;
		case 2:
			return this.specularAmount__;
		case 3:
			return this.specularColor__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 1:
			return this.specularPower__;
		case 2:
			return this.specularAmount__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_BaseMesh
});
var h3d_shader_Blur = function() {
	this.cubeDir__ = new h3d_Matrix();
	this.fixedColor__ = new h3d_Vector();
	this.pixel__ = new h3d_Vector();
	this.offsets__ = [];
	this.values__ = [];
	this.Quality__ = 0;
	this.cameraInverseViewProj__ = new h3d_Matrix();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.Blur"] = h3d_shader_Blur;
h3d_shader_Blur.__name__ = "h3d.shader.Blur";
h3d_shader_Blur.__super__ = h3d_shader_ScreenShader;
h3d_shader_Blur.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	cameraInverseViewProj__: null
	,texture__: null
	,depthTexture__: null
	,Quality__: null
	,isDepth__: null
	,values__: null
	,offsets__: null
	,pixel__: null
	,hasFixedColor__: null
	,smoothFixedColor__: null
	,fixedColor__: null
	,isDepthDependant__: null
	,hasNormal__: null
	,normalTexture__: null
	,isCube__: null
	,cubeTexture__: null
	,cubeDir__: null
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.Quality__;
		if(v >>> 8 != 0) {
			throw new js__$Boot_HaxeError("Quality" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		if(this.isDepth__) {
			this.constBits |= 256;
		}
		if(this.hasFixedColor__) {
			this.constBits |= 512;
		}
		if(this.smoothFixedColor__) {
			this.constBits |= 1024;
		}
		if(this.isDepthDependant__) {
			this.constBits |= 2048;
		}
		if(this.hasNormal__) {
			this.constBits |= 4096;
		}
		if(this.isCube__) {
			this.constBits |= 8192;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.cameraInverseViewProj__;
		case 2:
			return this.texture__;
		case 3:
			return this.depthTexture__;
		case 4:
			return this.Quality__;
		case 5:
			return this.isDepth__;
		case 6:
			return this.values__;
		case 7:
			return this.offsets__;
		case 8:
			return this.pixel__;
		case 9:
			return this.hasFixedColor__;
		case 10:
			return this.smoothFixedColor__;
		case 11:
			return this.fixedColor__;
		case 12:
			return this.isDepthDependant__;
		case 13:
			return this.hasNormal__;
		case 14:
			return this.normalTexture__;
		case 15:
			return this.isCube__;
		case 16:
			return this.cubeTexture__;
		case 17:
			return this.cubeDir__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_shader_Blur
});
var h3d_shader_ShaderBuffers = function(s) {
	this.globals = new Float32Array(s.globalsSize << 2);
	this.params = new Float32Array(s.paramsSize << 2);
	var this1 = new Array(s.texturesCount);
	this.tex = this1;
	var tmp;
	if(s.bufferCount > 0) {
		var this2 = new Array(s.bufferCount);
		tmp = this2;
	} else {
		tmp = null;
	}
	this.buffers = tmp;
};
$hxClasses["h3d.shader.ShaderBuffers"] = h3d_shader_ShaderBuffers;
h3d_shader_ShaderBuffers.__name__ = "h3d.shader.ShaderBuffers";
h3d_shader_ShaderBuffers.prototype = {
	globals: null
	,params: null
	,tex: null
	,buffers: null
	,grow: function(s) {
		var ng = s.globalsSize << 2;
		var np = s.paramsSize << 2;
		var nt = s.texturesCount;
		var nb = s.bufferCount;
		if(this.globals.length < ng) {
			this.globals = new Float32Array(ng);
		}
		if(this.params.length < np) {
			this.params = new Float32Array(np);
		}
		if(this.tex.length < nt) {
			var this1 = new Array(nt);
			this.tex = this1;
		}
		if(nb > 0 && (this.buffers == null || this.buffers.length < nb)) {
			var this2 = new Array(nb);
			this.buffers = this2;
		}
	}
	,__class__: h3d_shader_ShaderBuffers
};
var h3d_shader_Buffers = function(s) {
	this.vertex = new h3d_shader_ShaderBuffers(s.vertex);
	this.fragment = new h3d_shader_ShaderBuffers(s.fragment);
};
$hxClasses["h3d.shader.Buffers"] = h3d_shader_Buffers;
h3d_shader_Buffers.__name__ = "h3d.shader.Buffers";
h3d_shader_Buffers.prototype = {
	vertex: null
	,fragment: null
	,__class__: h3d_shader_Buffers
};
var h3d_shader_ColorAdd = function(color) {
	if(color == null) {
		color = 0;
	}
	this.color__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.color__;
	_this.x = (color >> 16 & 255) / 255;
	_this.y = (color >> 8 & 255) / 255;
	_this.z = (color & 255) / 255;
	_this.w = (color >>> 24) / 255;
};
$hxClasses["h3d.shader.ColorAdd"] = h3d_shader_ColorAdd;
h3d_shader_ColorAdd.__name__ = "h3d.shader.ColorAdd";
h3d_shader_ColorAdd.__super__ = hxsl_Shader;
h3d_shader_ColorAdd.prototype = $extend(hxsl_Shader.prototype,{
	color__: null
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.color__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_ColorAdd
});
var h3d_shader_ColorKey = function(v) {
	if(v == null) {
		v = 0;
	}
	this.colorKey__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.colorKey__;
	_this.x = (v >> 16 & 255) / 255;
	_this.y = (v >> 8 & 255) / 255;
	_this.z = (v & 255) / 255;
	_this.w = (v >>> 24) / 255;
};
$hxClasses["h3d.shader.ColorKey"] = h3d_shader_ColorKey;
h3d_shader_ColorKey.__name__ = "h3d.shader.ColorKey";
h3d_shader_ColorKey.__super__ = hxsl_Shader;
h3d_shader_ColorKey.prototype = $extend(hxsl_Shader.prototype,{
	colorKey__: null
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.colorKey__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_ColorKey
});
var h3d_shader_ColorMatrix = function(m) {
	this.matrix__ = new h3d_Matrix();
	hxsl_Shader.call(this);
	if(m != null) {
		this.matrix__.loadValues(m);
	} else {
		this.matrix__.identity();
	}
};
$hxClasses["h3d.shader.ColorMatrix"] = h3d_shader_ColorMatrix;
h3d_shader_ColorMatrix.__name__ = "h3d.shader.ColorMatrix";
h3d_shader_ColorMatrix.__super__ = hxsl_Shader;
h3d_shader_ColorMatrix.prototype = $extend(hxsl_Shader.prototype,{
	matrix__: null
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.matrix__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_ColorMatrix
});
var h3d_shader_DirShadow = function() {
	this.poissonDiskVeryHigh__ = [];
	this.poissonDiskHigh__ = [];
	this.poissonDiskLow__ = [];
	this.shadowBias__ = 0;
	this.shadowProj__ = new h3d_Matrix();
	this.shadowMapChannel__ = hxsl_Channel.Unknown;
	this.shadowRes__ = new h3d_Vector();
	this.pcfScale__ = 0;
	this.pcfQuality__ = 0;
	this.shadowPower__ = 0;
	hxsl_Shader.call(this);
	this.poissonDiskLow__ = [new h3d_Vector(-0.942,-0.399),new h3d_Vector(0.945,-0.768),new h3d_Vector(-0.094,-0.929),new h3d_Vector(0.344,0.293)];
	this.poissonDiskHigh__ = [new h3d_Vector(-0.326,-0.406),new h3d_Vector(-0.840,-0.074),new h3d_Vector(-0.696,0.457),new h3d_Vector(-0.203,0.621),new h3d_Vector(0.962,-0.195),new h3d_Vector(0.473,-0.480),new h3d_Vector(0.519,0.767),new h3d_Vector(0.185,-0.893),new h3d_Vector(0.507,0.064),new h3d_Vector(0.896,0.412),new h3d_Vector(-0.322,-0.933),new h3d_Vector(-0.792,-0.598)];
	this.poissonDiskVeryHigh__ = [new h3d_Vector(-0.613392,0.617481),new h3d_Vector(0.170019,-0.040254),new h3d_Vector(-0.299417,0.791925),new h3d_Vector(0.645680,0.493210),new h3d_Vector(-0.651784,0.717887),new h3d_Vector(0.421003,0.027070),new h3d_Vector(-0.817194,-0.271096),new h3d_Vector(-0.705374,-0.668203),new h3d_Vector(0.977050,-0.108615),new h3d_Vector(0.063326,0.142369),new h3d_Vector(0.203528,0.214331),new h3d_Vector(-0.667531,0.326090),new h3d_Vector(-0.098422,-0.295755),new h3d_Vector(-0.885922,0.215369),new h3d_Vector(0.566637,0.605213),new h3d_Vector(0.039766,-0.396100),new h3d_Vector(0.751946,0.453352),new h3d_Vector(0.078707,-0.715323),new h3d_Vector(-0.075838,-0.529344),new h3d_Vector(0.724479,-0.580798),new h3d_Vector(0.222999,-0.215125),new h3d_Vector(-0.467574,-0.405438),new h3d_Vector(-0.248268,-0.814753),new h3d_Vector(0.354411,-0.887570),new h3d_Vector(0.175817,0.382366),new h3d_Vector(0.487472,-0.063082),new h3d_Vector(-0.084078,0.898312),new h3d_Vector(0.488876,-0.783441),new h3d_Vector(0.470016,0.217933),new h3d_Vector(-0.696890,-0.549791),new h3d_Vector(-0.149693,0.605762),new h3d_Vector(0.034211,0.979980),new h3d_Vector(0.503098,-0.308878),new h3d_Vector(-0.016205,-0.872921),new h3d_Vector(0.385784,-0.393902),new h3d_Vector(-0.146886,-0.859249),new h3d_Vector(0.643361,0.164098),new h3d_Vector(0.634388,-0.049471),new h3d_Vector(-0.688894,0.007843),new h3d_Vector(0.464034,-0.188818),new h3d_Vector(-0.440840,0.137486),new h3d_Vector(0.364483,0.511704),new h3d_Vector(0.034028,0.325968),new h3d_Vector(0.099094,-0.308023),new h3d_Vector(0.693960,-0.366253),new h3d_Vector(0.678884,-0.204688),new h3d_Vector(0.001801,0.780328),new h3d_Vector(0.145177,-0.898984),new h3d_Vector(0.062655,-0.611866),new h3d_Vector(0.315226,-0.604297),new h3d_Vector(-0.780145,0.486251),new h3d_Vector(-0.371868,0.882138),new h3d_Vector(0.200476,0.494430),new h3d_Vector(-0.494552,-0.711051),new h3d_Vector(0.612476,0.705252),new h3d_Vector(-0.578845,-0.768792),new h3d_Vector(-0.772454,-0.090976),new h3d_Vector(0.504440,0.372295),new h3d_Vector(0.155736,0.065157),new h3d_Vector(0.391522,0.849605),new h3d_Vector(-0.620106,-0.328104),new h3d_Vector(0.789239,-0.419965),new h3d_Vector(-0.545396,0.538133),new h3d_Vector(-0.178564,-0.596057)];
};
$hxClasses["h3d.shader.DirShadow"] = h3d_shader_DirShadow;
h3d_shader_DirShadow.__name__ = "h3d.shader.DirShadow";
h3d_shader_DirShadow.__super__ = hxsl_Shader;
h3d_shader_DirShadow.prototype = $extend(hxsl_Shader.prototype,{
	enable__: null
	,USE_ESM__: null
	,shadowPower__: null
	,USE_PCF__: null
	,pcfQuality__: null
	,pcfScale__: null
	,shadowRes__: null
	,shadowMap__: null
	,shadowMapChannel__: null
	,shadowProj__: null
	,shadowBias__: null
	,poissonDiskLow__: null
	,poissonDiskHigh__: null
	,poissonDiskVeryHigh__: null
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.enable__) {
			this.constBits |= 1;
		}
		if(this.USE_ESM__) {
			this.constBits |= 2;
		}
		if(this.USE_PCF__) {
			this.constBits |= 4;
		}
		var v = this.pcfQuality__;
		if(v >>> 8 != 0) {
			throw new js__$Boot_HaxeError("pcfQuality" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v << 3;
		if(this.shadowMap__ == null) {
			this.shadowMapChannel__ = hxsl_Channel.Unknown;
		} else if(this.shadowMapChannel__ == hxsl_Channel.Unknown) {
			if(this.shadowMap__.format == h3d_mat_Texture.nativeFormat) {
				this.shadowMapChannel__ = hxsl_Channel.PackedFloat;
			} else {
				throw new js__$Boot_HaxeError("shadowMap" + "Channel is not set");
			}
		}
		this.constBits |= (globals.allocChannelID(this.shadowMap__) << 3 | this.shadowMapChannel__._hx_index) << 11;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.enable__;
		case 1:
			return this.USE_ESM__;
		case 2:
			return this.shadowPower__;
		case 3:
			return this.USE_PCF__;
		case 4:
			return this.pcfQuality__;
		case 5:
			return this.pcfScale__;
		case 6:
			return this.shadowRes__;
		case 7:
			return this.shadowMap__;
		case 8:
			return this.shadowProj__;
		case 9:
			return this.shadowBias__;
		case 10:
			return this.poissonDiskLow__;
		case 11:
			return this.poissonDiskHigh__;
		case 12:
			return this.poissonDiskVeryHigh__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 2:
			return this.shadowPower__;
		case 5:
			return this.pcfScale__;
		case 9:
			return this.shadowBias__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_DirShadow
});
var h3d_shader_LineShader = function(width,lengthScale) {
	if(lengthScale == null) {
		lengthScale = 1.;
	}
	if(width == null) {
		width = 1.5;
	}
	this.width__ = 0;
	this.lengthScale__ = 0;
	hxsl_Shader.call(this);
	this.width__ = width;
	this.lengthScale__ = lengthScale;
};
$hxClasses["h3d.shader.LineShader"] = h3d_shader_LineShader;
h3d_shader_LineShader.__name__ = "h3d.shader.LineShader";
h3d_shader_LineShader.__super__ = hxsl_Shader;
h3d_shader_LineShader.prototype = $extend(hxsl_Shader.prototype,{
	lengthScale__: null
	,width__: null
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.lengthScale__;
		case 1:
			return this.width__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.lengthScale__;
		case 1:
			return this.width__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_LineShader
});
var h3d_shader_MinMaxShader = function() {
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.MinMaxShader"] = h3d_shader_MinMaxShader;
h3d_shader_MinMaxShader.__name__ = "h3d.shader.MinMaxShader";
h3d_shader_MinMaxShader.__super__ = h3d_shader_ScreenShader;
h3d_shader_MinMaxShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	texA__: null
	,texB__: null
	,isMax__: null
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isMax__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texA__;
		case 2:
			return this.texB__;
		case 3:
			return this.isMax__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_shader_MinMaxShader
});
var h3d_shader_CubeMinMaxShader = function() {
	this.mat__ = new h3d_Matrix();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.CubeMinMaxShader"] = h3d_shader_CubeMinMaxShader;
h3d_shader_CubeMinMaxShader.__name__ = "h3d.shader.CubeMinMaxShader";
h3d_shader_CubeMinMaxShader.__super__ = h3d_shader_ScreenShader;
h3d_shader_CubeMinMaxShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	texA__: null
	,texB__: null
	,isMax__: null
	,mat__: null
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isMax__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texA__;
		case 2:
			return this.texB__;
		case 3:
			return this.isMax__;
		case 4:
			return this.mat__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_shader_CubeMinMaxShader
});
var h3d_shader_NormalMap = function(texture) {
	hxsl_Shader.call(this);
	this.texture__ = texture;
};
$hxClasses["h3d.shader.NormalMap"] = h3d_shader_NormalMap;
h3d_shader_NormalMap.__name__ = "h3d.shader.NormalMap";
h3d_shader_NormalMap.__super__ = hxsl_Shader;
h3d_shader_NormalMap.prototype = $extend(hxsl_Shader.prototype,{
	texture__: null
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.texture__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_NormalMap
});
var h3d_shader_Shadow = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.Shadow"] = h3d_shader_Shadow;
h3d_shader_Shadow.__name__ = "h3d.shader.Shadow";
h3d_shader_Shadow.__super__ = hxsl_Shader;
h3d_shader_Shadow.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_Shadow
});
var h3d_shader_SignedDistanceField = function() {
	this.smoothing__ = 0.041666666666666664;
	this.alphaCutoff__ = 0.5;
	this.channel__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.SignedDistanceField"] = h3d_shader_SignedDistanceField;
h3d_shader_SignedDistanceField.__name__ = "h3d.shader.SignedDistanceField";
h3d_shader_SignedDistanceField.__super__ = hxsl_Shader;
h3d_shader_SignedDistanceField.prototype = $extend(hxsl_Shader.prototype,{
	channel__: null
	,alphaCutoff__: null
	,smoothing__: null
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.channel__;
		if(v >>> 8 != 0) {
			throw new js__$Boot_HaxeError("channel" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.channel__;
		case 1:
			return this.alphaCutoff__;
		case 2:
			return this.smoothing__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 1:
			return this.alphaCutoff__;
		case 2:
			return this.smoothing__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_SignedDistanceField
});
var h3d_shader_SkinBase = function() {
	this.bonesMatrixes__ = [];
	this.MaxBones__ = 0;
	hxsl_Shader.call(this);
	this.constModified = true;
	this.MaxBones__ = 34;
};
$hxClasses["h3d.shader.SkinBase"] = h3d_shader_SkinBase;
h3d_shader_SkinBase.__name__ = "h3d.shader.SkinBase";
h3d_shader_SkinBase.__super__ = hxsl_Shader;
h3d_shader_SkinBase.prototype = $extend(hxsl_Shader.prototype,{
	MaxBones__: null
	,bonesMatrixes__: null
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw new js__$Boot_HaxeError("MaxBones" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_SkinBase
});
var h3d_shader_Skin = function() {
	h3d_shader_SkinBase.call(this);
};
$hxClasses["h3d.shader.Skin"] = h3d_shader_Skin;
h3d_shader_Skin.__name__ = "h3d.shader.Skin";
h3d_shader_Skin.__super__ = h3d_shader_SkinBase;
h3d_shader_Skin.prototype = $extend(h3d_shader_SkinBase.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw new js__$Boot_HaxeError("MaxBones" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_Skin
});
var h3d_shader_SkinTangent = function() {
	h3d_shader_SkinBase.call(this);
};
$hxClasses["h3d.shader.SkinTangent"] = h3d_shader_SkinTangent;
h3d_shader_SkinTangent.__name__ = "h3d.shader.SkinTangent";
h3d_shader_SkinTangent.__super__ = h3d_shader_SkinBase;
h3d_shader_SkinTangent.prototype = $extend(h3d_shader_SkinBase.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw new js__$Boot_HaxeError("MaxBones" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_SkinTangent
});
var h3d_shader_SpecularTexture = function(tex) {
	hxsl_Shader.call(this);
	this.texture__ = tex;
};
$hxClasses["h3d.shader.SpecularTexture"] = h3d_shader_SpecularTexture;
h3d_shader_SpecularTexture.__name__ = "h3d.shader.SpecularTexture";
h3d_shader_SpecularTexture.__super__ = hxsl_Shader;
h3d_shader_SpecularTexture.prototype = $extend(hxsl_Shader.prototype,{
	texture__: null
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.texture__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_SpecularTexture
});
var h3d_shader_Texture = function(tex) {
	this.killAlphaThreshold__ = 0;
	hxsl_Shader.call(this);
	this.texture__ = tex;
	this.killAlphaThreshold__ = h3d_mat_Defaults.defaultKillAlphaThreshold;
};
$hxClasses["h3d.shader.Texture"] = h3d_shader_Texture;
h3d_shader_Texture.__name__ = "h3d.shader.Texture";
h3d_shader_Texture.__super__ = hxsl_Shader;
h3d_shader_Texture.prototype = $extend(hxsl_Shader.prototype,{
	additive__: null
	,killAlpha__: null
	,specularAlpha__: null
	,killAlphaThreshold__: null
	,texture__: null
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 1;
		}
		if(this.killAlpha__) {
			this.constBits |= 2;
		}
		if(this.specularAlpha__) {
			this.constBits |= 4;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.additive__;
		case 1:
			return this.killAlpha__;
		case 2:
			return this.specularAlpha__;
		case 3:
			return this.killAlphaThreshold__;
		case 4:
			return this.texture__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 3) {
			return this.killAlphaThreshold__;
		}
		return 0.;
	}
	,__class__: h3d_shader_Texture
});
var h3d_shader_UVDelta = function(dx,dy,sx,sy) {
	if(sy == null) {
		sy = 1.;
	}
	if(sx == null) {
		sx = 1.;
	}
	if(dy == null) {
		dy = 0.;
	}
	if(dx == null) {
		dx = 0.;
	}
	this.uvScale__ = new h3d_Vector();
	this.uvDelta__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.uvDelta__;
	var x = dx;
	var y = dy;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = 0.;
	_this.w = 1.;
	var _this1 = this.uvScale__;
	var x1 = sx;
	var y1 = sy;
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	_this1.x = x1;
	_this1.y = y1;
	_this1.z = 0.;
	_this1.w = 1.;
};
$hxClasses["h3d.shader.UVDelta"] = h3d_shader_UVDelta;
h3d_shader_UVDelta.__name__ = "h3d.shader.UVDelta";
h3d_shader_UVDelta.__super__ = hxsl_Shader;
h3d_shader_UVDelta.prototype = $extend(hxsl_Shader.prototype,{
	uvDelta__: null
	,uvScale__: null
	,updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.uvDelta__;
		case 1:
			return this.uvScale__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_UVDelta
});
var h3d_shader_VertexColorAlpha = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.VertexColorAlpha"] = h3d_shader_VertexColorAlpha;
h3d_shader_VertexColorAlpha.__name__ = "h3d.shader.VertexColorAlpha";
h3d_shader_VertexColorAlpha.__super__ = hxsl_Shader;
h3d_shader_VertexColorAlpha.prototype = $extend(hxsl_Shader.prototype,{
	additive__: null
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.additive__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_VertexColorAlpha
});
var h3d_shader_VolumeDecal = function(objectWidth,objectHeight) {
	this.isCentered__ = true;
	this.tangent__ = new h3d_Vector();
	this.normal__ = new h3d_Vector();
	this.scale__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.normal__;
	var x = 0;
	var y = 0;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = 1.;
	var _this1 = this.tangent__;
	var x1 = 1;
	var y1 = 0;
	var z1 = 0;
	if(z1 == null) {
		z1 = 0.;
	}
	if(y1 == null) {
		y1 = 0.;
	}
	if(x1 == null) {
		x1 = 0.;
	}
	_this1.x = x1;
	_this1.y = y1;
	_this1.z = z1;
	_this1.w = 1.;
	var _this2 = this.scale__;
	var x2 = 1 / objectWidth;
	var y2 = 1 / objectHeight;
	if(y2 == null) {
		y2 = 0.;
	}
	if(x2 == null) {
		x2 = 0.;
	}
	_this2.x = x2;
	_this2.y = y2;
	_this2.z = 0.;
	_this2.w = 1.;
};
$hxClasses["h3d.shader.VolumeDecal"] = h3d_shader_VolumeDecal;
h3d_shader_VolumeDecal.__name__ = "h3d.shader.VolumeDecal";
h3d_shader_VolumeDecal.__super__ = hxsl_Shader;
h3d_shader_VolumeDecal.prototype = $extend(hxsl_Shader.prototype,{
	scale__: null
	,normal__: null
	,tangent__: null
	,isCentered__: null
	,updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isCentered__) {
			this.constBits |= 64;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.scale__;
		case 1:
			return this.normal__;
		case 2:
			return this.tangent__;
		case 3:
			return this.isCentered__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_VolumeDecal
});
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
var haxe_EntryPoint = function() { };
$hxClasses["haxe.EntryPoint"] = haxe_EntryPoint;
haxe_EntryPoint.__name__ = "haxe.EntryPoint";
haxe_EntryPoint.processEvents = function() {
	while(true) {
		var f = haxe_EntryPoint.pending.shift();
		if(f == null) {
			break;
		}
		f();
	}
	var time = haxe_MainLoop.tick();
	if(!haxe_MainLoop.hasEvents() && haxe_EntryPoint.threadCount == 0) {
		return -1;
	}
	return time;
};
haxe_EntryPoint.run = function() {
	var nextTick = haxe_EntryPoint.processEvents();
	var $window = window;
	var rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
	rqf(haxe_EntryPoint.run);
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			str += ", " + Std.string(v1);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_MainEvent = function(f,p) {
	this.isBlocking = true;
	this.f = f;
	this.priority = p;
	this.nextRun = -Infinity;
};
$hxClasses["haxe.MainEvent"] = haxe_MainEvent;
haxe_MainEvent.__name__ = "haxe.MainEvent";
haxe_MainEvent.prototype = {
	f: null
	,prev: null
	,next: null
	,isBlocking: null
	,nextRun: null
	,priority: null
	,__class__: haxe_MainEvent
};
var haxe_MainLoop = function() { };
$hxClasses["haxe.MainLoop"] = haxe_MainLoop;
haxe_MainLoop.__name__ = "haxe.MainLoop";
haxe_MainLoop.hasEvents = function() {
	var p = haxe_MainLoop.pending;
	while(p != null) {
		if(p.isBlocking) {
			return true;
		}
		p = p.next;
	}
	return false;
};
haxe_MainLoop.add = function(f,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(f == null) {
		throw new js__$Boot_HaxeError("Event function is null");
	}
	var e = new haxe_MainEvent(f,priority);
	var head = haxe_MainLoop.pending;
	if(head != null) {
		head.prev = e;
	}
	e.next = head;
	haxe_MainLoop.pending = e;
	return e;
};
haxe_MainLoop.sortEvents = function() {
	var list = haxe_MainLoop.pending;
	if(list == null) {
		return;
	}
	var insize = 1;
	var nmerges;
	var psize = 0;
	var qsize = 0;
	var p;
	var q;
	var e;
	var tail;
	while(true) {
		p = list;
		list = null;
		tail = null;
		nmerges = 0;
		while(p != null) {
			++nmerges;
			q = p;
			psize = 0;
			var _g = 0;
			var _g1 = insize;
			while(_g < _g1) {
				var i = _g++;
				++psize;
				q = q.next;
				if(q == null) {
					break;
				}
			}
			qsize = insize;
			while(psize > 0 || qsize > 0 && q != null) {
				if(psize == 0) {
					e = q;
					q = q.next;
					--qsize;
				} else if(qsize == 0 || q == null || (p.priority > q.priority || p.priority == q.priority && p.nextRun <= q.nextRun)) {
					e = p;
					p = p.next;
					--psize;
				} else {
					e = q;
					q = q.next;
					--qsize;
				}
				if(tail != null) {
					tail.next = e;
				} else {
					list = e;
				}
				e.prev = tail;
				tail = e;
			}
			p = q;
		}
		tail.next = null;
		if(nmerges <= 1) {
			break;
		}
		insize *= 2;
	}
	list.prev = null;
	haxe_MainLoop.pending = list;
};
haxe_MainLoop.tick = function() {
	haxe_MainLoop.sortEvents();
	var e = haxe_MainLoop.pending;
	var now = Date.now() / 1000;
	var wait = 1e9;
	while(e != null) {
		var next = e.next;
		var wt = e.nextRun - now;
		if(wt <= 0) {
			wait = 0;
			if(e.f != null) {
				e.f();
			}
		} else if(wait > wt) {
			wait = wt;
		}
		e = next;
	}
	return wait;
};
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = "haxe.Resource";
haxe_Resource.getBytes = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return haxe_io_Bytes.ofString(x.str);
			}
			return haxe_crypto_Base64.decode(x.data);
		}
	}
	return null;
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Object.create(cl1.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s1] != null) {
					h1.setReserved(s1,value);
				} else {
					h1.h[s1] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Object.create(cl2.prototype);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf5.charCodeAt(i1++)];
				var c2 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c11 << 2 | c2 >> 4;
				var c3 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				var c4 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c3 << 6 | c4;
			}
			if(rest >= 2) {
				var c12 = codes[buf5.charCodeAt(i1++)];
				var c21 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c12 << 2 | c21 >> 4;
				if(rest == 3) {
					var c31 = codes[buf5.charCodeAt(i1++)];
					bytes.b[bpos++] = c21 << 4 | c31 >> 2;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s2 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s2 = decodeURIComponent(s2.split("+").join(" "));
			this.scache.push(s2);
			return s2;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["haxe.crypto.Adler32"] = haxe_crypto_Adler32;
haxe_crypto_Adler32.__name__ = "haxe.crypto.Adler32";
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	a1: null
	,a2: null
	,update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g = pos;
		var _g1 = pos + len;
		while(_g < _g1) {
			var p = _g++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i1 = 0;
	while(i1 < s.length) {
		var c1 = s.charCodeAt(i1++);
		if(55296 <= c1 && c1 <= 56319) {
			c1 = c1 - 55232 << 10 | s.charCodeAt(i1++) & 1023;
		}
		if(c1 <= 127) {
			a.push(c1);
		} else if(c1 <= 2047) {
			a.push(192 | c1 >> 6);
			a.push(128 | c1 & 63);
		} else if(c1 <= 65535) {
			a.push(224 | c1 >> 12);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		} else {
			a.push(240 | c1 >> 18);
			a.push(128 | c1 >> 12 & 63);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,fill: function(pos,len,value) {
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this.b[pos++] = value;
		}
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__empty_constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i1 = _g1++;
			tbl[this.base.b[i1]] = i1;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_crypto_Md5 = function() {
};
$hxClasses["haxe.crypto.Md5"] = haxe_crypto_Md5;
haxe_crypto_Md5.__name__ = "haxe.crypto.Md5";
haxe_crypto_Md5.encode = function(s) {
	var m = new haxe_crypto_Md5();
	var h = m.doEncode(haxe_crypto_Md5.str2blks(s));
	return m.hex(h);
};
haxe_crypto_Md5.str2blks = function(str) {
	var str1 = haxe_io_Bytes.ofString(str);
	var nblk = (str1.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g = 0;
	var _g1 = blksSize;
	while(_g < _g1) {
		var i = _g++;
		blks[i] = 0;
	}
	var i1 = 0;
	var max = str1.length;
	var l = max * 8;
	while(i1 < max) {
		blks[i1 >> 2] |= str1.b[i1] << (l + i1) % 4 * 8;
		++i1;
	}
	blks[i1 >> 2] |= 128 << (l + i1) % 4 * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe_crypto_Md5.prototype = {
	bitOR: function(a,b) {
		var lsb = a & 1 | b & 1;
		var msb31 = a >>> 1 | b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitXOR: function(a,b) {
		var lsb = a & 1 ^ b & 1;
		var msb31 = a >>> 1 ^ b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitAND: function(a,b) {
		var lsb = a & 1 & (b & 1);
		var msb31 = a >>> 1 & b >>> 1;
		return msb31 << 1 | lsb;
	}
	,addme: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	,hex: function(a) {
		var str = "";
		var hex_chr = "0123456789abcdef";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			str += hex_chr.charAt(num >> 4 & 15) + hex_chr.charAt(num & 15);
			str += hex_chr.charAt(num >> 12 & 15) + hex_chr.charAt(num >> 8 & 15);
			str += hex_chr.charAt(num >> 20 & 15) + hex_chr.charAt(num >> 16 & 15);
			str += hex_chr.charAt(num >> 28 & 15) + hex_chr.charAt(num >> 24 & 15);
		}
		return str;
	}
	,rol: function(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	,cmn: function(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	,ff: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	,gg: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	,hh: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	,ii: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	,doEncode: function(x) {
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var step;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			step = 0;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	,__class__: haxe_crypto_Md5
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = "haxe.ds.ArraySort";
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.prototype = {
	root: null
	,set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,iterator: function() {
		var ret = [];
		this.iteratorLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,iteratorLoop: function(node,acc) {
		if(node != null) {
			this.iteratorLoop(node.left,acc);
			acc.push(node.value);
			this.iteratorLoop(node.right,acc);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this2 = r.right;
			var _this3 = r.left;
			if((_this2 == null ? 0 : _this2._height) > (_this3 == null ? 0 : _this3._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this2 = this.left;
			tmp = _this2 == null ? 0 : _this2._height;
		} else {
			var _this3 = this.right;
			tmp = _this3 == null ? 0 : _this3._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
haxe_ds_TreeNode.prototype = {
	left: null
	,right: null
	,key: null
	,value: null
	,_height: null
	,__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) this.h.hasOwnProperty(key) ? a.push(key | 0) : null;
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__ || (key.__id__ = $global.$haxeUID++);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = "haxe.ds._StringMap.StringMapIterator";
haxe_ds__$StringMap_StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	buffer: null
	,view: null
	,u8: null
	,pos: null
	,size: null
	,addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	bigEndian: null
	,readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			var eof1 = ((eof) instanceof js__$Boot_HaxeError) ? eof.val : eof;
			if(((eof1) instanceof haxe_io_Eof)) {
				var eof2 = eof1;
			} else {
				throw eof;
			}
		}
		return len - k;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readUntil: function(end) {
		var buf = new haxe_io_BytesBuffer();
		var last;
		while(true) {
			last = this.readByte();
			if(!(last != end)) {
				break;
			}
			buf.addByte(last);
		}
		return buf.getBytes().toString();
	}
	,readDouble: function() {
		var i1 = this.readInt32();
		var i2 = this.readInt32();
		if(this.bigEndian) {
			return haxe_io_FPHelper.i64ToDouble(i2,i1);
		} else {
			return haxe_io_FPHelper.i64ToDouble(i1,i2);
		}
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readUInt24: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		if(this.bigEndian) {
			return ch3 | ch2 << 8 | ch1 << 16;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	b: null
	,pos: null
	,len: null
	,totlen: null
	,set_position: function(p) {
		if(p < 0) {
			p = 0;
		} else if(p > this.totlen) {
			p = this.totlen;
		}
		this.len = this.totlen - p;
		return this.pos = p;
	}
	,readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = "haxe.io.Output";
haxe_io_Output.prototype = {
	flush: function() {
	}
	,close: function() {
	}
	,__class__: haxe_io_Output
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = "haxe.io.BytesOutput";
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	b: null
	,writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
haxe_io_Error.__empty_constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds];
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = "haxe.io.FPHelper";
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	haxe_io_FPHelper.helper.setInt32(0,low,true);
	haxe_io_FPHelper.helper.setInt32(4,high,true);
	return haxe_io_FPHelper.helper.getFloat64(0,true);
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.withExtension = function(path,ext) {
	var s = new haxe_io_Path(path);
	s.ext = ext;
	return s.toString();
};
haxe_io_Path.join = function(paths) {
	var _g = [];
	var _g1 = 0;
	var _g2 = paths;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(v != null && v != "") {
			_g.push(v);
		}
	}
	var paths1 = _g;
	if(paths1.length == 0) {
		return "";
	}
	var path = paths1[0];
	var _g3 = 1;
	var _g11 = paths1.length;
	while(_g3 < _g11) {
		var i = _g3++;
		path = haxe_io_Path.addTrailingSlash(path);
		path += paths1[i];
	}
	return haxe_io_Path.normalize(path);
};
haxe_io_Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join(slash);
	if(path == slash) {
		return slash;
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token == "") {
			if(target.length > 0 || HxOverrides.cca(path,0) == 47) {
				target.push(token);
			}
		} else if(token != ".") {
			target.push(token);
		}
	}
	var tmp = target.join(slash);
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g2_offset = 0;
	var _g2_s = tmp;
	while(_g2_offset < _g2_s.length) {
		var s = _g2_s;
		var index = _g2_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g2_offset;
		}
		var c2 = c1;
		switch(c2) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				var i = c2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			var i1 = c2;
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCodePoint(i1);
		}
	}
	return acc_b;
};
haxe_io_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
haxe_io_Path.prototype = {
	dir: null
	,file: null
	,ext: null
	,backslash: null
	,toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_macro_Binop = $hxEnums["haxe.macro.Binop"] = { __ename__ : true, __constructs__ : ["OpAdd","OpMult","OpDiv","OpSub","OpAssign","OpEq","OpNotEq","OpGt","OpGte","OpLt","OpLte","OpAnd","OpOr","OpXor","OpBoolAnd","OpBoolOr","OpShl","OpShr","OpUShr","OpMod","OpAssignOp","OpInterval","OpArrow","OpIn"]
	,OpAdd: {_hx_index:0,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpMult: {_hx_index:1,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpDiv: {_hx_index:2,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpSub: {_hx_index:3,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAssign: {_hx_index:4,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpEq: {_hx_index:5,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpNotEq: {_hx_index:6,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpGt: {_hx_index:7,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpGte: {_hx_index:8,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpLt: {_hx_index:9,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpLte: {_hx_index:10,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAnd: {_hx_index:11,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpOr: {_hx_index:12,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpXor: {_hx_index:13,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpBoolAnd: {_hx_index:14,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpBoolOr: {_hx_index:15,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpShl: {_hx_index:16,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpShr: {_hx_index:17,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpUShr: {_hx_index:18,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpMod: {_hx_index:19,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAssignOp: ($_=function(op) { return {_hx_index:20,op:op,__enum__:"haxe.macro.Binop",toString:$estr}; },$_.__params__ = ["op"],$_)
	,OpInterval: {_hx_index:21,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpArrow: {_hx_index:22,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpIn: {_hx_index:23,__enum__:"haxe.macro.Binop",toString:$estr}
};
haxe_macro_Binop.__empty_constructs__ = [haxe_macro_Binop.OpAdd,haxe_macro_Binop.OpMult,haxe_macro_Binop.OpDiv,haxe_macro_Binop.OpSub,haxe_macro_Binop.OpAssign,haxe_macro_Binop.OpEq,haxe_macro_Binop.OpNotEq,haxe_macro_Binop.OpGt,haxe_macro_Binop.OpGte,haxe_macro_Binop.OpLt,haxe_macro_Binop.OpLte,haxe_macro_Binop.OpAnd,haxe_macro_Binop.OpOr,haxe_macro_Binop.OpXor,haxe_macro_Binop.OpBoolAnd,haxe_macro_Binop.OpBoolOr,haxe_macro_Binop.OpShl,haxe_macro_Binop.OpShr,haxe_macro_Binop.OpUShr,haxe_macro_Binop.OpMod,haxe_macro_Binop.OpInterval,haxe_macro_Binop.OpArrow,haxe_macro_Binop.OpIn];
var haxe_macro_Unop = $hxEnums["haxe.macro.Unop"] = { __ename__ : true, __constructs__ : ["OpIncrement","OpDecrement","OpNot","OpNeg","OpNegBits"]
	,OpIncrement: {_hx_index:0,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpDecrement: {_hx_index:1,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNot: {_hx_index:2,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNeg: {_hx_index:3,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNegBits: {_hx_index:4,__enum__:"haxe.macro.Unop",toString:$estr}
};
haxe_macro_Unop.__empty_constructs__ = [haxe_macro_Unop.OpIncrement,haxe_macro_Unop.OpDecrement,haxe_macro_Unop.OpNot,haxe_macro_Unop.OpNeg,haxe_macro_Unop.OpNegBits];
var haxe_rtti_Meta = function() { };
$hxClasses["haxe.rtti.Meta"] = haxe_rtti_Meta;
haxe_rtti_Meta.__name__ = "haxe.rtti.Meta";
haxe_rtti_Meta.getType = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.obj == null) {
		return { };
	} else {
		return meta.obj;
	}
};
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
var haxe_xml__$Access_NodeAccess_$Impl_$ = {};
$hxClasses["haxe.xml._Access.NodeAccess_Impl_"] = haxe_xml__$Access_NodeAccess_$Impl_$;
haxe_xml__$Access_NodeAccess_$Impl_$.__name__ = "haxe.xml._Access.NodeAccess_Impl_";
haxe_xml__$Access_NodeAccess_$Impl_$.resolve = function(this1,name) {
	var x = this1.elementsNamed(name).next();
	if(x == null) {
		var xname;
		if(this1.nodeType == Xml.Document) {
			xname = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this1.nodeType));
			}
			xname = this1.nodeName;
		}
		throw new js__$Boot_HaxeError(xname + " is missing element " + name);
	}
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Invalid nodeType " + _$Xml_XmlType_$Impl_$.toString(x.nodeType));
	}
	var this2 = x;
	return this2;
};
var haxe_xml__$Access_AttribAccess_$Impl_$ = {};
$hxClasses["haxe.xml._Access.AttribAccess_Impl_"] = haxe_xml__$Access_AttribAccess_$Impl_$;
haxe_xml__$Access_AttribAccess_$Impl_$.__name__ = "haxe.xml._Access.AttribAccess_Impl_";
haxe_xml__$Access_AttribAccess_$Impl_$.resolve = function(this1,name) {
	if(this1.nodeType == Xml.Document) {
		throw new js__$Boot_HaxeError("Cannot access document attribute " + name);
	}
	var v = this1.get(name);
	if(v == null) {
		if(this1.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this1.nodeType));
		}
		throw new js__$Boot_HaxeError(this1.nodeName + " is missing attribute " + name);
	}
	return v;
};
var haxe_xml__$Access_HasNodeAccess_$Impl_$ = {};
$hxClasses["haxe.xml._Access.HasNodeAccess_Impl_"] = haxe_xml__$Access_HasNodeAccess_$Impl_$;
haxe_xml__$Access_HasNodeAccess_$Impl_$.__name__ = "haxe.xml._Access.HasNodeAccess_Impl_";
haxe_xml__$Access_HasNodeAccess_$Impl_$.resolve = function(this1,name) {
	return this1.elementsNamed(name).hasNext();
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	message: null
	,lineNumber: null
	,positionAtLine: null
	,position: null
	,xml: null
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
					}
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else {
					var _this = haxe_xml_Parser.escapes;
					if(!(__map_reserved[s] != null ? _this.existsReserved(s) : _this.h.hasOwnProperty(s))) {
						if(strict) {
							throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						var _this1 = haxe_xml_Parser.escapes;
						var x = __map_reserved[s] != null ? _this1.getReserved(s) : _this1.h[s];
						buf.b += Std.string(x);
					}
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
			}
			throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len6 = p - start;
			buf.b += len6 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len6);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len7 = p - start;
		buf.b += len7 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len7);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	output: null
	,pretty: null
	,writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
				}
				var child = HxOverrides.iter(value.children);
				while(child.hasNext()) {
					var child1 = child.next();
					this.writeNode(child1,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input1 = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input1);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input2 = StringTools.trim(commentContent);
			this.output.b += Std.string(input2);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var child2 = HxOverrides.iter(value.children);
			while(child2.hasNext()) {
				var child3 = child2.next();
				this.writeNode(child3,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
		}
		var child = HxOverrides.iter(value.children);
		while(child.hasNext()) {
			var child1 = child.next();
			switch(child1.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child1.nodeType == Xml.Document || child1.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(child1.nodeType));
				}
				if(StringTools.ltrim(child1.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var haxe_zip_Huffman = $hxEnums["haxe.zip.Huffman"] = { __ename__ : true, __constructs__ : ["Found","NeedBit","NeedBits"]
	,Found: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["i"],$_)
	,NeedBit: ($_=function(left,right) { return {_hx_index:1,left:left,right:right,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["left","right"],$_)
	,NeedBits: ($_=function(n,table) { return {_hx_index:2,n:n,table:table,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["n","table"],$_)
};
haxe_zip_Huffman.__empty_constructs__ = [];
var haxe_zip_HuffTools = function() {
};
$hxClasses["haxe.zip.HuffTools"] = haxe_zip_HuffTools;
haxe_zip_HuffTools.__name__ = "haxe.zip.HuffTools";
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t._hx_index) {
		case 0:
			var _g = t.i;
			return 0;
		case 1:
			var b = t.right;
			var a = t.left;
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			var _g2 = t.table;
			var _g1 = t.n;
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t._hx_index == 1) {
				var b = t.right;
				var a = t.left;
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var i = _g++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t._hx_index == 1) {
			var b = t.right;
			var a = t.left;
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var _g = 0;
		var _g1 = maxbits;
		while(_g < _g1) {
			var i = _g++;
			counts.push(0);
			tmp.push(0);
		}
		var _g2 = 0;
		var _g3 = nlengths;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var p = lengths[i1 + pos];
			if(p >= maxbits) {
				throw new js__$Boot_HaxeError("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g4 = 1;
		var _g5 = maxbits - 1;
		while(_g4 < _g5) {
			var i2 = _g4++;
			code = code + counts[i2] << 1;
			tmp[i2] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g6 = 0;
		var _g7 = nlengths;
		while(_g6 < _g7) {
			var i3 = _g6++;
			var l = lengths[i3 + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i3;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
$hxClasses["haxe.zip._InflateImpl.Window"] = haxe_zip__$InflateImpl_Window;
haxe_zip__$InflateImpl_Window.__name__ = "haxe.zip._InflateImpl.Window";
haxe_zip__$InflateImpl_Window.prototype = {
	buffer: null
	,pos: null
	,crc: null
	,slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = $hxEnums["haxe.zip._InflateImpl.State"] = { __ename__ : true, __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"]
	,Head: {_hx_index:0,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Block: {_hx_index:1,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,CData: {_hx_index:2,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Flat: {_hx_index:3,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Crc: {_hx_index:4,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Dist: {_hx_index:5,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,DistOne: {_hx_index:6,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Done: {_hx_index:7,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
};
haxe_zip__$InflateImpl_State.__empty_constructs__ = [haxe_zip__$InflateImpl_State.Head,haxe_zip__$InflateImpl_State.Block,haxe_zip__$InflateImpl_State.CData,haxe_zip__$InflateImpl_State.Flat,haxe_zip__$InflateImpl_State.Crc,haxe_zip__$InflateImpl_State.Dist,haxe_zip__$InflateImpl_State.DistOne,haxe_zip__$InflateImpl_State.Done];
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this.isFinal = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
$hxClasses["haxe.zip.InflateImpl"] = haxe_zip_InflateImpl;
haxe_zip_InflateImpl.__name__ = "haxe.zip.InflateImpl";
haxe_zip_InflateImpl.run = function(i,bufsize) {
	if(bufsize == null) {
		bufsize = 65536;
	}
	var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
	var output = new haxe_io_BytesBuffer();
	var inflate = new haxe_zip_InflateImpl(i);
	while(true) {
		var len = inflate.readBytes(buf,0,bufsize);
		output.addBytes(buf,0,len);
		if(len < bufsize) {
			break;
		}
	}
	return output.getBytes();
};
haxe_zip_InflateImpl.prototype = {
	nbits: null
	,bits: null
	,state: null
	,isFinal: null
	,huffman: null
	,huffdist: null
	,htools: null
	,len: null
	,dist: null
	,needed: null
	,output: null
	,outpos: null
	,input: null
	,lengths: null
	,window: null
	,buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h._hx_index) {
		case 0:
			var n = h.i;
			return n;
		case 1:
			var b = h.right;
			var a = h.left;
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var tbl = h.table;
			var n1 = h.n;
			return this.applyHuffman(tbl[this.getBits(n1)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		switch(this.state._hx_index) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			if(fdict) {
				throw new js__$Boot_HaxeError("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this.isFinal = this.getBit();
			switch(this.getBits(2)) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g = 0;
				var _g1 = hclen;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g2 = hclen;
				var _g3 = 19;
				while(_g2 < _g3) {
					var i1 = _g2++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i1]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g4 = 0;
				var _g5 = hlit + hdist;
				while(_g4 < _g5) {
					var i2 = _g4++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw new js__$Boot_HaxeError("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen1 = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen1);
				this.len -= rlen1;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen2 = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen2);
			this.len -= rlen2;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Uncompress = function() { };
$hxClasses["haxe.zip.Uncompress"] = haxe_zip_Uncompress;
haxe_zip_Uncompress.__name__ = "haxe.zip.Uncompress";
haxe_zip_Uncompress.run = function(src,bufsize) {
	return haxe_zip_InflateImpl.run(new haxe_io_BytesInput(src),bufsize);
};
var hxd_BitmapData = function(width,height) {
	if(!(width == -101 && height == -102)) {
		var canvas = window.document.createElement("canvas");
		canvas.width = width;
		canvas.height = height;
		this.ctx = canvas.getContext("2d",null);
	}
};
$hxClasses["hxd.BitmapData"] = hxd_BitmapData;
hxd_BitmapData.__name__ = "hxd.BitmapData";
hxd_BitmapData.prototype = {
	ctx: null
	,pixel: null
	,getPixels: function() {
		var w = this.ctx.canvas.width;
		var h = this.ctx.canvas.height;
		var data = this.ctx.getImageData(0,0,w,h).data;
		var pixels = data.buffer;
		return new hxd_Pixels(w,h,haxe_io_Bytes.ofData(pixels),hxd_PixelFormat.RGBA);
	}
	,__class__: hxd_BitmapData
};
var hxd_Charset = function() {
	var _gthis = this;
	this.map = new haxe_ds_IntMap();
	var _g = 0;
	while(_g < 94) {
		var i = _g++;
		_gthis.map.h[65281 + i] = 33 + i;
	}
	var _g1 = 192;
	var _g2 = 199;
	while(_g1 < _g2) {
		var i1 = _g1++;
		_gthis.map.h[i1] = 65;
	}
	var _g3 = 224;
	var _g4 = 231;
	while(_g3 < _g4) {
		var i2 = _g3++;
		_gthis.map.h[i2] = 97;
	}
	var _g5 = 200;
	var _g6 = 204;
	while(_g5 < _g6) {
		var i3 = _g5++;
		_gthis.map.h[i3] = 69;
	}
	var _g7 = 232;
	var _g8 = 236;
	while(_g7 < _g8) {
		var i4 = _g7++;
		_gthis.map.h[i4] = 101;
	}
	var _g9 = 204;
	var _g10 = 208;
	while(_g9 < _g10) {
		var i5 = _g9++;
		_gthis.map.h[i5] = 73;
	}
	var _g11 = 236;
	var _g12 = 240;
	while(_g11 < _g12) {
		var i6 = _g11++;
		_gthis.map.h[i6] = 105;
	}
	var _g13 = 210;
	var _g14 = 215;
	while(_g13 < _g14) {
		var i7 = _g13++;
		_gthis.map.h[i7] = 79;
	}
	var _g15 = 242;
	var _g16 = 247;
	while(_g15 < _g16) {
		var i8 = _g15++;
		_gthis.map.h[i8] = 111;
	}
	var _g17 = 217;
	var _g18 = 221;
	while(_g17 < _g18) {
		var i9 = _g17++;
		_gthis.map.h[i9] = 85;
	}
	var _g19 = 249;
	var _g20 = 253;
	while(_g19 < _g20) {
		var i10 = _g19++;
		_gthis.map.h[i10] = 117;
	}
	_gthis.map.h[199] = 67;
	_gthis.map.h[231] = 67;
	_gthis.map.h[208] = 68;
	_gthis.map.h[222] = 100;
	_gthis.map.h[209] = 78;
	_gthis.map.h[241] = 110;
	_gthis.map.h[221] = 89;
	_gthis.map.h[253] = 121;
	_gthis.map.h[255] = 121;
	_gthis.map.h[8364] = 69;
	_gthis.map.h[12288] = 32;
	_gthis.map.h[160] = 32;
	_gthis.map.h[171] = 34;
	_gthis.map.h[187] = 34;
	_gthis.map.h[8220] = 34;
	_gthis.map.h[8221] = 34;
	_gthis.map.h[8216] = 39;
	_gthis.map.h[8217] = 39;
	_gthis.map.h[180] = 39;
	_gthis.map.h[8216] = 39;
	_gthis.map.h[8249] = 60;
	_gthis.map.h[8250] = 62;
	_gthis.map.h[8211] = 45;
};
$hxClasses["hxd.Charset"] = hxd_Charset;
hxd_Charset.__name__ = "hxd.Charset";
hxd_Charset.getDefault = function() {
	if(hxd_Charset.inst == null) {
		hxd_Charset.inst = new hxd_Charset();
	}
	return hxd_Charset.inst;
};
hxd_Charset.prototype = {
	map: null
	,resolveChar: function(code,glyphs) {
		var c = code;
		while(c != null) {
			var g = glyphs.h[c];
			if(g != null) {
				return g;
			}
			c = this.map.h[c];
		}
		return null;
	}
	,isCJK: function(code) {
		if(code >= 19968) {
			return code <= 40959;
		} else {
			return false;
		}
	}
	,isSpace: function(code) {
		if(code != 32) {
			return code == 12288;
		} else {
			return true;
		}
	}
	,isBreakChar: function(code) {
		if(!this.isSpace(code)) {
			return this.isCJK(code);
		} else {
			return true;
		}
	}
	,__class__: hxd_Charset
};
var hxd_Cursor = $hxEnums["hxd.Cursor"] = { __ename__ : true, __constructs__ : ["Default","Button","Move","TextInput","Hide","Custom","Callback"]
	,Default: {_hx_index:0,__enum__:"hxd.Cursor",toString:$estr}
	,Button: {_hx_index:1,__enum__:"hxd.Cursor",toString:$estr}
	,Move: {_hx_index:2,__enum__:"hxd.Cursor",toString:$estr}
	,TextInput: {_hx_index:3,__enum__:"hxd.Cursor",toString:$estr}
	,Hide: {_hx_index:4,__enum__:"hxd.Cursor",toString:$estr}
	,Custom: ($_=function(custom) { return {_hx_index:5,custom:custom,__enum__:"hxd.Cursor",toString:$estr}; },$_.__params__ = ["custom"],$_)
	,Callback: ($_=function(f) { return {_hx_index:6,f:f,__enum__:"hxd.Cursor",toString:$estr}; },$_.__params__ = ["f"],$_)
};
hxd_Cursor.__empty_constructs__ = [hxd_Cursor.Default,hxd_Cursor.Button,hxd_Cursor.Move,hxd_Cursor.TextInput,hxd_Cursor.Hide];
var hxd_CustomCursor = function(frames,speed,offsetX,offsetY) {
	this.frames = frames;
	this.speed = speed;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.frameDelay = 1 / speed;
	this.frameTime = 0;
	this.frameIndex = 0;
};
$hxClasses["hxd.CustomCursor"] = hxd_CustomCursor;
hxd_CustomCursor.__name__ = "hxd.CustomCursor";
hxd_CustomCursor.prototype = {
	frames: null
	,speed: null
	,offsetX: null
	,offsetY: null
	,alloc: null
	,frameDelay: null
	,frameTime: null
	,frameIndex: null
	,reset: function() {
		this.frameTime = 0;
		this.frameIndex = 0;
	}
	,update: function(dt) {
		var newTime = this.frameTime + dt;
		var delay = this.frameDelay;
		var index = this.frameIndex;
		while(newTime >= delay) {
			newTime -= delay;
			++index;
		}
		this.frameTime = newTime;
		if(index >= this.frames.length) {
			index %= this.frames.length;
		}
		if(index != this.frameIndex) {
			this.frameIndex = index;
			return index;
		}
		return -1;
	}
	,__class__: hxd_CustomCursor
};
var hxd_EventKind = $hxEnums["hxd.EventKind"] = { __ename__ : true, __constructs__ : ["EPush","ERelease","EMove","EOver","EOut","EWheel","EFocus","EFocusLost","EKeyDown","EKeyUp","EReleaseOutside","ETextInput","ECheck"]
	,EPush: {_hx_index:0,__enum__:"hxd.EventKind",toString:$estr}
	,ERelease: {_hx_index:1,__enum__:"hxd.EventKind",toString:$estr}
	,EMove: {_hx_index:2,__enum__:"hxd.EventKind",toString:$estr}
	,EOver: {_hx_index:3,__enum__:"hxd.EventKind",toString:$estr}
	,EOut: {_hx_index:4,__enum__:"hxd.EventKind",toString:$estr}
	,EWheel: {_hx_index:5,__enum__:"hxd.EventKind",toString:$estr}
	,EFocus: {_hx_index:6,__enum__:"hxd.EventKind",toString:$estr}
	,EFocusLost: {_hx_index:7,__enum__:"hxd.EventKind",toString:$estr}
	,EKeyDown: {_hx_index:8,__enum__:"hxd.EventKind",toString:$estr}
	,EKeyUp: {_hx_index:9,__enum__:"hxd.EventKind",toString:$estr}
	,EReleaseOutside: {_hx_index:10,__enum__:"hxd.EventKind",toString:$estr}
	,ETextInput: {_hx_index:11,__enum__:"hxd.EventKind",toString:$estr}
	,ECheck: {_hx_index:12,__enum__:"hxd.EventKind",toString:$estr}
};
hxd_EventKind.__empty_constructs__ = [hxd_EventKind.EPush,hxd_EventKind.ERelease,hxd_EventKind.EMove,hxd_EventKind.EOver,hxd_EventKind.EOut,hxd_EventKind.EWheel,hxd_EventKind.EFocus,hxd_EventKind.EFocusLost,hxd_EventKind.EKeyDown,hxd_EventKind.EKeyUp,hxd_EventKind.EReleaseOutside,hxd_EventKind.ETextInput,hxd_EventKind.ECheck];
var hxd_Event = function(k,x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.button = 0;
	this.kind = k;
	this.relX = x;
	this.relY = y;
};
$hxClasses["hxd.Event"] = hxd_Event;
hxd_Event.__name__ = "hxd.Event";
hxd_Event.prototype = {
	kind: null
	,relX: null
	,relY: null
	,relZ: null
	,propagate: null
	,cancel: null
	,button: null
	,touchId: null
	,keyCode: null
	,charCode: null
	,wheelDelta: null
	,__class__: hxd_Event
};
var hxd__$FloatBuffer_Float32Expand_$Impl_$ = {};
$hxClasses["hxd._FloatBuffer.Float32Expand_Impl_"] = hxd__$FloatBuffer_Float32Expand_$Impl_$;
hxd__$FloatBuffer_Float32Expand_$Impl_$.__name__ = "hxd._FloatBuffer.Float32Expand_Impl_";
hxd__$FloatBuffer_Float32Expand_$Impl_$._new = function(length) {
	var this1 = { pos : 0, array : new Float32Array(new ArrayBuffer(length << 2))};
	return this1;
};
var hxd_Key = function() { };
$hxClasses["hxd.Key"] = hxd_Key;
hxd_Key.__name__ = "hxd.Key";
hxd_Key.isDown = function(code) {
	return hxd_Key.keyPressed[code] > 0;
};
hxd_Key.isPressed = function(code) {
	return hxd_Key.keyPressed[code] == hxd_Timer.frameCount + 1 - 1;
};
hxd_Key.initialize = function() {
	if(hxd_Key.initDone) {
		hxd_Key.dispose();
	}
	hxd_Key.initDone = true;
	hxd_Key.keyPressed = [];
	hxd_Window.getInstance().addEventTarget(hxd_Key.onEvent);
};
hxd_Key.dispose = function() {
	if(hxd_Key.initDone) {
		hxd_Window.getInstance().removeEventTarget(hxd_Key.onEvent);
		hxd_Key.initDone = false;
		hxd_Key.keyPressed = [];
	}
};
hxd_Key.onEvent = function(e) {
	switch(e.kind._hx_index) {
	case 0:
		if(e.button < 5) {
			hxd_Key.keyPressed[e.button] = hxd_Timer.frameCount + 1;
		}
		break;
	case 1:
		if(e.button < 5) {
			hxd_Key.keyPressed[e.button] = -(hxd_Timer.frameCount + 1);
		}
		break;
	case 5:
		hxd_Key.keyPressed[e.wheelDelta > 0 ? 6 : 5] = hxd_Timer.frameCount + 1;
		break;
	case 8:
		if(!hxd_Key.ALLOW_KEY_REPEAT && hxd_Key.keyPressed[e.keyCode] > 0) {
			return;
		}
		hxd_Key.keyPressed[e.keyCode] = hxd_Timer.frameCount + 1;
		break;
	case 9:
		hxd_Key.keyPressed[e.keyCode] = -(hxd_Timer.frameCount + 1);
		break;
	default:
	}
};
var hxd_Flags = $hxEnums["hxd.Flags"] = { __ename__ : true, __constructs__ : ["ReadOnly","AlphaPremultiplied","FlipY"]
	,ReadOnly: {_hx_index:0,__enum__:"hxd.Flags",toString:$estr}
	,AlphaPremultiplied: {_hx_index:1,__enum__:"hxd.Flags",toString:$estr}
	,FlipY: {_hx_index:2,__enum__:"hxd.Flags",toString:$estr}
};
hxd_Flags.__empty_constructs__ = [hxd_Flags.ReadOnly,hxd_Flags.AlphaPremultiplied,hxd_Flags.FlipY];
var hxd__$Pixels_PixelsARGB_$Impl_$ = {};
$hxClasses["hxd._Pixels.PixelsARGB_Impl_"] = hxd__$Pixels_PixelsARGB_$Impl_$;
hxd__$Pixels_PixelsARGB_$Impl_$.__name__ = "hxd._Pixels.PixelsARGB_Impl_";
hxd__$Pixels_PixelsARGB_$Impl_$.fromPixels = function(p) {
	p.convert(hxd_PixelFormat.ARGB);
	p.setFlip(false);
	return p;
};
var hxd_Pixels = function(width,height,bytes,format,offset) {
	if(offset == null) {
		offset = 0;
	}
	this.width = width;
	this.height = height;
	this.bytes = bytes;
	this.set_innerFormat(format);
	this.offset = offset;
	var i = 0;
	if(i == null) {
		i = 0;
	}
	var this1 = i;
	this.flags = this1;
};
$hxClasses["hxd.Pixels"] = hxd_Pixels;
hxd_Pixels.__name__ = "hxd.Pixels";
hxd_Pixels.calcStride = function(width,format) {
	var tmp;
	switch(format._hx_index) {
	case 3:
		tmp = 8;
		break;
	case 4:
		tmp = 16;
		break;
	case 5:
		tmp = 1;
		break;
	case 6:
		tmp = 2;
		break;
	case 7:
		tmp = 4;
		break;
	case 8:
		tmp = 2;
		break;
	case 9:
		tmp = 4;
		break;
	case 10:
		tmp = 8;
		break;
	case 11:
		tmp = 3;
		break;
	case 12:
		tmp = 6;
		break;
	case 13:
		tmp = 12;
		break;
	case 0:case 1:case 2:case 14:case 15:
		tmp = 4;
		break;
	case 16:
		tmp = 4;
		break;
	case 17:
		tmp = 4;
		break;
	case 18:
		var n = format.v;
		if(n == 1 || n == 4) {
			return width >> 1;
		}
		tmp = 1;
		break;
	}
	return width * tmp;
};
hxd_Pixels.alloc = function(width,height,format) {
	return new hxd_Pixels(width,height,new haxe_io_Bytes(new ArrayBuffer(height * hxd_Pixels.calcStride(width,format))),format);
};
hxd_Pixels.prototype = {
	bytes: null
	,width: null
	,height: null
	,stride: null
	,offset: null
	,flags: null
	,bytesPerPixel: null
	,innerFormat: null
	,set_innerFormat: function(fmt) {
		this.innerFormat = fmt;
		this.stride = hxd_Pixels.calcStride(this.width,fmt);
		this.bytesPerPixel = hxd_Pixels.calcStride(1,fmt);
		return fmt;
	}
	,invalidFormat: function() {
		throw new js__$Boot_HaxeError("Unsupported format for this operation : " + Std.string(this.innerFormat));
	}
	,makeSquare: function(copy) {
		var w = this.width;
		var h = this.height;
		var tw = w == 0 ? 0 : 1;
		var th = h == 0 ? 0 : 1;
		while(tw < w) tw <<= 1;
		while(th < h) th <<= 1;
		if(w == tw && h == th) {
			return this;
		}
		var bpp = this.bytesPerPixel;
		var out = new haxe_io_Bytes(new ArrayBuffer(tw * th * bpp));
		var p = 0;
		var b = this.offset;
		var _g = 0;
		var _g1 = h;
		while(_g < _g1) {
			var y = _g++;
			out.blit(p,this.bytes,b,w * bpp);
			p += w * bpp;
			b += w * bpp;
			var _g2 = 0;
			var _g11 = (tw - w) * bpp >> 2;
			while(_g2 < _g11) {
				var i = _g2++;
				out.setInt32(p,0);
				p += 4;
			}
		}
		var _g21 = 0;
		var _g3 = (th - h) * tw * bpp >> 2;
		while(_g21 < _g3) {
			var i1 = _g21++;
			out.setInt32(p,0);
			p += 4;
		}
		if(copy) {
			return new hxd_Pixels(tw,th,out,this.innerFormat);
		}
		this.bytes = out;
		this.width = tw;
		this.height = th;
		return this;
	}
	,copyInner: function() {
		var old = this.bytes;
		this.bytes = new haxe_io_Bytes(new ArrayBuffer(this.height * this.stride));
		this.bytes.blit(0,old,this.offset,this.height * this.stride);
		this.offset = 0;
		this.flags &= -1 - (1 << hxd_Flags.ReadOnly._hx_index);
	}
	,setFlip: function(b) {
		if(b == null) {
			b = false;
		}
		if((this.flags & 1 << hxd_Flags.FlipY._hx_index) != 0 == b) {
			return;
		}
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		if(b) {
			this.flags |= 1 << hxd_Flags.FlipY._hx_index;
		} else {
			this.flags &= -1 - (1 << hxd_Flags.FlipY._hx_index);
		}
		if(this.stride % 4 != 0) {
			this.invalidFormat();
		}
		var _g = 0;
		var _g1 = this.height >> 1;
		while(_g < _g1) {
			var y = _g++;
			var p1 = y * this.stride + this.offset;
			var p2 = (this.height - 1 - y) * this.stride + this.offset;
			var _g2 = 0;
			var _g11 = this.stride >> 2;
			while(_g2 < _g11) {
				var x = _g2++;
				var a = this.bytes.getInt32(p1);
				var b1 = this.bytes.getInt32(p2);
				this.bytes.setInt32(p1,b1);
				this.bytes.setInt32(p2,a);
				p1 += 4;
				p2 += 4;
			}
		}
	}
	,convert: function(target) {
		if(this.innerFormat == target) {
			return;
		}
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		var this1 = this.bytes.b;
		var bytes = this1;
		var _g = this.innerFormat;
		switch(_g._hx_index) {
		case 0:
			switch(target._hx_index) {
			case 1:
				var _g1 = 0;
				var _g11 = this.width * this.height;
				while(_g1 < _g11) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var a = bytes[p];
					var r = bytes[p + 1];
					var g = bytes[p + 2];
					var b = bytes[p + 3];
					bytes[p++] = b;
					bytes[p++] = g;
					bytes[p++] = r;
					bytes[p] = a;
				}
				break;
			case 2:
				var _g2 = 0;
				var _g12 = this.width * this.height;
				while(_g2 < _g12) {
					var i1 = _g2++;
					var p1 = (i1 << 2) + this.offset;
					var a1 = bytes[p1];
					var v = bytes[p1 + 1];
					bytes[p1] = v;
					var v1 = bytes[p1 + 2];
					bytes[p1 + 1] = v1;
					var v2 = bytes[p1 + 3];
					bytes[p1 + 2] = v2;
					bytes[p1 + 3] = a1;
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 1:
			switch(target._hx_index) {
			case 0:
				var _g3 = 0;
				var _g13 = this.width * this.height;
				while(_g3 < _g13) {
					var i2 = _g3++;
					var p2 = (i2 << 2) + this.offset;
					var a2 = bytes[p2];
					var r1 = bytes[p2 + 1];
					var g1 = bytes[p2 + 2];
					var b1 = bytes[p2 + 3];
					bytes[p2++] = b1;
					bytes[p2++] = g1;
					bytes[p2++] = r1;
					bytes[p2] = a2;
				}
				break;
			case 2:
				var _g4 = 0;
				var _g14 = this.width * this.height;
				while(_g4 < _g14) {
					var i3 = _g4++;
					var p3 = (i3 << 2) + this.offset;
					var b2 = bytes[p3];
					var r2 = bytes[p3 + 2];
					bytes[p3] = r2;
					bytes[p3 + 2] = b2;
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 2:
			switch(target._hx_index) {
			case 0:
				var _g5 = 0;
				var _g15 = this.width * this.height;
				while(_g5 < _g15) {
					var i4 = _g5++;
					var p4 = (i4 << 2) + this.offset;
					var a3 = bytes[p4 + 3];
					var v3 = bytes[p4 + 2];
					bytes[p4 + 3] = v3;
					var v4 = bytes[p4 + 1];
					bytes[p4 + 2] = v4;
					var v5 = bytes[p4];
					bytes[p4 + 1] = v5;
					bytes[p4] = a3;
				}
				break;
			case 1:
				var _g6 = 0;
				var _g16 = this.width * this.height;
				while(_g6 < _g16) {
					var i5 = _g6++;
					var p5 = (i5 << 2) + this.offset;
					var b3 = bytes[p5];
					var r3 = bytes[p5 + 2];
					bytes[p5] = r3;
					bytes[p5 + 2] = b3;
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 18:
			if(target._hx_index == 18) {
				var a4 = _g.v;
				var b4 = target.v;
				if(a4 != b4) {
					throw new js__$Boot_HaxeError("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
				}
			} else {
				throw new js__$Boot_HaxeError("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
		}
		this.set_innerFormat(target);
	}
	,dispose: function() {
		this.bytes = null;
	}
	,__class__: hxd_Pixels
};
var hxd_Res = function() { };
$hxClasses["hxd.Res"] = hxd_Res;
hxd_Res.__name__ = "hxd.Res";
hxd_Res.load = function(name) {
	return hxd_Res.get_loader().load(name);
};
hxd_Res.get_loader = function() {
	var l = hxd_res_Loader.currentInstance;
	if(l == null) {
		throw new js__$Boot_HaxeError("Resource loader not initialized: call to hxd.Res.initXXX() required");
	}
	return l;
};
hxd_Res.set_loader = function(l) {
	return hxd_res_Loader.currentInstance = l;
};
var hxd_SceneEvents = function($window) {
	this.defaultCursor = hxd_Cursor.Default;
	this.mouseCheckMove = true;
	this.enablePhysicalMouse = true;
	this.isOut = false;
	this.onOver = new hxd_Event(hxd_EventKind.EOver);
	this.onOut = new hxd_Event(hxd_EventKind.EOut);
	this.checkPos = new hxd_Event(hxd_EventKind.ECheck);
	this.focusLost = new hxd_Event(hxd_EventKind.EFocusLost);
	this.lastTouch = 0;
	this.mouseY = -1.;
	this.mouseX = -1.;
	this.outIndex = -1;
	this.overIndex = -1;
	this.scenes = [];
	this.pendingEvents = [];
	this.pushList = [];
	this.overList = [];
	this.overCandidates = [];
	if($window == null) {
		$window = hxd_Window.getInstance();
	}
	this.window = $window;
	$window.addEventTarget($bind(this,this.onEvent));
};
$hxClasses["hxd.SceneEvents"] = hxd_SceneEvents;
hxd_SceneEvents.__name__ = "hxd.SceneEvents";
hxd_SceneEvents.prototype = {
	window: null
	,scenes: null
	,overList: null
	,overCandidates: null
	,overIndex: null
	,outIndex: null
	,currentFocus: null
	,pendingEvents: null
	,pushList: null
	,currentDrag: null
	,mouseX: null
	,mouseY: null
	,lastTouch: null
	,focusLost: null
	,checkPos: null
	,onOut: null
	,onOver: null
	,isOut: null
	,enablePhysicalMouse: null
	,mouseCheckMove: null
	,defaultCursor: null
	,onRemove: function(i) {
		if(i == this.currentFocus) {
			this.currentFocus = null;
		}
		if(this.overIndex >= 0) {
			var index = this.overList.indexOf(i);
			if(index >= 0) {
				this.outIndex--;
				if(index < this.overIndex) {
					this.overIndex--;
				}
			}
		} else {
			HxOverrides.remove(this.overList,i);
			this.selectCursor();
		}
		HxOverrides.remove(this.pushList,i);
	}
	,addScene: function(s,index) {
		s.setEvents(this);
		if(index == null) {
			this.scenes.push(s);
		} else {
			this.scenes.splice(index,0,s);
		}
	}
	,focus: function(i) {
		if(this.currentFocus == i) {
			return;
		}
		if(i == null) {
			this.blur();
			return;
		}
		if(this.currentFocus != null) {
			this.blur();
			if(this.currentFocus != null) {
				return;
			}
		}
		var e = new hxd_Event(hxd_EventKind.EFocus);
		i.handleEvent(e);
		if(!e.cancel) {
			this.currentFocus = i;
		}
	}
	,blur: function() {
		if(this.currentFocus == null) {
			return;
		}
		this.focusLost.cancel = false;
		this.currentFocus.handleEvent(this.focusLost);
		if(!this.focusLost.cancel) {
			this.currentFocus = null;
		}
	}
	,checkFocus: function() {
		if(this.currentFocus == null) {
			return;
		}
		var s = this.currentFocus.getInteractiveScene();
		if(s == null) {
			this.currentFocus = null;
			return;
		}
		if(!s.isInteractiveVisible(this.currentFocus)) {
			this.blur();
		}
	}
	,emitEvent: function(event) {
		var oldX = event.relX;
		var oldY = event.relY;
		var overCandidateCount = 0;
		var handled = false;
		var checkOver = false;
		var fillOver = false;
		var checkPush = false;
		var cancelFocus = false;
		var updateCursor = false;
		this.overIndex = 0;
		switch(event.kind._hx_index) {
		case 0:
			cancelFocus = true;
			checkPush = true;
			break;
		case 1:
			checkPush = true;
			break;
		case 5:case 8:case 9:case 11:
			if(this.currentFocus != null) {
				event.relX = event.relY = 0;
				this.currentFocus.handleEvent(event);
				event.relX = oldX;
				event.relY = oldY;
				if(!event.propagate) {
					return;
				}
			}
			break;
		case 2:case 12:
			checkOver = true;
			fillOver = true;
			break;
		default:
		}
		var _g1 = 0;
		var _g2 = this.scenes;
		while(_g1 < _g2.length) {
			var s = _g2[_g1];
			++_g1;
			var last = null;
			while(true) {
				var i = s.handleEvent(event,last);
				if(i == null) {
					event.relX = oldX;
					event.relY = oldY;
					break;
				}
				if(checkOver) {
					if(fillOver) {
						var idx = this.overList.indexOf(i);
						if(idx == -1) {
							if(this.overCandidates.length == overCandidateCount) {
								this.overCandidates[overCandidateCount] = { i : i, s : s, x : event.relX, y : event.relY, z : event.relZ};
							} else {
								var info = this.overCandidates[overCandidateCount];
								info.i = i;
								info.s = s;
								info.x = event.relX;
								info.y = event.relY;
								info.z = event.relZ;
							}
							++overCandidateCount;
							this.overList.splice(this.overIndex++,0,i);
							updateCursor = true;
						} else {
							if(idx < this.overIndex) {
								while(true) {
									this.overList[idx] = this.overList[idx + 1];
									++idx;
									if(!(idx < this.overIndex)) {
										break;
									}
								}
								this.overList[this.overIndex] = i;
								updateCursor = true;
							} else if(idx > this.overIndex) {
								while(true) {
									this.overList[idx] = this.overList[idx - 1];
									--idx;
									if(!(idx > this.overIndex)) {
										break;
									}
								}
								this.overList[this.overIndex] = i;
								updateCursor = true;
							}
							this.overIndex++;
						}
						fillOver = event.propagate;
					}
				} else {
					if(checkPush) {
						if(event.kind == hxd_EventKind.EPush) {
							this.pushList.push(i);
						} else {
							HxOverrides.remove(this.pushList,i);
						}
					}
					if(cancelFocus && i == this.currentFocus) {
						cancelFocus = false;
					}
				}
				event.relX = oldX;
				event.relY = oldY;
				if(!event.propagate) {
					handled = true;
					break;
				}
				last = i;
				event.propagate = false;
			}
			if(handled) {
				break;
			}
		}
		if(cancelFocus && this.currentFocus != null) {
			this.blur();
		}
		if(checkOver) {
			if(this.overIndex < this.overList.length) {
				this.outIndex = this.overList.length - 1;
				while(true) {
					this.overList[this.outIndex].handleEvent(this.onOut);
					HxOverrides.remove(this.overList,this.overList[this.outIndex]);
					if(!(--this.outIndex >= this.overIndex)) {
						break;
					}
				}
				updateCursor = true;
			}
			if(overCandidateCount != 0) {
				var i1 = 0;
				var ev = this.onOver;
				while(true) {
					var info1 = this.overCandidates[i1++];
					ev.relX = info1.x;
					ev.relY = info1.y;
					ev.relZ = info1.z;
					if(info1.s.isInteractiveVisible(info1.i)) {
						info1.i.handleEvent(ev);
					}
					info1.i = null;
					info1.s = null;
					if(!(i1 < overCandidateCount)) {
						break;
					}
				}
			}
		}
		this.overIndex = -1;
		if(updateCursor) {
			this.selectCursor();
		}
		if(!handled && event != this.checkPos) {
			if(event.kind == hxd_EventKind.EPush) {
				this.pushList.push(null);
			} else if(event.kind == hxd_EventKind.ERelease) {
				HxOverrides.remove(this.pushList,null);
			}
			this.dispatchListeners(event);
		}
		if(event.kind == hxd_EventKind.ERelease && this.pushList.length > 0) {
			var _g3 = 0;
			var _g4 = this.pushList;
			while(_g3 < _g4.length) {
				var i2 = _g4[_g3];
				++_g3;
				if(i2 == null) {
					this.dispatchListeners(event);
				} else {
					var s1 = i2.getInteractiveScene();
					if(s1 == null) {
						continue;
					}
					event.kind = hxd_EventKind.EReleaseOutside;
					s1.dispatchEvent(event,i2);
					event.kind = hxd_EventKind.ERelease;
					event.relX = oldX;
					event.relY = oldY;
				}
			}
			this.pushList = [];
		}
	}
	,checkEvents: function() {
		var old = this.pendingEvents;
		var checkMoved = !this.mouseCheckMove;
		var checkFocused = this.currentFocus == null;
		if(old.length > 0) {
			this.pendingEvents = [];
			var _g = 0;
			while(_g < old.length) {
				var e = old[_g];
				++_g;
				var ox = e.relX;
				var oy = e.relY;
				switch(e.kind._hx_index) {
				case 0:case 1:
					this.mouseX = e.relX;
					this.mouseY = e.relY;
					this.lastTouch = e.touchId;
					break;
				case 2:
					checkMoved = true;
					this.mouseX = e.relX;
					this.mouseY = e.relY;
					this.lastTouch = e.touchId;
					break;
				case 3:
					this.isOut = false;
					this.selectCursor();
					continue;
				case 4:
					this.isOut = true;
					if(this.overList.length > 0) {
						var i = this.overList.length - 1;
						while(i >= 0) {
							this.onOut.cancel = false;
							this.overList[i].handleEvent(this.onOut);
							HxOverrides.remove(this.overList,this.overList[i]);
							--i;
						}
						this.selectCursor();
					}
					continue;
				case 5:case 8:case 9:case 11:
					if(!checkFocused) {
						checkFocused = true;
						this.checkFocus();
					}
					break;
				default:
				}
				if(this.currentDrag != null && (this.currentDrag.ref == null || this.currentDrag.ref == e.touchId)) {
					e.propagate = true;
					e.cancel = false;
					this.currentDrag.f(e);
					e.relX = ox;
					e.relY = oy;
					if(!e.propagate) {
						continue;
					}
				}
				this.emitEvent(e);
			}
		}
		if(!checkFocused) {
			this.checkFocus();
		}
		if(!checkMoved && !this.isOut && this.currentDrag == null) {
			this.checkPos.relX = this.mouseX;
			this.checkPos.relY = this.mouseY;
			this.checkPos.touchId = this.lastTouch;
			this.checkPos.cancel = false;
			this.checkPos.propagate = false;
			this.emitEvent(this.checkPos);
		}
	}
	,startDrag: function(f,onCancel,refEvent) {
		if(this.currentDrag != null && this.currentDrag.onCancel != null) {
			this.currentDrag.onCancel();
		}
		this.currentDrag = { f : f, ref : refEvent == null ? null : refEvent.touchId, onCancel : onCancel};
	}
	,stopDrag: function() {
		if(this.currentDrag != null && this.currentDrag.onCancel != null) {
			this.currentDrag.onCancel();
		}
		this.currentDrag = null;
	}
	,updateCursor: function(i) {
		if(this.overList.indexOf(i) != -1) {
			this.selectCursor();
		}
	}
	,selectCursor: function() {
		var cur = this.defaultCursor;
		var _g = 0;
		var _g1 = this.overList;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.cursor != null) {
				cur = o.cursor;
				break;
			}
		}
		if(cur._hx_index == 6) {
			var f = cur.f;
			f();
		} else {
			hxd_System.setCursor(cur);
		}
	}
	,onEvent: function(e) {
		if(!this.enablePhysicalMouse && e.kind == hxd_EventKind.EMove) {
			return;
		}
		this.pendingEvents.push(e);
	}
	,dispatchListeners: function(event) {
		var ox = event.relX;
		var oy = event.relY;
		event.propagate = true;
		var _g = 0;
		var _g1 = this.scenes;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			event.cancel = false;
			s.dispatchListeners(event);
			event.relX = ox;
			event.relY = oy;
			if(!event.propagate) {
				break;
			}
		}
	}
	,__class__: hxd_SceneEvents
};
var hxd_Platform = $hxEnums["hxd.Platform"] = { __ename__ : true, __constructs__ : ["IOS","Android","WebGL","PC","Console","FlashPlayer"]
	,IOS: {_hx_index:0,__enum__:"hxd.Platform",toString:$estr}
	,Android: {_hx_index:1,__enum__:"hxd.Platform",toString:$estr}
	,WebGL: {_hx_index:2,__enum__:"hxd.Platform",toString:$estr}
	,PC: {_hx_index:3,__enum__:"hxd.Platform",toString:$estr}
	,Console: {_hx_index:4,__enum__:"hxd.Platform",toString:$estr}
	,FlashPlayer: {_hx_index:5,__enum__:"hxd.Platform",toString:$estr}
};
hxd_Platform.__empty_constructs__ = [hxd_Platform.IOS,hxd_Platform.Android,hxd_Platform.WebGL,hxd_Platform.PC,hxd_Platform.Console,hxd_Platform.FlashPlayer];
var hxd_SystemValue = $hxEnums["hxd.SystemValue"] = { __ename__ : true, __constructs__ : ["IsTouch","IsWindowed","IsMobile"]
	,IsTouch: {_hx_index:0,__enum__:"hxd.SystemValue",toString:$estr}
	,IsWindowed: {_hx_index:1,__enum__:"hxd.SystemValue",toString:$estr}
	,IsMobile: {_hx_index:2,__enum__:"hxd.SystemValue",toString:$estr}
};
hxd_SystemValue.__empty_constructs__ = [hxd_SystemValue.IsTouch,hxd_SystemValue.IsWindowed,hxd_SystemValue.IsMobile];
var hxd_Timer = function() { };
$hxClasses["hxd.Timer"] = hxd_Timer;
hxd_Timer.__name__ = "hxd.Timer";
hxd_Timer.update = function() {
	hxd_Timer.frameCount++;
	var newTime = Date.now() / 1000;
	hxd_Timer.elapsedTime = newTime - hxd_Timer.lastTimeStamp;
	hxd_Timer.lastTimeStamp = newTime;
	if(hxd_Timer.elapsedTime < hxd_Timer.maxDeltaTime) {
		var a = hxd_Timer.elapsedTime;
		hxd_Timer.currentDT = a + hxd_Timer.smoothFactor * (hxd_Timer.currentDT - a);
	} else {
		hxd_Timer.elapsedTime = 1 / hxd_Timer.wantedFPS;
	}
	hxd_Timer.dt = hxd_Timer.currentDT;
};
hxd_Timer.skip = function() {
	hxd_Timer.lastTimeStamp = Date.now() / 1000;
};
var hxd_Window = function(canvas,globalEvents) {
	this.useScreenPixels = true;
	this.curMouseY = 0.;
	this.curMouseX = 0.;
	var _gthis = this;
	var customCanvas = canvas != null;
	this.eventTargets = new haxe_ds_List();
	this.resizeEvents = new haxe_ds_List();
	if(canvas == null) {
		canvas = window.document.getElementById("webgl");
		if(canvas == null) {
			throw new js__$Boot_HaxeError("Missing canvas #webgl");
		}
		if(canvas.getAttribute("globalEvents") == "1") {
			globalEvents = true;
		}
	}
	this.canvas = canvas;
	this.propagateKeyEvents = globalEvents;
	var propagate = canvas.getAttribute("propagateKeyEvents");
	if(propagate != null) {
		this.propagateKeyEvents = propagate != "0" && propagate != "false";
	}
	this.focused = globalEvents;
	this.element = globalEvents ? window : canvas;
	this.canvasPos = canvas.getBoundingClientRect();
	if(customCanvas) {
		canvas.addEventListener("mousemove",$bind(this,this.onMouseMove));
	} else {
		window.addEventListener("mousemove",$bind(this,this.onMouseMove));
	}
	this.element.addEventListener("mousedown",$bind(this,this.onMouseDown));
	this.element.addEventListener("mouseup",$bind(this,this.onMouseUp));
	this.element.addEventListener("wheel",$bind(this,this.onMouseWheel));
	this.element.addEventListener("touchstart",$bind(this,this.onTouchStart));
	this.element.addEventListener("touchmove",$bind(this,this.onTouchMove));
	this.element.addEventListener("touchend",$bind(this,this.onTouchEnd));
	this.element.addEventListener("keydown",$bind(this,this.onKeyDown));
	this.element.addEventListener("keyup",$bind(this,this.onKeyUp));
	this.element.addEventListener("keypress",$bind(this,this.onKeyPress));
	var f = $bind(this,this.onFocus);
	var tmp = function() {
		f(false);
	};
	this.element.addEventListener("blur",tmp);
	var f1 = $bind(this,this.onFocus);
	var tmp1 = function() {
		f1(true);
	};
	this.element.addEventListener("focus",tmp1);
	canvas.oncontextmenu = function(e) {
		e.stopPropagation();
		e.preventDefault();
		return false;
	};
	if(globalEvents) {
		canvas.addEventListener("mousedown",function(e1) {
			_gthis.onMouseDown(e1);
			e1.stopPropagation();
			e1.preventDefault();
		});
		this.element.addEventListener("contextmenu",function(e2) {
			e2.stopPropagation();
			e2.preventDefault();
			return false;
		});
	} else {
		if(canvas.getAttribute("tabindex") == null) {
			canvas.setAttribute("tabindex","1");
		}
		canvas.style.outline = "none";
	}
	this.curW = this.get_width();
	this.curH = this.get_height();
	this.timer = new haxe_Timer(100);
	this.timer.run = $bind(this,this.checkResize);
};
$hxClasses["hxd.Window"] = hxd_Window;
hxd_Window.__name__ = "hxd.Window";
hxd_Window.getInstance = function() {
	if(hxd_Window.inst == null) {
		hxd_Window.inst = new hxd_Window();
	}
	return hxd_Window.inst;
};
hxd_Window.prototype = {
	resizeEvents: null
	,eventTargets: null
	,propagateKeyEvents: null
	,curMouseX: null
	,curMouseY: null
	,canvas: null
	,element: null
	,canvasPos: null
	,timer: null
	,curW: null
	,curH: null
	,focused: null
	,useScreenPixels: null
	,checkResize: function() {
		this.canvasPos = this.canvas.getBoundingClientRect();
		var cw = this.get_width();
		var ch = this.get_height();
		if(this.curW != cw || this.curH != ch) {
			this.curW = cw;
			this.curH = ch;
			this.onResize(null);
		}
	}
	,event: function(e) {
		var _g_head = this.eventTargets.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var et = val;
			et(e);
		}
	}
	,addEventTarget: function(et) {
		this.eventTargets.add(et);
	}
	,removeEventTarget: function(et) {
		var _g_head = this.eventTargets.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(Reflect.compareMethods(e,et)) {
				this.eventTargets.remove(e);
				break;
			}
		}
	}
	,addResizeEvent: function(f) {
		this.resizeEvents.push(f);
	}
	,removeResizeEvent: function(f) {
		var _g_head = this.resizeEvents.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(Reflect.compareMethods(e,f)) {
				this.resizeEvents.remove(f);
				break;
			}
		}
	}
	,onResize: function(e) {
		var _g_head = this.resizeEvents.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var r = val;
			r();
		}
	}
	,setFullScreen: function(v) {
		var doc = window.document;
		var elt = doc.documentElement;
		if(doc.fullscreenElement == elt == v) {
			return;
		}
		if(v) {
			elt.requestFullscreen();
		} else {
			doc.exitFullscreen();
		}
	}
	,getPixelRatio: function() {
		if(this.useScreenPixels) {
			return window.devicePixelRatio;
		} else {
			return 1;
		}
	}
	,get_width: function() {
		return Math.round(this.canvasPos.width * this.getPixelRatio());
	}
	,get_height: function() {
		return Math.round(this.canvasPos.height * this.getPixelRatio());
	}
	,get_mouseX: function() {
		return Math.round((this.curMouseX - this.canvasPos.left) * this.getPixelRatio());
	}
	,get_mouseY: function() {
		return Math.round((this.curMouseY - this.canvasPos.top) * this.getPixelRatio());
	}
	,onMouseDown: function(e) {
		if(e.clientX != this.curMouseX || e.clientY != this.curMouseY) {
			this.onMouseMove(e);
		}
		var ev = new hxd_Event(hxd_EventKind.EPush,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	,onMouseUp: function(e) {
		if(e.clientX != this.curMouseX || e.clientY != this.curMouseY) {
			this.onMouseMove(e);
		}
		var ev = new hxd_Event(hxd_EventKind.ERelease,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	,onMouseMove: function(e) {
		this.curMouseX = e.clientX;
		this.curMouseY = e.clientY;
		this.event(new hxd_Event(hxd_EventKind.EMove,this.get_mouseX(),this.get_mouseY()));
	}
	,onMouseWheel: function(e) {
		e.preventDefault();
		var ev = new hxd_Event(hxd_EventKind.EWheel,this.get_mouseX(),this.get_mouseY());
		ev.wheelDelta = e.deltaY / 120;
		this.event(ev);
	}
	,onTouchStart: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.EPush,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onTouchMove: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.EMove,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onTouchEnd: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.ERelease,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onKeyUp: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EKeyUp,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			e.preventDefault();
			e.stopPropagation();
		}
	}
	,onKeyDown: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EKeyDown,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			switch(ev.keyCode) {
			case 8:case 9:case 16:case 17:case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:
				e.preventDefault();
				break;
			default:
			}
			e.stopPropagation();
		}
	}
	,onKeyPress: function(e) {
		var ev = new hxd_Event(hxd_EventKind.ETextInput,this.get_mouseX(),this.get_mouseY());
		ev.charCode = e.charCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			e.preventDefault();
			e.stopPropagation();
		}
	}
	,onFocus: function(b) {
		this.event(new hxd_Event(b ? hxd_EventKind.EFocus : hxd_EventKind.EFocusLost));
		this.focused = b;
	}
	,__class__: hxd_Window
};
var hxd_System = function() { };
$hxClasses["hxd.System"] = hxd_System;
hxd_System.__name__ = "hxd.System";
hxd_System.setLoop = function(f) {
	if(!hxd_System.loopInit) {
		hxd_System.loopInit = true;
		hxd_System.browserLoop();
	}
	hxd_System.loopFunc = f;
};
hxd_System.browserLoop = function() {
	var $window = window;
	var rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
	rqf(hxd_System.browserLoop);
	if(hxd_System.loopFunc != null) {
		hxd_System.loopFunc();
	}
};
hxd_System.start = function(callb) {
	callb();
};
hxd_System.setNativeCursor = function(c) {
	if(hxd_System.currentNativeCursor != null && Type.enumEq(c,hxd_System.currentNativeCursor)) {
		return;
	}
	hxd_System.currentNativeCursor = c;
	hxd_System.currentCustomCursor = null;
	var canvas = hxd_Window.getInstance().canvas;
	if(canvas != null) {
		var tmp;
		switch(c._hx_index) {
		case 0:
			tmp = "default";
			break;
		case 1:
			tmp = "pointer";
			break;
		case 2:
			tmp = "move";
			break;
		case 3:
			tmp = "text";
			break;
		case 4:
			tmp = "none";
			break;
		case 5:
			var cur = c.custom;
			if(cur.alloc == null) {
				cur.alloc = [];
				var _g = 0;
				var _g1 = cur.frames;
				while(_g < _g1.length) {
					var frame = _g1[_g];
					++_g;
					cur.alloc.push("url(\"" + frame.ctx.canvas.toDataURL("image/png") + "\") " + cur.offsetX + " " + cur.offsetY + ", default");
				}
			}
			if(cur.frames.length > 1) {
				hxd_System.currentCustomCursor = cur;
				cur.reset();
			}
			tmp = cur.alloc[cur.frameIndex];
			break;
		case 6:
			var _g11 = c.f;
			throw new js__$Boot_HaxeError("assert");
		}
		canvas.style.cursor = tmp;
	}
};
hxd_System.getDefaultFrameRate = function() {
	return 60.;
};
hxd_System.getValue = function(s) {
	switch(s._hx_index) {
	case 0:
		if(hxd_System.get_platform() != hxd_Platform.Android) {
			return hxd_System.get_platform() == hxd_Platform.IOS;
		} else {
			return true;
		}
		break;
	case 1:
		return true;
	case 2:
		if(hxd_System.get_platform() != hxd_Platform.Android) {
			return hxd_System.get_platform() == hxd_Platform.IOS;
		} else {
			return true;
		}
		break;
	}
};
hxd_System.updateCursor = function() {
	if(hxd_System.currentCustomCursor != null) {
		var change = hxd_System.currentCustomCursor.update(hxd_Timer.elapsedTime);
		if(change != -1) {
			var canvas = hxd_Window.getInstance().canvas;
			if(canvas != null) {
				canvas.style.cursor = hxd_System.currentCustomCursor.alloc[change];
			}
		}
	}
};
hxd_System.get_platform = function() {
	var ua = window.navigator.userAgent.toLowerCase();
	if(ua.indexOf("android") >= 0) {
		return hxd_Platform.Android;
	} else if(ua.indexOf("ipad") >= 0 || ua.indexOf("iphone") >= 0 || ua.indexOf("ipod") >= 0) {
		return hxd_Platform.IOS;
	} else {
		return hxd_Platform.PC;
	}
};
var hxd_earcut_EarNode = function() {
};
$hxClasses["hxd.earcut.EarNode"] = hxd_earcut_EarNode;
hxd_earcut_EarNode.__name__ = "hxd.earcut.EarNode";
hxd_earcut_EarNode.prototype = {
	next: null
	,prev: null
	,nextZ: null
	,prevZ: null
	,allocNext: null
	,x: null
	,y: null
	,i: null
	,z: null
	,steiner: null
	,__class__: hxd_earcut_EarNode
};
var hxd_earcut_Earcut = function() {
};
$hxClasses["hxd.earcut.Earcut"] = hxd_earcut_Earcut;
hxd_earcut_Earcut.__name__ = "hxd.earcut.Earcut";
hxd_earcut_Earcut.prototype = {
	triangulate_h2d_GPoint: function(points,holes) {
		var hasHoles = holes != null && holes.length > 0;
		var outerLen = hasHoles ? holes[0] : points.length;
		if(outerLen < 3) {
			return [];
		}
		var root = this.setLinkedList_triangulate_T(points,0,outerLen,true);
		if(holes != null) {
			root = this.eliminateHoles_triangulate_T(points,holes,root);
		}
		return this.triangulateNode(root,points.length > 80);
	}
	,eliminateHoles_triangulate_T: function(points,holes,root) {
		var queue = [];
		var _g = 0;
		var _g1 = holes.length;
		while(_g < _g1) {
			var i = _g++;
			var s = holes[i];
			var e = i == holes.length - 1 ? points.length : holes[i + 1];
			var node = this.setLinkedList_eliminateHoles_T(points,s,e,false);
			if(node == node.next) {
				node.steiner = true;
			}
			queue.push(this.getLeftmost(node));
		}
		queue.sort($bind(this,this.compareX));
		var _g2 = 0;
		while(_g2 < queue.length) {
			var q = queue[_g2];
			++_g2;
			this.eliminateHole(q,root);
			root = this.filterPoints(root,root.next);
		}
		return root;
	}
	,setLinkedList_eliminateHoles_T: function(points,start,end,clockwise) {
		var sum = 0.;
		var j = end - 1;
		var _g = start;
		var _g1 = end;
		while(_g < _g1) {
			var i = _g++;
			sum += (points[j].x - points[i].x) * (points[i].y + points[j].y);
			j = i;
		}
		var last = null;
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = -1;
		n.z = -1;
		n.x = 0;
		n.y = 0;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		var node = n;
		var first = node;
		if(clockwise == sum > 0) {
			var _g2 = start;
			var _g3 = end;
			while(_g2 < _g3) {
				var i1 = _g2++;
				var p = points[i1];
				var x = p.x;
				var y = p.y;
				var n1 = this.cache;
				if(n1 == null) {
					n1 = new hxd_earcut_EarNode();
					n1.allocNext = this.allocated;
					this.allocated = n1;
				} else {
					this.cache = n1.next;
				}
				n1.i = i1;
				n1.z = -1;
				n1.x = x;
				n1.y = y;
				n1.next = null;
				n1.prev = node;
				n1.steiner = false;
				n1.prevZ = null;
				n1.nextZ = null;
				if(node != null) {
					node.next = n1;
				}
				node = n1;
			}
		} else {
			var i2 = end - 1;
			while(i2 >= start) {
				var p1 = points[i2];
				var x1 = p1.x;
				var y1 = p1.y;
				var n2 = this.cache;
				if(n2 == null) {
					n2 = new hxd_earcut_EarNode();
					n2.allocNext = this.allocated;
					this.allocated = n2;
				} else {
					this.cache = n2.next;
				}
				n2.i = i2;
				n2.z = -1;
				n2.x = x1;
				n2.y = y1;
				n2.next = null;
				n2.prev = node;
				n2.steiner = false;
				n2.prevZ = null;
				n2.nextZ = null;
				if(node != null) {
					node.next = n2;
				}
				node = n2;
				--i2;
			}
		}
		node.next = first.next;
		node.next.prev = node;
		return node;
	}
	,setLinkedList_triangulate_T: function(points,start,end,clockwise) {
		var sum = 0.;
		var j = end - 1;
		var _g = start;
		var _g1 = end;
		while(_g < _g1) {
			var i = _g++;
			sum += (points[j].x - points[i].x) * (points[i].y + points[j].y);
			j = i;
		}
		var last = null;
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = -1;
		n.z = -1;
		n.x = 0;
		n.y = 0;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		var node = n;
		var first = node;
		if(clockwise == sum > 0) {
			var _g2 = start;
			var _g3 = end;
			while(_g2 < _g3) {
				var i1 = _g2++;
				var p = points[i1];
				var x = p.x;
				var y = p.y;
				var n1 = this.cache;
				if(n1 == null) {
					n1 = new hxd_earcut_EarNode();
					n1.allocNext = this.allocated;
					this.allocated = n1;
				} else {
					this.cache = n1.next;
				}
				n1.i = i1;
				n1.z = -1;
				n1.x = x;
				n1.y = y;
				n1.next = null;
				n1.prev = node;
				n1.steiner = false;
				n1.prevZ = null;
				n1.nextZ = null;
				if(node != null) {
					node.next = n1;
				}
				node = n1;
			}
		} else {
			var i2 = end - 1;
			while(i2 >= start) {
				var p1 = points[i2];
				var x1 = p1.x;
				var y1 = p1.y;
				var n2 = this.cache;
				if(n2 == null) {
					n2 = new hxd_earcut_EarNode();
					n2.allocNext = this.allocated;
					this.allocated = n2;
				} else {
					this.cache = n2.next;
				}
				n2.i = i2;
				n2.z = -1;
				n2.x = x1;
				n2.y = y1;
				n2.next = null;
				n2.prev = node;
				n2.steiner = false;
				n2.prevZ = null;
				n2.nextZ = null;
				if(node != null) {
					node.next = n2;
				}
				node = n2;
				--i2;
			}
		}
		node.next = first.next;
		node.next.prev = node;
		return node;
	}
	,triangles: null
	,cache: null
	,allocated: null
	,minX: null
	,minY: null
	,size: null
	,hasSize: null
	,triangulateNode: function(root,useZOrder) {
		this.triangles = [];
		root = this.filterPoints(root);
		if(useZOrder && root != null) {
			var maxX = root.x;
			this.minX = maxX;
			var maxY = root.y;
			this.minY = maxY;
			var p = root.next;
			while(p != root) {
				var x = p.x;
				var y = p.y;
				if(x < this.minX) {
					this.minX = x;
				}
				if(y < this.minY) {
					this.minY = y;
				}
				if(x > maxX) {
					maxX = x;
				}
				if(y > maxY) {
					maxY = y;
				}
				p = p.next;
			}
			var a = maxX - this.minX;
			var b = maxY - this.minY;
			this.size = a < b ? b : a;
			this.hasSize = true;
		} else {
			this.hasSize = false;
		}
		this.earcutLinked(root);
		var result = this.triangles;
		this.triangles = null;
		var n = this.allocated;
		if(this.cache != null) {
			while(n != this.cache) n = n.allocNext;
			n = n.allocNext;
		}
		while(n != null) {
			n.next = this.cache;
			this.cache = n;
			n = n.allocNext;
		}
		return result;
	}
	,eliminateHole: function(hole,root) {
		root = this.findHoleBridge(hole,root);
		if(root != null) {
			var b = this.splitPolygon(root,hole);
			this.filterPoints(b,b.next);
		}
	}
	,findHoleBridge: function(hole,root) {
		var p = root;
		var hx = hole.x;
		var hy = hole.y;
		var qx = -Infinity;
		var m = null;
		while(true) {
			if(hy <= p.y && hy >= p.next.y) {
				var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
				if(x <= hx && x > qx) {
					qx = x;
					m = p.x < p.next.x ? p : p.next;
				}
			}
			p = p.next;
			if(!(p != root)) {
				break;
			}
		}
		if(m == null) {
			return null;
		}
		var stop = m;
		var tanMin = Infinity;
		var tan;
		p = m.next;
		while(p != stop) {
			var tmp;
			if(hx >= p.x && p.x >= m.x) {
				var ax = hy < m.y ? hx : qx;
				var bx = m.x;
				var by = m.y;
				var cx = hy < m.y ? qx : hx;
				var px = p.x;
				var py = p.y;
				tmp = (cx - px) * (hy - py) - (ax - px) * (hy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (hy - py) >= 0 && (bx - px) * (hy - py) - (cx - px) * (by - py) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				var f = hy - p.y;
				tan = (f < 0 ? -f : f) / (hx - p.x);
				var tmp1;
				if(tan < tanMin || tan == tanMin && p.x > m.x) {
					var p1 = p.prev;
					var r = p.next;
					if((p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) < 0) {
						var r1 = p.next;
						if((hole.y - p.y) * (r1.x - hole.x) - (hole.x - p.x) * (r1.y - hole.y) >= 0) {
							var q = p.prev;
							tmp1 = (q.y - p.y) * (hole.x - q.x) - (q.x - p.x) * (hole.y - q.y) >= 0;
						} else {
							tmp1 = false;
						}
					} else {
						var r2 = p.prev;
						if(!((hole.y - p.y) * (r2.x - hole.x) - (hole.x - p.x) * (r2.y - hole.y) < 0)) {
							var q1 = p.next;
							tmp1 = (q1.y - p.y) * (hole.x - q1.x) - (q1.x - p.x) * (hole.y - q1.y) < 0;
						} else {
							tmp1 = true;
						}
					}
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					m = p;
					tanMin = tan;
				}
			}
			p = p.next;
		}
		return m;
	}
	,getLeftmost: function(node) {
		var p = node;
		var leftmost = node;
		while(true) {
			if(p.x < leftmost.x) {
				leftmost = p;
			}
			p = p.next;
			if(!(p != node)) {
				break;
			}
		}
		return leftmost;
	}
	,compareX: function(a,b) {
		if(a.x - b.x > 0) {
			return 1;
		} else {
			return -1;
		}
	}
	,filterPoints: function(start,end) {
		if(start == null) {
			return start;
		}
		if(end == null) {
			end = start;
		}
		var p = start;
		var again;
		while(true) {
			again = false;
			var tmp;
			if(!p.steiner) {
				var p2 = p.next;
				if(!(p.x == p2.x && p.y == p2.y)) {
					var p1 = p.prev;
					var r = p.next;
					tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) == 0;
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				p.next.prev = p.prev;
				p.prev.next = p.next;
				if(p.prevZ != null) {
					p.prevZ.nextZ = p.nextZ;
				}
				if(p.nextZ != null) {
					p.nextZ.prevZ = p.prevZ;
				}
				end = p.prev;
				p = end;
				if(p == p.next) {
					return null;
				}
				again = true;
			} else {
				p = p.next;
			}
			if(!(again || p != end)) {
				break;
			}
		}
		return end;
	}
	,earcutLinked: function(ear,pass) {
		if(pass == null) {
			pass = 0;
		}
		if(ear == null) {
			return;
		}
		if(pass == 0 && this.hasSize) {
			this.indexCurve(ear);
		}
		var stop = ear;
		var prev;
		var next;
		while(ear.prev != ear.next) {
			prev = ear.prev;
			next = ear.next;
			if(this.hasSize ? this.isEarHashed(ear) : this.isEar(ear)) {
				this.triangles.push(prev.i);
				this.triangles.push(ear.i);
				this.triangles.push(next.i);
				ear.next.prev = ear.prev;
				ear.prev.next = ear.next;
				if(ear.prevZ != null) {
					ear.prevZ.nextZ = ear.nextZ;
				}
				if(ear.nextZ != null) {
					ear.nextZ.prevZ = ear.prevZ;
				}
				ear = next.next;
				stop = next.next;
				continue;
			}
			ear = next;
			if(ear == stop) {
				switch(pass) {
				case 0:
					this.earcutLinked(this.filterPoints(ear),1);
					break;
				case 1:
					ear = this.cureLocalIntersections(ear);
					this.earcutLinked(ear,2);
					break;
				case 2:
					this.splitEarcut(ear);
					break;
				}
				break;
			}
		}
	}
	,isEar: function(ear) {
		var a = ear.prev;
		var b = ear;
		var c = ear.next;
		if((b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y) >= 0) {
			return false;
		}
		var p = ear.next.next;
		while(p != ear.prev) {
			var tmp;
			var ax = a.x;
			var ay = a.y;
			var bx = b.x;
			var by = b.y;
			var cx = c.x;
			var cy = c.y;
			var px = p.x;
			var py = p.y;
			if((cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0) {
				var p1 = p.prev;
				var r = p.next;
				tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
			p = p.next;
		}
		return true;
	}
	,isEarHashed: function(ear) {
		var a = ear.prev;
		var b = ear;
		var c = ear.next;
		if((b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y) >= 0) {
			return false;
		}
		var minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x;
		var minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y;
		var maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x;
		var maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y;
		var x = 32767 * (minTX - this.minX) / this.size | 0;
		var y = 32767 * (minTY - this.minY) / this.size | 0;
		x = (x | x << 8) & 16711935;
		x = (x | x << 4) & 252645135;
		x = (x | x << 2) & 858993459;
		x = (x | x << 1) & 1431655765;
		y = (y | y << 8) & 16711935;
		y = (y | y << 4) & 252645135;
		y = (y | y << 2) & 858993459;
		y = (y | y << 1) & 1431655765;
		var minZ = x | y << 1;
		var x1 = 32767 * (maxTX - this.minX) / this.size | 0;
		var y1 = 32767 * (maxTY - this.minY) / this.size | 0;
		x1 = (x1 | x1 << 8) & 16711935;
		x1 = (x1 | x1 << 4) & 252645135;
		x1 = (x1 | x1 << 2) & 858993459;
		x1 = (x1 | x1 << 1) & 1431655765;
		y1 = (y1 | y1 << 8) & 16711935;
		y1 = (y1 | y1 << 4) & 252645135;
		y1 = (y1 | y1 << 2) & 858993459;
		y1 = (y1 | y1 << 1) & 1431655765;
		var maxZ = x1 | y1 << 1;
		var p = ear.nextZ;
		while(p != null && p.z <= maxZ) {
			var tmp;
			var tmp1;
			if(p != ear.prev && p != ear.next) {
				var ax = a.x;
				var ay = a.y;
				var bx = b.x;
				var by = b.y;
				var cx = c.x;
				var cy = c.y;
				var px = p.x;
				var py = p.y;
				tmp1 = (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p1 = p.prev;
				var r = p.next;
				tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
			p = p.nextZ;
		}
		p = ear.prevZ;
		while(p != null && p.z >= minZ) {
			var tmp2;
			var tmp3;
			if(p != ear.prev && p != ear.next) {
				var ax1 = a.x;
				var ay1 = a.y;
				var bx1 = b.x;
				var by1 = b.y;
				var cx1 = c.x;
				var cy1 = c.y;
				var px1 = p.x;
				var py1 = p.y;
				tmp3 = (cx1 - px1) * (ay1 - py1) - (ax1 - px1) * (cy1 - py1) >= 0 && (ax1 - px1) * (by1 - py1) - (bx1 - px1) * (ay1 - py1) >= 0 && (bx1 - px1) * (cy1 - py1) - (cx1 - px1) * (by1 - py1) >= 0;
			} else {
				tmp3 = false;
			}
			if(tmp3) {
				var p2 = p.prev;
				var r1 = p.next;
				tmp2 = (p.y - p2.y) * (r1.x - p.x) - (p.x - p2.x) * (r1.y - p.y) >= 0;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				return false;
			}
			p = p.prevZ;
		}
		return true;
	}
	,cureLocalIntersections: function(start) {
		var p = start;
		while(true) {
			var a = p.prev;
			var b = p.next.next;
			var tmp;
			var tmp1;
			var p2 = p.next;
			if((p.y - a.y) * (p2.x - p.x) - (p.x - a.x) * (p2.y - p.y) > 0 != (p.y - a.y) * (b.x - p.x) - (p.x - a.x) * (b.y - p.y) > 0 && (b.y - p2.y) * (a.x - b.x) - (b.x - p2.x) * (a.y - b.y) > 0 != (b.y - p2.y) * (p.x - b.x) - (b.x - p2.x) * (p.y - b.y) > 0) {
				var p1 = a.prev;
				var r = a.next;
				if((a.y - p1.y) * (r.x - a.x) - (a.x - p1.x) * (r.y - a.y) < 0) {
					var r1 = a.next;
					if((b.y - a.y) * (r1.x - b.x) - (b.x - a.x) * (r1.y - b.y) >= 0) {
						var q = a.prev;
						tmp1 = (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) >= 0;
					} else {
						tmp1 = false;
					}
				} else {
					var r2 = a.prev;
					if(!((b.y - a.y) * (r2.x - b.x) - (b.x - a.x) * (r2.y - b.y) < 0)) {
						var q1 = a.next;
						tmp1 = (q1.y - a.y) * (b.x - q1.x) - (q1.x - a.x) * (b.y - q1.y) < 0;
					} else {
						tmp1 = true;
					}
				}
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p3 = b.prev;
				var r3 = b.next;
				if((b.y - p3.y) * (r3.x - b.x) - (b.x - p3.x) * (r3.y - b.y) < 0) {
					var r4 = b.next;
					if((a.y - b.y) * (r4.x - a.x) - (a.x - b.x) * (r4.y - a.y) >= 0) {
						var q2 = b.prev;
						tmp = (q2.y - b.y) * (a.x - q2.x) - (q2.x - b.x) * (a.y - q2.y) >= 0;
					} else {
						tmp = false;
					}
				} else {
					var r5 = b.prev;
					if(!((a.y - b.y) * (r5.x - a.x) - (a.x - b.x) * (r5.y - a.y) < 0)) {
						var q3 = b.next;
						tmp = (q3.y - b.y) * (a.x - q3.x) - (q3.x - b.x) * (a.y - q3.y) < 0;
					} else {
						tmp = true;
					}
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				this.triangles.push(a.i);
				this.triangles.push(p.i);
				this.triangles.push(b.i);
				p.next.prev = p.prev;
				p.prev.next = p.next;
				if(p.prevZ != null) {
					p.prevZ.nextZ = p.nextZ;
				}
				if(p.nextZ != null) {
					p.nextZ.prevZ = p.prevZ;
				}
				var p4 = p.next;
				p4.next.prev = p4.prev;
				p4.prev.next = p4.next;
				if(p4.prevZ != null) {
					p4.prevZ.nextZ = p4.nextZ;
				}
				if(p4.nextZ != null) {
					p4.nextZ.prevZ = p4.prevZ;
				}
				start = b;
				p = start;
			}
			p = p.next;
			if(!(p != start)) {
				break;
			}
		}
		return p;
	}
	,splitEarcut: function(start) {
		var a = start;
		while(true) {
			var b = a.next.next;
			while(b != a.prev) {
				if(a.i != b.i && this.isValidDiagonal(a,b)) {
					var c = this.splitPolygon(a,b);
					a = this.filterPoints(a,a.next);
					c = this.filterPoints(c,c.next);
					this.earcutLinked(a);
					this.earcutLinked(c);
					return;
				}
				b = b.next;
			}
			a = a.next;
			if(!(a != start)) {
				break;
			}
		}
	}
	,splitPolygon: function(a,b) {
		var i = a.i;
		var x = a.x;
		var y = a.y;
		var last = null;
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = i;
		n.z = -1;
		n.x = x;
		n.y = y;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		var a2 = n;
		var i1 = b.i;
		var x1 = b.x;
		var y1 = b.y;
		var last1 = null;
		var n1 = this.cache;
		if(n1 == null) {
			n1 = new hxd_earcut_EarNode();
			n1.allocNext = this.allocated;
			this.allocated = n1;
		} else {
			this.cache = n1.next;
		}
		n1.i = i1;
		n1.z = -1;
		n1.x = x1;
		n1.y = y1;
		n1.next = null;
		n1.prev = last1;
		n1.steiner = false;
		n1.prevZ = null;
		n1.nextZ = null;
		if(last1 != null) {
			last1.next = n1;
		}
		var b2 = n1;
		var an = a.next;
		var bp = b.prev;
		a.next = b;
		b.prev = a;
		a2.next = an;
		an.prev = a2;
		b2.next = a2;
		a2.prev = b2;
		bp.next = b2;
		b2.prev = bp;
		return b2;
	}
	,isValidDiagonal: function(a,b) {
		if(!(a.x == b.x && a.y == b.y)) {
			var tmp;
			var tmp1;
			if(a.next.i != b.i && a.prev.i != b.i && !this.intersectsPolygon(a,b)) {
				var p = a.prev;
				var r = a.next;
				if((a.y - p.y) * (r.x - a.x) - (a.x - p.x) * (r.y - a.y) < 0) {
					var r1 = a.next;
					if((b.y - a.y) * (r1.x - b.x) - (b.x - a.x) * (r1.y - b.y) >= 0) {
						var q = a.prev;
						tmp1 = (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) >= 0;
					} else {
						tmp1 = false;
					}
				} else {
					var r2 = a.prev;
					if(!((b.y - a.y) * (r2.x - b.x) - (b.x - a.x) * (r2.y - b.y) < 0)) {
						var q1 = a.next;
						tmp1 = (q1.y - a.y) * (b.x - q1.x) - (q1.x - a.x) * (b.y - q1.y) < 0;
					} else {
						tmp1 = true;
					}
				}
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p1 = b.prev;
				var r3 = b.next;
				if((b.y - p1.y) * (r3.x - b.x) - (b.x - p1.x) * (r3.y - b.y) < 0) {
					var r4 = b.next;
					if((a.y - b.y) * (r4.x - a.x) - (a.x - b.x) * (r4.y - a.y) >= 0) {
						var q2 = b.prev;
						tmp = (q2.y - b.y) * (a.x - q2.x) - (q2.x - b.x) * (a.y - q2.y) >= 0;
					} else {
						tmp = false;
					}
				} else {
					var r5 = b.prev;
					if(!((a.y - b.y) * (r5.x - a.x) - (a.x - b.x) * (r5.y - a.y) < 0)) {
						var q3 = b.next;
						tmp = (q3.y - b.y) * (a.x - q3.x) - (q3.x - b.x) * (a.y - q3.y) < 0;
					} else {
						tmp = true;
					}
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				return this.middleInside(a,b);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,middleInside: function(a,b) {
		var p = a;
		var inside = false;
		var px = (a.x + b.x) / 2;
		var py = (a.y + b.y) / 2;
		while(true) {
			if(p.y > py != p.next.y > py && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) {
				inside = !inside;
			}
			p = p.next;
			if(!(p != a)) {
				break;
			}
		}
		return inside;
	}
	,intersectsPolygon: function(a,b) {
		var p = a;
		while(true) {
			var tmp;
			if(p.i != a.i && p.next.i != a.i && p.i != b.i && p.next.i != b.i) {
				var q1 = p.next;
				tmp = (q1.y - p.y) * (a.x - q1.x) - (q1.x - p.x) * (a.y - q1.y) > 0 != (q1.y - p.y) * (b.x - q1.x) - (q1.x - p.x) * (b.y - q1.y) > 0 && (b.y - a.y) * (p.x - b.x) - (b.x - a.x) * (p.y - b.y) > 0 != (b.y - a.y) * (q1.x - b.x) - (b.x - a.x) * (q1.y - b.y) > 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return true;
			}
			p = p.next;
			if(!(p != a)) {
				break;
			}
		}
		return false;
	}
	,indexCurve: function(start) {
		var p = start;
		while(true) {
			if(p.z < 0) {
				var x = 32767 * (p.x - this.minX) / this.size | 0;
				var y = 32767 * (p.y - this.minY) / this.size | 0;
				x = (x | x << 8) & 16711935;
				x = (x | x << 4) & 252645135;
				x = (x | x << 2) & 858993459;
				x = (x | x << 1) & 1431655765;
				y = (y | y << 8) & 16711935;
				y = (y | y << 4) & 252645135;
				y = (y | y << 2) & 858993459;
				y = (y | y << 1) & 1431655765;
				p.z = x | y << 1;
			}
			p.prevZ = p.prev;
			p.nextZ = p.next;
			p = p.next;
			if(!(p != start)) {
				break;
			}
		}
		p.prevZ.nextZ = null;
		p.prevZ = null;
		this.sortLinked(p);
	}
	,sortLinked: function(list) {
		var p;
		var q;
		var e;
		var tail;
		var numMerges;
		var pSize;
		var qSize;
		var inSize = 1;
		while(true) {
			p = list;
			list = null;
			tail = null;
			numMerges = 0;
			while(p != null) {
				++numMerges;
				q = p;
				pSize = 0;
				var _g = 0;
				var _g1 = inSize;
				while(_g < _g1) {
					var i = _g++;
					++pSize;
					q = q.nextZ;
					if(q == null) {
						break;
					}
				}
				qSize = inSize;
				while(pSize > 0 || qSize > 0 && q != null) {
					if(pSize == 0) {
						e = q;
						q = q.nextZ;
						--qSize;
					} else if(qSize == 0 || q == null) {
						e = p;
						p = p.nextZ;
						--pSize;
					} else if(p.z <= q.z) {
						e = p;
						p = p.nextZ;
						--pSize;
					} else {
						e = q;
						q = q.nextZ;
						--qSize;
					}
					if(tail != null) {
						tail.nextZ = e;
					} else {
						list = e;
					}
					e.prevZ = tail;
					tail = e;
				}
				p = q;
			}
			tail.nextZ = null;
			inSize *= 2;
			if(!(numMerges > 1)) {
				break;
			}
		}
		return list;
	}
	,__class__: hxd_earcut_Earcut
};
var hxd_fmt_bfnt_FontParser = function() { };
$hxClasses["hxd.fmt.bfnt.FontParser"] = hxd_fmt_bfnt_FontParser;
hxd_fmt_bfnt_FontParser.__name__ = "hxd.fmt.bfnt.FontParser";
hxd_fmt_bfnt_FontParser.parse = function(bytes,path,resolveTile) {
	var tile = null;
	var font = new h2d_Font(null,0);
	var glyphs = font.glyphs;
	font.baseLine = 0;
	var _g = bytes.getInt32(0);
	switch(_g) {
	case 54938946:
		var bytes1 = new haxe_io_BytesInput(bytes);
		var _g1 = bytes1;
		_g1.set_position(_g1.pos + 4);
		var pageCount = 0;
		while(bytes1.pos < bytes1.totlen) {
			var id = bytes1.readByte();
			var length = bytes1.readInt32();
			var pos = bytes1.pos;
			switch(id) {
			case 1:
				font.size = font.initSize = bytes1.readInt16();
				var _g2 = bytes1;
				_g2.set_position(_g2.pos + 12);
				font.name = bytes1.readUntil(0);
				break;
			case 2:
				font.lineHeight = bytes1.readUInt16();
				font.baseLine = bytes1.readUInt16();
				var _g3 = bytes1;
				_g3.set_position(_g3.pos + 4);
				pageCount = bytes1.readUInt16();
				if(pageCount != 1) {
					haxe_Log.trace("Warning: BMF format only supports one page at the moment.",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 224, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
				}
				break;
			case 3:
				var name = bytes1.readUntil(0);
				try {
					font.tilePath = name;
					var tile1 = haxe_io_Path.join([haxe_io_Path.directory(path),name]);
					tile = resolveTile(tile1);
				} catch( e ) {
					var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
					haxe_Log.trace("Warning: Could not find referenced font texture at \"" + name + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 30, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
					font.tilePath = new haxe_io_Path(path).file + ".png";
					var tile2 = haxe_io_Path.withExtension(path,"png");
					tile = resolveTile(tile2);
				}
				break;
			case 4:
				var count = length / 20 | 0;
				while(count > 0) {
					var cid = bytes1.readInt32();
					var t = bytes1.readUInt16();
					var t1 = bytes1.readUInt16();
					var t2 = bytes1.readUInt16();
					var t3 = bytes1.readUInt16();
					var t4 = bytes1.readInt16();
					var t5 = bytes1.readInt16();
					var t6 = tile.sub(t,t1,t2,t3,t4,t5);
					var fc = new h2d_FontChar(t6,bytes1.readInt16());
					glyphs.h[cid] = fc;
					var _g4 = bytes1;
					_g4.set_position(_g4.pos + 2);
					--count;
				}
				break;
			case 5:
				var count1 = length / 10 | 0;
				while(count1 > 0) {
					var first = bytes1.readInt32();
					var key = bytes1.readInt32();
					var fc1 = glyphs.h[key];
					if(fc1 != null) {
						fc1.addKerning(first,bytes1.readInt16());
					} else {
						var _g5 = bytes1;
						_g5.set_position(_g5.pos + 2);
					}
					--count1;
				}
				break;
			}
			bytes1.set_position(pos + length);
		}
		break;
	case 1414415938:
		return new hxd_fmt_bfnt_Reader(new haxe_io_BytesInput(bytes)).read(function(tp) {
			try {
				font.tilePath = tp;
				var tile3 = haxe_io_Path.join([haxe_io_Path.directory(path),tp]);
				tile = resolveTile(tile3);
			} catch( e2 ) {
				var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
				haxe_Log.trace("Warning: Could not find referenced font texture at \"" + tp + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 30, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
				font.tilePath = new haxe_io_Path(path).file + ".png";
				var tile4 = haxe_io_Path.withExtension(path,"png");
				tile = resolveTile(tile4);
			}
			return tile;
		});
	case 1836597052:case 1852794428:
		var xml = Xml.parse(bytes.toString());
		var x = xml.firstElement();
		if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Invalid nodeType " + _$Xml_XmlType_$Impl_$.toString(x.nodeType));
		}
		var this1 = x;
		var xml1 = this1;
		if(haxe_xml__$Access_HasNodeAccess_$Impl_$.resolve(xml1,"info")) {
			var tmp = haxe_xml__$Access_NodeAccess_$Impl_$.resolve(xml1,"info");
			font.name = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(tmp,"face");
			var tmp1 = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(xml1,"info"),"size");
			font.size = font.initSize = Std.parseInt(tmp1);
			var tmp2 = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(xml1,"common"),"lineHeight");
			font.lineHeight = Std.parseInt(tmp2);
			var tmp3 = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(haxe_xml__$Access_NodeAccess_$Impl_$.resolve(xml1,"common"),"base");
			font.baseLine = Std.parseInt(tmp3);
			var p = haxe_xml__$Access_NodeAccess_$Impl_$.resolve(xml1,"pages").elements();
			while(p.hasNext()) {
				var p1 = p.next();
				if(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(p1,"id") == "0") {
					var tilePath = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(p1,"file");
					try {
						font.tilePath = tilePath;
						var tile5 = haxe_io_Path.join([haxe_io_Path.directory(path),tilePath]);
						tile = resolveTile(tile5);
					} catch( e4 ) {
						var e5 = ((e4) instanceof js__$Boot_HaxeError) ? e4.val : e4;
						haxe_Log.trace("Warning: Could not find referenced font texture at \"" + tilePath + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 30, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
						font.tilePath = new haxe_io_Path(path).file + ".png";
						var tile6 = haxe_io_Path.withExtension(path,"png");
						tile = resolveTile(tile6);
					}
				} else {
					haxe_Log.trace("Warning: BMF format only supports one page at the moment.",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 66, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
				}
			}
			var chars = haxe_xml__$Access_NodeAccess_$Impl_$.resolve(xml1,"chars").elements();
			var c = chars;
			while(c.hasNext()) {
				var c1 = c.next();
				var t7 = Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"x"));
				var t8 = Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"y"));
				var t9 = Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"width"));
				var t10 = Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"height"));
				var t11 = Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"xoffset"));
				var t12 = Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"yoffset"));
				var t13 = tile.sub(t7,t8,t9,t10,t11,t12);
				var fc2 = new h2d_FontChar(t13,Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"xadvance")));
				var kerns = haxe_xml__$Access_NodeAccess_$Impl_$.resolve(xml1,"kernings").elements();
				var k = kerns;
				while(k.hasNext()) {
					var k1 = k.next();
					if(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(k1,"second") == haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"id")) {
						fc2.addKerning(Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(k1,"first")),Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(k1,"amount")));
					}
				}
				var key1 = Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c1,"id"));
				glyphs.h[key1] = fc2;
			}
		} else {
			font.tilePath = new haxe_io_Path(path).file + ".png";
			var tile7 = haxe_io_Path.withExtension(path,"png");
			tile = resolveTile(tile7);
			font.name = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(xml1,"family");
			var tmp4 = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(xml1,"size");
			font.size = font.initSize = Std.parseInt(tmp4);
			var tmp5 = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(xml1,"height");
			font.lineHeight = Std.parseInt(tmp5);
			var kernings = [];
			var c2 = xml1.elements();
			while(c2.hasNext()) {
				var c3 = c2.next();
				var r = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c3,"rect").split(" ");
				var o = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c3,"offset").split(" ");
				var t14 = tile.sub(Std.parseInt(r[0]),Std.parseInt(r[1]),Std.parseInt(r[2]),Std.parseInt(r[3]),Std.parseInt(o[0]),Std.parseInt(o[1]));
				var fc3 = new h2d_FontChar(t14,Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c3,"width")) - 1);
				var code = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(c3,"code");
				var code1 = StringTools.startsWith(code,"&#") ? Std.parseInt(HxOverrides.substr(code,2,code.length - 3)) : HxOverrides.cca(code,0);
				var k2 = c3.elements();
				while(k2.hasNext()) {
					var k3 = k2.next();
					var code2 = haxe_xml__$Access_AttribAccess_$Impl_$.resolve(k3,"id");
					var next = StringTools.startsWith(code2,"&#") ? Std.parseInt(HxOverrides.substr(code2,2,code2.length - 3)) : HxOverrides.cca(code2,0);
					var adv = Std.parseInt(haxe_xml__$Access_AttribAccess_$Impl_$.resolve(k3,"advance"));
					if(glyphs.h.hasOwnProperty(next)) {
						glyphs.h[next].addKerning(code1,adv);
					} else {
						kernings.push({ prev : code1, next : next, adv : adv});
					}
				}
				glyphs.h[code1] = fc3;
			}
			var _g6 = 0;
			while(_g6 < kernings.length) {
				var k4 = kernings[_g6];
				++_g6;
				var g = glyphs.h[k4.next];
				if(g == null) {
					continue;
				}
				g.addKerning(k4.prev,k4.adv);
			}
		}
		break;
	case 1868983913:
		var lines = bytes.toString().split("\n");
		var reg = new EReg(" *?([0-9a-zA-Z]+)=(\"[^\"]+\"|.+?)(?:[ \r]|$)","");
		var idx;
		var pageCount1 = 0;
		var _g7 = 0;
		while(_g7 < lines.length) {
			var line = lines[_g7];
			++_g7;
			idx = line.indexOf(" ");
			switch(HxOverrides.substr(line,0,idx)) {
			case "char":
				var id1 = 0;
				var x1 = 0;
				var y = 0;
				var width = 0;
				var height = 0;
				var xoffset = 0;
				var yoffset = 0;
				var xadvance = 0;
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "height":
						var v = reg.matched(2);
						height = Std.parseInt(HxOverrides.cca(v,0) == 34 ? v.substring(1,v.length - 1) : v);
						break;
					case "id":
						var v1 = reg.matched(2);
						id1 = Std.parseInt(HxOverrides.cca(v1,0) == 34 ? v1.substring(1,v1.length - 1) : v1);
						break;
					case "width":
						var v2 = reg.matched(2);
						width = Std.parseInt(HxOverrides.cca(v2,0) == 34 ? v2.substring(1,v2.length - 1) : v2);
						break;
					case "x":
						var v3 = reg.matched(2);
						x1 = Std.parseInt(HxOverrides.cca(v3,0) == 34 ? v3.substring(1,v3.length - 1) : v3);
						break;
					case "xadvance":
						var v4 = reg.matched(2);
						xadvance = Std.parseInt(HxOverrides.cca(v4,0) == 34 ? v4.substring(1,v4.length - 1) : v4);
						break;
					case "xoffset":
						var v5 = reg.matched(2);
						xoffset = Std.parseInt(HxOverrides.cca(v5,0) == 34 ? v5.substring(1,v5.length - 1) : v5);
						break;
					case "y":
						var v6 = reg.matched(2);
						y = Std.parseInt(HxOverrides.cca(v6,0) == 34 ? v6.substring(1,v6.length - 1) : v6);
						break;
					case "yoffset":
						var v7 = reg.matched(2);
						yoffset = Std.parseInt(HxOverrides.cca(v7,0) == 34 ? v7.substring(1,v7.length - 1) : v7);
						break;
					}
					var pos1 = reg.matchedPos();
					idx = pos1.pos + pos1.len;
				}
				var t15 = tile.sub(x1,y,width,height,xoffset,yoffset);
				var fc4 = new h2d_FontChar(t15,xadvance);
				glyphs.h[id1] = fc4;
				break;
			case "common":
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "base":
						var v8 = reg.matched(2);
						font.baseLine = Std.parseInt(HxOverrides.cca(v8,0) == 34 ? v8.substring(1,v8.length - 1) : v8);
						break;
					case "lineHeight":
						var v9 = reg.matched(2);
						font.lineHeight = Std.parseInt(HxOverrides.cca(v9,0) == 34 ? v9.substring(1,v9.length - 1) : v9);
						break;
					case "pages":
						var v10 = reg.matched(2);
						pageCount1 = Std.parseInt(HxOverrides.cca(v10,0) == 34 ? v10.substring(1,v10.length - 1) : v10);
						if(pageCount1 != 1) {
							haxe_Log.trace("Warning: BMF format only supports one page at the moment.",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 157, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
						}
						break;
					}
					var pos2 = reg.matchedPos();
					idx = pos2.pos + pos2.len;
				}
				break;
			case "info":
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "face":
						var v11 = reg.matched(2);
						font.name = HxOverrides.cca(v11,0) == 34 ? v11.substring(1,v11.length - 1) : v11;
						break;
					case "size":
						var v12 = reg.matched(2);
						font.size = font.initSize = Std.parseInt(HxOverrides.cca(v12,0) == 34 ? v12.substring(1,v12.length - 1) : v12);
						break;
					}
					var pos3 = reg.matchedPos();
					idx = pos3.pos + pos3.len;
				}
				break;
			case "kerning":
				var first1 = 0;
				var second = 0;
				var advance = 0;
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "amount":
						var v13 = reg.matched(2);
						advance = Std.parseInt(HxOverrides.cca(v13,0) == 34 ? v13.substring(1,v13.length - 1) : v13);
						break;
					case "first":
						var v14 = reg.matched(2);
						first1 = Std.parseInt(HxOverrides.cca(v14,0) == 34 ? v14.substring(1,v14.length - 1) : v14);
						break;
					case "second":
						var v15 = reg.matched(2);
						second = Std.parseInt(HxOverrides.cca(v15,0) == 34 ? v15.substring(1,v15.length - 1) : v15);
						break;
					}
					var pos4 = reg.matchedPos();
					idx = pos4.pos + pos4.len;
				}
				var fc5 = glyphs.h[second];
				if(fc5 != null) {
					fc5.addKerning(first1,advance);
				}
				break;
			case "page":
				while(idx < line.length && reg.matchSub(line,idx)) {
					if(reg.matched(1) == "file") {
						var v16 = reg.matched(2);
						var tilePath1 = HxOverrides.cca(v16,0) == 34 ? v16.substring(1,v16.length - 1) : v16;
						try {
							font.tilePath = tilePath1;
							var tile8 = haxe_io_Path.join([haxe_io_Path.directory(path),tilePath1]);
							tile = resolveTile(tile8);
						} catch( e6 ) {
							var e7 = ((e6) instanceof js__$Boot_HaxeError) ? e6.val : e6;
							haxe_Log.trace("Warning: Could not find referenced font texture at \"" + tilePath1 + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 30, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
							font.tilePath = new haxe_io_Path(path).file + ".png";
							var tile9 = haxe_io_Path.withExtension(path,"png");
							tile = resolveTile(tile9);
						}
					}
					var pos5 = reg.matchedPos();
					idx = pos5.pos + pos5.len;
				}
				break;
			}
		}
		break;
	default:
		var sign = _g;
		throw new js__$Boot_HaxeError("Unknown font signature " + StringTools.hex(sign,8));
	}
	if(glyphs.h[32] == null) {
		var value = new h2d_FontChar(tile.sub(0,0,0,0),font.size >> 1);
		glyphs.h[32] = value;
	}
	font.tile = tile;
	if(font.baseLine == 0) {
		var padding = 0;
		var space = glyphs.h[32];
		if(space != null) {
			padding = space.t.height * .5;
		}
		var a = glyphs.h[65];
		if(a == null) {
			a = glyphs.h[97];
		}
		if(a == null) {
			a = glyphs.h[48];
		}
		if(a == null) {
			font.baseLine = font.lineHeight - 2 - padding;
		} else {
			font.baseLine = a.t.dy + a.t.height - padding;
		}
	}
	var fallback = glyphs.h[65533];
	if(fallback == null) {
		fallback = glyphs.h[9633];
	}
	if(fallback == null) {
		fallback = glyphs.h[63];
	}
	if(fallback != null) {
		font.defaultChar = fallback;
	}
	return font;
};
var hxd_fmt_bfnt_Reader = function(i) {
	this.i = i;
};
$hxClasses["hxd.fmt.bfnt.Reader"] = hxd_fmt_bfnt_Reader;
hxd_fmt_bfnt_Reader.__name__ = "hxd.fmt.bfnt.Reader";
hxd_fmt_bfnt_Reader.prototype = {
	i: null
	,read: function(resolveTile) {
		if(this.i.readString(4) != "BFNT" || this.i.readByte() != 0) {
			throw new js__$Boot_HaxeError("Not a BFNT file!");
		}
		var font = null;
		var _g = this.i.readByte();
		if(_g == 1) {
			font = new h2d_Font(this.i.readString(this.i.readUInt16()),this.i.readInt16());
			font.tilePath = this.i.readString(this.i.readUInt16());
			var tile = font.tile = resolveTile(font.tilePath);
			font.lineHeight = this.i.readInt16();
			font.baseLine = this.i.readInt16();
			var defaultChar = this.i.readInt32();
			var id;
			while(true) {
				id = this.i.readInt32();
				if(!(id != 0)) {
					break;
				}
				var t = tile.sub(this.i.readUInt16(),this.i.readUInt16(),this.i.readUInt16(),this.i.readUInt16(),this.i.readInt16(),this.i.readInt16());
				var glyph = new h2d_FontChar(t,this.i.readInt16());
				font.glyphs.h[id] = glyph;
				if(id == defaultChar) {
					font.defaultChar = glyph;
				}
				var prevChar;
				while(true) {
					prevChar = this.i.readInt32();
					if(!(prevChar != 0)) {
						break;
					}
					glyph.addKerning(prevChar,this.i.readInt16());
				}
			}
		} else {
			var ver = _g;
			throw new js__$Boot_HaxeError("Unknown BFNT version: " + ver);
		}
		return font;
	}
	,__class__: hxd_fmt_bfnt_Reader
};
var hxd_fs_FileEntry = function() { };
$hxClasses["hxd.fs.FileEntry"] = hxd_fs_FileEntry;
hxd_fs_FileEntry.__name__ = "hxd.fs.FileEntry";
hxd_fs_FileEntry.prototype = {
	name: null
	,getBytes: function() {
		return null;
	}
	,getText: function() {
		return this.getBytes().toString();
	}
	,open: function() {
	}
	,skip: function(nbytes) {
	}
	,readByte: function() {
		return 0;
	}
	,read: function(out,pos,size) {
	}
	,close: function() {
	}
	,load: function(onReady) {
		if(!this.get_isAvailable()) {
			throw new js__$Boot_HaxeError("load() not implemented");
		} else if(onReady != null) {
			onReady();
		}
	}
	,loadBitmap: function(onLoaded) {
		throw new js__$Boot_HaxeError("loadBitmap() not implemented");
	}
	,watch: function(onChanged) {
	}
	,iterator: function() {
		return null;
	}
	,get_isAvailable: function() {
		return true;
	}
	,get_isDirectory: function() {
		return false;
	}
	,get_path: function() {
		throw new js__$Boot_HaxeError("path() not implemented");
	}
	,get_directory: function() {
		var p = this.get_path().split("/");
		p.pop();
		return p.join("/");
	}
	,get_extension: function() {
		var np = this.name.split(".");
		if(np.length == 1) {
			return "";
		} else {
			return np.pop().toLowerCase();
		}
	}
	,__class__: hxd_fs_FileEntry
};
var hxd_fs_FileSystem = function() { };
$hxClasses["hxd.fs.FileSystem"] = hxd_fs_FileSystem;
hxd_fs_FileSystem.__name__ = "hxd.fs.FileSystem";
hxd_fs_FileSystem.__isInterface__ = true;
hxd_fs_FileSystem.prototype = {
	get: null
	,exists: null
	,__class__: hxd_fs_FileSystem
};
var hxd_fs__$EmbedFileSystem_EmbedEntry = function(fs,name,relPath,data) {
	this.fs = fs;
	this.name = name;
	this.relPath = relPath;
	this.data = data;
};
$hxClasses["hxd.fs._EmbedFileSystem.EmbedEntry"] = hxd_fs__$EmbedFileSystem_EmbedEntry;
hxd_fs__$EmbedFileSystem_EmbedEntry.__name__ = "hxd.fs._EmbedFileSystem.EmbedEntry";
hxd_fs__$EmbedFileSystem_EmbedEntry.__super__ = hxd_fs_FileEntry;
hxd_fs__$EmbedFileSystem_EmbedEntry.prototype = $extend(hxd_fs_FileEntry.prototype,{
	fs: null
	,relPath: null
	,data: null
	,bytes: null
	,readPos: null
	,getBytes: function() {
		if(this.bytes == null) {
			this.open();
		}
		return this.bytes;
	}
	,open: function() {
		if(this.bytes == null) {
			this.bytes = haxe_Resource.getBytes(this.data);
			if(this.bytes == null) {
				throw new js__$Boot_HaxeError("Missing resource " + this.data);
			}
		}
		this.readPos = 0;
	}
	,skip: function(nbytes) {
		this.readPos += nbytes;
	}
	,readByte: function() {
		return this.bytes.b[this.readPos++];
	}
	,read: function(out,pos,size) {
		out.blit(pos,this.bytes,this.readPos,size);
		this.readPos += size;
	}
	,close: function() {
		this.bytes = null;
		this.readPos = 0;
	}
	,load: function(onReady) {
		if(onReady != null) {
			haxe_Timer.delay(onReady,1);
		}
	}
	,loadBitmap: function(onLoaded) {
		var rawData = null;
		var _g = 0;
		var _g1 = haxe_Resource.content;
		while(_g < _g1.length) {
			var res = _g1[_g];
			++_g;
			if(res.name == this.data) {
				rawData = res.data;
				break;
			}
		}
		if(rawData == null) {
			throw new js__$Boot_HaxeError("Missing resource " + this.data);
		}
		var image = new Image();
		image.onload = function(_) {
			var this1 = image;
			onLoaded(this1);
		};
		var extra = "";
		var bytes = rawData.length * 6 >> 3;
		var _g2 = 0;
		var _g3 = (3 - bytes * 4 % 3) % 3;
		while(_g2 < _g3) {
			var i = _g2++;
			extra += "=";
		}
		var tmp = "data:image/" + this.get_extension() + ";base64," + rawData;
		image.src = tmp + extra;
	}
	,get_isDirectory: function() {
		return this.fs.isDirectory(this.relPath);
	}
	,get_path: function() {
		if(this.relPath == ".") {
			return "<root>";
		} else {
			return this.relPath;
		}
	}
	,iterator: function() {
		return new hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry(this.fs.subFiles(this.relPath));
	}
	,__class__: hxd_fs__$EmbedFileSystem_EmbedEntry
});
var hxd_fs_EmbedFileSystem = function(root) {
	this.root = root;
};
$hxClasses["hxd.fs.EmbedFileSystem"] = hxd_fs_EmbedFileSystem;
hxd_fs_EmbedFileSystem.__name__ = "hxd.fs.EmbedFileSystem";
hxd_fs_EmbedFileSystem.__interfaces__ = [hxd_fs_FileSystem];
hxd_fs_EmbedFileSystem.resolve = function(path) {
	return "R_" + path.replace(hxd_fs_EmbedFileSystem.invalidChars.r,"_");
};
hxd_fs_EmbedFileSystem.prototype = {
	root: null
	,splitPath: function(path) {
		if(path == ".") {
			return [];
		} else {
			return path.split("/");
		}
	}
	,subFiles: function(path) {
		var r = this.root;
		var _g = 0;
		var _g1 = this.splitPath(path);
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			r = Reflect.field(r,p);
		}
		if(r == null) {
			throw new js__$Boot_HaxeError(path + " is not a directory");
		}
		var fields = Reflect.fields(r);
		fields.sort(Reflect.compare);
		var _g2 = [];
		var _g3 = 0;
		while(_g3 < fields.length) {
			var name = fields[_g3];
			++_g3;
			_g2.push(this.get(path == "." ? name : path + "/" + name));
		}
		return _g2;
	}
	,isDirectory: function(path) {
		var r = this.root;
		var _g = 0;
		var _g1 = this.splitPath(path);
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			r = Reflect.field(r,p);
		}
		if(r != null) {
			return r != true;
		} else {
			return false;
		}
	}
	,exists: function(path) {
		var r = this.root;
		var _g = 0;
		var _g1 = this.splitPath(path);
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			r = Reflect.field(r,p);
			if(r == null) {
				return false;
			}
		}
		return true;
	}
	,get: function(path) {
		if(!this.exists(path)) {
			throw new js__$Boot_HaxeError(new hxd_fs_NotFound(path));
		}
		var id = hxd_fs_EmbedFileSystem.resolve(path);
		return new hxd_fs__$EmbedFileSystem_EmbedEntry(this,path.split("/").pop(),path,id);
	}
	,__class__: hxd_fs_EmbedFileSystem
};
var hxd_fs_FileInput = function(f) {
	this.f = f;
	f.open();
};
$hxClasses["hxd.fs.FileInput"] = hxd_fs_FileInput;
hxd_fs_FileInput.__name__ = "hxd.fs.FileInput";
hxd_fs_FileInput.__super__ = haxe_io_Input;
hxd_fs_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	f: null
	,skip: function(nbytes) {
		this.f.skip(nbytes);
	}
	,readByte: function() {
		return this.f.readByte();
	}
	,readBytes: function(b,pos,len) {
		this.f.read(b,pos,len);
		return len;
	}
	,close: function() {
		this.f.close();
	}
	,__class__: hxd_fs_FileInput
});
var hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$ = {};
$hxClasses["hxd.fs._LoadedBitmap.LoadedBitmap_Impl_"] = hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$;
hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$.__name__ = "hxd.fs._LoadedBitmap.LoadedBitmap_Impl_";
hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$.toBitmap = function(this1) {
	var bmp = new hxd_BitmapData(this1.width,this1.height);
	bmp.ctx.drawImage(this1,0,0);
	return bmp;
};
var hxd_fs_NotFound = function(path) {
	this.path = path;
};
$hxClasses["hxd.fs.NotFound"] = hxd_fs_NotFound;
hxd_fs_NotFound.__name__ = "hxd.fs.NotFound";
hxd_fs_NotFound.prototype = {
	path: null
	,toString: function() {
		return "Resource file not found '" + this.path + "'";
	}
	,__class__: hxd_fs_NotFound
};
var hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
$hxClasses["hxd.impl.ArrayIterator_hxd_fs_FileEntry"] = hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry;
hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry.__name__ = "hxd.impl.ArrayIterator_hxd_fs_FileEntry";
hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry.prototype = {
	i: null
	,l: null
	,a: null
	,hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator_$hxd_$fs_$FileEntry
};
var hxd_res_Resource = function(entry) {
	this.entry = entry;
};
$hxClasses["hxd.res.Resource"] = hxd_res_Resource;
hxd_res_Resource.__name__ = "hxd.res.Resource";
hxd_res_Resource.prototype = {
	entry: null
	,toString: function() {
		return this.entry.get_path();
	}
	,watch: function(onChanged) {
		if(hxd_res_Resource.LIVE_UPDATE) {
			this.entry.watch(onChanged);
		}
	}
	,__class__: hxd_res_Resource
};
var hxd_res_Any = function(loader,entry) {
	hxd_res_Resource.call(this,entry);
	this.loader = loader;
};
$hxClasses["hxd.res.Any"] = hxd_res_Any;
hxd_res_Any.__name__ = "hxd.res.Any";
hxd_res_Any.__super__ = hxd_res_Resource;
hxd_res_Any.prototype = $extend(hxd_res_Resource.prototype,{
	loader: null
	,toTexture: function() {
		return this.toImage().toTexture();
	}
	,toTile: function() {
		return this.toImage().toTile();
	}
	,toText: function() {
		return this.entry.getBytes().toString();
	}
	,toImage: function() {
		return this.loader.loadCache(this.entry.get_path(),hxd_res_Image);
	}
	,to: function(c) {
		return this.loader.loadCache(this.entry.get_path(),c);
	}
	,__class__: hxd_res_Any
});
var hxd_res_Atlas = function(entry) {
	hxd_res_Resource.call(this,entry);
};
$hxClasses["hxd.res.Atlas"] = hxd_res_Atlas;
hxd_res_Atlas.__name__ = "hxd.res.Atlas";
hxd_res_Atlas.__super__ = hxd_res_Resource;
hxd_res_Atlas.prototype = $extend(hxd_res_Resource.prototype,{
	contents: null
	,getContents: function() {
		if(this.contents != null) {
			return this.contents;
		}
		this.contents = new haxe_ds_StringMap();
		var lines = this.entry.getBytes().toString().split("\n");
		var basePath = this.entry.get_path().split("/");
		basePath.pop();
		var basePath1 = basePath.join("/");
		if(basePath1.length > 0) {
			basePath1 += "/";
		}
		while(lines.length > 0) {
			var line = StringTools.trim(lines.shift());
			if(line == "") {
				continue;
			}
			var scale = 1.;
			var file = hxd_res_Loader.currentInstance.load(basePath1 + line).toTile();
			while(lines.length > 0) {
				if(lines[0].indexOf(":") < 0) {
					break;
				}
				var line1 = StringTools.trim(lines.shift()).split(": ");
				if(line1[0] == "size") {
					var wh = line1[1].split(",");
					var w = Std.parseInt(wh[0]);
					scale = file.width / w;
				}
			}
			while(lines.length > 0) {
				var line2 = StringTools.trim(lines.shift());
				if(line2 == "") {
					break;
				}
				var prop = line2.split(": ");
				if(prop.length > 1) {
					continue;
				}
				var key = line2;
				var tileX = 0;
				var tileY = 0;
				var tileW = 0;
				var tileH = 0;
				var tileDX = 0;
				var tileDY = 0;
				var origW = 0;
				var origH = 0;
				var index = 0;
				while(lines.length > 0) {
					var line3 = StringTools.trim(lines.shift());
					var prop1 = line3.split(": ");
					if(prop1.length == 1) {
						lines.unshift(line3);
						break;
					}
					var v = prop1[1];
					switch(prop1[0]) {
					case "index":
						index = Std.parseInt(v);
						if(index < 0) {
							index = 0;
						}
						break;
					case "offset":
						var vals = v.split(", ");
						tileDX = Std.parseInt(vals[0]);
						tileDY = Std.parseInt(vals[1]);
						break;
					case "orig":
						var vals1 = v.split(", ");
						origW = Std.parseInt(vals1[0]);
						origH = Std.parseInt(vals1[1]);
						break;
					case "rotate":
						if(v == "true") {
							throw new js__$Boot_HaxeError("Rotation not supported in atlas");
						}
						break;
					case "size":
						var vals2 = v.split(", ");
						tileW = Std.parseInt(vals2[0]);
						tileH = Std.parseInt(vals2[1]);
						break;
					case "xy":
						var vals3 = v.split(", ");
						tileX = Std.parseInt(vals3[0]);
						tileY = Std.parseInt(vals3[1]);
						break;
					default:
						haxe_Log.trace("Unknown prop " + prop1[0],{ fileName : "hxd/res/Atlas.hx", lineNumber : 116, className : "hxd.res.Atlas", methodName : "getContents"});
					}
				}
				tileDY = origH - (tileH + tileDY);
				var t = file.sub(tileX * scale | 0,tileY * scale | 0,tileW * scale | 0,tileH * scale | 0,tileDX,tileDY);
				if(scale != 1) {
					t.scaleToSize(tileW,tileH);
				}
				var _this = this.contents;
				var tl = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
				if(tl == null) {
					tl = [];
					var _this1 = this.contents;
					if(__map_reserved[key] != null) {
						_this1.setReserved(key,tl);
					} else {
						_this1.h[key] = tl;
					}
				}
				tl[index] = { t : t, width : origW, height : origH};
			}
			var _this2 = this.contents;
			var tl1 = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
			while(tl1.hasNext()) {
				var tl2 = tl1.next();
				if(tl2.length > 1 && tl2[0] == null) {
					tl2.shift();
				}
			}
		}
		return this.contents;
	}
	,__class__: hxd_res_Atlas
});
var hxd_res_BitmapFont = function(entry) {
	hxd_res_Resource.call(this,entry);
	this.loader = hxd_res_Loader.currentInstance;
};
$hxClasses["hxd.res.BitmapFont"] = hxd_res_BitmapFont;
hxd_res_BitmapFont.__name__ = "hxd.res.BitmapFont";
hxd_res_BitmapFont.__super__ = hxd_res_Resource;
hxd_res_BitmapFont.prototype = $extend(hxd_res_Resource.prototype,{
	loader: null
	,font: null
	,toFont: function() {
		if(this.font == null) {
			this.font = hxd_fmt_bfnt_FontParser.parse(this.entry.getBytes(),this.entry.get_path(),$bind(this,this.resolveTile));
		}
		return this.font;
	}
	,resolveTile: function(path) {
		return this.loader.load(path).toTile();
	}
	,__class__: hxd_res_BitmapFont
});
var hxd_res_Image = function(entry) {
	hxd_res_Resource.call(this,entry);
};
$hxClasses["hxd.res.Image"] = hxd_res_Image;
hxd_res_Image.__name__ = "hxd.res.Image";
hxd_res_Image.__super__ = hxd_res_Resource;
hxd_res_Image.prototype = $extend(hxd_res_Resource.prototype,{
	tex: null
	,inf: null
	,getFormat: function() {
		this.getSize();
		return this.inf.format;
	}
	,getSize: function() {
		if(this.inf != null) {
			return this.inf;
		}
		var f = new hxd_fs_FileInput(this.entry);
		var width = 0;
		var height = 0;
		var format;
		var bc = 0;
		var head;
		try {
			head = f.readUInt16();
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(((e1) instanceof haxe_io_Eof)) {
				var e2 = e1;
				head = 0;
			} else {
				throw e;
			}
		}
		switch(head) {
		case 17476:
			format = 4;
			f.skip(10);
			height = f.readInt32();
			width = f.readInt32();
			f.skip(64);
			var fourCC = f.readInt32();
			switch(fourCC & 16777215) {
			case 4805697:
				var v = (fourCC >>> 24) - 48;
				switch(v) {
				case 1:
					bc = 4;
					break;
				case 2:
					bc = 5;
					break;
				default:
					bc = 0;
				}
				break;
			case 5527620:
				var dxt = (fourCC >>> 24) - 48;
				switch(dxt) {
				case 1:
					bc = 1;
					break;
				case 2:case 3:
					bc = 2;
					break;
				case 4:case 5:
					bc = 3;
					break;
				default:
					bc = 0;
				}
				break;
			default:
				if(fourCC == 808540228) {
					f.skip(40);
					var dxgi = f.readInt32();
					switch(dxgi) {
					case 95:
						bc = 6;
						break;
					case 98:
						bc = 7;
						break;
					default:
						throw new js__$Boot_HaxeError(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
				}
			}
			if(bc == 0) {
				throw new js__$Boot_HaxeError(this.entry.get_path() + " has unsupported 4CC " + String.fromCodePoint(fourCC & 255) + String.fromCodePoint(fourCC >> 8 & 255) + String.fromCodePoint(fourCC >> 16 & 255) + String.fromCodePoint(fourCC >>> 24));
			}
			break;
		case 18759:
			format = 2;
			f.readInt32();
			width = f.readUInt16();
			height = f.readUInt16();
			break;
		case 20617:
			format = 1;
			f.set_bigEndian(true);
			f.skip(6);
			while(true) {
				var dataLen = f.readInt32();
				if(f.readInt32() == 1229472850) {
					width = f.readInt32();
					height = f.readInt32();
					break;
				}
				f.skip(dataLen + 4);
			}
			break;
		case 55551:
			format = 0;
			f.set_bigEndian(true);
			_hx_loop2: while(true) switch(f.readUInt16()) {
			case 65472:case 65473:case 65474:
				var len = f.readUInt16();
				var prec = f.readByte();
				height = f.readUInt16();
				width = f.readUInt16();
				break _hx_loop2;
			default:
				f.skip(f.readUInt16() - 2);
			}
			break;
		default:
			if(this.entry.get_extension() == "tga") {
				format = 3;
				f.skip(10);
				width = f.readUInt16();
				height = f.readUInt16();
			} else {
				throw new js__$Boot_HaxeError("Unsupported texture format " + this.entry.get_path());
			}
		}
		f.close();
		this.inf = { width : width, height : height, format : format, bc : bc};
		return this.inf;
	}
	,getPixels: function(fmt,flipY) {
		this.getSize();
		var pixels;
		switch(this.inf.format) {
		case 0:
			var bytes = this.entry.getBytes();
			var p;
			try {
				p = hxd_res_NanoJpeg.decode(bytes);
			} catch( e ) {
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				throw new js__$Boot_HaxeError("Failed to decode JPG " + this.entry.get_path() + " (" + Std.string(e1) + ")");
			}
			pixels = new hxd_Pixels(p.width,p.height,p.pixels,hxd_PixelFormat.BGRA);
			break;
		case 1:
			var bytes1 = this.entry.getBytes();
			var png = new format_png_Reader(new haxe_io_BytesInput(bytes1));
			png.checkCRC = false;
			pixels = hxd_Pixels.alloc(this.inf.width,this.inf.height,hxd_PixelFormat.BGRA);
			var pdata = png.read();
			format_png_Tools.extract32(pdata,pixels.bytes,flipY);
			if(flipY) {
				pixels.flags |= 1 << hxd_Flags.FlipY._hx_index;
			}
			break;
		case 2:
			var bytes2 = this.entry.getBytes();
			var gif = new format_gif_Reader(new haxe_io_BytesInput(bytes2)).read();
			pixels = new hxd_Pixels(this.inf.width,this.inf.height,format_gif_Tools.extractFullBGRA(gif,0),hxd_PixelFormat.BGRA);
			break;
		case 3:
			var bytes3 = this.entry.getBytes();
			var r = new format_tga_Reader(new haxe_io_BytesInput(bytes3)).read();
			if(r.header.imageType != format_tga_ImageType.UncompressedTrueColor || r.header.bitsPerPixel != 32) {
				throw new js__$Boot_HaxeError("Not supported " + Std.string(r.header.imageType) + "/" + r.header.bitsPerPixel);
			}
			var w = r.header.width;
			var h = r.header.height;
			pixels = hxd_Pixels.alloc(w,h,hxd_PixelFormat.ARGB);
			var access = hxd__$Pixels_PixelsARGB_$Impl_$.fromPixels(pixels);
			var p1 = 0;
			var _g = 0;
			var _g1 = h;
			while(_g < _g1) {
				var y = _g++;
				var _g2 = 0;
				var _g11 = w;
				while(_g2 < _g11) {
					var x = _g2++;
					var c = r.imageData[x + y * w];
					access.bytes.setInt32((x + y * access.width << 2) + access.offset,c >>> 24 | c >> 8 & 65280 | c << 8 & 16711680 | c << 24);
				}
			}
			switch(r.header.imageOrigin._hx_index) {
			case 0:
				pixels.flags |= 1 << hxd_Flags.FlipY._hx_index;
				break;
			case 2:
				break;
			default:
				throw new js__$Boot_HaxeError("Not supported " + Std.string(r.header.imageOrigin));
			}
			break;
		case 4:
			var bytes4 = this.entry.getBytes();
			pixels = new hxd_Pixels(this.inf.width,this.inf.height,bytes4,hxd_PixelFormat.S3TC(this.inf.bc),128 + (this.inf.bc >= 6 ? 20 : 0));
			break;
		}
		if(fmt != null) {
			pixels.convert(fmt);
		}
		if(flipY != null) {
			pixels.setFlip(flipY);
		}
		return pixels;
	}
	,watchCallb: function() {
		var w = this.inf.width;
		var h = this.inf.height;
		this.inf = null;
		var s = this.getSize();
		if(w != s.width || h != s.height) {
			this.tex.resize(w,h);
		}
		this.tex.realloc = null;
		this.loadTexture();
	}
	,loadTexture: function() {
		var _gthis = this;
		if(this.getFormat() != 0 && !hxd_res_Image.DEFAULT_ASYNC) {
			var load = function() {
				_gthis.tex.alloc();
				var pixels = _gthis.getPixels(_gthis.tex.format);
				if(pixels.width != _gthis.tex.width || pixels.height != _gthis.tex.height) {
					pixels.makeSquare();
				}
				_gthis.tex.uploadPixels(pixels);
				pixels.dispose();
				_gthis.tex.realloc = $bind(_gthis,_gthis.loadTexture);
				if(hxd_res_Image.ENABLE_AUTO_WATCH) {
					_gthis.watch($bind(_gthis,_gthis.watchCallb));
				}
			};
			if(this.entry.get_isAvailable()) {
				load();
			} else {
				this.entry.load(load);
			}
		} else {
			this.tex.flags |= 1 << h3d_mat_TextureFlags.Loading._hx_index;
			this.entry.loadBitmap(function(bmp) {
				var bmp1 = hxd_fs__$LoadedBitmap_LoadedBitmap_$Impl_$.toBitmap(bmp);
				_gthis.tex.alloc();
				if(bmp1.ctx.canvas.width != _gthis.tex.width || bmp1.ctx.canvas.height != _gthis.tex.height) {
					var pixels1 = bmp1.getPixels();
					pixels1.makeSquare();
					_gthis.tex.uploadPixels(pixels1);
					pixels1.dispose();
				} else {
					_gthis.tex.uploadBitmap(bmp1);
				}
				bmp1.ctx = null;
				bmp1.pixel = null;
				_gthis.tex.realloc = $bind(_gthis,_gthis.loadTexture);
				_gthis.tex.flags &= -1 - (1 << h3d_mat_TextureFlags.Loading._hx_index);
				if(_gthis.tex.waitLoads != null) {
					var arr = _gthis.tex.waitLoads;
					_gthis.tex.waitLoads = null;
					var _g = 0;
					while(_g < arr.length) {
						var f = arr[_g];
						++_g;
						f();
					}
				}
				if(hxd_res_Image.ENABLE_AUTO_WATCH) {
					_gthis.watch($bind(_gthis,_gthis.watchCallb));
				}
			});
		}
	}
	,toTexture: function() {
		if(this.tex != null) {
			return this.tex;
		}
		this.getSize();
		var width = this.inf.width;
		var height = this.inf.height;
		if(!hxd_res_Image.ALLOW_NPOT) {
			var tw = 1;
			var th = 1;
			while(tw < width) tw <<= 1;
			while(th < height) th <<= 1;
			width = tw;
			height = th;
		}
		var format = h3d_mat_Texture.nativeFormat;
		if(this.inf.format == 4) {
			format = hxd_PixelFormat.S3TC(this.inf.bc);
		}
		this.tex = new h3d_mat_Texture(width,height,[h3d_mat_TextureFlags.NoAlloc],format);
		if(hxd_res_Image.DEFAULT_FILTER != h3d_mat_Filter.Linear) {
			this.tex.set_filter(hxd_res_Image.DEFAULT_FILTER);
		}
		this.tex.setName(this.entry.get_path());
		this.loadTexture();
		return this.tex;
	}
	,toTile: function() {
		var size = this.getSize();
		return h2d_Tile.fromTexture(this.toTexture()).sub(0,0,size.width,size.height);
	}
	,__class__: hxd_res_Image
});
var hxd_res_Loader = function(fs) {
	this.fs = fs;
	this.cache = new haxe_ds_StringMap();
};
$hxClasses["hxd.res.Loader"] = hxd_res_Loader;
hxd_res_Loader.__name__ = "hxd.res.Loader";
hxd_res_Loader.prototype = {
	fs: null
	,cache: null
	,exists: function(path) {
		return this.fs.exists(path);
	}
	,load: function(path) {
		return new hxd_res_Any(this,this.fs.get(path));
	}
	,loadCache: function(path,c) {
		var _this = this.cache;
		var res = __map_reserved[path] != null ? _this.getReserved(path) : _this.h[path];
		if(res == null) {
			var entry = this.fs.get(path);
			var old = hxd_res_Loader.currentInstance;
			hxd_res_Loader.currentInstance = this;
			res = Type.createInstance(c,[entry]);
			hxd_res_Loader.currentInstance = old;
			var _this1 = this.cache;
			if(__map_reserved[path] != null) {
				_this1.setReserved(path,res);
			} else {
				_this1.h[path] = res;
			}
		} else if((js_Boot.__downcastCheck(res,c) ? res : null) == null) {
			throw new js__$Boot_HaxeError(path + " has been reintrepreted from " + Std.string(js_Boot.getClass(res)) + " to " + Std.string(c));
		}
		return res;
	}
	,__class__: hxd_res_Loader
};
var hxd_res_Filter = $hxEnums["hxd.res.Filter"] = { __ename__ : true, __constructs__ : ["Fast","Chromatic"]
	,Fast: {_hx_index:0,__enum__:"hxd.res.Filter",toString:$estr}
	,Chromatic: {_hx_index:1,__enum__:"hxd.res.Filter",toString:$estr}
};
hxd_res_Filter.__empty_constructs__ = [hxd_res_Filter.Fast,hxd_res_Filter.Chromatic];
var hxd_res__$NanoJpeg_Component = function() {
};
$hxClasses["hxd.res._NanoJpeg.Component"] = hxd_res__$NanoJpeg_Component;
hxd_res__$NanoJpeg_Component.__name__ = "hxd.res._NanoJpeg.Component";
hxd_res__$NanoJpeg_Component.prototype = {
	cid: null
	,ssx: null
	,ssy: null
	,width: null
	,height: null
	,stride: null
	,qtsel: null
	,actabsel: null
	,dctabsel: null
	,dcpred: null
	,pixels: null
	,__class__: hxd_res__$NanoJpeg_Component
};
var hxd_res_NanoJpeg = function() {
	this.comps = [new hxd_res__$NanoJpeg_Component(),new hxd_res__$NanoJpeg_Component(),new hxd_res__$NanoJpeg_Component()].slice(0);
	var this1 = new Array(64);
	var this2 = new Array(64);
	var this3 = new Array(64);
	var this4 = new Array(64);
	this.qtab = [this1,this2,this3,this4].slice(0);
	var this5 = new Array(16);
	this.counts = this5;
	var this6 = new Array(64);
	this.block = this6;
	this.njZZ = [0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63].slice(0);
	this.vlctab = [null,null,null,null,null,null,null,null].slice(0);
};
$hxClasses["hxd.res.NanoJpeg"] = hxd_res_NanoJpeg;
hxd_res_NanoJpeg.__name__ = "hxd.res.NanoJpeg";
hxd_res_NanoJpeg.decode = function(bytes,filter,position,size) {
	if(size == null) {
		size = -1;
	}
	if(position == null) {
		position = 0;
	}
	if(hxd_res_NanoJpeg.inst == null) {
		hxd_res_NanoJpeg.inst = new hxd_res_NanoJpeg();
	}
	hxd_res_NanoJpeg.inst.njInit(bytes,position,size,filter);
	return hxd_res_NanoJpeg.inst.njDecode();
};
hxd_res_NanoJpeg.prototype = {
	bytes: null
	,pos: null
	,size: null
	,length: null
	,width: null
	,height: null
	,ncomp: null
	,comps: null
	,counts: null
	,qtab: null
	,qtused: null
	,qtavail: null
	,vlctab: null
	,block: null
	,njZZ: null
	,progressive: null
	,mbsizex: null
	,mbsizey: null
	,mbwidth: null
	,mbheight: null
	,rstinterval: null
	,buf: null
	,bufbits: null
	,filter: null
	,njInit: function(bytes,pos,size,filter) {
		this.bytes = bytes;
		this.pos = pos;
		this.filter = filter == null ? hxd_res_Filter.Chromatic : filter;
		if(size < 0) {
			size = bytes.length - pos;
		}
		if(this.vlctab[0] == null) {
			this.vlctab[0] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[1] == null) {
			this.vlctab[1] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[2] == null) {
			this.vlctab[2] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[3] == null) {
			this.vlctab[3] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		this.size = size;
		this.qtused = 0;
		this.qtavail = 0;
		this.rstinterval = 0;
		this.length = 0;
		this.buf = 0;
		this.bufbits = 0;
		this.progressive = false;
		this.comps[0].dcpred = 0;
		this.comps[1].dcpred = 0;
		this.comps[2].dcpred = 0;
	}
	,cleanup: function() {
		this.bytes = null;
		var _g = 0;
		var _g1 = this.comps;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.pixels != null) {
				c.pixels = null;
			}
		}
		if(this.vlctab[0] != null) {
			this.vlctab[0] = null;
		}
		if(this.vlctab[1] != null) {
			this.vlctab[1] = null;
		}
		if(this.vlctab[2] != null) {
			this.vlctab[2] = null;
		}
		if(this.vlctab[3] != null) {
			this.vlctab[3] = null;
		}
		if(this.vlctab[4] != null) {
			this.vlctab[4] = null;
		}
		if(this.vlctab[5] != null) {
			this.vlctab[5] = null;
		}
		if(this.vlctab[6] != null) {
			this.vlctab[6] = null;
		}
		if(this.vlctab[7] != null) {
			this.vlctab[7] = null;
		}
	}
	,njShowBits: function(bits) {
		if(bits == 0) {
			return 0;
		}
		while(this.bufbits < bits) {
			if(this.size <= 0) {
				this.buf = this.buf << 8 | 255;
				this.bufbits += 8;
				continue;
			}
			var newbyte = this.bytes.b[this.pos];
			this.pos++;
			this.size--;
			this.bufbits += 8;
			this.buf = this.buf << 8 | newbyte;
			if(newbyte == 255) {
				var marker = this.bytes.b[this.pos];
				this.pos++;
				this.size--;
				switch(marker) {
				case 217:
					this.size = 0;
					break;
				case 0:case 255:
					break;
				default:
					this.buf = this.buf << 8 | marker;
					this.bufbits += 8;
				}
			}
		}
		return this.buf >> this.bufbits - bits & (1 << bits) - 1;
	}
	,njDecodeSOF: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.bytes.b[this.pos] != 8) {
			this.notSupported();
		}
		this.height = this.bytes.b[this.pos + 1] << 8 | this.bytes.b[this.pos + 2];
		this.width = this.bytes.b[this.pos + 3] << 8 | this.bytes.b[this.pos + 4];
		this.ncomp = this.bytes.b[this.pos + 5];
		this.pos += 6;
		this.size -= 6;
		this.length -= 6;
		switch(this.ncomp) {
		case 1:case 3:
			break;
		default:
			this.notSupported();
		}
		var ssxmax = 0;
		var ssymax = 0;
		var _g1 = 0;
		var _g2 = this.ncomp;
		while(_g1 < _g2) {
			var i = _g1++;
			var c = this.comps[i];
			c.cid = this.bytes.b[this.pos];
			c.ssx = this.bytes.b[this.pos + 1] >> 4;
			if((c.ssx & c.ssx - 1) != 0) {
				this.notSupported();
			}
			c.ssy = this.bytes.b[this.pos + 1] & 15;
			if((c.ssy & c.ssy - 1) != 0) {
				this.notSupported();
			}
			c.qtsel = this.bytes.b[this.pos + 2];
			this.pos += 3;
			this.size -= 3;
			this.length -= 3;
			this.qtused |= 1 << c.qtsel;
			if(c.ssx > ssxmax) {
				ssxmax = c.ssx;
			}
			if(c.ssy > ssymax) {
				ssymax = c.ssy;
			}
		}
		if(this.ncomp == 1) {
			var c1 = this.comps[0];
			ssymax = 1;
			ssxmax = ssymax;
			c1.ssx = c1.ssy = ssxmax;
		}
		this.mbsizex = ssxmax << 3;
		this.mbsizey = ssymax << 3;
		this.mbwidth = (this.width + this.mbsizex - 1) / this.mbsizex | 0;
		this.mbheight = (this.height + this.mbsizey - 1) / this.mbsizey | 0;
		var _g3 = 0;
		var _g4 = this.ncomp;
		while(_g3 < _g4) {
			var i1 = _g3++;
			var c2 = this.comps[i1];
			c2.width = (this.width * c2.ssx + ssxmax - 1) / ssxmax | 0;
			c2.stride = c2.width + 7 & 2147483640;
			c2.height = (this.height * c2.ssy + ssymax - 1) / ssymax | 0;
			c2.stride = this.mbwidth * this.mbsizex * c2.ssx / ssxmax | 0;
			if(c2.width < 3 && c2.ssx != ssxmax || c2.height < 3 && c2.ssy != ssymax) {
				this.notSupported();
			}
			c2.pixels = new haxe_io_Bytes(new ArrayBuffer(c2.stride * (this.mbheight * this.mbsizey * c2.ssy / ssymax | 0)));
		}
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
	}
	,njDecodeDQT: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		while(this.length >= 65) {
			var i = this.bytes.b[this.pos];
			this.qtavail |= 1 << i;
			var t = this.qtab[i];
			var _g = 0;
			while(_g < 64) {
				var k = _g++;
				t[k] = this.bytes.b[this.pos + (k + 1)];
			}
			this.pos += 65;
			this.size -= 65;
			this.length -= 65;
		}
	}
	,njDecodeDHT: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		while(this.length >= 17) {
			var i = this.bytes.b[this.pos];
			i = i >> 4 & 1 | (i & 3) << 1;
			this.counts[0] = this.bytes.b[this.pos + 1];
			this.counts[1] = this.bytes.b[this.pos + 2];
			this.counts[2] = this.bytes.b[this.pos + 3];
			this.counts[3] = this.bytes.b[this.pos + 4];
			this.counts[4] = this.bytes.b[this.pos + 5];
			this.counts[5] = this.bytes.b[this.pos + 6];
			this.counts[6] = this.bytes.b[this.pos + 7];
			this.counts[7] = this.bytes.b[this.pos + 8];
			this.counts[8] = this.bytes.b[this.pos + 9];
			this.counts[9] = this.bytes.b[this.pos + 10];
			this.counts[10] = this.bytes.b[this.pos + 11];
			this.counts[11] = this.bytes.b[this.pos + 12];
			this.counts[12] = this.bytes.b[this.pos + 13];
			this.counts[13] = this.bytes.b[this.pos + 14];
			this.counts[14] = this.bytes.b[this.pos + 15];
			this.counts[15] = this.bytes.b[this.pos + 16];
			this.pos += 17;
			this.size -= 17;
			this.length -= 17;
			var vlc = this.vlctab[i];
			var vpos = 0;
			var remain = 65536;
			var spread = 65536;
			var _g = 1;
			while(_g < 17) {
				var codelen = _g++;
				spread >>= 1;
				var currcnt = this.counts[codelen - 1];
				if(currcnt == 0) {
					continue;
				}
				remain -= currcnt << 16 - codelen;
				var _g1 = 0;
				var _g11 = currcnt;
				while(_g1 < _g11) {
					var i1 = _g1++;
					var code = this.bytes.b[this.pos + i1];
					var _g2 = 0;
					var _g12 = spread;
					while(_g2 < _g12) {
						var j = _g2++;
						vlc.b[vpos++] = codelen;
						vlc.b[vpos++] = code;
					}
				}
				this.pos += currcnt;
				this.size -= currcnt;
				this.length -= currcnt;
			}
			while(remain-- != 0) {
				vlc.b[vpos] = 0;
				vpos += 2;
			}
		}
	}
	,njDecodeDRI: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		this.rstinterval = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
	}
	,vlcCode: null
	,njDecodeBlock: function(c,po) {
		var this1 = c.pixels;
		var out = this1;
		var value;
		var coef = 0;
		var _g = 0;
		while(_g < 64) {
			var i = _g++;
			this.block[i] = 0;
		}
		var c1 = c;
		var c2 = c1.dcpred;
		var vlc = this.vlctab[c.dctabsel];
		var value1 = this.njShowBits(16);
		var bits = vlc.b[value1 << 1];
		if(this.bufbits < bits) {
			this.njShowBits(bits);
		}
		this.bufbits -= bits;
		value1 = vlc.b[value1 << 1 | 1];
		this.vlcCode = value1;
		bits = value1 & 15;
		var tmp;
		if(bits == 0) {
			tmp = 0;
		} else {
			var r = this.njShowBits(bits);
			this.bufbits -= bits;
			value1 = r;
			if(value1 < 1 << bits - 1) {
				value1 += (-1 << bits) + 1;
			}
			tmp = value1;
		}
		c1.dcpred = c2 + tmp;
		var qt = this.qtab[c.qtsel];
		var at = this.vlctab[c.actabsel];
		this.block[0] = c.dcpred * qt[0];
		while(true) {
			var value2 = this.njShowBits(16);
			var bits1 = at.b[value2 << 1];
			if(this.bufbits < bits1) {
				this.njShowBits(bits1);
			}
			this.bufbits -= bits1;
			value2 = at.b[value2 << 1 | 1];
			this.vlcCode = value2;
			bits1 = value2 & 15;
			if(bits1 == 0) {
				value = 0;
			} else {
				var r1 = this.njShowBits(bits1);
				this.bufbits -= bits1;
				value2 = r1;
				if(value2 < 1 << bits1 - 1) {
					value2 += (-1 << bits1) + 1;
				}
				value = value2;
			}
			if(this.vlcCode == 0) {
				break;
			}
			coef += (this.vlcCode >> 4) + 1;
			this.block[this.njZZ[coef]] = value * qt[coef];
			if(!(coef < 63)) {
				break;
			}
		}
		var bp = 0;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val2 = this.block[bp + 5] = val1;
			var val3 = this.block[bp + 4] = val2;
			var val4 = this.block[bp + 3] = val3;
			var val5 = this.block[bp + 2] = val4;
			var val6 = this.block[bp + 1] = val5;
			this.block[bp] = val6;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp1 = 8;
		var x01;
		var x81;
		var x11 = this.block[bp1 + 4] << 11;
		var x21 = this.block[bp1 + 6];
		var x31 = this.block[bp1 + 2];
		var x41 = this.block[bp1 + 1];
		var x51 = this.block[bp1 + 7];
		var x61 = this.block[bp1 + 5];
		var x71 = this.block[bp1 + 3];
		if((x11 | x21 | x31 | x41 | x51 | x61 | x71) == 0) {
			var val7 = this.block[bp1 + 7] = this.block[bp1] << 3;
			var val8 = this.block[bp1 + 6] = val7;
			var val9 = this.block[bp1 + 5] = val8;
			var val10 = this.block[bp1 + 4] = val9;
			var val11 = this.block[bp1 + 3] = val10;
			var val12 = this.block[bp1 + 2] = val11;
			var val13 = this.block[bp1 + 1] = val12;
			this.block[bp1] = val13;
		} else {
			x01 = (this.block[bp1] << 11) + 128;
			x81 = 565 * (x41 + x51);
			x41 = x81 + 2276 * x41;
			x51 = x81 - 3406 * x51;
			x81 = 2408 * (x61 + x71);
			x61 = x81 - 799 * x61;
			x71 = x81 - 4017 * x71;
			x81 = x01 + x11;
			x01 -= x11;
			x11 = 1108 * (x31 + x21);
			x21 = x11 - 3784 * x21;
			x31 = x11 + 1568 * x31;
			x11 = x41 + x61;
			x41 -= x61;
			x61 = x51 + x71;
			x51 -= x71;
			x71 = x81 + x31;
			x81 -= x31;
			x31 = x01 + x21;
			x01 -= x21;
			x21 = 181 * (x41 + x51) + 128 >> 8;
			x41 = 181 * (x41 - x51) + 128 >> 8;
			this.block[bp1] = x71 + x11 >> 8;
			this.block[bp1 + 1] = x31 + x21 >> 8;
			this.block[bp1 + 2] = x01 + x41 >> 8;
			this.block[bp1 + 3] = x81 + x61 >> 8;
			this.block[bp1 + 4] = x81 - x61 >> 8;
			this.block[bp1 + 5] = x01 - x41 >> 8;
			this.block[bp1 + 6] = x31 - x21 >> 8;
			this.block[bp1 + 7] = x71 - x11 >> 8;
		}
		var bp2 = 16;
		var x02;
		var x82;
		var x12 = this.block[bp2 + 4] << 11;
		var x22 = this.block[bp2 + 6];
		var x32 = this.block[bp2 + 2];
		var x42 = this.block[bp2 + 1];
		var x52 = this.block[bp2 + 7];
		var x62 = this.block[bp2 + 5];
		var x72 = this.block[bp2 + 3];
		if((x12 | x22 | x32 | x42 | x52 | x62 | x72) == 0) {
			var val14 = this.block[bp2 + 7] = this.block[bp2] << 3;
			var val15 = this.block[bp2 + 6] = val14;
			var val16 = this.block[bp2 + 5] = val15;
			var val17 = this.block[bp2 + 4] = val16;
			var val18 = this.block[bp2 + 3] = val17;
			var val19 = this.block[bp2 + 2] = val18;
			var val20 = this.block[bp2 + 1] = val19;
			this.block[bp2] = val20;
		} else {
			x02 = (this.block[bp2] << 11) + 128;
			x82 = 565 * (x42 + x52);
			x42 = x82 + 2276 * x42;
			x52 = x82 - 3406 * x52;
			x82 = 2408 * (x62 + x72);
			x62 = x82 - 799 * x62;
			x72 = x82 - 4017 * x72;
			x82 = x02 + x12;
			x02 -= x12;
			x12 = 1108 * (x32 + x22);
			x22 = x12 - 3784 * x22;
			x32 = x12 + 1568 * x32;
			x12 = x42 + x62;
			x42 -= x62;
			x62 = x52 + x72;
			x52 -= x72;
			x72 = x82 + x32;
			x82 -= x32;
			x32 = x02 + x22;
			x02 -= x22;
			x22 = 181 * (x42 + x52) + 128 >> 8;
			x42 = 181 * (x42 - x52) + 128 >> 8;
			this.block[bp2] = x72 + x12 >> 8;
			this.block[bp2 + 1] = x32 + x22 >> 8;
			this.block[bp2 + 2] = x02 + x42 >> 8;
			this.block[bp2 + 3] = x82 + x62 >> 8;
			this.block[bp2 + 4] = x82 - x62 >> 8;
			this.block[bp2 + 5] = x02 - x42 >> 8;
			this.block[bp2 + 6] = x32 - x22 >> 8;
			this.block[bp2 + 7] = x72 - x12 >> 8;
		}
		var bp3 = 24;
		var x03;
		var x83;
		var x13 = this.block[bp3 + 4] << 11;
		var x23 = this.block[bp3 + 6];
		var x33 = this.block[bp3 + 2];
		var x43 = this.block[bp3 + 1];
		var x53 = this.block[bp3 + 7];
		var x63 = this.block[bp3 + 5];
		var x73 = this.block[bp3 + 3];
		if((x13 | x23 | x33 | x43 | x53 | x63 | x73) == 0) {
			var val21 = this.block[bp3 + 7] = this.block[bp3] << 3;
			var val22 = this.block[bp3 + 6] = val21;
			var val23 = this.block[bp3 + 5] = val22;
			var val24 = this.block[bp3 + 4] = val23;
			var val25 = this.block[bp3 + 3] = val24;
			var val26 = this.block[bp3 + 2] = val25;
			var val27 = this.block[bp3 + 1] = val26;
			this.block[bp3] = val27;
		} else {
			x03 = (this.block[bp3] << 11) + 128;
			x83 = 565 * (x43 + x53);
			x43 = x83 + 2276 * x43;
			x53 = x83 - 3406 * x53;
			x83 = 2408 * (x63 + x73);
			x63 = x83 - 799 * x63;
			x73 = x83 - 4017 * x73;
			x83 = x03 + x13;
			x03 -= x13;
			x13 = 1108 * (x33 + x23);
			x23 = x13 - 3784 * x23;
			x33 = x13 + 1568 * x33;
			x13 = x43 + x63;
			x43 -= x63;
			x63 = x53 + x73;
			x53 -= x73;
			x73 = x83 + x33;
			x83 -= x33;
			x33 = x03 + x23;
			x03 -= x23;
			x23 = 181 * (x43 + x53) + 128 >> 8;
			x43 = 181 * (x43 - x53) + 128 >> 8;
			this.block[bp3] = x73 + x13 >> 8;
			this.block[bp3 + 1] = x33 + x23 >> 8;
			this.block[bp3 + 2] = x03 + x43 >> 8;
			this.block[bp3 + 3] = x83 + x63 >> 8;
			this.block[bp3 + 4] = x83 - x63 >> 8;
			this.block[bp3 + 5] = x03 - x43 >> 8;
			this.block[bp3 + 6] = x33 - x23 >> 8;
			this.block[bp3 + 7] = x73 - x13 >> 8;
		}
		var bp4 = 32;
		var x04;
		var x84;
		var x14 = this.block[bp4 + 4] << 11;
		var x24 = this.block[bp4 + 6];
		var x34 = this.block[bp4 + 2];
		var x44 = this.block[bp4 + 1];
		var x54 = this.block[bp4 + 7];
		var x64 = this.block[bp4 + 5];
		var x74 = this.block[bp4 + 3];
		if((x14 | x24 | x34 | x44 | x54 | x64 | x74) == 0) {
			var val28 = this.block[bp4 + 7] = this.block[bp4] << 3;
			var val29 = this.block[bp4 + 6] = val28;
			var val30 = this.block[bp4 + 5] = val29;
			var val31 = this.block[bp4 + 4] = val30;
			var val32 = this.block[bp4 + 3] = val31;
			var val33 = this.block[bp4 + 2] = val32;
			var val34 = this.block[bp4 + 1] = val33;
			this.block[bp4] = val34;
		} else {
			x04 = (this.block[bp4] << 11) + 128;
			x84 = 565 * (x44 + x54);
			x44 = x84 + 2276 * x44;
			x54 = x84 - 3406 * x54;
			x84 = 2408 * (x64 + x74);
			x64 = x84 - 799 * x64;
			x74 = x84 - 4017 * x74;
			x84 = x04 + x14;
			x04 -= x14;
			x14 = 1108 * (x34 + x24);
			x24 = x14 - 3784 * x24;
			x34 = x14 + 1568 * x34;
			x14 = x44 + x64;
			x44 -= x64;
			x64 = x54 + x74;
			x54 -= x74;
			x74 = x84 + x34;
			x84 -= x34;
			x34 = x04 + x24;
			x04 -= x24;
			x24 = 181 * (x44 + x54) + 128 >> 8;
			x44 = 181 * (x44 - x54) + 128 >> 8;
			this.block[bp4] = x74 + x14 >> 8;
			this.block[bp4 + 1] = x34 + x24 >> 8;
			this.block[bp4 + 2] = x04 + x44 >> 8;
			this.block[bp4 + 3] = x84 + x64 >> 8;
			this.block[bp4 + 4] = x84 - x64 >> 8;
			this.block[bp4 + 5] = x04 - x44 >> 8;
			this.block[bp4 + 6] = x34 - x24 >> 8;
			this.block[bp4 + 7] = x74 - x14 >> 8;
		}
		var bp5 = 40;
		var x05;
		var x85;
		var x15 = this.block[bp5 + 4] << 11;
		var x25 = this.block[bp5 + 6];
		var x35 = this.block[bp5 + 2];
		var x45 = this.block[bp5 + 1];
		var x55 = this.block[bp5 + 7];
		var x65 = this.block[bp5 + 5];
		var x75 = this.block[bp5 + 3];
		if((x15 | x25 | x35 | x45 | x55 | x65 | x75) == 0) {
			var val35 = this.block[bp5 + 7] = this.block[bp5] << 3;
			var val36 = this.block[bp5 + 6] = val35;
			var val37 = this.block[bp5 + 5] = val36;
			var val38 = this.block[bp5 + 4] = val37;
			var val39 = this.block[bp5 + 3] = val38;
			var val40 = this.block[bp5 + 2] = val39;
			var val41 = this.block[bp5 + 1] = val40;
			this.block[bp5] = val41;
		} else {
			x05 = (this.block[bp5] << 11) + 128;
			x85 = 565 * (x45 + x55);
			x45 = x85 + 2276 * x45;
			x55 = x85 - 3406 * x55;
			x85 = 2408 * (x65 + x75);
			x65 = x85 - 799 * x65;
			x75 = x85 - 4017 * x75;
			x85 = x05 + x15;
			x05 -= x15;
			x15 = 1108 * (x35 + x25);
			x25 = x15 - 3784 * x25;
			x35 = x15 + 1568 * x35;
			x15 = x45 + x65;
			x45 -= x65;
			x65 = x55 + x75;
			x55 -= x75;
			x75 = x85 + x35;
			x85 -= x35;
			x35 = x05 + x25;
			x05 -= x25;
			x25 = 181 * (x45 + x55) + 128 >> 8;
			x45 = 181 * (x45 - x55) + 128 >> 8;
			this.block[bp5] = x75 + x15 >> 8;
			this.block[bp5 + 1] = x35 + x25 >> 8;
			this.block[bp5 + 2] = x05 + x45 >> 8;
			this.block[bp5 + 3] = x85 + x65 >> 8;
			this.block[bp5 + 4] = x85 - x65 >> 8;
			this.block[bp5 + 5] = x05 - x45 >> 8;
			this.block[bp5 + 6] = x35 - x25 >> 8;
			this.block[bp5 + 7] = x75 - x15 >> 8;
		}
		var bp6 = 48;
		var x06;
		var x86;
		var x16 = this.block[bp6 + 4] << 11;
		var x26 = this.block[bp6 + 6];
		var x36 = this.block[bp6 + 2];
		var x46 = this.block[bp6 + 1];
		var x56 = this.block[bp6 + 7];
		var x66 = this.block[bp6 + 5];
		var x76 = this.block[bp6 + 3];
		if((x16 | x26 | x36 | x46 | x56 | x66 | x76) == 0) {
			var val42 = this.block[bp6 + 7] = this.block[bp6] << 3;
			var val43 = this.block[bp6 + 6] = val42;
			var val44 = this.block[bp6 + 5] = val43;
			var val45 = this.block[bp6 + 4] = val44;
			var val46 = this.block[bp6 + 3] = val45;
			var val47 = this.block[bp6 + 2] = val46;
			var val48 = this.block[bp6 + 1] = val47;
			this.block[bp6] = val48;
		} else {
			x06 = (this.block[bp6] << 11) + 128;
			x86 = 565 * (x46 + x56);
			x46 = x86 + 2276 * x46;
			x56 = x86 - 3406 * x56;
			x86 = 2408 * (x66 + x76);
			x66 = x86 - 799 * x66;
			x76 = x86 - 4017 * x76;
			x86 = x06 + x16;
			x06 -= x16;
			x16 = 1108 * (x36 + x26);
			x26 = x16 - 3784 * x26;
			x36 = x16 + 1568 * x36;
			x16 = x46 + x66;
			x46 -= x66;
			x66 = x56 + x76;
			x56 -= x76;
			x76 = x86 + x36;
			x86 -= x36;
			x36 = x06 + x26;
			x06 -= x26;
			x26 = 181 * (x46 + x56) + 128 >> 8;
			x46 = 181 * (x46 - x56) + 128 >> 8;
			this.block[bp6] = x76 + x16 >> 8;
			this.block[bp6 + 1] = x36 + x26 >> 8;
			this.block[bp6 + 2] = x06 + x46 >> 8;
			this.block[bp6 + 3] = x86 + x66 >> 8;
			this.block[bp6 + 4] = x86 - x66 >> 8;
			this.block[bp6 + 5] = x06 - x46 >> 8;
			this.block[bp6 + 6] = x36 - x26 >> 8;
			this.block[bp6 + 7] = x76 - x16 >> 8;
		}
		var bp7 = 56;
		var x07;
		var x87;
		var x17 = this.block[bp7 + 4] << 11;
		var x27 = this.block[bp7 + 6];
		var x37 = this.block[bp7 + 2];
		var x47 = this.block[bp7 + 1];
		var x57 = this.block[bp7 + 7];
		var x67 = this.block[bp7 + 5];
		var x77 = this.block[bp7 + 3];
		if((x17 | x27 | x37 | x47 | x57 | x67 | x77) == 0) {
			var val49 = this.block[bp7 + 7] = this.block[bp7] << 3;
			var val50 = this.block[bp7 + 6] = val49;
			var val51 = this.block[bp7 + 5] = val50;
			var val52 = this.block[bp7 + 4] = val51;
			var val53 = this.block[bp7 + 3] = val52;
			var val54 = this.block[bp7 + 2] = val53;
			var val55 = this.block[bp7 + 1] = val54;
			this.block[bp7] = val55;
		} else {
			x07 = (this.block[bp7] << 11) + 128;
			x87 = 565 * (x47 + x57);
			x47 = x87 + 2276 * x47;
			x57 = x87 - 3406 * x57;
			x87 = 2408 * (x67 + x77);
			x67 = x87 - 799 * x67;
			x77 = x87 - 4017 * x77;
			x87 = x07 + x17;
			x07 -= x17;
			x17 = 1108 * (x37 + x27);
			x27 = x17 - 3784 * x27;
			x37 = x17 + 1568 * x37;
			x17 = x47 + x67;
			x47 -= x67;
			x67 = x57 + x77;
			x57 -= x77;
			x77 = x87 + x37;
			x87 -= x37;
			x37 = x07 + x27;
			x07 -= x27;
			x27 = 181 * (x47 + x57) + 128 >> 8;
			x47 = 181 * (x47 - x57) + 128 >> 8;
			this.block[bp7] = x77 + x17 >> 8;
			this.block[bp7 + 1] = x37 + x27 >> 8;
			this.block[bp7 + 2] = x07 + x47 >> 8;
			this.block[bp7 + 3] = x87 + x67 >> 8;
			this.block[bp7 + 4] = x87 - x67 >> 8;
			this.block[bp7 + 5] = x07 - x47 >> 8;
			this.block[bp7 + 6] = x37 - x27 >> 8;
			this.block[bp7 + 7] = x77 - x17 >> 8;
		}
		var po1 = po;
		var stride = c.stride;
		var x08;
		var x88;
		var x18 = this.block[32] << 8;
		var x28 = this.block[48];
		var x38 = this.block[16];
		var x48 = this.block[8];
		var x58 = this.block[56];
		var x68 = this.block[40];
		var x78 = this.block[24];
		if((x18 | x28 | x38 | x48 | x58 | x68 | x78) == 0) {
			var x = (this.block[0] + 32 >> 6) + 128;
			x18 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
			out.b[po1] = x18;
			po1 += stride;
		} else {
			x08 = (this.block[0] << 8) + 8192;
			x88 = 565 * (x48 + x58) + 4;
			x48 = x88 + 2276 * x48 >> 3;
			x58 = x88 - 3406 * x58 >> 3;
			x88 = 2408 * (x68 + x78) + 4;
			x68 = x88 - 799 * x68 >> 3;
			x78 = x88 - 4017 * x78 >> 3;
			x88 = x08 + x18;
			x08 -= x18;
			x18 = 1108 * (x38 + x28) + 4;
			x28 = x18 - 3784 * x28 >> 3;
			x38 = x18 + 1568 * x38 >> 3;
			x18 = x48 + x68;
			x48 -= x68;
			x68 = x58 + x78;
			x58 -= x78;
			x78 = x88 + x38;
			x88 -= x38;
			x38 = x08 + x28;
			x08 -= x28;
			x28 = 181 * (x48 + x58) + 128 >> 8;
			x48 = 181 * (x48 - x58) + 128 >> 8;
			var x9 = (x78 + x18 >> 14) + 128;
			out.b[po1] = x9 < 0 ? 0 : x9 > 255 ? 255 : x9;
			po1 += stride;
			var x10 = (x38 + x28 >> 14) + 128;
			out.b[po1] = x10 < 0 ? 0 : x10 > 255 ? 255 : x10;
			po1 += stride;
			var x19 = (x08 + x48 >> 14) + 128;
			out.b[po1] = x19 < 0 ? 0 : x19 > 255 ? 255 : x19;
			po1 += stride;
			var x20 = (x88 + x68 >> 14) + 128;
			out.b[po1] = x20 < 0 ? 0 : x20 > 255 ? 255 : x20;
			po1 += stride;
			var x29 = (x88 - x68 >> 14) + 128;
			out.b[po1] = x29 < 0 ? 0 : x29 > 255 ? 255 : x29;
			po1 += stride;
			var x30 = (x08 - x48 >> 14) + 128;
			out.b[po1] = x30 < 0 ? 0 : x30 > 255 ? 255 : x30;
			po1 += stride;
			var x39 = (x38 - x28 >> 14) + 128;
			out.b[po1] = x39 < 0 ? 0 : x39 > 255 ? 255 : x39;
			po1 += stride;
			var x40 = (x78 - x18 >> 14) + 128;
			out.b[po1] = x40 < 0 ? 0 : x40 > 255 ? 255 : x40;
		}
		var po2 = 1 + po;
		var stride1 = c.stride;
		var x09;
		var x89;
		var x110 = this.block[33] << 8;
		var x210 = this.block[49];
		var x310 = this.block[17];
		var x49 = this.block[9];
		var x59 = this.block[57];
		var x69 = this.block[41];
		var x79 = this.block[25];
		if((x110 | x210 | x310 | x49 | x59 | x69 | x79) == 0) {
			var x50 = (this.block[1] + 32 >> 6) + 128;
			x110 = x50 < 0 ? 0 : x50 > 255 ? 255 : x50;
			out.b[po2] = x110;
			po2 += stride1;
			out.b[po2] = x110;
			po2 += stride1;
			out.b[po2] = x110;
			po2 += stride1;
			out.b[po2] = x110;
			po2 += stride1;
			out.b[po2] = x110;
			po2 += stride1;
			out.b[po2] = x110;
			po2 += stride1;
			out.b[po2] = x110;
			po2 += stride1;
			out.b[po2] = x110;
			po2 += stride1;
		} else {
			x09 = (this.block[1] << 8) + 8192;
			x89 = 565 * (x49 + x59) + 4;
			x49 = x89 + 2276 * x49 >> 3;
			x59 = x89 - 3406 * x59 >> 3;
			x89 = 2408 * (x69 + x79) + 4;
			x69 = x89 - 799 * x69 >> 3;
			x79 = x89 - 4017 * x79 >> 3;
			x89 = x09 + x110;
			x09 -= x110;
			x110 = 1108 * (x310 + x210) + 4;
			x210 = x110 - 3784 * x210 >> 3;
			x310 = x110 + 1568 * x310 >> 3;
			x110 = x49 + x69;
			x49 -= x69;
			x69 = x59 + x79;
			x59 -= x79;
			x79 = x89 + x310;
			x89 -= x310;
			x310 = x09 + x210;
			x09 -= x210;
			x210 = 181 * (x49 + x59) + 128 >> 8;
			x49 = 181 * (x49 - x59) + 128 >> 8;
			var x60 = (x79 + x110 >> 14) + 128;
			out.b[po2] = x60 < 0 ? 0 : x60 > 255 ? 255 : x60;
			po2 += stride1;
			var x70 = (x310 + x210 >> 14) + 128;
			out.b[po2] = x70 < 0 ? 0 : x70 > 255 ? 255 : x70;
			po2 += stride1;
			var x80 = (x09 + x49 >> 14) + 128;
			out.b[po2] = x80 < 0 ? 0 : x80 > 255 ? 255 : x80;
			po2 += stride1;
			var x90 = (x89 + x69 >> 14) + 128;
			out.b[po2] = x90 < 0 ? 0 : x90 > 255 ? 255 : x90;
			po2 += stride1;
			var x91 = (x89 - x69 >> 14) + 128;
			out.b[po2] = x91 < 0 ? 0 : x91 > 255 ? 255 : x91;
			po2 += stride1;
			var x92 = (x09 - x49 >> 14) + 128;
			out.b[po2] = x92 < 0 ? 0 : x92 > 255 ? 255 : x92;
			po2 += stride1;
			var x93 = (x310 - x210 >> 14) + 128;
			out.b[po2] = x93 < 0 ? 0 : x93 > 255 ? 255 : x93;
			po2 += stride1;
			var x94 = (x79 - x110 >> 14) + 128;
			out.b[po2] = x94 < 0 ? 0 : x94 > 255 ? 255 : x94;
		}
		var po3 = 2 + po;
		var stride2 = c.stride;
		var x010;
		var x810;
		var x111 = this.block[34] << 8;
		var x211 = this.block[50];
		var x311 = this.block[18];
		var x410 = this.block[10];
		var x510 = this.block[58];
		var x610 = this.block[42];
		var x710 = this.block[26];
		if((x111 | x211 | x311 | x410 | x510 | x610 | x710) == 0) {
			var x95 = (this.block[2] + 32 >> 6) + 128;
			x111 = x95 < 0 ? 0 : x95 > 255 ? 255 : x95;
			out.b[po3] = x111;
			po3 += stride2;
			out.b[po3] = x111;
			po3 += stride2;
			out.b[po3] = x111;
			po3 += stride2;
			out.b[po3] = x111;
			po3 += stride2;
			out.b[po3] = x111;
			po3 += stride2;
			out.b[po3] = x111;
			po3 += stride2;
			out.b[po3] = x111;
			po3 += stride2;
			out.b[po3] = x111;
			po3 += stride2;
		} else {
			x010 = (this.block[2] << 8) + 8192;
			x810 = 565 * (x410 + x510) + 4;
			x410 = x810 + 2276 * x410 >> 3;
			x510 = x810 - 3406 * x510 >> 3;
			x810 = 2408 * (x610 + x710) + 4;
			x610 = x810 - 799 * x610 >> 3;
			x710 = x810 - 4017 * x710 >> 3;
			x810 = x010 + x111;
			x010 -= x111;
			x111 = 1108 * (x311 + x211) + 4;
			x211 = x111 - 3784 * x211 >> 3;
			x311 = x111 + 1568 * x311 >> 3;
			x111 = x410 + x610;
			x410 -= x610;
			x610 = x510 + x710;
			x510 -= x710;
			x710 = x810 + x311;
			x810 -= x311;
			x311 = x010 + x211;
			x010 -= x211;
			x211 = 181 * (x410 + x510) + 128 >> 8;
			x410 = 181 * (x410 - x510) + 128 >> 8;
			var x96 = (x710 + x111 >> 14) + 128;
			out.b[po3] = x96 < 0 ? 0 : x96 > 255 ? 255 : x96;
			po3 += stride2;
			var x97 = (x311 + x211 >> 14) + 128;
			out.b[po3] = x97 < 0 ? 0 : x97 > 255 ? 255 : x97;
			po3 += stride2;
			var x98 = (x010 + x410 >> 14) + 128;
			out.b[po3] = x98 < 0 ? 0 : x98 > 255 ? 255 : x98;
			po3 += stride2;
			var x99 = (x810 + x610 >> 14) + 128;
			out.b[po3] = x99 < 0 ? 0 : x99 > 255 ? 255 : x99;
			po3 += stride2;
			var x100 = (x810 - x610 >> 14) + 128;
			out.b[po3] = x100 < 0 ? 0 : x100 > 255 ? 255 : x100;
			po3 += stride2;
			var x101 = (x010 - x410 >> 14) + 128;
			out.b[po3] = x101 < 0 ? 0 : x101 > 255 ? 255 : x101;
			po3 += stride2;
			var x102 = (x311 - x211 >> 14) + 128;
			out.b[po3] = x102 < 0 ? 0 : x102 > 255 ? 255 : x102;
			po3 += stride2;
			var x103 = (x710 - x111 >> 14) + 128;
			out.b[po3] = x103 < 0 ? 0 : x103 > 255 ? 255 : x103;
		}
		var po4 = 3 + po;
		var stride3 = c.stride;
		var x011;
		var x811;
		var x112 = this.block[35] << 8;
		var x212 = this.block[51];
		var x312 = this.block[19];
		var x411 = this.block[11];
		var x511 = this.block[59];
		var x611 = this.block[43];
		var x711 = this.block[27];
		if((x112 | x212 | x312 | x411 | x511 | x611 | x711) == 0) {
			var x104 = (this.block[3] + 32 >> 6) + 128;
			x112 = x104 < 0 ? 0 : x104 > 255 ? 255 : x104;
			out.b[po4] = x112;
			po4 += stride3;
			out.b[po4] = x112;
			po4 += stride3;
			out.b[po4] = x112;
			po4 += stride3;
			out.b[po4] = x112;
			po4 += stride3;
			out.b[po4] = x112;
			po4 += stride3;
			out.b[po4] = x112;
			po4 += stride3;
			out.b[po4] = x112;
			po4 += stride3;
			out.b[po4] = x112;
			po4 += stride3;
		} else {
			x011 = (this.block[3] << 8) + 8192;
			x811 = 565 * (x411 + x511) + 4;
			x411 = x811 + 2276 * x411 >> 3;
			x511 = x811 - 3406 * x511 >> 3;
			x811 = 2408 * (x611 + x711) + 4;
			x611 = x811 - 799 * x611 >> 3;
			x711 = x811 - 4017 * x711 >> 3;
			x811 = x011 + x112;
			x011 -= x112;
			x112 = 1108 * (x312 + x212) + 4;
			x212 = x112 - 3784 * x212 >> 3;
			x312 = x112 + 1568 * x312 >> 3;
			x112 = x411 + x611;
			x411 -= x611;
			x611 = x511 + x711;
			x511 -= x711;
			x711 = x811 + x312;
			x811 -= x312;
			x312 = x011 + x212;
			x011 -= x212;
			x212 = 181 * (x411 + x511) + 128 >> 8;
			x411 = 181 * (x411 - x511) + 128 >> 8;
			var x105 = (x711 + x112 >> 14) + 128;
			out.b[po4] = x105 < 0 ? 0 : x105 > 255 ? 255 : x105;
			po4 += stride3;
			var x106 = (x312 + x212 >> 14) + 128;
			out.b[po4] = x106 < 0 ? 0 : x106 > 255 ? 255 : x106;
			po4 += stride3;
			var x107 = (x011 + x411 >> 14) + 128;
			out.b[po4] = x107 < 0 ? 0 : x107 > 255 ? 255 : x107;
			po4 += stride3;
			var x108 = (x811 + x611 >> 14) + 128;
			out.b[po4] = x108 < 0 ? 0 : x108 > 255 ? 255 : x108;
			po4 += stride3;
			var x109 = (x811 - x611 >> 14) + 128;
			out.b[po4] = x109 < 0 ? 0 : x109 > 255 ? 255 : x109;
			po4 += stride3;
			var x113 = (x011 - x411 >> 14) + 128;
			out.b[po4] = x113 < 0 ? 0 : x113 > 255 ? 255 : x113;
			po4 += stride3;
			var x114 = (x312 - x212 >> 14) + 128;
			out.b[po4] = x114 < 0 ? 0 : x114 > 255 ? 255 : x114;
			po4 += stride3;
			var x115 = (x711 - x112 >> 14) + 128;
			out.b[po4] = x115 < 0 ? 0 : x115 > 255 ? 255 : x115;
		}
		var po5 = 4 + po;
		var stride4 = c.stride;
		var x012;
		var x812;
		var x116 = this.block[36] << 8;
		var x213 = this.block[52];
		var x313 = this.block[20];
		var x412 = this.block[12];
		var x512 = this.block[60];
		var x612 = this.block[44];
		var x712 = this.block[28];
		if((x116 | x213 | x313 | x412 | x512 | x612 | x712) == 0) {
			var x117 = (this.block[4] + 32 >> 6) + 128;
			x116 = x117 < 0 ? 0 : x117 > 255 ? 255 : x117;
			out.b[po5] = x116;
			po5 += stride4;
			out.b[po5] = x116;
			po5 += stride4;
			out.b[po5] = x116;
			po5 += stride4;
			out.b[po5] = x116;
			po5 += stride4;
			out.b[po5] = x116;
			po5 += stride4;
			out.b[po5] = x116;
			po5 += stride4;
			out.b[po5] = x116;
			po5 += stride4;
			out.b[po5] = x116;
			po5 += stride4;
		} else {
			x012 = (this.block[4] << 8) + 8192;
			x812 = 565 * (x412 + x512) + 4;
			x412 = x812 + 2276 * x412 >> 3;
			x512 = x812 - 3406 * x512 >> 3;
			x812 = 2408 * (x612 + x712) + 4;
			x612 = x812 - 799 * x612 >> 3;
			x712 = x812 - 4017 * x712 >> 3;
			x812 = x012 + x116;
			x012 -= x116;
			x116 = 1108 * (x313 + x213) + 4;
			x213 = x116 - 3784 * x213 >> 3;
			x313 = x116 + 1568 * x313 >> 3;
			x116 = x412 + x612;
			x412 -= x612;
			x612 = x512 + x712;
			x512 -= x712;
			x712 = x812 + x313;
			x812 -= x313;
			x313 = x012 + x213;
			x012 -= x213;
			x213 = 181 * (x412 + x512) + 128 >> 8;
			x412 = 181 * (x412 - x512) + 128 >> 8;
			var x118 = (x712 + x116 >> 14) + 128;
			out.b[po5] = x118 < 0 ? 0 : x118 > 255 ? 255 : x118;
			po5 += stride4;
			var x119 = (x313 + x213 >> 14) + 128;
			out.b[po5] = x119 < 0 ? 0 : x119 > 255 ? 255 : x119;
			po5 += stride4;
			var x120 = (x012 + x412 >> 14) + 128;
			out.b[po5] = x120 < 0 ? 0 : x120 > 255 ? 255 : x120;
			po5 += stride4;
			var x121 = (x812 + x612 >> 14) + 128;
			out.b[po5] = x121 < 0 ? 0 : x121 > 255 ? 255 : x121;
			po5 += stride4;
			var x122 = (x812 - x612 >> 14) + 128;
			out.b[po5] = x122 < 0 ? 0 : x122 > 255 ? 255 : x122;
			po5 += stride4;
			var x123 = (x012 - x412 >> 14) + 128;
			out.b[po5] = x123 < 0 ? 0 : x123 > 255 ? 255 : x123;
			po5 += stride4;
			var x124 = (x313 - x213 >> 14) + 128;
			out.b[po5] = x124 < 0 ? 0 : x124 > 255 ? 255 : x124;
			po5 += stride4;
			var x125 = (x712 - x116 >> 14) + 128;
			out.b[po5] = x125 < 0 ? 0 : x125 > 255 ? 255 : x125;
		}
		var po6 = 5 + po;
		var stride5 = c.stride;
		var x013;
		var x813;
		var x126 = this.block[37] << 8;
		var x214 = this.block[53];
		var x314 = this.block[21];
		var x413 = this.block[13];
		var x513 = this.block[61];
		var x613 = this.block[45];
		var x713 = this.block[29];
		if((x126 | x214 | x314 | x413 | x513 | x613 | x713) == 0) {
			var x127 = (this.block[5] + 32 >> 6) + 128;
			x126 = x127 < 0 ? 0 : x127 > 255 ? 255 : x127;
			out.b[po6] = x126;
			po6 += stride5;
			out.b[po6] = x126;
			po6 += stride5;
			out.b[po6] = x126;
			po6 += stride5;
			out.b[po6] = x126;
			po6 += stride5;
			out.b[po6] = x126;
			po6 += stride5;
			out.b[po6] = x126;
			po6 += stride5;
			out.b[po6] = x126;
			po6 += stride5;
			out.b[po6] = x126;
			po6 += stride5;
		} else {
			x013 = (this.block[5] << 8) + 8192;
			x813 = 565 * (x413 + x513) + 4;
			x413 = x813 + 2276 * x413 >> 3;
			x513 = x813 - 3406 * x513 >> 3;
			x813 = 2408 * (x613 + x713) + 4;
			x613 = x813 - 799 * x613 >> 3;
			x713 = x813 - 4017 * x713 >> 3;
			x813 = x013 + x126;
			x013 -= x126;
			x126 = 1108 * (x314 + x214) + 4;
			x214 = x126 - 3784 * x214 >> 3;
			x314 = x126 + 1568 * x314 >> 3;
			x126 = x413 + x613;
			x413 -= x613;
			x613 = x513 + x713;
			x513 -= x713;
			x713 = x813 + x314;
			x813 -= x314;
			x314 = x013 + x214;
			x013 -= x214;
			x214 = 181 * (x413 + x513) + 128 >> 8;
			x413 = 181 * (x413 - x513) + 128 >> 8;
			var x128 = (x713 + x126 >> 14) + 128;
			out.b[po6] = x128 < 0 ? 0 : x128 > 255 ? 255 : x128;
			po6 += stride5;
			var x129 = (x314 + x214 >> 14) + 128;
			out.b[po6] = x129 < 0 ? 0 : x129 > 255 ? 255 : x129;
			po6 += stride5;
			var x130 = (x013 + x413 >> 14) + 128;
			out.b[po6] = x130 < 0 ? 0 : x130 > 255 ? 255 : x130;
			po6 += stride5;
			var x131 = (x813 + x613 >> 14) + 128;
			out.b[po6] = x131 < 0 ? 0 : x131 > 255 ? 255 : x131;
			po6 += stride5;
			var x132 = (x813 - x613 >> 14) + 128;
			out.b[po6] = x132 < 0 ? 0 : x132 > 255 ? 255 : x132;
			po6 += stride5;
			var x133 = (x013 - x413 >> 14) + 128;
			out.b[po6] = x133 < 0 ? 0 : x133 > 255 ? 255 : x133;
			po6 += stride5;
			var x134 = (x314 - x214 >> 14) + 128;
			out.b[po6] = x134 < 0 ? 0 : x134 > 255 ? 255 : x134;
			po6 += stride5;
			var x135 = (x713 - x126 >> 14) + 128;
			out.b[po6] = x135 < 0 ? 0 : x135 > 255 ? 255 : x135;
		}
		var po7 = 6 + po;
		var stride6 = c.stride;
		var x014;
		var x814;
		var x136 = this.block[38] << 8;
		var x215 = this.block[54];
		var x315 = this.block[22];
		var x414 = this.block[14];
		var x514 = this.block[62];
		var x614 = this.block[46];
		var x714 = this.block[30];
		if((x136 | x215 | x315 | x414 | x514 | x614 | x714) == 0) {
			var x137 = (this.block[6] + 32 >> 6) + 128;
			x136 = x137 < 0 ? 0 : x137 > 255 ? 255 : x137;
			out.b[po7] = x136;
			po7 += stride6;
			out.b[po7] = x136;
			po7 += stride6;
			out.b[po7] = x136;
			po7 += stride6;
			out.b[po7] = x136;
			po7 += stride6;
			out.b[po7] = x136;
			po7 += stride6;
			out.b[po7] = x136;
			po7 += stride6;
			out.b[po7] = x136;
			po7 += stride6;
			out.b[po7] = x136;
			po7 += stride6;
		} else {
			x014 = (this.block[6] << 8) + 8192;
			x814 = 565 * (x414 + x514) + 4;
			x414 = x814 + 2276 * x414 >> 3;
			x514 = x814 - 3406 * x514 >> 3;
			x814 = 2408 * (x614 + x714) + 4;
			x614 = x814 - 799 * x614 >> 3;
			x714 = x814 - 4017 * x714 >> 3;
			x814 = x014 + x136;
			x014 -= x136;
			x136 = 1108 * (x315 + x215) + 4;
			x215 = x136 - 3784 * x215 >> 3;
			x315 = x136 + 1568 * x315 >> 3;
			x136 = x414 + x614;
			x414 -= x614;
			x614 = x514 + x714;
			x514 -= x714;
			x714 = x814 + x315;
			x814 -= x315;
			x315 = x014 + x215;
			x014 -= x215;
			x215 = 181 * (x414 + x514) + 128 >> 8;
			x414 = 181 * (x414 - x514) + 128 >> 8;
			var x138 = (x714 + x136 >> 14) + 128;
			out.b[po7] = x138 < 0 ? 0 : x138 > 255 ? 255 : x138;
			po7 += stride6;
			var x139 = (x315 + x215 >> 14) + 128;
			out.b[po7] = x139 < 0 ? 0 : x139 > 255 ? 255 : x139;
			po7 += stride6;
			var x140 = (x014 + x414 >> 14) + 128;
			out.b[po7] = x140 < 0 ? 0 : x140 > 255 ? 255 : x140;
			po7 += stride6;
			var x141 = (x814 + x614 >> 14) + 128;
			out.b[po7] = x141 < 0 ? 0 : x141 > 255 ? 255 : x141;
			po7 += stride6;
			var x142 = (x814 - x614 >> 14) + 128;
			out.b[po7] = x142 < 0 ? 0 : x142 > 255 ? 255 : x142;
			po7 += stride6;
			var x143 = (x014 - x414 >> 14) + 128;
			out.b[po7] = x143 < 0 ? 0 : x143 > 255 ? 255 : x143;
			po7 += stride6;
			var x144 = (x315 - x215 >> 14) + 128;
			out.b[po7] = x144 < 0 ? 0 : x144 > 255 ? 255 : x144;
			po7 += stride6;
			var x145 = (x714 - x136 >> 14) + 128;
			out.b[po7] = x145 < 0 ? 0 : x145 > 255 ? 255 : x145;
		}
		var po8 = 7 + po;
		var stride7 = c.stride;
		var x015;
		var x815;
		var x146 = this.block[39] << 8;
		var x216 = this.block[55];
		var x316 = this.block[23];
		var x415 = this.block[15];
		var x515 = this.block[63];
		var x615 = this.block[47];
		var x715 = this.block[31];
		if((x146 | x216 | x316 | x415 | x515 | x615 | x715) == 0) {
			var x147 = (this.block[7] + 32 >> 6) + 128;
			x146 = x147 < 0 ? 0 : x147 > 255 ? 255 : x147;
			out.b[po8] = x146;
			po8 += stride7;
			out.b[po8] = x146;
			po8 += stride7;
			out.b[po8] = x146;
			po8 += stride7;
			out.b[po8] = x146;
			po8 += stride7;
			out.b[po8] = x146;
			po8 += stride7;
			out.b[po8] = x146;
			po8 += stride7;
			out.b[po8] = x146;
			po8 += stride7;
			out.b[po8] = x146;
			po8 += stride7;
		} else {
			x015 = (this.block[7] << 8) + 8192;
			x815 = 565 * (x415 + x515) + 4;
			x415 = x815 + 2276 * x415 >> 3;
			x515 = x815 - 3406 * x515 >> 3;
			x815 = 2408 * (x615 + x715) + 4;
			x615 = x815 - 799 * x615 >> 3;
			x715 = x815 - 4017 * x715 >> 3;
			x815 = x015 + x146;
			x015 -= x146;
			x146 = 1108 * (x316 + x216) + 4;
			x216 = x146 - 3784 * x216 >> 3;
			x316 = x146 + 1568 * x316 >> 3;
			x146 = x415 + x615;
			x415 -= x615;
			x615 = x515 + x715;
			x515 -= x715;
			x715 = x815 + x316;
			x815 -= x316;
			x316 = x015 + x216;
			x015 -= x216;
			x216 = 181 * (x415 + x515) + 128 >> 8;
			x415 = 181 * (x415 - x515) + 128 >> 8;
			var x148 = (x715 + x146 >> 14) + 128;
			out.b[po8] = x148 < 0 ? 0 : x148 > 255 ? 255 : x148;
			po8 += stride7;
			var x149 = (x316 + x216 >> 14) + 128;
			out.b[po8] = x149 < 0 ? 0 : x149 > 255 ? 255 : x149;
			po8 += stride7;
			var x150 = (x015 + x415 >> 14) + 128;
			out.b[po8] = x150 < 0 ? 0 : x150 > 255 ? 255 : x150;
			po8 += stride7;
			var x151 = (x815 + x615 >> 14) + 128;
			out.b[po8] = x151 < 0 ? 0 : x151 > 255 ? 255 : x151;
			po8 += stride7;
			var x152 = (x815 - x615 >> 14) + 128;
			out.b[po8] = x152 < 0 ? 0 : x152 > 255 ? 255 : x152;
			po8 += stride7;
			var x153 = (x015 - x415 >> 14) + 128;
			out.b[po8] = x153 < 0 ? 0 : x153 > 255 ? 255 : x153;
			po8 += stride7;
			var x154 = (x316 - x216 >> 14) + 128;
			out.b[po8] = x154 < 0 ? 0 : x154 > 255 ? 255 : x154;
			po8 += stride7;
			var x155 = (x715 - x146 >> 14) + 128;
			out.b[po8] = x155 < 0 ? 0 : x155 > 255 ? 255 : x155;
		}
	}
	,notSupported: function() {
		throw new js__$Boot_HaxeError("This JPG file is not supported");
	}
	,njDecodeScan: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.bytes.b[this.pos] != this.ncomp) {
			this.notSupported();
		}
		this.pos += 1;
		this.size -= 1;
		this.length -= 1;
		var _g = 0;
		var _g1 = this.ncomp;
		while(_g < _g1) {
			var i = _g++;
			var c = this.comps[i];
			c.dctabsel = this.bytes.b[this.pos + 1] >> 4 << 1;
			c.actabsel = (this.bytes.b[this.pos + 1] & 3) << 1 | 1;
			this.pos += 2;
			this.size -= 2;
			this.length -= 2;
		}
		var start = this.bytes.b[this.pos];
		var count = this.bytes.b[this.pos + 1];
		var other = this.bytes.b[this.pos + 2];
		if(!this.progressive && start != 0 || count != 63 - start || other != 0) {
			this.notSupported();
		}
		var count1 = this.length;
		this.pos += count1;
		this.size -= count1;
		this.length -= count1;
		var mbx = 0;
		var mby = 0;
		var rstcount = this.rstinterval;
		var nextrst = 0;
		while(true) {
			var _g2 = 0;
			var _g3 = this.ncomp;
			while(_g2 < _g3) {
				var i1 = _g2++;
				var c1 = this.comps[i1];
				var _g21 = 0;
				var _g31 = c1.ssy;
				while(_g21 < _g31) {
					var sby = _g21++;
					var _g22 = 0;
					var _g32 = c1.ssx;
					while(_g22 < _g32) {
						var sbx = _g22++;
						this.njDecodeBlock(c1,(mby * c1.ssy + sby) * c1.stride + mbx * c1.ssx + sbx << 3);
					}
				}
			}
			if(++mbx >= this.mbwidth) {
				mbx = 0;
				if(++mby >= this.mbheight) {
					break;
				}
			}
			if(this.rstinterval != 0 && --rstcount == 0) {
				this.bufbits &= 248;
				var r = this.njShowBits(16);
				this.bufbits -= 16;
				var i2 = r;
				nextrst = nextrst + 1 & 7;
				rstcount = this.rstinterval;
				this.comps[0].dcpred = 0;
				this.comps[1].dcpred = 0;
				this.comps[2].dcpred = 0;
			}
		}
	}
	,njUpsampleH: function(c) {
		var xmax = c.width - 3;
		var cout = new haxe_io_Bytes(new ArrayBuffer(c.width * c.height << 1));
		var this1 = cout;
		var lout = this1;
		var this2 = c.pixels;
		var lin = this2;
		var pi = 0;
		var po = 0;
		var _g = 0;
		var _g1 = c.height;
		while(_g < _g1) {
			var y = _g++;
			var x = 139 * lin.b[pi] + -11 * lin.b[pi + 1] + 64 >> 7;
			lout.b[po] = x < 0 ? 0 : x > 255 ? 255 : x;
			var x1 = 104 * lin.b[pi] + 27 * lin.b[pi + 1] + -3 * lin.b[pi + 2] + 64 >> 7;
			lout.b[po + 1] = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
			var x2 = 28 * lin.b[pi] + 109 * lin.b[pi + 1] + -9 * lin.b[pi + 2] + 64 >> 7;
			lout.b[po + 2] = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
			var _g2 = 0;
			var _g11 = xmax;
			while(_g2 < _g11) {
				var x3 = _g2++;
				var x4 = -9 * lin.b[pi + x3] + 111 * lin.b[pi + x3 + 1] + 29 * lin.b[pi + x3 + 2] + -3 * lin.b[pi + x3 + 3] + 64 >> 7;
				lout.b[po + (x3 << 1) + 3] = x4 < 0 ? 0 : x4 > 255 ? 255 : x4;
				var x5 = -3 * lin.b[pi + x3] + 29 * lin.b[pi + x3 + 1] + 111 * lin.b[pi + x3 + 2] + -9 * lin.b[pi + x3 + 3] + 64 >> 7;
				lout.b[po + (x3 << 1) + 4] = x5 < 0 ? 0 : x5 > 255 ? 255 : x5;
			}
			pi += c.stride;
			po += c.width << 1;
			var x6 = 28 * lin.b[pi - 1] + 109 * lin.b[pi - 2] + -9 * lin.b[pi - 3] + 64 >> 7;
			lout.b[po - 3] = x6 < 0 ? 0 : x6 > 255 ? 255 : x6;
			var x7 = 104 * lin.b[pi - 1] + 27 * lin.b[pi - 2] + -3 * lin.b[pi - 3] + 64 >> 7;
			lout.b[po - 2] = x7 < 0 ? 0 : x7 > 255 ? 255 : x7;
			var x8 = 139 * lin.b[pi - 1] + -11 * lin.b[pi - 2] + 64 >> 7;
			lout.b[po - 1] = x8 < 0 ? 0 : x8 > 255 ? 255 : x8;
		}
		c.width <<= 1;
		c.stride = c.width;
		c.pixels = cout;
	}
	,njUpsampleV: function(c) {
		var w = c.width;
		var s1 = c.stride;
		var s2 = s1 + s1;
		var out = new haxe_io_Bytes(new ArrayBuffer(c.width * c.height << 1));
		var pi = 0;
		var po = 0;
		var this1 = out;
		var cout = this1;
		var this2 = c.pixels;
		var cin = this2;
		var _g = 0;
		var _g1 = w;
		while(_g < _g1) {
			var x = _g++;
			po = x;
			pi = po;
			var x1 = 139 * cin.b[pi] + -11 * cin.b[pi + s1] + 64 >> 7;
			cout.b[po] = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
			po += w;
			var x2 = 104 * cin.b[pi] + 27 * cin.b[pi + s1] + -3 * cin.b[pi + s2] + 64 >> 7;
			cout.b[po] = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
			po += w;
			var x3 = 28 * cin.b[pi] + 109 * cin.b[pi + s1] + -9 * cin.b[pi + s2] + 64 >> 7;
			cout.b[po] = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
			po += w;
			pi += s1;
			var _g2 = 0;
			var _g11 = c.height - 2;
			while(_g2 < _g11) {
				var y = _g2++;
				var x4 = -9 * cin.b[pi - s1] + 111 * cin.b[pi] + 29 * cin.b[pi + s1] + -3 * cin.b[pi + s2] + 64 >> 7;
				cout.b[po] = x4 < 0 ? 0 : x4 > 255 ? 255 : x4;
				po += w;
				var x5 = -3 * cin.b[pi - s1] + 29 * cin.b[pi] + 111 * cin.b[pi + s1] + -9 * cin.b[pi + s2] + 64 >> 7;
				cout.b[po] = x5 < 0 ? 0 : x5 > 255 ? 255 : x5;
				po += w;
				pi += s1;
			}
			pi += s1;
			var x6 = 28 * cin.b[pi] + 109 * cin.b[pi - s1] + -9 * cin.b[pi - s2] + 64 >> 7;
			cout.b[po] = x6 < 0 ? 0 : x6 > 255 ? 255 : x6;
			po += w;
			var x7 = 104 * cin.b[pi] + 27 * cin.b[pi - s1] + -3 * cin.b[pi - s2] + 64 >> 7;
			cout.b[po] = x7 < 0 ? 0 : x7 > 255 ? 255 : x7;
			po += w;
			var x8 = 139 * cin.b[pi] + -11 * cin.b[pi - s1] + 64 >> 7;
			cout.b[po] = x8 < 0 ? 0 : x8 > 255 ? 255 : x8;
		}
		c.height <<= 1;
		c.stride = c.width;
		c.pixels = out;
	}
	,njUpsample: function(c) {
		var xshift = 0;
		var yshift = 0;
		while(c.width < this.width) {
			c.width <<= 1;
			++xshift;
		}
		while(c.height < this.height) {
			c.height <<= 1;
			++yshift;
		}
		var out = new haxe_io_Bytes(new ArrayBuffer(c.width * c.height));
		var this1 = c.pixels;
		var lin = this1;
		var pout = 0;
		var this2 = out;
		var lout = this2;
		var _g = 0;
		var _g1 = c.height;
		while(_g < _g1) {
			var y = _g++;
			var pin = (y >> yshift) * c.stride;
			var _g2 = 0;
			var _g11 = c.width;
			while(_g2 < _g11) {
				var x = _g2++;
				lout.b[pout++] = lin.b[(x >> xshift) + pin];
			}
		}
		c.stride = c.width;
		c.pixels = out;
	}
	,njConvert: function() {
		var _g = 0;
		var _g1 = this.ncomp;
		while(_g < _g1) {
			var i = _g++;
			var c = this.comps[i];
			switch(this.filter._hx_index) {
			case 0:
				if(c.width < this.width || c.height < this.height) {
					this.njUpsample(c);
				}
				break;
			case 1:
				while(c.width < this.width || c.height < this.height) {
					if(c.width < this.width) {
						this.njUpsampleH(c);
					}
					if(c.height < this.height) {
						this.njUpsampleV(c);
					}
				}
				break;
			}
			if(c.width < this.width || c.height < this.height) {
				throw new js__$Boot_HaxeError("assert");
			}
		}
		var pixels = new haxe_io_Bytes(new ArrayBuffer(this.width * this.height * 4));
		if(this.ncomp == 3) {
			var this1 = this.comps[0].pixels;
			var py = this1;
			var this2 = this.comps[1].pixels;
			var pcb = this2;
			var this3 = this.comps[2].pixels;
			var pcr = this3;
			var this4 = pixels;
			var pix = this4;
			var k1 = 0;
			var k2 = 0;
			var k3 = 0;
			var out = 0;
			var _g2 = 0;
			var _g3 = this.height;
			while(_g2 < _g3) {
				var yy = _g2++;
				var _g21 = 0;
				var _g31 = this.width;
				while(_g21 < _g31) {
					var x = _g21++;
					var y = py.b[k1++] << 8;
					var cb = pcb.b[k2++] - 128;
					var cr = pcr.b[k3++] - 128;
					var x1 = y + 359 * cr + 128 >> 8;
					var r = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
					var x2 = y - 88 * cb - 183 * cr + 128 >> 8;
					var g = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
					var x3 = y + 454 * cb + 128 >> 8;
					var b = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
					pix.b[out++] = b;
					pix.b[out++] = g;
					pix.b[out++] = r;
					pix.b[out++] = 255;
				}
				k1 += this.comps[0].stride - this.width;
				k2 += this.comps[1].stride - this.width;
				k3 += this.comps[2].stride - this.width;
			}
		} else {
			throw new js__$Boot_HaxeError("TODO");
		}
		return pixels;
	}
	,njDecode: function() {
		if(this.size < 2 || this.bytes.b[this.pos] != 255 || this.bytes.b[this.pos + 1] != 216) {
			throw new js__$Boot_HaxeError("This file is not a JPEG");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		_hx_loop1: while(true) {
			this.pos += 2;
			this.size -= 2;
			this.length -= 2;
			switch(this.bytes.b[this.pos + (-1)]) {
			case 192:
				this.njDecodeSOF();
				break;
			case 194:
				this.progressive = true;
				if(this.progressive) {
					throw new js__$Boot_HaxeError("Unsupported progressive JPG");
				}
				if(this.vlctab[4] == null) {
					this.vlctab[4] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[5] == null) {
					this.vlctab[5] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[6] == null) {
					this.vlctab[6] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[7] == null) {
					this.vlctab[7] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				this.njDecodeSOF();
				break;
			case 195:
				throw new js__$Boot_HaxeError("Unsupported lossless JPG");
			case 196:
				this.njDecodeDHT();
				break;
			case 218:
				this.njDecodeScan();
				break _hx_loop1;
			case 219:
				this.njDecodeDQT();
				break;
			case 221:
				this.njDecodeDRI();
				break;
			case 254:
				this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
				this.pos += 2;
				this.size -= 2;
				this.length -= 2;
				var count = this.length;
				this.pos += count;
				this.size -= count;
				this.length -= count;
				break;
			default:
				switch(this.bytes.b[this.pos + (-1)] & 240) {
				case 192:
					throw new js__$Boot_HaxeError("Unsupported jpeg type " + (this.bytes.b[this.pos + (-1)] & 15));
				case 224:
					this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
					this.pos += 2;
					this.size -= 2;
					this.length -= 2;
					var count1 = this.length;
					this.pos += count1;
					this.size -= count1;
					this.length -= count1;
					break;
				default:
					throw new js__$Boot_HaxeError("Unsupported jpeg tag 0x" + StringTools.hex(this.bytes.b[this.pos + (-1)],2));
				}
			}
		}
		var pixels = this.njConvert();
		this.cleanup();
		return { pixels : pixels, width : this.width, height : this.height};
	}
	,__class__: hxd_res_NanoJpeg
};
var hxsl_Type = $hxEnums["hxsl.Type"] = { __ename__ : true, __constructs__ : ["TVoid","TInt","TBool","TFloat","TString","TVec","TMat3","TMat4","TMat3x4","TBytes","TSampler2D","TSampler2DArray","TSamplerCube","TStruct","TFun","TArray","TBuffer","TChannel"]
	,TVoid: {_hx_index:0,__enum__:"hxsl.Type",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"hxsl.Type",toString:$estr}
	,TBool: {_hx_index:2,__enum__:"hxsl.Type",toString:$estr}
	,TFloat: {_hx_index:3,__enum__:"hxsl.Type",toString:$estr}
	,TString: {_hx_index:4,__enum__:"hxsl.Type",toString:$estr}
	,TVec: ($_=function(size,t) { return {_hx_index:5,size:size,t:t,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["size","t"],$_)
	,TMat3: {_hx_index:6,__enum__:"hxsl.Type",toString:$estr}
	,TMat4: {_hx_index:7,__enum__:"hxsl.Type",toString:$estr}
	,TMat3x4: {_hx_index:8,__enum__:"hxsl.Type",toString:$estr}
	,TBytes: ($_=function(size) { return {_hx_index:9,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["size"],$_)
	,TSampler2D: {_hx_index:10,__enum__:"hxsl.Type",toString:$estr}
	,TSampler2DArray: {_hx_index:11,__enum__:"hxsl.Type",toString:$estr}
	,TSamplerCube: {_hx_index:12,__enum__:"hxsl.Type",toString:$estr}
	,TStruct: ($_=function(vl) { return {_hx_index:13,vl:vl,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["vl"],$_)
	,TFun: ($_=function(variants) { return {_hx_index:14,variants:variants,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["variants"],$_)
	,TArray: ($_=function(t,size) { return {_hx_index:15,t:t,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["t","size"],$_)
	,TBuffer: ($_=function(t,size) { return {_hx_index:16,t:t,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["t","size"],$_)
	,TChannel: ($_=function(size) { return {_hx_index:17,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["size"],$_)
};
hxsl_Type.__empty_constructs__ = [hxsl_Type.TVoid,hxsl_Type.TInt,hxsl_Type.TBool,hxsl_Type.TFloat,hxsl_Type.TString,hxsl_Type.TMat3,hxsl_Type.TMat4,hxsl_Type.TMat3x4,hxsl_Type.TSampler2D,hxsl_Type.TSampler2DArray,hxsl_Type.TSamplerCube];
var hxsl_VecType = $hxEnums["hxsl.VecType"] = { __ename__ : true, __constructs__ : ["VInt","VFloat","VBool"]
	,VInt: {_hx_index:0,__enum__:"hxsl.VecType",toString:$estr}
	,VFloat: {_hx_index:1,__enum__:"hxsl.VecType",toString:$estr}
	,VBool: {_hx_index:2,__enum__:"hxsl.VecType",toString:$estr}
};
hxsl_VecType.__empty_constructs__ = [hxsl_VecType.VInt,hxsl_VecType.VFloat,hxsl_VecType.VBool];
var hxsl_SizeDecl = $hxEnums["hxsl.SizeDecl"] = { __ename__ : true, __constructs__ : ["SConst","SVar"]
	,SConst: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hxsl.SizeDecl",toString:$estr}; },$_.__params__ = ["v"],$_)
	,SVar: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hxsl.SizeDecl",toString:$estr}; },$_.__params__ = ["v"],$_)
};
hxsl_SizeDecl.__empty_constructs__ = [];
var hxsl_Error = function(msg,pos) {
	this.msg = msg;
	this.pos = pos;
};
$hxClasses["hxsl.Error"] = hxsl_Error;
hxsl_Error.__name__ = "hxsl.Error";
hxsl_Error.t = function(msg,pos) {
	throw new js__$Boot_HaxeError(new hxsl_Error(msg,pos));
};
hxsl_Error.prototype = {
	msg: null
	,pos: null
	,toString: function() {
		return "Error(" + this.msg + ")@" + Std.string(this.pos);
	}
	,__class__: hxsl_Error
};
var hxsl_VarKind = $hxEnums["hxsl.VarKind"] = { __ename__ : true, __constructs__ : ["Global","Input","Param","Var","Local","Output","Function"]
	,Global: {_hx_index:0,__enum__:"hxsl.VarKind",toString:$estr}
	,Input: {_hx_index:1,__enum__:"hxsl.VarKind",toString:$estr}
	,Param: {_hx_index:2,__enum__:"hxsl.VarKind",toString:$estr}
	,Var: {_hx_index:3,__enum__:"hxsl.VarKind",toString:$estr}
	,Local: {_hx_index:4,__enum__:"hxsl.VarKind",toString:$estr}
	,Output: {_hx_index:5,__enum__:"hxsl.VarKind",toString:$estr}
	,Function: {_hx_index:6,__enum__:"hxsl.VarKind",toString:$estr}
};
hxsl_VarKind.__empty_constructs__ = [hxsl_VarKind.Global,hxsl_VarKind.Input,hxsl_VarKind.Param,hxsl_VarKind.Var,hxsl_VarKind.Local,hxsl_VarKind.Output,hxsl_VarKind.Function];
var hxsl_VarQualifier = $hxEnums["hxsl.VarQualifier"] = { __ename__ : true, __constructs__ : ["Const","Private","Nullable","PerObject","Name","Shared","Precision","Range","Ignore","PerInstance"]
	,Const: ($_=function(max) { return {_hx_index:0,max:max,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["max"],$_)
	,Private: {_hx_index:1,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Nullable: {_hx_index:2,__enum__:"hxsl.VarQualifier",toString:$estr}
	,PerObject: {_hx_index:3,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Name: ($_=function(n) { return {_hx_index:4,n:n,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["n"],$_)
	,Shared: {_hx_index:5,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Precision: ($_=function(p) { return {_hx_index:6,p:p,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["p"],$_)
	,Range: ($_=function(min,max) { return {_hx_index:7,min:min,max:max,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["min","max"],$_)
	,Ignore: {_hx_index:8,__enum__:"hxsl.VarQualifier",toString:$estr}
	,PerInstance: ($_=function(v) { return {_hx_index:9,v:v,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["v"],$_)
};
hxsl_VarQualifier.__empty_constructs__ = [hxsl_VarQualifier.Private,hxsl_VarQualifier.Nullable,hxsl_VarQualifier.PerObject,hxsl_VarQualifier.Shared,hxsl_VarQualifier.Ignore];
var hxsl_Prec = $hxEnums["hxsl.Prec"] = { __ename__ : true, __constructs__ : ["Low","Medium","High"]
	,Low: {_hx_index:0,__enum__:"hxsl.Prec",toString:$estr}
	,Medium: {_hx_index:1,__enum__:"hxsl.Prec",toString:$estr}
	,High: {_hx_index:2,__enum__:"hxsl.Prec",toString:$estr}
};
hxsl_Prec.__empty_constructs__ = [hxsl_Prec.Low,hxsl_Prec.Medium,hxsl_Prec.High];
var hxsl_Const = $hxEnums["hxsl.Const"] = { __ename__ : true, __constructs__ : ["CNull","CBool","CInt","CFloat","CString"]
	,CNull: {_hx_index:0,__enum__:"hxsl.Const",toString:$estr}
	,CBool: ($_=function(b) { return {_hx_index:1,b:b,__enum__:"hxsl.Const",toString:$estr}; },$_.__params__ = ["b"],$_)
	,CInt: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"hxsl.Const",toString:$estr}; },$_.__params__ = ["v"],$_)
	,CFloat: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"hxsl.Const",toString:$estr}; },$_.__params__ = ["v"],$_)
	,CString: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"hxsl.Const",toString:$estr}; },$_.__params__ = ["v"],$_)
};
hxsl_Const.__empty_constructs__ = [hxsl_Const.CNull];
var hxsl_FunctionKind = $hxEnums["hxsl.FunctionKind"] = { __ename__ : true, __constructs__ : ["Vertex","Fragment","Init","Helper"]
	,Vertex: {_hx_index:0,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Fragment: {_hx_index:1,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Init: {_hx_index:2,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Helper: {_hx_index:3,__enum__:"hxsl.FunctionKind",toString:$estr}
};
hxsl_FunctionKind.__empty_constructs__ = [hxsl_FunctionKind.Vertex,hxsl_FunctionKind.Fragment,hxsl_FunctionKind.Init,hxsl_FunctionKind.Helper];
var hxsl_TGlobal = $hxEnums["hxsl.TGlobal"] = { __ename__ : true, __constructs__ : ["Radians","Degrees","Sin","Cos","Tan","Asin","Acos","Atan","Pow","Exp","Log","Exp2","Log2","Sqrt","Inversesqrt","Abs","Sign","Floor","Ceil","Fract","Mod","Min","Max","Clamp","Mix","Step","Smoothstep","Length","Distance","Dot","Cross","Normalize","LReflect","Texture","TextureLod","Texel","TexelLod","ToInt","ToFloat","ToBool","Vec2","Vec3","Vec4","IVec2","IVec3","IVec4","BVec2","BVec3","BVec4","Mat2","Mat3","Mat4","Mat3x4","Saturate","Pack","Unpack","PackNormal","UnpackNormal","ScreenToUv","UvToScreen","DFdx","DFdy","Fwidth","ChannelRead","ChannelReadLod","ChannelFetch","ChannelFetchLod","Trace","VertexID","InstanceID"]
	,Radians: {_hx_index:0,__enum__:"hxsl.TGlobal",toString:$estr}
	,Degrees: {_hx_index:1,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sin: {_hx_index:2,__enum__:"hxsl.TGlobal",toString:$estr}
	,Cos: {_hx_index:3,__enum__:"hxsl.TGlobal",toString:$estr}
	,Tan: {_hx_index:4,__enum__:"hxsl.TGlobal",toString:$estr}
	,Asin: {_hx_index:5,__enum__:"hxsl.TGlobal",toString:$estr}
	,Acos: {_hx_index:6,__enum__:"hxsl.TGlobal",toString:$estr}
	,Atan: {_hx_index:7,__enum__:"hxsl.TGlobal",toString:$estr}
	,Pow: {_hx_index:8,__enum__:"hxsl.TGlobal",toString:$estr}
	,Exp: {_hx_index:9,__enum__:"hxsl.TGlobal",toString:$estr}
	,Log: {_hx_index:10,__enum__:"hxsl.TGlobal",toString:$estr}
	,Exp2: {_hx_index:11,__enum__:"hxsl.TGlobal",toString:$estr}
	,Log2: {_hx_index:12,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sqrt: {_hx_index:13,__enum__:"hxsl.TGlobal",toString:$estr}
	,Inversesqrt: {_hx_index:14,__enum__:"hxsl.TGlobal",toString:$estr}
	,Abs: {_hx_index:15,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sign: {_hx_index:16,__enum__:"hxsl.TGlobal",toString:$estr}
	,Floor: {_hx_index:17,__enum__:"hxsl.TGlobal",toString:$estr}
	,Ceil: {_hx_index:18,__enum__:"hxsl.TGlobal",toString:$estr}
	,Fract: {_hx_index:19,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mod: {_hx_index:20,__enum__:"hxsl.TGlobal",toString:$estr}
	,Min: {_hx_index:21,__enum__:"hxsl.TGlobal",toString:$estr}
	,Max: {_hx_index:22,__enum__:"hxsl.TGlobal",toString:$estr}
	,Clamp: {_hx_index:23,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mix: {_hx_index:24,__enum__:"hxsl.TGlobal",toString:$estr}
	,Step: {_hx_index:25,__enum__:"hxsl.TGlobal",toString:$estr}
	,Smoothstep: {_hx_index:26,__enum__:"hxsl.TGlobal",toString:$estr}
	,Length: {_hx_index:27,__enum__:"hxsl.TGlobal",toString:$estr}
	,Distance: {_hx_index:28,__enum__:"hxsl.TGlobal",toString:$estr}
	,Dot: {_hx_index:29,__enum__:"hxsl.TGlobal",toString:$estr}
	,Cross: {_hx_index:30,__enum__:"hxsl.TGlobal",toString:$estr}
	,Normalize: {_hx_index:31,__enum__:"hxsl.TGlobal",toString:$estr}
	,LReflect: {_hx_index:32,__enum__:"hxsl.TGlobal",toString:$estr}
	,Texture: {_hx_index:33,__enum__:"hxsl.TGlobal",toString:$estr}
	,TextureLod: {_hx_index:34,__enum__:"hxsl.TGlobal",toString:$estr}
	,Texel: {_hx_index:35,__enum__:"hxsl.TGlobal",toString:$estr}
	,TexelLod: {_hx_index:36,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToInt: {_hx_index:37,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToFloat: {_hx_index:38,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToBool: {_hx_index:39,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec2: {_hx_index:40,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec3: {_hx_index:41,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec4: {_hx_index:42,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec2: {_hx_index:43,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec3: {_hx_index:44,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec4: {_hx_index:45,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec2: {_hx_index:46,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec3: {_hx_index:47,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec4: {_hx_index:48,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat2: {_hx_index:49,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat3: {_hx_index:50,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat4: {_hx_index:51,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat3x4: {_hx_index:52,__enum__:"hxsl.TGlobal",toString:$estr}
	,Saturate: {_hx_index:53,__enum__:"hxsl.TGlobal",toString:$estr}
	,Pack: {_hx_index:54,__enum__:"hxsl.TGlobal",toString:$estr}
	,Unpack: {_hx_index:55,__enum__:"hxsl.TGlobal",toString:$estr}
	,PackNormal: {_hx_index:56,__enum__:"hxsl.TGlobal",toString:$estr}
	,UnpackNormal: {_hx_index:57,__enum__:"hxsl.TGlobal",toString:$estr}
	,ScreenToUv: {_hx_index:58,__enum__:"hxsl.TGlobal",toString:$estr}
	,UvToScreen: {_hx_index:59,__enum__:"hxsl.TGlobal",toString:$estr}
	,DFdx: {_hx_index:60,__enum__:"hxsl.TGlobal",toString:$estr}
	,DFdy: {_hx_index:61,__enum__:"hxsl.TGlobal",toString:$estr}
	,Fwidth: {_hx_index:62,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelRead: {_hx_index:63,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelReadLod: {_hx_index:64,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelFetch: {_hx_index:65,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelFetchLod: {_hx_index:66,__enum__:"hxsl.TGlobal",toString:$estr}
	,Trace: {_hx_index:67,__enum__:"hxsl.TGlobal",toString:$estr}
	,VertexID: {_hx_index:68,__enum__:"hxsl.TGlobal",toString:$estr}
	,InstanceID: {_hx_index:69,__enum__:"hxsl.TGlobal",toString:$estr}
};
hxsl_TGlobal.__empty_constructs__ = [hxsl_TGlobal.Radians,hxsl_TGlobal.Degrees,hxsl_TGlobal.Sin,hxsl_TGlobal.Cos,hxsl_TGlobal.Tan,hxsl_TGlobal.Asin,hxsl_TGlobal.Acos,hxsl_TGlobal.Atan,hxsl_TGlobal.Pow,hxsl_TGlobal.Exp,hxsl_TGlobal.Log,hxsl_TGlobal.Exp2,hxsl_TGlobal.Log2,hxsl_TGlobal.Sqrt,hxsl_TGlobal.Inversesqrt,hxsl_TGlobal.Abs,hxsl_TGlobal.Sign,hxsl_TGlobal.Floor,hxsl_TGlobal.Ceil,hxsl_TGlobal.Fract,hxsl_TGlobal.Mod,hxsl_TGlobal.Min,hxsl_TGlobal.Max,hxsl_TGlobal.Clamp,hxsl_TGlobal.Mix,hxsl_TGlobal.Step,hxsl_TGlobal.Smoothstep,hxsl_TGlobal.Length,hxsl_TGlobal.Distance,hxsl_TGlobal.Dot,hxsl_TGlobal.Cross,hxsl_TGlobal.Normalize,hxsl_TGlobal.LReflect,hxsl_TGlobal.Texture,hxsl_TGlobal.TextureLod,hxsl_TGlobal.Texel,hxsl_TGlobal.TexelLod,hxsl_TGlobal.ToInt,hxsl_TGlobal.ToFloat,hxsl_TGlobal.ToBool,hxsl_TGlobal.Vec2,hxsl_TGlobal.Vec3,hxsl_TGlobal.Vec4,hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4,hxsl_TGlobal.BVec2,hxsl_TGlobal.BVec3,hxsl_TGlobal.BVec4,hxsl_TGlobal.Mat2,hxsl_TGlobal.Mat3,hxsl_TGlobal.Mat4,hxsl_TGlobal.Mat3x4,hxsl_TGlobal.Saturate,hxsl_TGlobal.Pack,hxsl_TGlobal.Unpack,hxsl_TGlobal.PackNormal,hxsl_TGlobal.UnpackNormal,hxsl_TGlobal.ScreenToUv,hxsl_TGlobal.UvToScreen,hxsl_TGlobal.DFdx,hxsl_TGlobal.DFdy,hxsl_TGlobal.Fwidth,hxsl_TGlobal.ChannelRead,hxsl_TGlobal.ChannelReadLod,hxsl_TGlobal.ChannelFetch,hxsl_TGlobal.ChannelFetchLod,hxsl_TGlobal.Trace,hxsl_TGlobal.VertexID,hxsl_TGlobal.InstanceID];
var hxsl_Component = $hxEnums["hxsl.Component"] = { __ename__ : true, __constructs__ : ["X","Y","Z","W"]
	,X: {_hx_index:0,__enum__:"hxsl.Component",toString:$estr}
	,Y: {_hx_index:1,__enum__:"hxsl.Component",toString:$estr}
	,Z: {_hx_index:2,__enum__:"hxsl.Component",toString:$estr}
	,W: {_hx_index:3,__enum__:"hxsl.Component",toString:$estr}
};
hxsl_Component.__empty_constructs__ = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
var hxsl_TExprDef = $hxEnums["hxsl.TExprDef"] = { __ename__ : true, __constructs__ : ["TConst","TVar","TGlobal","TParenthesis","TBlock","TBinop","TUnop","TVarDecl","TCall","TSwiz","TIf","TDiscard","TReturn","TFor","TContinue","TBreak","TArray","TArrayDecl","TSwitch","TWhile","TMeta"]
	,TConst: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TVar: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["v"],$_)
	,TGlobal: ($_=function(g) { return {_hx_index:2,g:g,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["g"],$_)
	,TParenthesis: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TBlock: ($_=function(el) { return {_hx_index:4,el:el,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["el"],$_)
	,TBinop: ($_=function(op,e1,e2) { return {_hx_index:5,op:op,e1:e1,e2:e2,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["op","e1","e2"],$_)
	,TUnop: ($_=function(op,e1) { return {_hx_index:6,op:op,e1:e1,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["op","e1"],$_)
	,TVarDecl: ($_=function(v,init) { return {_hx_index:7,v:v,init:init,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["v","init"],$_)
	,TCall: ($_=function(e,args) { return {_hx_index:8,e:e,args:args,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","args"],$_)
	,TSwiz: ($_=function(e,regs) { return {_hx_index:9,e:e,regs:regs,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","regs"],$_)
	,TIf: ($_=function(econd,eif,eelse) { return {_hx_index:10,econd:econd,eif:eif,eelse:eelse,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["econd","eif","eelse"],$_)
	,TDiscard: {_hx_index:11,__enum__:"hxsl.TExprDef",toString:$estr}
	,TReturn: ($_=function(e) { return {_hx_index:12,e:e,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TFor: ($_=function(v,it,loop) { return {_hx_index:13,v:v,it:it,loop:loop,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["v","it","loop"],$_)
	,TContinue: {_hx_index:14,__enum__:"hxsl.TExprDef",toString:$estr}
	,TBreak: {_hx_index:15,__enum__:"hxsl.TExprDef",toString:$estr}
	,TArray: ($_=function(e,index) { return {_hx_index:16,e:e,index:index,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","index"],$_)
	,TArrayDecl: ($_=function(el) { return {_hx_index:17,el:el,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["el"],$_)
	,TSwitch: ($_=function(e,cases,def) { return {_hx_index:18,e:e,cases:cases,def:def,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","cases","def"],$_)
	,TWhile: ($_=function(e,loop,normalWhile) { return {_hx_index:19,e:e,loop:loop,normalWhile:normalWhile,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","loop","normalWhile"],$_)
	,TMeta: ($_=function(m,args,e) { return {_hx_index:20,m:m,args:args,e:e,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["m","args","e"],$_)
};
hxsl_TExprDef.__empty_constructs__ = [hxsl_TExprDef.TDiscard,hxsl_TExprDef.TContinue,hxsl_TExprDef.TBreak];
var hxsl_Tools = function() { };
$hxClasses["hxsl.Tools"] = hxsl_Tools;
hxsl_Tools.__name__ = "hxsl.Tools";
hxsl_Tools.allocVarId = function() {
	return ++hxsl_Tools.UID;
};
hxsl_Tools.getName = function(v) {
	if(v.qualifiers == null) {
		return v.name;
	}
	var _g = 0;
	var _g1 = v.qualifiers;
	while(_g < _g1.length) {
		var q = _g1[_g];
		++_g;
		if(q._hx_index == 4) {
			var n = q.n;
			return n;
		}
	}
	return v.name;
};
hxsl_Tools.getConstBits = function(v) {
	var _g = v.type;
	switch(_g._hx_index) {
	case 1:
		var _g1 = 0;
		var _g11 = v.qualifiers;
		while(_g1 < _g11.length) {
			var q = _g11[_g1];
			++_g1;
			if(q._hx_index == 0) {
				var n = q.max;
				if(n != null) {
					var bits = 0;
					while(n >= 1 << bits) ++bits;
					return bits;
				}
				return 8;
			}
		}
		break;
	case 2:
		return 1;
	case 17:
		var _g12 = _g.size;
		return 3 + hxsl_Tools.MAX_CHANNELS_BITS;
	default:
	}
	return 0;
};
hxsl_Tools.isConst = function(v) {
	var _g = v.type;
	var tmp;
	if(_g._hx_index == 17) {
		var _g1 = _g.size;
		tmp = true;
	} else {
		tmp = false;
	}
	if(tmp) {
		return true;
	}
	if(v.qualifiers != null) {
		var _g2 = 0;
		var _g3 = v.qualifiers;
		while(_g2 < _g3.length) {
			var q = _g3[_g2];
			++_g2;
			if(q._hx_index == 0) {
				var _g21 = q.max;
				return true;
			}
		}
	}
	return false;
};
hxsl_Tools.hasQualifier = function(v,q) {
	if(v.qualifiers != null) {
		var _g = 0;
		var _g1 = v.qualifiers;
		while(_g < _g1.length) {
			var q2 = _g1[_g];
			++_g;
			if(q2 == q) {
				return true;
			}
		}
	}
	return false;
};
hxsl_Tools.isSampler = function(t) {
	switch(t._hx_index) {
	case 10:case 11:case 12:
		return true;
	case 17:
		var _g = t.size;
		return true;
	default:
		return false;
	}
};
hxsl_Tools.toString = function(t) {
	switch(t._hx_index) {
	case 5:
		var t1 = t.t;
		var size = t.size;
		var prefix;
		switch(t1._hx_index) {
		case 0:
			prefix = "I";
			break;
		case 1:
			prefix = "";
			break;
		case 2:
			prefix = "B";
			break;
		}
		return prefix + "Vec" + size;
	case 9:
		var n = t.size;
		return "Bytes" + n;
	case 13:
		var vl = t.vl;
		var _g = [];
		var _g1 = 0;
		while(_g1 < vl.length) {
			var v = vl[_g1];
			++_g1;
			_g.push(v.name + " : " + hxsl_Tools.toString(v.type));
		}
		return "{" + _g.join(",") + "}";
	case 15:
		var s = t.size;
		var t2 = t.t;
		var tmp = hxsl_Tools.toString(t2) + "[";
		var tmp1;
		switch(s._hx_index) {
		case 0:
			var i = s.v;
			tmp1 = "" + i;
			break;
		case 1:
			var v1 = s.v;
			tmp1 = v1.name;
			break;
		}
		return tmp + tmp1 + "]";
	case 16:
		var s1 = t.size;
		var t3 = t.t;
		var tmp2 = "buffer " + hxsl_Tools.toString(t3) + "[";
		var tmp3;
		switch(s1._hx_index) {
		case 0:
			var i1 = s1.v;
			tmp3 = "" + i1;
			break;
		case 1:
			var v2 = s1.v;
			tmp3 = v2.name;
			break;
		}
		return tmp2 + tmp3 + "]";
	default:
		return HxOverrides.substr($hxEnums[t.__enum__].__constructs__[t._hx_index],1,null);
	}
};
hxsl_Tools.hasSideEffect = function(e) {
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		var _g27 = _g.c;
		return false;
	case 1:
		var _g9 = _g.v;
		return false;
	case 2:
		var _g5 = _g.g;
		return false;
	case 3:
		var e1 = _g.e;
		return hxsl_Tools.hasSideEffect(e1);
	case 4:
		var el = _g.el;
		var _g1 = 0;
		while(_g1 < el.length) {
			var e2 = el[_g1];
			++_g1;
			if(hxsl_Tools.hasSideEffect(e2)) {
				return true;
			}
		}
		return false;
	case 5:
		var _g33 = _g.e2;
		var _g32 = _g.e1;
		var _g31 = _g.op;
		switch(_g31._hx_index) {
		case 4:
			return true;
		case 20:
			var _g34 = _g31.op;
			return true;
		default:
			var e21 = _g33;
			var e11 = _g32;
			if(!hxsl_Tools.hasSideEffect(e11)) {
				return hxsl_Tools.hasSideEffect(e21);
			} else {
				return true;
			}
		}
		break;
	case 6:
		var _g17 = _g.op;
		var e12 = _g.e1;
		return hxsl_Tools.hasSideEffect(e12);
	case 7:
		var _g25 = _g.init;
		var _g24 = _g.v;
		return true;
	case 8:
		var _g36 = _g.args;
		var _g35 = _g.e;
		return true;
	case 9:
		var _g20 = _g.regs;
		var e3 = _g.e;
		return hxsl_Tools.hasSideEffect(e3);
	case 10:
		var eelse = _g.eelse;
		var eif = _g.eif;
		var econd = _g.econd;
		if(!(hxsl_Tools.hasSideEffect(econd) || hxsl_Tools.hasSideEffect(eif))) {
			if(eelse != null) {
				return hxsl_Tools.hasSideEffect(eelse);
			} else {
				return false;
			}
		} else {
			return true;
		}
		break;
	case 12:
		var _g13 = _g.e;
		return true;
	case 13:
		var _g21 = _g.v;
		var loop = _g.loop;
		var it = _g.it;
		if(!hxsl_Tools.hasSideEffect(it)) {
			return hxsl_Tools.hasSideEffect(loop);
		} else {
			return true;
		}
		break;
	case 11:case 14:case 15:
		return true;
	case 16:
		var index = _g.index;
		var e4 = _g.e;
		if(!hxsl_Tools.hasSideEffect(e4)) {
			return hxsl_Tools.hasSideEffect(index);
		} else {
			return true;
		}
		break;
	case 17:
		var el1 = _g.el;
		var _g2 = 0;
		while(_g2 < el1.length) {
			var e5 = el1[_g2];
			++_g2;
			if(hxsl_Tools.hasSideEffect(e5)) {
				return true;
			}
		}
		return false;
	case 18:
		var def = _g.def;
		var cases = _g.cases;
		var e6 = _g.e;
		var _g3 = 0;
		while(_g3 < cases.length) {
			var c = cases[_g3];
			++_g3;
			var _g4 = 0;
			var _g11 = c.values;
			while(_g4 < _g11.length) {
				var v = _g11[_g4];
				++_g4;
				if(hxsl_Tools.hasSideEffect(v)) {
					return true;
				}
			}
			if(hxsl_Tools.hasSideEffect(c.expr)) {
				return true;
			}
		}
		if(!hxsl_Tools.hasSideEffect(e6)) {
			if(def != null) {
				return hxsl_Tools.hasSideEffect(def);
			} else {
				return false;
			}
		} else {
			return true;
		}
		break;
	case 19:
		var _g12 = _g.normalWhile;
		var loop1 = _g.loop;
		var e7 = _g.e;
		if(!hxsl_Tools.hasSideEffect(e7)) {
			return hxsl_Tools.hasSideEffect(loop1);
		} else {
			return true;
		}
		break;
	case 20:
		var _g7 = _g.args;
		var _g6 = _g.m;
		var e8 = _g.e;
		return hxsl_Tools.hasSideEffect(e8);
	}
};
hxsl_Tools.iter = function(e,f) {
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		var _g27 = _g.c;
		break;
	case 1:
		var _g9 = _g.v;
		break;
	case 2:
		var _g5 = _g.g;
		break;
	case 3:
		var e1 = _g.e;
		f(e1);
		break;
	case 4:
		var el = _g.el;
		var _g1 = 0;
		while(_g1 < el.length) {
			var e2 = el[_g1];
			++_g1;
			f(e2);
		}
		break;
	case 5:
		var _g31 = _g.op;
		var e21 = _g.e2;
		var e11 = _g.e1;
		f(e11);
		f(e21);
		break;
	case 6:
		var _g17 = _g.op;
		var e12 = _g.e1;
		f(e12);
		break;
	case 7:
		var _g24 = _g.v;
		var init = _g.init;
		if(init != null) {
			f(init);
		}
		break;
	case 8:
		var args = _g.args;
		var e3 = _g.e;
		f(e3);
		var _g2 = 0;
		while(_g2 < args.length) {
			var a = args[_g2];
			++_g2;
			f(a);
		}
		break;
	case 9:
		var _g20 = _g.regs;
		var e4 = _g.e;
		f(e4);
		break;
	case 10:
		var eelse = _g.eelse;
		var eif = _g.eif;
		var econd = _g.econd;
		f(econd);
		f(eif);
		if(eelse != null) {
			f(eelse);
		}
		break;
	case 12:
		var e5 = _g.e;
		if(e5 != null) {
			f(e5);
		}
		break;
	case 13:
		var _g21 = _g.v;
		var loop = _g.loop;
		var it = _g.it;
		f(it);
		f(loop);
		break;
	case 11:case 14:case 15:
		break;
	case 16:
		var index = _g.index;
		var e6 = _g.e;
		f(e6);
		f(index);
		break;
	case 17:
		var el1 = _g.el;
		var _g3 = 0;
		while(_g3 < el1.length) {
			var e7 = el1[_g3];
			++_g3;
			f(e7);
		}
		break;
	case 18:
		var def = _g.def;
		var cases = _g.cases;
		var e8 = _g.e;
		f(e8);
		var _g4 = 0;
		while(_g4 < cases.length) {
			var c = cases[_g4];
			++_g4;
			var _g6 = 0;
			var _g11 = c.values;
			while(_g6 < _g11.length) {
				var v = _g11[_g6];
				++_g6;
				f(v);
			}
			f(c.expr);
		}
		if(def != null) {
			f(def);
		}
		break;
	case 19:
		var _g12 = _g.normalWhile;
		var loop1 = _g.loop;
		var e9 = _g.e;
		f(e9);
		f(loop1);
		break;
	case 20:
		var _g7 = _g.args;
		var _g61 = _g.m;
		var e10 = _g.e;
		f(e10);
		break;
	}
};
hxsl_Tools.map = function(e,f) {
	var ed;
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		var _g27 = _g.c;
		ed = e.e;
		break;
	case 1:
		var _g9 = _g.v;
		ed = e.e;
		break;
	case 2:
		var _g5 = _g.g;
		ed = e.e;
		break;
	case 3:
		var e1 = _g.e;
		ed = hxsl_TExprDef.TParenthesis(f(e1));
		break;
	case 4:
		var el = _g.el;
		var _g1 = [];
		var _g11 = 0;
		while(_g11 < el.length) {
			var e2 = el[_g11];
			++_g11;
			_g1.push(f(e2));
		}
		ed = hxsl_TExprDef.TBlock(_g1);
		break;
	case 5:
		var e21 = _g.e2;
		var e11 = _g.e1;
		var op = _g.op;
		ed = hxsl_TExprDef.TBinop(op,f(e11),f(e21));
		break;
	case 6:
		var e12 = _g.e1;
		var op1 = _g.op;
		ed = hxsl_TExprDef.TUnop(op1,f(e12));
		break;
	case 7:
		var init = _g.init;
		var v = _g.v;
		ed = hxsl_TExprDef.TVarDecl(v,init != null ? f(init) : null);
		break;
	case 8:
		var args = _g.args;
		var e3 = _g.e;
		var ed1 = f(e3);
		var _g2 = [];
		var _g12 = 0;
		while(_g12 < args.length) {
			var a = args[_g12];
			++_g12;
			_g2.push(f(a));
		}
		ed = hxsl_TExprDef.TCall(ed1,_g2);
		break;
	case 9:
		var c = _g.regs;
		var e4 = _g.e;
		ed = hxsl_TExprDef.TSwiz(f(e4),c);
		break;
	case 10:
		var eelse = _g.eelse;
		var eif = _g.eif;
		var econd = _g.econd;
		ed = hxsl_TExprDef.TIf(f(econd),f(eif),eelse != null ? f(eelse) : null);
		break;
	case 12:
		var e5 = _g.e;
		ed = hxsl_TExprDef.TReturn(e5 != null ? f(e5) : null);
		break;
	case 13:
		var loop = _g.loop;
		var it = _g.it;
		var v1 = _g.v;
		ed = hxsl_TExprDef.TFor(v1,f(it),f(loop));
		break;
	case 11:case 14:case 15:
		ed = e.e;
		break;
	case 16:
		var index = _g.index;
		var e6 = _g.e;
		ed = hxsl_TExprDef.TArray(f(e6),f(index));
		break;
	case 17:
		var el1 = _g.el;
		var _g3 = [];
		var _g13 = 0;
		while(_g13 < el1.length) {
			var e7 = el1[_g13];
			++_g13;
			_g3.push(f(e7));
		}
		ed = hxsl_TExprDef.TArrayDecl(_g3);
		break;
	case 18:
		var def = _g.def;
		var cases = _g.cases;
		var e8 = _g.e;
		var ed2 = f(e8);
		var _g4 = [];
		var _g14 = 0;
		while(_g14 < cases.length) {
			var c1 = cases[_g14];
			++_g14;
			var _g15 = [];
			var _g21 = 0;
			var _g31 = c1.values;
			while(_g21 < _g31.length) {
				var v2 = _g31[_g21];
				++_g21;
				_g15.push(f(v2));
			}
			_g4.push({ values : _g15, expr : f(c1.expr)});
		}
		ed = hxsl_TExprDef.TSwitch(ed2,_g4,def == null ? null : f(def));
		break;
	case 19:
		var normalWhile = _g.normalWhile;
		var loop1 = _g.loop;
		var e9 = _g.e;
		ed = hxsl_TExprDef.TWhile(f(e9),f(loop1),normalWhile);
		break;
	case 20:
		var e10 = _g.e;
		var args1 = _g.args;
		var m = _g.m;
		ed = hxsl_TExprDef.TMeta(m,args1,f(e10));
		break;
	}
	return { e : ed, t : e.t, p : e.p};
};
hxsl_Tools.size = function(t) {
	switch(t._hx_index) {
	case 0:
		return 0;
	case 1:case 3:
		return 1;
	case 2:case 4:case 10:case 11:case 12:
		return 0;
	case 5:
		var _g1 = t.t;
		var n = t.size;
		return n;
	case 6:
		return 9;
	case 7:
		return 16;
	case 8:
		return 12;
	case 9:
		var s = t.size;
		return s;
	case 13:
		var vl = t.vl;
		var s1 = 0;
		var _g = 0;
		while(_g < vl.length) {
			var v = vl[_g];
			++_g;
			s1 += hxsl_Tools.size(v.type);
		}
		return s1;
	case 14:
		var _g8 = t.variants;
		return 0;
	case 15:
		var _g10 = t.size;
		var _g9 = t.t;
		switch(_g10._hx_index) {
		case 0:
			var t1 = _g9;
			var v1 = _g10.v;
			return hxsl_Tools.size(t1) * v1;
		case 1:
			var _g11 = _g10.v;
			return 0;
		}
		break;
	case 16:
		var _g5 = t.size;
		if(_g5._hx_index == 0) {
			var t2 = t.t;
			var v2 = _g5.v;
			return hxsl_Tools.size(t2) * v2;
		} else {
			return 0;
		}
		break;
	case 17:
		var n1 = t.size;
		return n1;
	}
};
var hxsl_Tools2 = function() { };
$hxClasses["hxsl.Tools2"] = hxsl_Tools2;
hxsl_Tools2.__name__ = "hxsl.Tools2";
hxsl_Tools2.toString = function(g) {
	var n = $hxEnums[g.__enum__].__constructs__[g._hx_index];
	return n.charAt(0).toLowerCase() + HxOverrides.substr(n,1,null);
};
var hxsl_BatchShader = function() {
	this.Batch_Count__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["hxsl.BatchShader"] = hxsl_BatchShader;
hxsl_BatchShader.__name__ = "hxsl.BatchShader";
hxsl_BatchShader.__super__ = hxsl_Shader;
hxsl_BatchShader.prototype = $extend(hxsl_Shader.prototype,{
	Batch_Count__: null
	,Batch_Buffer__: null
	,updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.Batch_Count__;
		if(v >>> 17 != 0) {
			throw new js__$Boot_HaxeError("Batch_Count" + " is out of range " + v + ">" + 131071);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.Batch_Count__;
		case 1:
			return this.Batch_Buffer__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: hxsl_BatchShader
});
var hxsl_SearchMap = function() {
};
$hxClasses["hxsl.SearchMap"] = hxsl_SearchMap;
hxsl_SearchMap.__name__ = "hxsl.SearchMap";
hxsl_SearchMap.prototype = {
	linked: null
	,next: null
	,__class__: hxsl_SearchMap
};
var hxsl_Cache = function() {
	this.constsToGlobal = false;
	this.linkCache = new hxsl_SearchMap();
	this.linkShaders = new haxe_ds_StringMap();
	this.batchShaders = new haxe_ds_IntMap();
	this.byID = new haxe_ds_StringMap();
};
$hxClasses["hxsl.Cache"] = hxsl_Cache;
hxsl_Cache.__name__ = "hxsl.Cache";
hxsl_Cache.get = function() {
	var c = hxsl_Cache.INST;
	if(c == null) {
		c = new hxsl_Cache();
		hxsl_Cache.INST = c;
	}
	return c;
};
hxsl_Cache.prototype = {
	linkCache: null
	,linkShaders: null
	,batchShaders: null
	,byID: null
	,constsToGlobal: null
	,getLinkShader: function(vars) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < vars.length) {
			var v = vars[_g1];
			++_g1;
			_g.push(Std.string(v));
		}
		var key = _g.join(",");
		var _this = this.linkShaders;
		var shader = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(shader != null) {
			return shader;
		}
		var s = new hxsl_SharedShader("");
		var id = HxOverrides.substr(haxe_crypto_Md5.encode(key),0,8);
		s.data = { name : "shaderLinker_" + id, vars : [], funs : []};
		var pos = null;
		var outVars = new haxe_ds_StringMap();
		var outputCount = 0;
		var tvec4 = hxsl_Type.TVec(4,hxsl_VecType.VFloat);
		var makeVec = function(g,size,args,makeOutExpr) {
			var out = [];
			var rem = size;
			var _g2 = 0;
			var _g3 = args.length;
			while(_g2 < _g3) {
				var i = _g2++;
				var e = makeOutExpr(args[args.length - 1 - i],rem - (args.length - 1 - i));
				rem -= hxsl_Tools.size(e.t);
				out.unshift(e);
			}
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(g), t : hxsl_Type.TVoid, p : pos},out), t : hxsl_Type.TVec(size,hxsl_VecType.VFloat), p : pos};
		};
		var makeVar = function(name,t,parent) {
			var path = parent == null ? name : hxsl_Tools.getName(parent) + "." + name;
			var v1 = __map_reserved[path] != null ? outVars.getReserved(path) : outVars.h[path];
			if(v1 != null) {
				return v1;
			}
			v1 = { id : hxsl_Tools.allocVarId(), name : name, type : t, kind : hxsl_VarKind.Var, parent : parent};
			if(parent == null) {
				s.data.vars.push(v1);
			} else {
				var _g21 = parent.type;
				if(_g21._hx_index == 13) {
					var vl = _g21.vl;
					vl.push(v1);
				} else {
					throw new js__$Boot_HaxeError("assert");
				}
			}
			if(__map_reserved[path] != null) {
				outVars.setReserved(path,v1);
			} else {
				outVars.h[path] = v1;
			}
			return v1;
		};
		var makeOutExpr1 = null;
		makeOutExpr1 = function(v2,rem1) {
			switch(v2._hx_index) {
			case 0:
				var v3 = v2.v;
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(v3)), t : hxsl_Type.TFloat, p : pos};
			case 1:
				var size1 = v2.size;
				var vname = v2.v;
				var v4 = __map_reserved[vname] != null ? outVars.getReserved(vname) : outVars.h[vname];
				if(v4 != null) {
					return { e : hxsl_TExprDef.TVar(v4), t : v4.type, p : pos};
				}
				var path1 = vname.split(".");
				var parent1 = null;
				while(path1.length > 1) {
					var parent2 = path1.shift();
					parent1 = makeVar(parent2,hxsl_Type.TStruct([]),parent1);
				}
				if(size1 != null) {
					rem1 = size1;
				}
				var v5 = path1.shift();
				v4 = makeVar(v5,rem1 == 1 ? hxsl_Type.TFloat : hxsl_Type.TVec(rem1,hxsl_VecType.VFloat),parent1);
				return { e : hxsl_TExprDef.TVar(v4), t : v4.type, p : pos};
			case 2:
				var v6 = v2.v;
				return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.PackNormal), t : hxsl_Type.TVoid, p : pos},[makeOutExpr1(v6,3)]), t : tvec4, p : pos};
			case 3:
				var v7 = v2.v;
				return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Pack), t : hxsl_Type.TVoid, p : pos},[makeOutExpr1(v7,1)]), t : tvec4, p : pos};
			case 4:
				var args1 = v2.a;
				return makeVec(hxsl_TGlobal.Vec2,2,args1,makeOutExpr1);
			case 5:
				var args2 = v2.a;
				return makeVec(hxsl_TGlobal.Vec3,3,args2,makeOutExpr1);
			case 6:
				var args3 = v2.a;
				return makeVec(hxsl_TGlobal.Vec4,4,args3,makeOutExpr1);
			case 7:
				var comps = v2.swiz;
				var v8 = v2.a;
				return { e : hxsl_TExprDef.TSwiz(makeOutExpr1(v8,4),comps), t : hxsl_Type.TVec(comps.length,hxsl_VecType.VFloat), p : pos};
			}
		};
		var makeOutput = function(v9) {
			outputCount += 1;
			var ov = { id : hxsl_Tools.allocVarId(), type : tvec4, name : "OUTPUT" + (outputCount - 1), kind : hxsl_VarKind.Output};
			s.data.vars.push(ov);
			return { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(ov), t : tvec4, p : pos},makeOutExpr1(v9,4)), t : hxsl_Type.TVoid, p : pos};
		};
		var defineFun = function(kind,vars1) {
			var fv = { id : hxsl_Tools.allocVarId(), type : hxsl_Type.TFun([]), name : ("" + Std.string(kind)).toLowerCase(), kind : hxsl_VarKind.Function};
			var _g22 = [];
			var _g31 = 0;
			while(_g31 < vars1.length) {
				var v10 = vars1[_g31];
				++_g31;
				_g22.push(makeOutput(v10));
			}
			var f = { kind : kind, ref : fv, args : [], ret : hxsl_Type.TVoid, expr : { e : hxsl_TExprDef.TBlock(_g22), p : pos, t : hxsl_Type.TVoid}};
			s.data.funs.push(f);
		};
		defineFun(hxsl_FunctionKind.Vertex,[hxsl_Output.Value("output.position")]);
		defineFun(hxsl_FunctionKind.Fragment,vars);
		shader = Object.create(hxsl_Shader.prototype);
		shader.shader = s;
		var _this1 = this.linkShaders;
		if(__map_reserved[key] != null) {
			_this1.setReserved(key,shader);
		} else {
			_this1.h[key] = shader;
		}
		shader.updateConstantsFinal(null);
		return shader;
	}
	,link: function(shaders,batchMode) {
		var c = this.linkCache;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			var i = s1.instance;
			if(c.next == null) {
				c.next = new haxe_ds_IntMap();
			}
			var cs = c.next.h[i.id];
			if(cs == null) {
				cs = new hxsl_SearchMap();
				c.next.h[i.id] = cs;
			}
			c = cs;
		}
		if(c.linked == null) {
			c.linked = this.compileRuntimeShader(shaders,batchMode);
		}
		return c.linked;
	}
	,compileRuntimeShader: function(shaders,batchMode) {
		var shaderDatas = [];
		var index = 0;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			var i = s1.instance;
			shaderDatas.push({ inst : i, p : s1.priority, index : index++});
		}
		shaderDatas.reverse();
		haxe_ds_ArraySort.sort(shaderDatas,function(s11,s2) {
			return s2.p - s11.p;
		});
		var linker = new hxsl_Linker(batchMode);
		var s3;
		try {
			var _g1 = [];
			var _g2 = 0;
			while(_g2 < shaderDatas.length) {
				var s4 = shaderDatas[_g2];
				++_g2;
				_g1.push(s4.inst.shader);
			}
			s3 = linker.link(_g1);
		} catch( e ) {
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(((e1) instanceof hxsl_Error)) {
				var e2 = e1;
				var _g11 = [];
				var _g21 = 0;
				while(_g21 < shaderDatas.length) {
					var s5 = shaderDatas[_g21];
					++_g21;
					_g11.push(hxsl_Printer.shaderToString(s5.inst.shader));
				}
				var shaders1 = _g11;
				e2.msg += "\n\nin\n\n" + shaders1.join("\n-----\n");
				throw new js__$Boot_HaxeError(e2);
			} else {
				throw e;
			}
		}
		var paramVars = new haxe_ds_IntMap();
		var _g12 = 0;
		var _g22 = linker.allVars;
		while(_g12 < _g22.length) {
			var v = _g22[_g12];
			++_g12;
			if(v.v.kind == hxsl_VarKind.Param) {
				var _g13 = v.v.type;
				if(_g13._hx_index == 13) {
					var _g23 = _g13.vl;
					continue;
				}
				var inf = shaderDatas[v.instanceIndex];
				paramVars.h[v.id] = { instance : inf.index, index : inf.inst.params.h[v.merged[0].id]};
			}
		}
		var prev = s3;
		var s6;
		try {
			s6 = new hxsl_Splitter().split(s3);
		} catch( e3 ) {
			var e4 = ((e3) instanceof js__$Boot_HaxeError) ? e3.val : e3;
			if(((e4) instanceof hxsl_Error)) {
				var e5 = e4;
				e5.msg += "\n\nin\n\n" + hxsl_Printer.shaderToString(s3);
				throw new js__$Boot_HaxeError(e5);
			} else {
				throw e3;
			}
		}
		if(batchMode) {
			var _g3 = 0;
			var _g4 = s6.vertex.vars;
			while(_g3 < _g4.length) {
				var v1 = _g4[_g3];
				++_g3;
				if(v1.qualifiers != null && v1.qualifiers.indexOf(hxsl_VarQualifier.PerObject) >= 0) {
					v1.kind = hxsl_VarKind.Local;
				}
			}
		}
		var prev1 = s6;
		var s7 = new hxsl_Dce().dce(s6.vertex,s6.fragment);
		var r = this.buildRuntimeShader(s7.vertex,s7.fragment,paramVars);
		var _g31 = [];
		var _g4_l = shaders;
		var _g4_last = null;
		while(_g4_l != _g4_last) {
			var s8 = _g4_l.s;
			_g4_l = _g4_l.next;
			var s9 = s8;
			_g31.push(new hxsl_ShaderInstanceDesc(s9.shader,s9.constBits));
		}
		r.spec = { instances : _g31, signature : null};
		var _g5 = 0;
		var _g6 = shaderDatas.length;
		while(_g5 < _g6) {
			var i1 = _g5++;
			var s10 = shaderDatas[shaderDatas.length - 1 - i1];
			r.spec.instances[s10.index].index = i1;
		}
		var _g7 = [];
		var _g8 = 0;
		var _g9 = r.spec.instances;
		while(_g8 < _g9.length) {
			var i2 = _g9[_g8];
			++_g8;
			_g7.push(i2.shader.data.name + "_" + i2.bits + "_" + i2.index);
		}
		var signParts = _g7;
		var tmp = signParts.join(":");
		r.spec.signature = haxe_crypto_Md5.encode(tmp);
		r.signature = haxe_crypto_Md5.encode(hxsl_Printer.shaderToString(r.vertex.data) + hxsl_Printer.shaderToString(r.fragment.data));
		r.batchMode = batchMode;
		var key = r.signature;
		var _this = this.byID;
		var r2 = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(r2 != null) {
			r.id = r2.id;
		} else {
			var key1 = r.signature;
			var _this1 = this.byID;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,r);
			} else {
				_this1.h[key1] = r;
			}
		}
		return r;
	}
	,buildRuntimeShader: function(vertex,fragment,paramVars) {
		var r = new hxsl_RuntimeShader();
		r.vertex = this.flattenShader(vertex,hxsl_FunctionKind.Vertex,paramVars);
		r.vertex.vertex = true;
		r.fragment = this.flattenShader(fragment,hxsl_FunctionKind.Fragment,paramVars);
		r.globals = new haxe_ds_IntMap();
		this.initGlobals(r,r.vertex);
		this.initGlobals(r,r.fragment);
		return r;
	}
	,initGlobals: function(r,s) {
		var p = s.globals;
		while(p != null) {
			r.globals.h[p.gid] = true;
			p = p.next;
		}
		var p1 = s.params;
		while(p1 != null) {
			if(p1.perObjectGlobal != null) {
				r.globals.h[p1.perObjectGlobal.gid] = true;
			}
			p1 = p1.next;
		}
	}
	,getPath: function(v) {
		if(v.parent == null) {
			return v.name;
		}
		return this.getPath(v.parent) + "." + v.name;
	}
	,flattenShader: function(s,kind,params) {
		var flat = new hxsl_Flatten();
		var c = new hxsl_RuntimeShaderData();
		var data = flat.flatten(s,kind,this.constsToGlobal);
		var textures = [];
		c.consts = flat.consts;
		c.texturesCount = 0;
		var g = flat.allocData.keys();
		while(g.hasNext()) {
			var g1 = g.next();
			var alloc = flat.allocData.h[g1.__id__];
			switch(g1.kind._hx_index) {
			case 0:
				var _g = [];
				var _g1 = 0;
				while(_g1 < alloc.length) {
					var a = alloc[_g1];
					++_g1;
					if(a.v != null) {
						_g.push(new hxsl_AllocGlobal(a.pos,this.getPath(a.v),a.v.type));
					}
				}
				var out = _g;
				var _g2 = 0;
				var _g3 = out.length - 1;
				while(_g2 < _g3) {
					var i = _g2++;
					out[i].next = out[i + 1];
				}
				var _g4 = g1.type;
				if(_g4._hx_index == 15) {
					var _g6 = _g4.size;
					var _g5 = _g4.t;
					if(_g5._hx_index == 5) {
						if(_g5.size == 4) {
							if(_g5.t._hx_index == 1) {
								if(_g6._hx_index == 0) {
									var size = _g6.v;
									c.globals = out[0];
									c.globalsSize = size;
								} else {
									throw new js__$Boot_HaxeError("assert");
								}
							} else {
								throw new js__$Boot_HaxeError("assert");
							}
						} else {
							throw new js__$Boot_HaxeError("assert");
						}
					} else {
						throw new js__$Boot_HaxeError("assert");
					}
				} else {
					throw new js__$Boot_HaxeError("assert");
				}
				break;
			case 2:
				var out1 = [];
				var _g7 = 0;
				while(_g7 < alloc.length) {
					var a1 = alloc[_g7];
					++_g7;
					if(a1.v == null) {
						continue;
					}
					var p = params.h[a1.v.id];
					if(p == null) {
						var ap = new hxsl_AllocParam(a1.v.name,a1.pos,-1,-1,a1.v.type);
						ap.perObjectGlobal = new hxsl_AllocGlobal(-1,this.getPath(a1.v),a1.v.type);
						out1.push(ap);
						continue;
					}
					out1.push(new hxsl_AllocParam(a1.v.name,a1.pos,p.instance,p.index,a1.v.type));
				}
				var _g11 = 0;
				var _g21 = out1.length - 1;
				while(_g11 < _g21) {
					var i1 = _g11++;
					out1[i1].next = out1[i1 + 1];
				}
				var _g31 = g1.type;
				if(_g31._hx_index == 15) {
					var _g51 = _g31.size;
					var _g41 = _g31.t;
					var t = _g41;
					if(hxsl_Tools.isSampler(t)) {
						textures.push({ t : t, all : out1});
						c.texturesCount += out1.length;
					} else {
						switch(_g41._hx_index) {
						case 5:
							if(_g41.size == 4) {
								if(_g41.t._hx_index == 1) {
									if(_g51._hx_index == 0) {
										var size1 = _g51.v;
										c.params = out1[0];
										c.paramsSize = size1;
									} else {
										throw new js__$Boot_HaxeError("assert");
									}
								} else {
									throw new js__$Boot_HaxeError("assert");
								}
							} else {
								throw new js__$Boot_HaxeError("assert");
							}
							break;
						case 16:
							var _g10 = _g41.size;
							var _g9 = _g41.t;
							c.buffers = out1[0];
							c.bufferCount = out1.length;
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
					}
				} else {
					throw new js__$Boot_HaxeError("assert");
				}
				break;
			default:
				throw new js__$Boot_HaxeError("assert");
			}
		}
		if(textures.length > 0) {
			textures.sort(function(t1,t2) {
				return t1.t._hx_index - t2.t._hx_index;
			});
			c.textures = textures[0].all[0];
			var _g8 = 1;
			var _g12 = textures.length;
			while(_g8 < _g12) {
				var i2 = _g8++;
				var prevAll = textures[i2 - 1].all;
				var prev = prevAll[prevAll.length - 1];
				prev.next = textures[i2].all[0];
			}
		}
		if(c.globals == null) {
			c.globalsSize = 0;
		}
		if(c.params == null) {
			c.paramsSize = 0;
		}
		if(c.buffers == null) {
			c.bufferCount = 0;
		}
		c.data = data;
		return c;
	}
	,__class__: hxsl_Cache
};
var hxsl_Channel = $hxEnums["hxsl.Channel"] = { __ename__ : true, __constructs__ : ["Unknown","R","G","B","A","PackedFloat","PackedNormal"]
	,Unknown: {_hx_index:0,__enum__:"hxsl.Channel",toString:$estr}
	,R: {_hx_index:1,__enum__:"hxsl.Channel",toString:$estr}
	,G: {_hx_index:2,__enum__:"hxsl.Channel",toString:$estr}
	,B: {_hx_index:3,__enum__:"hxsl.Channel",toString:$estr}
	,A: {_hx_index:4,__enum__:"hxsl.Channel",toString:$estr}
	,PackedFloat: {_hx_index:5,__enum__:"hxsl.Channel",toString:$estr}
	,PackedNormal: {_hx_index:6,__enum__:"hxsl.Channel",toString:$estr}
};
hxsl_Channel.__empty_constructs__ = [hxsl_Channel.Unknown,hxsl_Channel.R,hxsl_Channel.G,hxsl_Channel.B,hxsl_Channel.A,hxsl_Channel.PackedFloat,hxsl_Channel.PackedNormal];
var hxsl_Clone = function() {
	this.varMap = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Clone"] = hxsl_Clone;
hxsl_Clone.__name__ = "hxsl.Clone";
hxsl_Clone.shaderData = function(s) {
	return new hxsl_Clone().shader(s);
};
hxsl_Clone.prototype = {
	varMap: null
	,tvar: function(v) {
		var v2 = this.varMap.h[v.id];
		if(v2 != null) {
			return v2;
		}
		v2 = { id : hxsl_Tools.allocVarId(), type : v.type, name : v.name, kind : v.kind};
		this.varMap.h[v.id] = v2;
		if(v.parent != null) {
			v2.parent = this.tvar(v.parent);
		}
		if(v.qualifiers != null) {
			v2.qualifiers = v.qualifiers.slice();
		}
		v2.type = this.ttype(v.type);
		return v2;
	}
	,tfun: function(f) {
		var tmp = this.ttype(f.ret);
		var f1 = f.kind;
		var tmp1 = this.tvar(f.ref);
		var _g = [];
		var _g1 = 0;
		var _g2 = f.args;
		while(_g1 < _g2.length) {
			var a = _g2[_g1];
			++_g1;
			_g.push(this.tvar(a));
		}
		return { ret : tmp, kind : f1, ref : tmp1, args : _g, expr : this.texpr(f.expr)};
	}
	,ttype: function(t) {
		switch(t._hx_index) {
		case 13:
			var vl = t.vl;
			var _g = [];
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v = vl[_g1];
				++_g1;
				_g.push(this.tvar(v));
			}
			return hxsl_Type.TStruct(_g);
		case 14:
			var vars = t.variants;
			return hxsl_Type.TFun(vars);
		case 15:
			var size = t.size;
			var t1 = t.t;
			var tmp = this.ttype(t1);
			var tmp1;
			switch(size._hx_index) {
			case 0:
				var _g11 = size.v;
				tmp1 = size;
				break;
			case 1:
				var v1 = size.v;
				tmp1 = hxsl_SizeDecl.SVar(this.tvar(v1));
				break;
			}
			return hxsl_Type.TArray(tmp,tmp1);
		default:
			return t;
		}
	}
	,texpr: function(e) {
		var e2 = hxsl_Tools.map(e,$bind(this,this.texpr));
		e2.t = this.ttype(e.t);
		var _g = e2.e;
		var tmp;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			tmp = hxsl_TExprDef.TVar(this.tvar(v));
			break;
		case 7:
			var init = _g.init;
			var v1 = _g.v;
			tmp = hxsl_TExprDef.TVarDecl(this.tvar(v1),init);
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v2 = _g.v;
			tmp = hxsl_TExprDef.TFor(this.tvar(v2),it,loop);
			break;
		default:
			tmp = e2.e;
		}
		e2.e = tmp;
		return e2;
	}
	,shader: function(s) {
		var s1 = s.name;
		var _g = [];
		var _g1 = 0;
		var _g2 = s.vars;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			_g.push(this.tvar(v));
		}
		var tmp = _g;
		var _g3 = [];
		var _g4 = 0;
		var _g5 = s.funs;
		while(_g4 < _g5.length) {
			var f = _g5[_g4];
			++_g4;
			_g3.push(this.tfun(f));
		}
		return { name : s1, vars : tmp, funs : _g3};
	}
	,__class__: hxsl_Clone
};
var hxsl__$Dce_VarDeps = function(v) {
	this.v = v;
	this.used = false;
	this.deps = new haxe_ds_IntMap();
};
$hxClasses["hxsl._Dce.VarDeps"] = hxsl__$Dce_VarDeps;
hxsl__$Dce_VarDeps.__name__ = "hxsl._Dce.VarDeps";
hxsl__$Dce_VarDeps.prototype = {
	v: null
	,keep: null
	,used: null
	,deps: null
	,__class__: hxsl__$Dce_VarDeps
};
var hxsl_Dce = function() {
};
$hxClasses["hxsl.Dce"] = hxsl_Dce;
hxsl_Dce.__name__ = "hxsl.Dce";
hxsl_Dce.prototype = {
	used: null
	,channelVars: null
	,markAsKeep: null
	,dce: function(vertex,fragment) {
		this.used = new haxe_ds_IntMap();
		this.channelVars = [];
		var inputs = [];
		var _g = 0;
		var _g1 = vertex.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			var i = this.get(v);
			if(v.kind == hxsl_VarKind.Input) {
				inputs.push(i);
			}
			if(v.kind == hxsl_VarKind.Output) {
				i.keep = true;
			}
		}
		var _g2 = 0;
		var _g3 = fragment.vars;
		while(_g2 < _g3.length) {
			var v1 = _g3[_g2];
			++_g2;
			var i1 = this.get(v1);
			if(v1.kind == hxsl_VarKind.Output) {
				i1.keep = true;
			}
		}
		var _g4 = 0;
		var _g5 = vertex.funs;
		while(_g4 < _g5.length) {
			var f = _g5[_g4];
			++_g4;
			this.check(f.expr,[],[]);
		}
		var _g6 = 0;
		var _g7 = fragment.funs;
		while(_g6 < _g7.length) {
			var f1 = _g7[_g6];
			++_g6;
			this.check(f1.expr,[],[]);
		}
		var outExprs = [];
		while(true) {
			var v2 = this.used.iterator();
			while(v2.hasNext()) {
				var v3 = v2.next();
				if(v3.keep) {
					this.markRec(v3);
				}
			}
			while(inputs.length > 1 && !inputs[inputs.length - 1].used) inputs.pop();
			var _g8 = 0;
			while(_g8 < inputs.length) {
				var v4 = inputs[_g8];
				++_g8;
				this.markRec(v4);
			}
			outExprs = [];
			var _g9 = 0;
			var _g10 = vertex.funs;
			while(_g9 < _g10.length) {
				var f2 = _g10[_g9];
				++_g9;
				outExprs.push(this.mapExpr(f2.expr,false));
			}
			var _g11 = 0;
			var _g12 = fragment.funs;
			while(_g11 < _g12.length) {
				var f3 = _g12[_g11];
				++_g11;
				outExprs.push(this.mapExpr(f3.expr,false));
			}
			this.markAsKeep = false;
			var _g13 = 0;
			while(_g13 < outExprs.length) {
				var e = outExprs[_g13];
				++_g13;
				this.checkBranches(e);
			}
			if(!this.markAsKeep) {
				break;
			}
		}
		var _g81 = 0;
		var _g91 = vertex.funs;
		while(_g81 < _g91.length) {
			var f4 = _g91[_g81];
			++_g81;
			f4.expr = outExprs.shift();
		}
		var _g101 = 0;
		var _g111 = fragment.funs;
		while(_g101 < _g111.length) {
			var f5 = _g111[_g101];
			++_g101;
			f5.expr = outExprs.shift();
		}
		var v5 = this.used.iterator();
		while(v5.hasNext()) {
			var v6 = v5.next();
			if(v6.used) {
				continue;
			}
			if(v6.v.kind == hxsl_VarKind.Input) {
				continue;
			}
			HxOverrides.remove(vertex.vars,v6.v);
			HxOverrides.remove(fragment.vars,v6.v);
		}
		return { fragment : fragment, vertex : vertex};
	}
	,get: function(v) {
		var vd = this.used.h[v.id];
		if(vd == null) {
			vd = new hxsl__$Dce_VarDeps(v);
			this.used.h[v.id] = vd;
		}
		return vd;
	}
	,markRec: function(v) {
		if(v.used) {
			return;
		}
		v.used = true;
		var d = v.deps.iterator();
		while(d.hasNext()) {
			var d1 = d.next();
			this.markRec(d1);
		}
	}
	,link: function(v,writeTo) {
		var vd = this.get(v);
		var _g = 0;
		while(_g < writeTo.length) {
			var w = writeTo[_g];
			++_g;
			if(w == null) {
				if(!vd.keep) {
					vd.keep = true;
					this.markAsKeep = true;
				}
				continue;
			}
			w.deps.h[v.id] = vd;
		}
	}
	,check: function(e,writeTo,isAffected) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			this.link(v,writeTo);
			break;
		case 4:
			var el = _g.el;
			var noWrite = [];
			var _g1 = 0;
			var _g11 = el.length;
			while(_g1 < _g11) {
				var i = _g1++;
				this.check(el[i],i < el.length - 1 ? noWrite : writeTo,isAffected);
			}
			break;
		case 5:
			var _g13 = _g.e2;
			var _g12 = _g.e1;
			var _g111 = _g.op;
			switch(_g111._hx_index) {
			case 4:
				var _g16 = _g12.t;
				var _g15 = _g12.p;
				var _g14 = _g12.e;
				switch(_g14._hx_index) {
				case 1:
					var e1 = _g13;
					var v1 = _g14.v;
					var v2 = this.get(v1);
					writeTo.push(v2);
					this.check(e1,writeTo,isAffected);
					writeTo.pop();
					if(isAffected.indexOf(v2) < 0) {
						isAffected.push(v2);
					}
					break;
				case 9:
					var _g19 = _g14.regs;
					var _g18 = _g14.e;
					var _g22 = _g18.t;
					var _g21 = _g18.p;
					var _g20 = _g18.e;
					if(_g20._hx_index == 1) {
						var e2 = _g13;
						var v3 = _g20.v;
						var v4 = this.get(v3);
						writeTo.push(v4);
						this.check(e2,writeTo,isAffected);
						writeTo.pop();
						if(isAffected.indexOf(v4) < 0) {
							isAffected.push(v4);
						}
					} else {
						var f = $bind(this,this.check);
						var writeTo1 = writeTo;
						var isAffected1 = isAffected;
						hxsl_Tools.iter(e,function(e3) {
							f(e3,writeTo1,isAffected1);
						});
					}
					break;
				default:
					var f1 = $bind(this,this.check);
					var writeTo2 = writeTo;
					var isAffected2 = isAffected;
					hxsl_Tools.iter(e,function(e4) {
						f1(e4,writeTo2,isAffected2);
					});
				}
				break;
			case 20:
				var _g24 = _g111.op;
				var _g27 = _g12.t;
				var _g26 = _g12.p;
				var _g25 = _g12.e;
				switch(_g25._hx_index) {
				case 1:
					var e5 = _g13;
					var v5 = _g25.v;
					var v6 = this.get(v5);
					writeTo.push(v6);
					this.check(e5,writeTo,isAffected);
					writeTo.pop();
					if(isAffected.indexOf(v6) < 0) {
						isAffected.push(v6);
					}
					break;
				case 9:
					var _g30 = _g25.regs;
					var _g29 = _g25.e;
					var _g33 = _g29.t;
					var _g32 = _g29.p;
					var _g31 = _g29.e;
					if(_g31._hx_index == 1) {
						var e6 = _g13;
						var v7 = _g31.v;
						var v8 = this.get(v7);
						writeTo.push(v8);
						this.check(e6,writeTo,isAffected);
						writeTo.pop();
						if(isAffected.indexOf(v8) < 0) {
							isAffected.push(v8);
						}
					} else {
						var f2 = $bind(this,this.check);
						var writeTo3 = writeTo;
						var isAffected3 = isAffected;
						hxsl_Tools.iter(e,function(e7) {
							f2(e7,writeTo3,isAffected3);
						});
					}
					break;
				default:
					var f3 = $bind(this,this.check);
					var writeTo4 = writeTo;
					var isAffected4 = isAffected;
					hxsl_Tools.iter(e,function(e8) {
						f3(e8,writeTo4,isAffected4);
					});
				}
				break;
			default:
				var f4 = $bind(this,this.check);
				var writeTo5 = writeTo;
				var isAffected5 = isAffected;
				hxsl_Tools.iter(e,function(e9) {
					f4(e9,writeTo5,isAffected5);
				});
			}
			break;
		case 7:
			var init = _g.init;
			var v9 = _g.v;
			if(init != null) {
				writeTo.push(this.get(v9));
				this.check(init,writeTo,isAffected);
				writeTo.pop();
			} else {
				var f5 = $bind(this,this.check);
				var writeTo6 = writeTo;
				var isAffected6 = isAffected;
				hxsl_Tools.iter(e,function(e10) {
					f5(e10,writeTo6,isAffected6);
				});
			}
			break;
		case 8:
			var _g36 = _g.args;
			var _g35 = _g.e;
			var _g39 = _g35.t;
			var _g38 = _g35.p;
			var _g37 = _g35.e;
			if(_g37._hx_index == 2) {
				switch(_g37.g._hx_index) {
				case 63:
					if(_g36.length == 3) {
						var _g56 = _g36[2];
						var _g54 = _g36[0];
						var _g59 = _g54.t;
						var _g58 = _g54.p;
						var _g57 = _g54.e;
						if(_g57._hx_index == 1) {
							var _g63 = _g56.t;
							var _g62 = _g56.p;
							var _g61 = _g56.e;
							if(_g61._hx_index == 0) {
								var _g64 = _g61.c;
								if(_g64._hx_index == 2) {
									var c = _g57.v;
									var uv = _g36[1];
									var cid = _g64.v;
									this.check(uv,writeTo,isAffected);
									if(this.channelVars[cid] == null) {
										this.channelVars[cid] = c;
										this.link(c,writeTo);
									} else {
										this.link(this.channelVars[cid],writeTo);
									}
								} else {
									var f6 = $bind(this,this.check);
									var writeTo7 = writeTo;
									var isAffected7 = isAffected;
									hxsl_Tools.iter(e,function(e11) {
										f6(e11,writeTo7,isAffected7);
									});
								}
							} else {
								var f7 = $bind(this,this.check);
								var writeTo8 = writeTo;
								var isAffected8 = isAffected;
								hxsl_Tools.iter(e,function(e12) {
									f7(e12,writeTo8,isAffected8);
								});
							}
						} else {
							var f8 = $bind(this,this.check);
							var writeTo9 = writeTo;
							var isAffected9 = isAffected;
							hxsl_Tools.iter(e,function(e13) {
								f8(e13,writeTo9,isAffected9);
							});
						}
					} else {
						var f9 = $bind(this,this.check);
						var writeTo10 = writeTo;
						var isAffected10 = isAffected;
						hxsl_Tools.iter(e,function(e14) {
							f9(e14,writeTo10,isAffected10);
						});
					}
					break;
				case 64:
					if(_g36.length == 4) {
						var _g44 = _g36[3];
						var _g41 = _g36[0];
						var _g47 = _g41.t;
						var _g46 = _g41.p;
						var _g45 = _g41.e;
						if(_g45._hx_index == 1) {
							var _g51 = _g44.t;
							var _g50 = _g44.p;
							var _g49 = _g44.e;
							if(_g49._hx_index == 0) {
								var _g52 = _g49.c;
								if(_g52._hx_index == 2) {
									var c1 = _g45.v;
									var uv1 = _g36[1];
									var lod = _g36[2];
									var cid1 = _g52.v;
									this.check(uv1,writeTo,isAffected);
									this.check(lod,writeTo,isAffected);
									if(this.channelVars[cid1] == null) {
										this.channelVars[cid1] = c1;
										this.link(c1,writeTo);
									} else {
										this.link(this.channelVars[cid1],writeTo);
									}
								} else {
									var f10 = $bind(this,this.check);
									var writeTo11 = writeTo;
									var isAffected11 = isAffected;
									hxsl_Tools.iter(e,function(e15) {
										f10(e15,writeTo11,isAffected11);
									});
								}
							} else {
								var f11 = $bind(this,this.check);
								var writeTo12 = writeTo;
								var isAffected12 = isAffected;
								hxsl_Tools.iter(e,function(e16) {
									f11(e16,writeTo12,isAffected12);
								});
							}
						} else {
							var f12 = $bind(this,this.check);
							var writeTo13 = writeTo;
							var isAffected13 = isAffected;
							hxsl_Tools.iter(e,function(e17) {
								f12(e17,writeTo13,isAffected13);
							});
						}
					} else {
						var f13 = $bind(this,this.check);
						var writeTo14 = writeTo;
						var isAffected14 = isAffected;
						hxsl_Tools.iter(e,function(e18) {
							f13(e18,writeTo14,isAffected14);
						});
					}
					break;
				default:
					var f14 = $bind(this,this.check);
					var writeTo15 = writeTo;
					var isAffected15 = isAffected;
					hxsl_Tools.iter(e,function(e19) {
						f14(e19,writeTo15,isAffected15);
					});
				}
			} else {
				var f15 = $bind(this,this.check);
				var writeTo16 = writeTo;
				var isAffected16 = isAffected;
				hxsl_Tools.iter(e,function(e20) {
					f15(e20,writeTo16,isAffected16);
				});
			}
			break;
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var e21 = _g.econd;
			var affect = [];
			this.check(eif,writeTo,affect);
			if(eelse != null) {
				this.check(eelse,writeTo,affect);
			}
			var len = affect.length;
			var _g2 = 0;
			while(_g2 < writeTo.length) {
				var v10 = writeTo[_g2];
				++_g2;
				if(affect.indexOf(v10) < 0) {
					affect.push(v10);
				}
			}
			this.check(e21,affect,isAffected);
			var _g17 = 0;
			var _g23 = len;
			while(_g17 < _g23) {
				var i1 = _g17++;
				var v11 = affect[i1];
				if(isAffected.indexOf(v11) < 0) {
					isAffected.push(v11);
				}
			}
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v12 = _g.v;
			var affect1 = [];
			this.check(loop,writeTo,affect1);
			this.check(it,affect1,isAffected);
			var _g3 = 0;
			while(_g3 < affect1.length) {
				var v13 = affect1[_g3];
				++_g3;
				if(isAffected.indexOf(v13) < 0) {
					isAffected.push(v13);
				}
			}
			break;
		default:
			var f16 = $bind(this,this.check);
			var writeTo17 = writeTo;
			var isAffected17 = isAffected;
			hxsl_Tools.iter(e,function(e22) {
				f16(e22,writeTo17,isAffected17);
			});
		}
	}
	,checkBranches: function(e) {
		var _g = e.e;
		if(_g._hx_index == 10) {
			var _g3 = _g.eelse;
			var _g2 = _g.eif;
			var cond = _g.econd;
			var writeTo = [null];
			this.check(cond,writeTo,[]);
		}
		hxsl_Tools.iter(e,$bind(this,this.checkBranches));
	}
	,mapExpr: function(e,isVar) {
		var _gthis = this;
		var _g = e.e;
		switch(_g._hx_index) {
		case 4:
			var el = _g.el;
			var out = [];
			var count = 0;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e1 = el[_g1];
				++_g1;
				var isVar1 = isVar && count == el.length - 1;
				var e2 = this.mapExpr(e1,isVar1);
				if(hxsl_Tools.hasSideEffect(e2) || isVar1) {
					out.push(e2);
				}
				++count;
			}
			return { e : hxsl_TExprDef.TBlock(out), p : e.p, t : e.t};
		case 5:
			var _g12 = _g.e2;
			var _g11 = _g.e1;
			var _g10 = _g.op;
			switch(_g10._hx_index) {
			case 4:
				var _g15 = _g11.t;
				var _g14 = _g11.p;
				var _g13 = _g11.e;
				switch(_g13._hx_index) {
				case 1:
					var v = _g13.v;
					if(!this.get(v).used) {
						return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
					} else {
						return hxsl_Tools.map(e,function(e3) {
							return _gthis.mapExpr(e3,true);
						});
					}
					break;
				case 9:
					var _g18 = _g13.regs;
					var _g17 = _g13.e;
					var _g21 = _g17.t;
					var _g20 = _g17.p;
					var _g19 = _g17.e;
					if(_g19._hx_index == 1) {
						var v1 = _g19.v;
						if(!this.get(v1).used) {
							return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
						} else {
							return hxsl_Tools.map(e,function(e4) {
								return _gthis.mapExpr(e4,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e5) {
							return _gthis.mapExpr(e5,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e6) {
						return _gthis.mapExpr(e6,true);
					});
				}
				break;
			case 20:
				var _g23 = _g10.op;
				var _g26 = _g11.t;
				var _g25 = _g11.p;
				var _g24 = _g11.e;
				switch(_g24._hx_index) {
				case 1:
					var v2 = _g24.v;
					if(!this.get(v2).used) {
						return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
					} else {
						return hxsl_Tools.map(e,function(e7) {
							return _gthis.mapExpr(e7,true);
						});
					}
					break;
				case 9:
					var _g29 = _g24.regs;
					var _g28 = _g24.e;
					var _g32 = _g28.t;
					var _g31 = _g28.p;
					var _g30 = _g28.e;
					if(_g30._hx_index == 1) {
						var v3 = _g30.v;
						if(!this.get(v3).used) {
							return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
						} else {
							return hxsl_Tools.map(e,function(e8) {
								return _gthis.mapExpr(e8,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e9) {
							return _gthis.mapExpr(e9,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e10) {
						return _gthis.mapExpr(e10,true);
					});
				}
				break;
			default:
				return hxsl_Tools.map(e,function(e11) {
					return _gthis.mapExpr(e11,true);
				});
			}
			break;
		case 7:
			var _g6 = _g.init;
			var v4 = _g.v;
			if(!this.get(v4).used) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
			} else {
				return hxsl_Tools.map(e,function(e12) {
					return _gthis.mapExpr(e12,true);
				});
			}
			break;
		case 8:
			var _g35 = _g.args;
			var _g34 = _g.e;
			var _g38 = _g34.t;
			var _g37 = _g34.p;
			var _g36 = _g34.e;
			if(_g36._hx_index == 2) {
				switch(_g36.g._hx_index) {
				case 63:
					if(_g35.length == 3) {
						var _g59 = _g35[2];
						var _g57 = _g35[0];
						var _g62 = _g59.t;
						var _g61 = _g59.p;
						var _g60 = _g59.e;
						if(_g60._hx_index == 0) {
							var _g63 = _g60.c;
							if(_g63._hx_index == 2) {
								var uv = _g35[1];
								var cid = _g63.v;
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texture), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(uv,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e13) {
									return _gthis.mapExpr(e13,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e14) {
								return _gthis.mapExpr(e14,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e15) {
							return _gthis.mapExpr(e15,true);
						});
					}
					break;
				case 64:
					if(_g35.length == 4) {
						var _g43 = _g35[3];
						var _g40 = _g35[0];
						var _g46 = _g43.t;
						var _g45 = _g43.p;
						var _g44 = _g43.e;
						if(_g44._hx_index == 0) {
							var _g47 = _g44.c;
							if(_g47._hx_index == 2) {
								var uv1 = _g35[1];
								var lod = _g35[2];
								var cid1 = _g47.v;
								var c1 = this.channelVars[cid1];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.TextureLod), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c1), t : c1.type, p : e.p},this.mapExpr(uv1,true),this.mapExpr(lod,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e16) {
									return _gthis.mapExpr(e16,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e17) {
								return _gthis.mapExpr(e17,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e18) {
							return _gthis.mapExpr(e18,true);
						});
					}
					break;
				case 65:
					if(_g35.length == 3) {
						var _g51 = _g35[2];
						var _g49 = _g35[0];
						var _g54 = _g51.t;
						var _g53 = _g51.p;
						var _g52 = _g51.e;
						if(_g52._hx_index == 0) {
							var _g55 = _g52.c;
							if(_g55._hx_index == 2) {
								var pos = _g35[1];
								var cid2 = _g55.v;
								var c2 = this.channelVars[cid2];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texel), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c2), t : c2.type, p : e.p},this.mapExpr(pos,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e19) {
									return _gthis.mapExpr(e19,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e20) {
								return _gthis.mapExpr(e20,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e21) {
							return _gthis.mapExpr(e21,true);
						});
					}
					break;
				case 66:
					if(_g35.length == 4) {
						var _g68 = _g35[3];
						var _g65 = _g35[0];
						var _g71 = _g68.t;
						var _g70 = _g68.p;
						var _g69 = _g68.e;
						if(_g69._hx_index == 0) {
							var _g72 = _g69.c;
							if(_g72._hx_index == 2) {
								var pos1 = _g35[1];
								var lod1 = _g35[2];
								var cid3 = _g72.v;
								var c3 = this.channelVars[cid3];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texel), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c3), t : c3.type, p : e.p},this.mapExpr(pos1,true),this.mapExpr(lod1,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e22) {
									return _gthis.mapExpr(e22,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e23) {
								return _gthis.mapExpr(e23,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e24) {
							return _gthis.mapExpr(e24,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e25) {
						return _gthis.mapExpr(e25,true);
					});
				}
			} else {
				return hxsl_Tools.map(e,function(e26) {
					return _gthis.mapExpr(e26,true);
				});
			}
			break;
		case 10:
			var eelse = _g.eelse;
			var econd = _g.eif;
			var e27 = _g.econd;
			var e28 = this.mapExpr(e27,true);
			var econd1 = this.mapExpr(econd,isVar);
			var eelse1 = eelse == null ? null : this.mapExpr(eelse,isVar);
			if(!isVar && !hxsl_Tools.hasSideEffect(econd1) && (eelse1 == null || !hxsl_Tools.hasSideEffect(eelse1))) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e28.t, p : e28.p};
			}
			return { e : hxsl_TExprDef.TIf(e28,econd1,eelse1), p : e28.p, t : e28.t};
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v5 = _g.v;
			var it1 = this.mapExpr(it,true);
			var loop1 = this.mapExpr(loop,false);
			if(!hxsl_Tools.hasSideEffect(loop1)) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
			}
			return { e : hxsl_TExprDef.TFor(v5,it1,loop1), p : e.p, t : e.t};
		default:
			return hxsl_Tools.map(e,function(e29) {
				return _gthis.mapExpr(e29,true);
			});
		}
	}
	,__class__: hxsl_Dce
};
var hxsl_Eval = function() {
	this.varMap = new haxe_ds_ObjectMap();
	this.funMap = new haxe_ds_ObjectMap();
	this.constants = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Eval"] = hxsl_Eval;
hxsl_Eval.__name__ = "hxsl.Eval";
hxsl_Eval.prototype = {
	varMap: null
	,inlineCalls: null
	,unrollLoops: null
	,eliminateConditionals: null
	,constants: null
	,funMap: null
	,curFun: null
	,setConstant: function(v,c) {
		this.constants.h[v.id] = hxsl_TExprDef.TConst(c);
	}
	,mapVar: function(v) {
		var v2 = this.varMap.h[v.__id__];
		if(v2 != null) {
			if(v == v2) {
				return v2;
			} else {
				return this.mapVar(v2);
			}
		}
		if(v.parent != null) {
			this.mapVar(v.parent);
			v2 = this.varMap.h[v.__id__];
			if(v2 != null) {
				if(v == v2) {
					return v2;
				} else {
					return this.mapVar(v2);
				}
			}
		}
		var _g = v.type;
		var v21;
		if(_g._hx_index == 17) {
			var _g1 = _g.size;
			v21 = true;
		} else {
			v21 = false;
		}
		v2 = { id : v21 ? v.id : hxsl_Tools.allocVarId(), name : v.name, type : v.type, kind : v.kind};
		if(v.parent != null) {
			v2.parent = this.mapVar(v.parent);
		}
		if(v.qualifiers != null) {
			v2.qualifiers = v.qualifiers.slice();
		}
		this.varMap.set(v,v2);
		this.varMap.set(v2,v2);
		var _g2 = v2.type;
		switch(_g2._hx_index) {
		case 13:
			var vl = _g2.vl;
			var _g21 = [];
			var _g3 = 0;
			while(_g3 < vl.length) {
				var v1 = vl[_g3];
				++_g3;
				_g21.push(this.mapVar(v1));
			}
			v2.type = hxsl_Type.TStruct(_g21);
			break;
		case 15:
			var _g8 = _g2.size;
			if(_g8._hx_index == 1) {
				var t = _g2.t;
				var vs = _g8.v;
				var c = this.constants.h[vs.id];
				if(c != null) {
					if(c == null) {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					} else if(c._hx_index == 0) {
						var _g22 = c.c;
						if(_g22._hx_index == 2) {
							var v3 = _g22.v;
							var _g23 = v2.type;
							var tmp;
							if(_g23._hx_index == 15) {
								var _g4 = _g23.size;
								var _g31 = _g23.t;
								tmp = true;
							} else {
								tmp = false;
							}
							v2.type = tmp ? hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(v3)) : hxsl_Type.TBuffer(t,hxsl_SizeDecl.SConst(v3));
						} else {
							hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
						}
					} else {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					}
				} else {
					var vs2 = this.mapVar(vs);
					var _g24 = v2.type;
					var tmp1;
					if(_g24._hx_index == 15) {
						var _g41 = _g24.size;
						var _g32 = _g24.t;
						tmp1 = true;
					} else {
						tmp1 = false;
					}
					v2.type = tmp1 ? hxsl_Type.TArray(t,hxsl_SizeDecl.SVar(vs2)) : hxsl_Type.TBuffer(t,hxsl_SizeDecl.SVar(vs2));
				}
			}
			break;
		case 16:
			var _g5 = _g2.size;
			if(_g5._hx_index == 1) {
				var t1 = _g2.t;
				var vs1 = _g5.v;
				var c1 = this.constants.h[vs1.id];
				if(c1 != null) {
					if(c1 == null) {
						hxsl_Error.t("Integer value expected for array size constant " + vs1.name,null);
					} else if(c1._hx_index == 0) {
						var _g25 = c1.c;
						if(_g25._hx_index == 2) {
							var v4 = _g25.v;
							var _g26 = v2.type;
							var tmp2;
							if(_g26._hx_index == 15) {
								var _g42 = _g26.size;
								var _g33 = _g26.t;
								tmp2 = true;
							} else {
								tmp2 = false;
							}
							v2.type = tmp2 ? hxsl_Type.TArray(t1,hxsl_SizeDecl.SConst(v4)) : hxsl_Type.TBuffer(t1,hxsl_SizeDecl.SConst(v4));
						} else {
							hxsl_Error.t("Integer value expected for array size constant " + vs1.name,null);
						}
					} else {
						hxsl_Error.t("Integer value expected for array size constant " + vs1.name,null);
					}
				} else {
					var vs21 = this.mapVar(vs1);
					var _g27 = v2.type;
					var tmp3;
					if(_g27._hx_index == 15) {
						var _g43 = _g27.size;
						var _g34 = _g27.t;
						tmp3 = true;
					} else {
						tmp3 = false;
					}
					v2.type = tmp3 ? hxsl_Type.TArray(t1,hxsl_SizeDecl.SVar(vs21)) : hxsl_Type.TBuffer(t1,hxsl_SizeDecl.SVar(vs21));
				}
			}
			break;
		default:
		}
		return v2;
	}
	,'eval': function(s) {
		var funs = [];
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var f1 = f.kind;
			var f2 = this.mapVar(f.ref);
			var _g2 = [];
			var _g11 = 0;
			var _g21 = f.args;
			while(_g11 < _g21.length) {
				var a = _g21[_g11];
				++_g11;
				_g2.push(this.mapVar(a));
			}
			var f21 = { kind : f1, ref : f2, args : _g2, ret : f.ret, expr : f.expr};
			if(!this.inlineCalls || f.kind != hxsl_FunctionKind.Helper) {
				funs.push(f21);
			}
			this.funMap.set(f21.ref,f);
		}
		var _g22 = 0;
		var _g3 = funs.length;
		while(_g22 < _g3) {
			var i = _g22++;
			this.curFun = funs[i];
			this.curFun.expr = this.evalExpr(this.curFun.expr,false);
		}
		var s1 = s.name;
		var _g4 = [];
		var _g5 = 0;
		var _g6 = s.vars;
		while(_g5 < _g6.length) {
			var v = _g6[_g5];
			++_g5;
			_g4.push(this.mapVar(v));
		}
		return { name : s1, vars : _g4, funs : funs};
	}
	,markReturn: null
	,hasReturn: function(e) {
		this.markReturn = false;
		this.hasReturnLoop(e);
		return this.markReturn;
	}
	,hasReturnLoop: function(e) {
		var _g = e.e;
		if(_g._hx_index == 12) {
			var _g1 = _g.e;
			this.markReturn = true;
		} else if(!this.markReturn) {
			hxsl_Tools.iter(e,$bind(this,this.hasReturnLoop));
		}
	}
	,handleReturn: function(e,isFinal) {
		if(isFinal == null) {
			isFinal = false;
		}
		var _g = e.e;
		switch(_g._hx_index) {
		case 3:
			var v = _g.e;
			var v1 = this.handleReturn(v,isFinal);
			return { e : hxsl_TExprDef.TParenthesis(v1), t : v1.t, p : e.p};
		case 4:
			var el = _g.el;
			var i = 0;
			var last = el.length;
			var out = [];
			_hx_loop1: while(i < last) {
				var e1 = el[i++];
				if(i == last) {
					out.push(this.handleReturn(e1,isFinal));
				} else {
					var _g1 = e1.e;
					switch(_g1._hx_index) {
					case 10:
						if(_g1.eelse == null) {
							var econd = _g1.econd;
							var eif = _g1.eif;
							if(isFinal && this.hasReturn(eif)) {
								out.push(this.handleReturn({ e : hxsl_TExprDef.TIf(econd,eif,{ e : hxsl_TExprDef.TBlock(el.slice(i)), t : e1.t, p : e1.p}), t : e1.t, p : e1.p}));
								break _hx_loop1;
							} else {
								out.push(this.handleReturn(e1));
							}
						} else {
							out.push(this.handleReturn(e1));
						}
						break;
					case 12:
						var e2 = _g1.e;
						out.push(this.handleReturn(e2,isFinal));
						break _hx_loop1;
					default:
						out.push(this.handleReturn(e1));
					}
				}
			}
			var t = isFinal ? out[out.length - 1].t : e.t;
			return { e : hxsl_TExprDef.TBlock(out), t : t, p : e.p};
		case 10:
			var eelse = _g.eelse;
			var eif1 = _g.eif;
			var cond = _g.econd;
			if(eelse != null && isFinal) {
				var cond1 = this.handleReturn(cond);
				var eif2 = this.handleReturn(eif1,isFinal);
				return { e : hxsl_TExprDef.TIf(cond1,eif2,this.handleReturn(eelse,isFinal)), t : eif2.t, p : e.p};
			} else {
				return hxsl_Tools.map(e,$bind(this,this.handleReturnDef));
			}
			break;
		case 12:
			var v2 = _g.e;
			if(!isFinal) {
				hxsl_Error.t("Cannot inline not final return",e.p);
			}
			if(v2 == null) {
				return { e : hxsl_TExprDef.TBlock([]), t : hxsl_Type.TVoid, p : e.p};
			}
			return this.handleReturn(v2,true);
		default:
			return hxsl_Tools.map(e,$bind(this,this.handleReturnDef));
		}
	}
	,handleReturnDef: function(e) {
		return this.handleReturn(e);
	}
	,evalCall: function(g,args,oldArgs,pos) {
		switch(g._hx_index) {
		case 38:
			if(args.length == 1) {
				var _g = args[0];
				var _g3 = _g.t;
				var _g2 = _g.p;
				var _g1 = _g.e;
				if(_g1._hx_index == 0) {
					var _g4 = _g1.c;
					if(_g4._hx_index == 2) {
						var i = _g4.v;
						return hxsl_TExprDef.TConst(hxsl_Const.CFloat(i));
					} else {
						return null;
					}
				} else {
					return null;
				}
			} else {
				return null;
			}
			break;
		case 63:case 64:
			var i1;
			var _g5 = args[0].e;
			if(_g5._hx_index == 0) {
				var _g11 = _g5.c;
				if(_g11._hx_index == 2) {
					var i2 = _g11.v;
					i1 = i2;
				} else {
					hxsl_Error.t("Cannot eval complex channel " + hxsl_Printer.toString(args[0],true) + " " + this.constantsToString(),pos);
					throw new js__$Boot_HaxeError("assert");
				}
			} else {
				hxsl_Error.t("Cannot eval complex channel " + hxsl_Printer.toString(args[0],true) + " " + this.constantsToString(),pos);
				throw new js__$Boot_HaxeError("assert");
			}
			var channel = oldArgs[0];
			var _g31 = channel.e;
			var channel1;
			if(_g31._hx_index == 1) {
				var v = _g31.v;
				channel1 = hxsl_TExprDef.TVar(this.mapVar(v));
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
			channel = { e : channel1, t : channel.t, p : channel.p};
			var count;
			var _g51 = channel.t;
			if(_g51._hx_index == 17) {
				var i3 = _g51.size;
				count = i3;
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
			var channelMode = Type.createEnumIndex(hxsl_Channel,i1 & 7,null);
			var targs = [channel];
			var _g7 = 1;
			var _g8 = args.length;
			while(_g7 < _g8) {
				var i4 = _g7++;
				targs.push(args[i4]);
			}
			targs.push({ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(i1 >> 3)), t : hxsl_Type.TInt, p : pos});
			var tget = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(g), t : hxsl_Type.TVoid, p : pos},targs), t : hxsl_Type.TVoid, p : pos};
			switch(channelMode._hx_index) {
			case 0:
				var zero = { e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(0.)), t : hxsl_Type.TFloat, p : pos};
				if(count == 1) {
					return zero.e;
				}
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.Vec2,hxsl_TGlobal.Vec3,hxsl_TGlobal.Vec4][count - 2]), t : hxsl_Type.TVoid, p : pos},[zero]);
			case 1:case 2:case 3:case 4:
				var tmp;
				switch(count) {
				case 1:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X];
						break;
					case 2:
						tmp = [hxsl_Component.Y];
						break;
					case 3:
						tmp = [hxsl_Component.Z];
						break;
					case 4:
						tmp = [hxsl_Component.W];
						break;
					default:
						throw new js__$Boot_HaxeError("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				case 2:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X,hxsl_Component.Y];
						break;
					case 2:
						tmp = [hxsl_Component.Y,hxsl_Component.Z];
						break;
					case 3:
						tmp = [hxsl_Component.Z,hxsl_Component.W];
						break;
					default:
						throw new js__$Boot_HaxeError("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				case 3:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z];
						break;
					case 2:
						tmp = [hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
						break;
					default:
						throw new js__$Boot_HaxeError("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				default:
					throw new js__$Boot_HaxeError("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
				}
				return hxsl_TExprDef.TSwiz(tget,tmp);
			case 5:
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Unpack), t : hxsl_Type.TVoid, p : pos},[tget]);
			case 6:
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.UnpackNormal), t : hxsl_Type.TVoid, p : pos},[tget]);
			}
			break;
		case 67:
			var args1 = args;
			var _g6 = 0;
			while(_g6 < args1.length) {
				var a = args1[_g6];
				++_g6;
				haxe_Log.trace(hxsl_Printer.toString(a),{ fileName : a.p.file, lineNumber : 0, className : null, methodName : null});
			}
			return hxsl_TExprDef.TBlock([]);
		default:
			return null;
		}
	}
	,constantsToString: function() {
		var _g = [];
		var c = this.constants.keys();
		while(c.hasNext()) {
			var c1 = c.next();
			_g.push(c1 + " => " + hxsl_Printer.toString({ e : this.constants.h[c1], t : hxsl_Type.TVoid, p : null},true));
		}
		return _g.toString();
	}
	,evalExpr: function(e,isVal) {
		if(isVal == null) {
			isVal = true;
		}
		var _gthis = this;
		var d;
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var _g26 = _g.c;
			d = e.e;
			break;
		case 1:
			var v = _g.v;
			var c = this.constants.h[v.id];
			if(c != null) {
				d = c;
			} else {
				var v2 = this.mapVar(v);
				d = hxsl_TExprDef.TVar(v2);
			}
			break;
		case 2:
			var _g4 = _g.g;
			d = e.e;
			break;
		case 3:
			var e1 = _g.e;
			var e2 = this.evalExpr(e1,isVal);
			var _g1 = e2.e;
			if(_g1._hx_index == 0) {
				var _g11 = _g1.c;
				d = e2.e;
			} else {
				d = hxsl_TExprDef.TParenthesis(e2);
			}
			break;
		case 4:
			var el = _g.el;
			var out = [];
			var last = el.length - 1;
			var _g2 = 0;
			var _g12 = el.length;
			while(_g2 < _g12) {
				var i = _g2++;
				var isVal1 = isVal && i == last;
				var e3 = this.evalExpr(el[i],isVal1);
				var _g3 = e3.e;
				switch(_g3._hx_index) {
				case 0:
					var _g21 = _g3.c;
					if(!(!isVal1)) {
						out.push(e3);
					}
					break;
				case 1:
					var _g13 = _g3.v;
					if(!(!isVal1)) {
						out.push(e3);
					}
					break;
				default:
					out.push(e3);
				}
			}
			d = out.length == 1 && this.curFun.kind != hxsl_FunctionKind.Init ? out[0].e : hxsl_TExprDef.TBlock(out);
			break;
		case 5:
			var e21 = _g.e2;
			var e11 = _g.e1;
			var op = _g.op;
			var e12 = this.evalExpr(e11);
			var e22 = this.evalExpr(e21);
			switch(op._hx_index) {
			case 0:
				var _g5 = e22.e;
				var _g14 = e12.e;
				if(_g14._hx_index == 0) {
					var _g22 = _g14.c;
					switch(_g22._hx_index) {
					case 2:
						if(_g5._hx_index == 0) {
							var _g7 = _g5.c;
							if(_g7._hx_index == 2) {
								var a = _g22.v;
								var b = _g7.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a + b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g5._hx_index == 0) {
							var _g41 = _g5.c;
							if(_g41._hx_index == 3) {
								var a1 = _g22.v;
								var b1 = _g41.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a1 + b1));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 1:
				var _g6 = e22.e;
				var _g15 = e12.e;
				if(_g15._hx_index == 0) {
					var _g23 = _g15.c;
					switch(_g23._hx_index) {
					case 2:
						if(_g6._hx_index == 0) {
							var _g71 = _g6.c;
							if(_g71._hx_index == 2) {
								var a2 = _g23.v;
								var b2 = _g71.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a2 * b2 | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g6._hx_index == 0) {
							var _g42 = _g6.c;
							if(_g42._hx_index == 3) {
								var a3 = _g23.v;
								var b3 = _g42.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a3 * b3));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 2:
				var _g8 = e22.e;
				var _g16 = e12.e;
				if(_g16._hx_index == 0) {
					var _g24 = _g16.c;
					switch(_g24._hx_index) {
					case 2:
						if(_g8._hx_index == 0) {
							var _g72 = _g8.c;
							if(_g72._hx_index == 2) {
								var a4 = _g24.v;
								var b4 = _g72.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a4 / b4 | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g8._hx_index == 0) {
							var _g43 = _g8.c;
							if(_g43._hx_index == 3) {
								var a5 = _g24.v;
								var b5 = _g43.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a5 / b5));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 3:
				var _g9 = e22.e;
				var _g17 = e12.e;
				if(_g17._hx_index == 0) {
					var _g25 = _g17.c;
					switch(_g25._hx_index) {
					case 2:
						if(_g9._hx_index == 0) {
							var _g73 = _g9.c;
							if(_g73._hx_index == 2) {
								var a6 = _g25.v;
								var b6 = _g73.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a6 - b6 | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g9._hx_index == 0) {
							var _g44 = _g9.c;
							if(_g44._hx_index == 3) {
								var a7 = _g25.v;
								var b7 = _g44.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a7 - b7));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 4:case 21:
				d = hxsl_TExprDef.TBinop(op,e12,e22);
				break;
			case 5:
				var _g10 = e22.e;
				var _g18 = e12.e;
				if(_g18._hx_index == 0) {
					var _g27 = _g18.c;
					switch(_g27._hx_index) {
					case 0:
						d = _g10._hx_index == 0 ? _g10.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						var _g91 = _g27.b;
						if(_g10._hx_index == 0) {
							var _g101 = _g10.c;
							switch(_g101._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var a8 = _g91;
								var b8 = _g101.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a8 == b8 ? 0 : 1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						var _g121 = _g27.v;
						if(_g10._hx_index == 0) {
							var _g131 = _g10.c;
							switch(_g131._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var a9 = _g121;
								var b9 = _g131.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a9 - b9 == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						var _g61 = _g27.v;
						if(_g10._hx_index == 0) {
							var _g74 = _g10.c;
							switch(_g74._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var a10 = _g61;
								var b10 = _g74.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a10 > b10 ? 1 : a10 == b10 ? 0 : -1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						var _g31 = _g27.v;
						if(_g10._hx_index == 0) {
							var _g45 = _g10.c;
							switch(_g45._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var a11 = _g31;
								var b11 = _g45.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a11 > b11 ? 1 : a11 == b11 ? 0 : -1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 6:
				var _g19 = e22.e;
				var _g110 = e12.e;
				if(_g110._hx_index == 0) {
					var _g28 = _g110.c;
					switch(_g28._hx_index) {
					case 0:
						d = _g19._hx_index == 0 ? _g19.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						var _g92 = _g28.b;
						if(_g19._hx_index == 0) {
							var _g102 = _g19.c;
							switch(_g102._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var a12 = _g92;
								var b12 = _g102.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a12 == b12 ? 0 : 1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						var _g122 = _g28.v;
						if(_g19._hx_index == 0) {
							var _g132 = _g19.c;
							switch(_g132._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var a13 = _g122;
								var b13 = _g132.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a13 - b13 != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						var _g62 = _g28.v;
						if(_g19._hx_index == 0) {
							var _g75 = _g19.c;
							switch(_g75._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var a14 = _g62;
								var b14 = _g75.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a14 > b14 ? 1 : a14 == b14 ? 0 : -1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						var _g32 = _g28.v;
						if(_g19._hx_index == 0) {
							var _g46 = _g19.c;
							switch(_g46._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var a15 = _g32;
								var b15 = _g46.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a15 > b15 ? 1 : a15 == b15 ? 0 : -1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 7:
				var _g20 = e22.e;
				var _g111 = e12.e;
				if(_g111._hx_index == 0) {
					var _g29 = _g111.c;
					switch(_g29._hx_index) {
					case 0:
						d = _g20._hx_index == 0 ? _g20.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						var _g93 = _g29.b;
						if(_g20._hx_index == 0) {
							var _g103 = _g20.c;
							switch(_g103._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var a16 = _g93;
								var b16 = _g103.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a16 == b16 ? 0 : 1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						var _g123 = _g29.v;
						if(_g20._hx_index == 0) {
							var _g133 = _g20.c;
							switch(_g133._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var a17 = _g123;
								var b17 = _g133.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a17 - b17 > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						var _g63 = _g29.v;
						if(_g20._hx_index == 0) {
							var _g76 = _g20.c;
							switch(_g76._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var a18 = _g63;
								var b18 = _g76.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a18 > b18 ? 1 : a18 == b18 ? 0 : -1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						var _g33 = _g29.v;
						if(_g20._hx_index == 0) {
							var _g47 = _g20.c;
							switch(_g47._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var a19 = _g33;
								var b19 = _g47.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a19 > b19 ? 1 : a19 == b19 ? 0 : -1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 8:
				var _g30 = e22.e;
				var _g112 = e12.e;
				if(_g112._hx_index == 0) {
					var _g210 = _g112.c;
					switch(_g210._hx_index) {
					case 0:
						d = _g30._hx_index == 0 ? _g30.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						var _g94 = _g210.b;
						if(_g30._hx_index == 0) {
							var _g104 = _g30.c;
							switch(_g104._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var a20 = _g94;
								var b20 = _g104.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a20 == b20 ? 0 : 1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						var _g124 = _g210.v;
						if(_g30._hx_index == 0) {
							var _g134 = _g30.c;
							switch(_g134._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var a21 = _g124;
								var b21 = _g134.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a21 - b21 >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						var _g64 = _g210.v;
						if(_g30._hx_index == 0) {
							var _g77 = _g30.c;
							switch(_g77._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var a22 = _g64;
								var b22 = _g77.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a22 > b22 ? 1 : a22 == b22 ? 0 : -1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						var _g34 = _g210.v;
						if(_g30._hx_index == 0) {
							var _g48 = _g30.c;
							switch(_g48._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var a23 = _g34;
								var b23 = _g48.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a23 > b23 ? 1 : a23 == b23 ? 0 : -1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 9:
				var _g35 = e22.e;
				var _g113 = e12.e;
				if(_g113._hx_index == 0) {
					var _g211 = _g113.c;
					switch(_g211._hx_index) {
					case 0:
						d = _g35._hx_index == 0 ? _g35.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						var _g95 = _g211.b;
						if(_g35._hx_index == 0) {
							var _g105 = _g35.c;
							switch(_g105._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var a24 = _g95;
								var b24 = _g105.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a24 == b24 ? 0 : 1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						var _g125 = _g211.v;
						if(_g35._hx_index == 0) {
							var _g135 = _g35.c;
							switch(_g135._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var a25 = _g125;
								var b25 = _g135.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a25 - b25 < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						var _g65 = _g211.v;
						if(_g35._hx_index == 0) {
							var _g78 = _g35.c;
							switch(_g78._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var a26 = _g65;
								var b26 = _g78.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a26 > b26 ? 1 : a26 == b26 ? 0 : -1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						var _g36 = _g211.v;
						if(_g35._hx_index == 0) {
							var _g49 = _g35.c;
							switch(_g49._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var a27 = _g36;
								var b27 = _g49.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a27 > b27 ? 1 : a27 == b27 ? 0 : -1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 10:
				var _g37 = e22.e;
				var _g114 = e12.e;
				if(_g114._hx_index == 0) {
					var _g212 = _g114.c;
					switch(_g212._hx_index) {
					case 0:
						d = _g37._hx_index == 0 ? _g37.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e12,e22);
						break;
					case 1:
						var _g96 = _g212.b;
						if(_g37._hx_index == 0) {
							var _g106 = _g37.c;
							switch(_g106._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var a28 = _g96;
								var b28 = _g106.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a28 == b28 ? 0 : 1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 2:
						var _g126 = _g212.v;
						if(_g37._hx_index == 0) {
							var _g136 = _g37.c;
							switch(_g136._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var a29 = _g126;
								var b29 = _g136.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a29 - b29 <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						var _g66 = _g212.v;
						if(_g37._hx_index == 0) {
							var _g79 = _g37.c;
							switch(_g79._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var a30 = _g66;
								var b30 = _g79.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a30 > b30 ? 1 : a30 == b30 ? 0 : -1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 4:
						var _g38 = _g212.v;
						if(_g37._hx_index == 0) {
							var _g410 = _g37.c;
							switch(_g410._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var a31 = _g38;
								var b31 = _g410.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a31 > b31 ? 1 : a31 == b31 ? 0 : -1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 11:
				var _g39 = e22.e;
				var _g115 = e12.e;
				if(_g115._hx_index == 0) {
					var _g213 = _g115.c;
					if(_g213._hx_index == 2) {
						if(_g39._hx_index == 0) {
							var _g411 = _g39.c;
							if(_g411._hx_index == 2) {
								var a32 = _g213.v;
								var b32 = _g411.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a32 & b32));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 12:
				var _g40 = e22.e;
				var _g116 = e12.e;
				if(_g116._hx_index == 0) {
					var _g214 = _g116.c;
					if(_g214._hx_index == 2) {
						if(_g40._hx_index == 0) {
							var _g412 = _g40.c;
							if(_g412._hx_index == 2) {
								var a33 = _g214.v;
								var b33 = _g412.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a33 | b33));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 13:
				var _g50 = e22.e;
				var _g117 = e12.e;
				if(_g117._hx_index == 0) {
					var _g215 = _g117.c;
					if(_g215._hx_index == 2) {
						if(_g50._hx_index == 0) {
							var _g413 = _g50.c;
							if(_g413._hx_index == 2) {
								var a34 = _g215.v;
								var b34 = _g413.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a34 ^ b34));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 14:
				var _g51 = e22.e;
				var _g118 = e12.e;
				if(_g118._hx_index == 0) {
					var _g216 = _g118.c;
					if(_g216._hx_index == 1) {
						var _g310 = _g216.b;
						if(_g51._hx_index == 0) {
							var _g414 = _g51.c;
							if(_g414._hx_index == 1) {
								var a35 = _g310;
								var b35 = _g414.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a35 && b35));
							} else {
								var a36 = _g310;
								d = a36 == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a36)) : e22.e;
							}
						} else {
							var a37 = _g310;
							d = a37 == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a37)) : e22.e;
						}
					} else if(_g51._hx_index == 0) {
						var _g67 = _g51.c;
						if(_g67._hx_index == 1) {
							var a38 = _g67.b;
							d = a38 == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a38)) : e12.e;
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else if(_g51._hx_index == 0) {
					var _g81 = _g51.c;
					if(_g81._hx_index == 1) {
						var a39 = _g81.b;
						d = a39 == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a39)) : e12.e;
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 15:
				var _g52 = e22.e;
				var _g119 = e12.e;
				if(_g119._hx_index == 0) {
					var _g217 = _g119.c;
					if(_g217._hx_index == 1) {
						var _g311 = _g217.b;
						if(_g52._hx_index == 0) {
							var _g415 = _g52.c;
							if(_g415._hx_index == 1) {
								var a40 = _g311;
								var b36 = _g415.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a40 || b36));
							} else {
								var a41 = _g311;
								d = a41 == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a41)) : e22.e;
							}
						} else {
							var a42 = _g311;
							d = a42 == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a42)) : e22.e;
						}
					} else if(_g52._hx_index == 0) {
						var _g68 = _g52.c;
						if(_g68._hx_index == 1) {
							var a43 = _g68.b;
							d = a43 == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a43)) : e12.e;
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else if(_g52._hx_index == 0) {
					var _g82 = _g52.c;
					if(_g82._hx_index == 1) {
						var a44 = _g82.b;
						d = a44 == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a44)) : e12.e;
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 16:
				var _g53 = e22.e;
				var _g120 = e12.e;
				if(_g120._hx_index == 0) {
					var _g218 = _g120.c;
					if(_g218._hx_index == 2) {
						if(_g53._hx_index == 0) {
							var _g416 = _g53.c;
							if(_g416._hx_index == 2) {
								var a45 = _g218.v;
								var b37 = _g416.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a45 << b37));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 17:
				var _g54 = e22.e;
				var _g127 = e12.e;
				if(_g127._hx_index == 0) {
					var _g219 = _g127.c;
					if(_g219._hx_index == 2) {
						if(_g54._hx_index == 0) {
							var _g417 = _g54.c;
							if(_g417._hx_index == 2) {
								var a46 = _g219.v;
								var b38 = _g417.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a46 >> b38));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 18:
				var _g55 = e22.e;
				var _g128 = e12.e;
				if(_g128._hx_index == 0) {
					var _g220 = _g128.c;
					if(_g220._hx_index == 2) {
						if(_g55._hx_index == 0) {
							var _g418 = _g55.c;
							if(_g418._hx_index == 2) {
								var a47 = _g220.v;
								var b39 = _g418.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a47 >>> b39));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 19:
				var _g56 = e22.e;
				var _g129 = e12.e;
				if(_g129._hx_index == 0) {
					var _g221 = _g129.c;
					switch(_g221._hx_index) {
					case 2:
						if(_g56._hx_index == 0) {
							var _g710 = _g56.c;
							if(_g710._hx_index == 2) {
								var a48 = _g221.v;
								var b40 = _g710.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a48 % b40 | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					case 3:
						if(_g56._hx_index == 0) {
							var _g419 = _g56.c;
							if(_g419._hx_index == 3) {
								var a49 = _g221.v;
								var b41 = _g419.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a49 % b41));
							} else {
								d = hxsl_TExprDef.TBinop(op,e12,e22);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e12,e22);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e12,e22);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e12,e22);
				}
				break;
			case 20:
				var _g57 = op.op;
				d = hxsl_TExprDef.TBinop(op,e12,e22);
				break;
			case 22:
				throw new js__$Boot_HaxeError("assert");
			case 23:
				throw new js__$Boot_HaxeError("assert");
			}
			break;
		case 6:
			var e4 = _g.e1;
			var op1 = _g.op;
			var e5 = this.evalExpr(e4);
			var _g58 = e5.e;
			if(_g58._hx_index == 0) {
				var c1 = _g58.c;
				switch(op1._hx_index) {
				case 2:
					if(c1._hx_index == 1) {
						var b42 = c1.b;
						d = hxsl_TExprDef.TConst(hxsl_Const.CBool(!b42));
					} else {
						d = hxsl_TExprDef.TUnop(op1,e5);
					}
					break;
				case 3:
					switch(c1._hx_index) {
					case 2:
						var i1 = c1.v;
						d = hxsl_TExprDef.TConst(hxsl_Const.CInt(-i1));
						break;
					case 3:
						var f = c1.v;
						d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(-f));
						break;
					default:
						d = hxsl_TExprDef.TUnop(op1,e5);
					}
					break;
				default:
					d = hxsl_TExprDef.TUnop(op1,e5);
				}
			} else {
				d = hxsl_TExprDef.TUnop(op1,e5);
			}
			break;
		case 7:
			var init = _g.init;
			var v1 = _g.v;
			d = hxsl_TExprDef.TVarDecl(this.mapVar(v1),init == null ? null : this.evalExpr(init));
			break;
		case 8:
			var eargs = _g.args;
			var c2 = _g.e;
			var c3 = this.evalExpr(c2);
			var _g59 = [];
			var _g130 = 0;
			while(_g130 < eargs.length) {
				var a50 = eargs[_g130];
				++_g130;
				_g59.push(this.evalExpr(a50));
			}
			var args = _g59;
			var _g222 = c3.e;
			switch(_g222._hx_index) {
			case 1:
				if(!this.inlineCalls) {
					d = hxsl_TExprDef.TCall(c3,args);
				} else {
					var v3 = _g222.v;
					if(this.funMap.h.__keys__[v3.__id__] != null) {
						var f1 = this.funMap.h[v3.__id__];
						var outExprs = [];
						var undo = [];
						var _g223 = 0;
						var _g312 = f1.args.length;
						while(_g223 < _g312) {
							var i2 = _g223++;
							var v4 = [f1.args[i2]];
							var e6 = args[i2];
							var _g224 = e6.e;
							switch(_g224._hx_index) {
							case 0:
								var _g107 = _g224.c;
								var old = [this.constants.h[v4[0].id]];
								undo.push((function(old1,v5) {
									return function() {
										if(old1[0] == null) {
											_gthis.constants.remove(v5[0].id);
										} else {
											_gthis.constants.h[v5[0].id] = old1[0];
										}
									};
								})(old,v4));
								this.constants.h[v4[0].id] = e6.e;
								break;
							case 1:
								var _g313 = _g224.v;
								var _g97 = _g313.type;
								var _g83 = _g313.qualifiers;
								var _g711 = _g313.parent;
								var _g69 = _g313.name;
								var _g420 = _g313.id;
								switch(_g313.kind._hx_index) {
								case 0:case 1:case 2:
									var old2 = [this.constants.h[v4[0].id]];
									undo.push((function(old3,v6) {
										return function() {
											if(old3[0] == null) {
												_gthis.constants.remove(v6[0].id);
											} else {
												_gthis.constants.h[v6[0].id] = old3[0];
											}
										};
									})(old2,v4));
									this.constants.h[v4[0].id] = e6.e;
									break;
								default:
									var old4 = [this.varMap.h[v4[0].__id__]];
									if(old4[0] == null) {
										undo.push((function(v7) {
											return function() {
												_gthis.varMap.remove(v7[0]);
											};
										})(v4));
									} else {
										this.varMap.remove(v4[0]);
										undo.push((function(old5,v8) {
											return function() {
												_gthis.varMap.set(v8[0],old5[0]);
											};
										})(old4,v4));
									}
									var v21 = this.mapVar(v4[0]);
									outExprs.push({ e : hxsl_TExprDef.TVarDecl(v21,e6), t : hxsl_Type.TVoid, p : e6.p});
								}
								break;
							default:
								var old6 = [this.varMap.h[v4[0].__id__]];
								if(old6[0] == null) {
									undo.push((function(v9) {
										return function() {
											_gthis.varMap.remove(v9[0]);
										};
									})(v4));
								} else {
									this.varMap.remove(v4[0]);
									undo.push((function(old7,v10) {
										return function() {
											_gthis.varMap.set(v10[0],old7[0]);
										};
									})(old6,v4));
								}
								var v22 = this.mapVar(v4[0]);
								outExprs.push({ e : hxsl_TExprDef.TVarDecl(v22,e6), t : hxsl_Type.TVoid, p : e6.p});
							}
						}
						var e7 = this.handleReturn(this.evalExpr(f1.expr,false),true);
						var _g421 = 0;
						while(_g421 < undo.length) {
							var u = undo[_g421];
							++_g421;
							u();
						}
						var _g510 = e7.e;
						if(_g510._hx_index == 4) {
							var el1 = _g510.el;
							var _g511 = 0;
							while(_g511 < el1.length) {
								var e8 = el1[_g511];
								++_g511;
								outExprs.push(e8);
							}
						} else {
							outExprs.push(e7);
						}
						d = hxsl_TExprDef.TBlock(outExprs);
					} else {
						d = hxsl_Error.t("Cannot eval non-static call expresssion '" + new hxsl_Printer().exprString(c3) + "'",c3.p);
					}
				}
				break;
			case 2:
				var g = _g222.g;
				var v11 = this.evalCall(g,args,eargs,e.p);
				d = v11 != null ? v11 : hxsl_TExprDef.TCall(c3,args);
				break;
			default:
				d = hxsl_Error.t("Cannot eval non-static call expresssion '" + new hxsl_Printer().exprString(c3) + "'",c3.p);
			}
			break;
		case 9:
			var r = _g.regs;
			var e9 = _g.e;
			d = hxsl_TExprDef.TSwiz(this.evalExpr(e9),r.slice());
			break;
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var econd = _g.econd;
			var econd1 = this.evalExpr(econd);
			var _g60 = econd1.e;
			if(_g60._hx_index == 0) {
				var _g137 = _g60.c;
				if(_g137._hx_index == 1) {
					var b43 = _g137.b;
					d = b43 ? this.evalExpr(eif,isVal).e : eelse == null ? hxsl_TExprDef.TConst(hxsl_Const.CNull) : this.evalExpr(eelse,isVal).e;
				} else if(isVal && eelse != null && this.eliminateConditionals) {
					d = hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mix), t : e.t, p : e.p},[this.evalExpr(eelse,true),this.evalExpr(eif,true),{ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToFloat), t : hxsl_Type.TFun([]), p : econd1.p},[econd1]), t : hxsl_Type.TFloat, p : e.p}]);
				} else {
					eif = this.evalExpr(eif,isVal);
					if(eelse != null) {
						eelse = this.evalExpr(eelse,isVal);
						var _g70 = eelse.e;
						if(_g70._hx_index == 0 && _g70.c._hx_index == 0) {
							eelse = null;
						}
					}
					d = hxsl_TExprDef.TIf(econd1,eif,eelse);
				}
			} else if(isVal && eelse != null && this.eliminateConditionals) {
				d = hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mix), t : e.t, p : e.p},[this.evalExpr(eelse,true),this.evalExpr(eif,true),{ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToFloat), t : hxsl_Type.TFun([]), p : econd1.p},[econd1]), t : hxsl_Type.TFloat, p : e.p}]);
			} else {
				eif = this.evalExpr(eif,isVal);
				if(eelse != null) {
					eelse = this.evalExpr(eelse,isVal);
					var _g80 = eelse.e;
					if(_g80._hx_index == 0 && _g80.c._hx_index == 0) {
						eelse = null;
					}
				}
				d = hxsl_TExprDef.TIf(econd1,eif,eelse);
			}
			break;
		case 11:
			d = hxsl_TExprDef.TDiscard;
			break;
		case 12:
			var e10 = _g.e;
			d = hxsl_TExprDef.TReturn(e10 == null ? null : this.evalExpr(e10));
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v12 = _g.v;
			var v23 = this.mapVar(v12);
			var it1 = this.evalExpr(it);
			var e13;
			var _g84 = it1.e;
			if(_g84._hx_index == 5) {
				var _g314 = _g84.e2;
				var _g225 = _g84.e1;
				if(_g84.op._hx_index == 21) {
					var _g610 = _g225.t;
					var _g512 = _g225.p;
					var _g422 = _g225.e;
					if(_g422._hx_index == 0) {
						var _g712 = _g422.c;
						if(_g712._hx_index == 2) {
							var _g1110 = _g314.t;
							var _g108 = _g314.p;
							var _g98 = _g314.e;
							if(_g98._hx_index == 0) {
								var _g1210 = _g98.c;
								if(_g1210._hx_index == 2) {
									var start = _g712.v;
									var len = _g1210.v;
									if(this.unrollLoops) {
										var out1 = [];
										var _g85 = start;
										var _g138 = len;
										while(_g85 < _g138) {
											var i3 = _g85++;
											this.constants.h[v12.id] = hxsl_TExprDef.TConst(hxsl_Const.CInt(i3));
											out1.push(this.evalExpr(loop,false));
										}
										this.constants.remove(v12.id);
										e13 = hxsl_TExprDef.TBlock(out1);
									} else {
										e13 = hxsl_TExprDef.TFor(v23,it1,this.evalExpr(loop,false));
									}
								} else {
									e13 = hxsl_TExprDef.TFor(v23,it1,this.evalExpr(loop,false));
								}
							} else {
								e13 = hxsl_TExprDef.TFor(v23,it1,this.evalExpr(loop,false));
							}
						} else {
							e13 = hxsl_TExprDef.TFor(v23,it1,this.evalExpr(loop,false));
						}
					} else {
						e13 = hxsl_TExprDef.TFor(v23,it1,this.evalExpr(loop,false));
					}
				} else {
					e13 = hxsl_TExprDef.TFor(v23,it1,this.evalExpr(loop,false));
				}
			} else {
				e13 = hxsl_TExprDef.TFor(v23,it1,this.evalExpr(loop,false));
			}
			this.varMap.remove(v12);
			d = e13;
			break;
		case 14:
			d = hxsl_TExprDef.TContinue;
			break;
		case 15:
			d = hxsl_TExprDef.TBreak;
			break;
		case 16:
			var e23 = _g.index;
			var e14 = _g.e;
			var e15 = this.evalExpr(e14);
			var e24 = this.evalExpr(e23);
			var _g86 = e24.e;
			var _g139 = e15.e;
			if(_g139._hx_index == 17) {
				if(_g86._hx_index == 0) {
					var _g315 = _g86.c;
					if(_g315._hx_index == 2) {
						var el2 = _g139.el;
						var i4 = _g315.v;
						d = i4 >= 0 && i4 < el2.length ? el2[i4].e : hxsl_TExprDef.TArray(e15,e24);
					} else {
						d = hxsl_TExprDef.TArray(e15,e24);
					}
				} else {
					d = hxsl_TExprDef.TArray(e15,e24);
				}
			} else {
				d = hxsl_TExprDef.TArray(e15,e24);
			}
			break;
		case 17:
			var el3 = _g.el;
			var _g87 = [];
			var _g140 = 0;
			while(_g140 < el3.length) {
				var e16 = el3[_g140];
				++_g140;
				_g87.push(this.evalExpr(e16));
			}
			d = hxsl_TExprDef.TArrayDecl(_g87);
			break;
		case 18:
			var def = _g.def;
			var cases = _g.cases;
			var e17 = _g.e;
			var e18 = this.evalExpr(e17);
			var _g88 = [];
			var _g141 = 0;
			while(_g141 < cases.length) {
				var c4 = cases[_g141];
				++_g141;
				var _g142 = [];
				var _g226 = 0;
				var _g316 = c4.values;
				while(_g226 < _g316.length) {
					var v13 = _g316[_g226];
					++_g226;
					_g142.push(this.evalExpr(v13));
				}
				_g88.push({ values : _g142, expr : this.evalExpr(c4.expr,isVal)});
			}
			var cases1 = _g88;
			var def1 = def == null ? null : this.evalExpr(def,isVal);
			var hasCase = false;
			var _g227 = e18.e;
			if(_g227._hx_index == 0) {
				var c5 = _g227.c;
				if(c5._hx_index == 2) {
					var val = c5.v;
					var _g228 = 0;
					while(_g228 < cases1.length) {
						var c6 = cases1[_g228];
						++_g228;
						var _g229 = 0;
						var _g317 = c6.values;
						while(_g229 < _g317.length) {
							var v14 = _g317[_g229];
							++_g229;
							var _g230 = v14.e;
							if(_g230._hx_index == 0) {
								var cst = _g230.c;
								switch(cst._hx_index) {
								case 2:
									var k = cst.v;
									if(k == val) {
										return c6.expr;
									}
									break;
								case 3:
									var k1 = cst.v;
									if(k1 == val) {
										return c6.expr;
									}
									break;
								default:
								}
							} else {
								hasCase = true;
							}
						}
					}
				} else {
					throw new js__$Boot_HaxeError("Unsupported switch constant " + Std.string(c5));
				}
			} else {
				hasCase = true;
			}
			d = hasCase ? hxsl_TExprDef.TSwitch(e18,cases1,def1) : def1 == null ? hxsl_TExprDef.TBlock([]) : def1.e;
			break;
		case 19:
			var normalWhile = _g.normalWhile;
			var loop1 = _g.loop;
			var cond = _g.e;
			var cond1 = this.evalExpr(cond);
			var loop2 = this.evalExpr(loop1,false);
			d = hxsl_TExprDef.TWhile(cond1,loop2,normalWhile);
			break;
		case 20:
			var e19 = _g.e;
			var args1 = _g.args;
			var name = _g.m;
			var e25;
			if(name == "unroll") {
				var old8 = this.unrollLoops;
				this.unrollLoops = true;
				e25 = this.evalExpr(e19,isVal);
				this.unrollLoops = false;
			} else {
				e25 = this.evalExpr(e19,isVal);
			}
			d = hxsl_TExprDef.TMeta(name,args1,e25);
			break;
		}
		return { e : d, t : e.t, p : e.p};
	}
	,__class__: hxsl_Eval
};
var hxsl__$Flatten_Alloc = function(g,t,pos,size) {
	this.g = g;
	this.t = t;
	this.pos = pos;
	this.size = size;
};
$hxClasses["hxsl._Flatten.Alloc"] = hxsl__$Flatten_Alloc;
hxsl__$Flatten_Alloc.__name__ = "hxsl._Flatten.Alloc";
hxsl__$Flatten_Alloc.prototype = {
	t: null
	,pos: null
	,size: null
	,g: null
	,v: null
	,__class__: hxsl__$Flatten_Alloc
};
var hxsl_ARead = $hxEnums["hxsl.ARead"] = { __ename__ : true, __constructs__ : ["AIndex","AOffset"]
	,AIndex: ($_=function(a) { return {_hx_index:0,a:a,__enum__:"hxsl.ARead",toString:$estr}; },$_.__params__ = ["a"],$_)
	,AOffset: ($_=function(a,stride,delta) { return {_hx_index:1,a:a,stride:stride,delta:delta,__enum__:"hxsl.ARead",toString:$estr}; },$_.__params__ = ["a","stride","delta"],$_)
};
hxsl_ARead.__empty_constructs__ = [];
var hxsl_Flatten = function() {
};
$hxClasses["hxsl.Flatten"] = hxsl_Flatten;
hxsl_Flatten.__name__ = "hxsl.Flatten";
hxsl_Flatten.prototype = {
	globals: null
	,params: null
	,outVars: null
	,varMap: null
	,econsts: null
	,consts: null
	,allocData: null
	,flatten: function(s,kind,constsToGlobal) {
		this.globals = [];
		this.params = [];
		this.outVars = [];
		if(constsToGlobal) {
			this.consts = [];
			var p = s.funs[0].expr.p;
			var gc = { id : hxsl_Tools.allocVarId(), name : "__consts__", kind : hxsl_VarKind.Global, type : null};
			this.econsts = { e : hxsl_TExprDef.TVar(gc), t : null, p : p};
			var s1 = s.name;
			var s2 = s.vars.slice();
			var _g = [];
			var _g1 = 0;
			var _g2 = s.funs;
			while(_g1 < _g2.length) {
				var f = _g2[_g1];
				++_g1;
				_g.push(this.mapFun(f,$bind(this,this.mapConsts)));
			}
			s = { name : s1, vars : s2, funs : _g};
			var _g3 = 0;
			var _g4 = s.vars;
			while(_g3 < _g4.length) {
				var v = _g4[_g3];
				++_g3;
				var _g31 = v.type;
				if(_g31._hx_index == 9) {
					var _g41 = _g31.size;
					this.allocConst(255,p);
				}
			}
			if(this.consts.length > 0) {
				gc.type = this.econsts.t = hxsl_Type.TArray(hxsl_Type.TFloat,hxsl_SizeDecl.SConst(this.consts.length));
				s.vars.push(gc);
			}
		}
		this.varMap = new haxe_ds_ObjectMap();
		this.allocData = new haxe_ds_ObjectMap();
		var _g5 = 0;
		var _g11 = s.vars;
		while(_g5 < _g11.length) {
			var v1 = _g11[_g5];
			++_g5;
			this.gatherVar(v1);
		}
		var prefix;
		switch(kind._hx_index) {
		case 0:
			prefix = "vertex";
			break;
		case 1:
			prefix = "fragment";
			break;
		default:
			throw new js__$Boot_HaxeError("assert");
		}
		this.pack(prefix + "Globals",hxsl_VarKind.Global,this.globals,hxsl_VecType.VFloat);
		this.pack(prefix + "Params",hxsl_VarKind.Param,this.params,hxsl_VecType.VFloat);
		var allVars = this.globals.concat(this.params);
		var textures = this.packTextures(prefix + "Textures",allVars,hxsl_Type.TSampler2D).concat(this.packTextures(prefix + "TexturesCube",allVars,hxsl_Type.TSamplerCube)).concat(this.packTextures(prefix + "TexturesArray",allVars,hxsl_Type.TSampler2DArray));
		this.packBuffers(allVars);
		var _g21 = [];
		var _g32 = 0;
		var _g42 = s.funs;
		while(_g32 < _g42.length) {
			var f1 = _g42[_g32];
			++_g32;
			_g21.push(this.mapFun(f1,$bind(this,this.mapExpr)));
		}
		var funs = _g21;
		var _g51 = 0;
		while(_g51 < textures.length) {
			var t = textures[_g51];
			++_g51;
			t.pos >>= 2;
		}
		return { name : s.name, vars : this.outVars, funs : funs};
	}
	,mapFun: function(f,mapExpr) {
		return { kind : f.kind, ret : f.ret, args : f.args, ref : f.ref, expr : mapExpr(f.expr)};
	}
	,mapExpr: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			var a = this.varMap.h[v.__id__];
			e = a == null ? e : this.access(a,v.type,e.p,hxsl_ARead.AIndex(a));
			break;
		case 16:
			var _g1 = _g.e;
			var _g5 = _g1.t;
			var _g3 = _g1.e;
			if(_g3._hx_index == 1) {
				var eindex = _g.index;
				var vp = _g1.p;
				var v1 = _g3.v;
				var _g2 = eindex.e;
				var e1;
				if(_g2._hx_index == 0) {
					var _g11 = _g2.c;
					if(_g11._hx_index == 2) {
						var _g21 = _g11.v;
						e1 = true;
					} else {
						e1 = false;
					}
				} else {
					e1 = false;
				}
				if(!e1) {
					var a1 = this.varMap.h[v1.__id__];
					if(a1 == null) {
						e = e;
					} else {
						var _g31 = v1.type;
						if(_g31._hx_index == 15) {
							var _g51 = _g31.size;
							var t = _g31.t;
							var stride = this.varSize(t,a1.t);
							if(stride == 0 || (stride & 3) != 0) {
								throw new js__$Boot_HaxeError(new hxsl_Error("Dynamic access to an Array which size is not 4 components-aligned is not allowed",e.p));
							}
							stride >>= 2;
							eindex = this.mapExpr(eindex);
							var toInt = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToInt), t : hxsl_Type.TFun([]), p : vp},[eindex]), t : hxsl_Type.TInt, p : vp};
							e = this.access(a1,t,vp,hxsl_ARead.AOffset(a1,stride,stride == 1 ? toInt : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpMult,toInt,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(stride)), t : hxsl_Type.TInt, p : vp}), t : hxsl_Type.TInt, p : vp}));
						} else {
							throw new js__$Boot_HaxeError("assert");
						}
					}
				} else {
					e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
				}
			} else {
				e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
			}
			break;
		default:
			e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
		}
		return this.optimize(e);
	}
	,mapConsts: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			switch(c._hx_index) {
			case 2:
				var v = c.v;
				return this.allocConst(v,e.p);
			case 3:
				var v1 = c.v;
				return this.allocConst(v1,e.p);
			default:
				return e;
			}
			break;
		case 2:
			var g = _g.g;
			switch(g._hx_index) {
			case 0:
				this.allocConst(Math.PI / 180,e.p);
				break;
			case 1:
				this.allocConst(180 / Math.PI,e.p);
				break;
			case 9:
				this.allocConst(1.4426950408889634,e.p);
				break;
			case 10:
				this.allocConst(0.6931471805599453,e.p);
				break;
			case 24:
				this.allocConst(1,e.p);
				break;
			case 26:
				this.allocConst(2.0,e.p);
				this.allocConst(3.0,e.p);
				break;
			case 54:
				this.allocConsts([1,255,65025,16581375],e.p);
				this.allocConsts([0.00392156862745098,0.00392156862745098,0.00392156862745098,0],e.p);
				break;
			case 55:
				this.allocConsts([1,0.00392156862745098,1.5378700499807768e-005,6.0308629411010845e-008],e.p);
				break;
			case 56:
				this.allocConst(1,e.p);
				this.allocConst(0.5,e.p);
				break;
			case 57:
				this.allocConst(0.5,e.p);
				break;
			case 58:
				this.allocConsts([0.5,0.5],e.p);
				this.allocConsts([0.5,-0.5],e.p);
				break;
			case 59:
				this.allocConsts([2,-2],e.p);
				this.allocConsts([-1,1],e.p);
				break;
			default:
			}
			break;
		case 5:
			var _g12 = _g.e2;
			var _g11 = _g.e1;
			if(_g.op._hx_index == 1) {
				var _g14 = _g12.p;
				var _g13 = _g12.e;
				if(_g12.t._hx_index == 8) {
					this.allocConst(1,e.p);
				}
			}
			break;
		case 8:
			var _g17 = _g.args;
			var _g16 = _g.e;
			var _g20 = _g16.t;
			var _g19 = _g16.p;
			var _g18 = _g16.e;
			if(_g18._hx_index == 2) {
				if(_g18.g._hx_index == 42) {
					if(_g17.length == 2) {
						var _g23 = _g17[1];
						var _g22 = _g17[0];
						var _g26 = _g22.t;
						var _g25 = _g22.p;
						var _g24 = _g22.e;
						if(_g24._hx_index == 1) {
							var _g27 = _g24.v;
							var _g33 = _g27.type;
							var _g32 = _g27.qualifiers;
							var _g31 = _g27.parent;
							var _g30 = _g27.name;
							var _g28 = _g27.id;
							switch(_g27.kind._hx_index) {
							case 0:
								if(_g26._hx_index == 5) {
									if(_g26.size == 3) {
										if(_g26.t._hx_index == 1) {
											var _g59 = _g23.t;
											var _g58 = _g23.p;
											var _g57 = _g23.e;
											if(_g57._hx_index == 0) {
												var _g60 = _g57.c;
												if(_g60._hx_index == 2) {
													if(_g60.v == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							case 1:
								if(_g26._hx_index == 5) {
									if(_g26.size == 3) {
										if(_g26.t._hx_index == 1) {
											var _g38 = _g23.t;
											var _g37 = _g23.p;
											var _g36 = _g23.e;
											if(_g36._hx_index == 0) {
												var _g39 = _g36.c;
												if(_g39._hx_index == 2) {
													if(_g39.v == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							case 2:
								if(_g26._hx_index == 5) {
									if(_g26.size == 3) {
										if(_g26.t._hx_index == 1) {
											var _g52 = _g23.t;
											var _g51 = _g23.p;
											var _g50 = _g23.e;
											if(_g50._hx_index == 0) {
												var _g53 = _g50.c;
												if(_g53._hx_index == 2) {
													if(_g53.v == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							case 3:
								if(_g26._hx_index == 5) {
									if(_g26.size == 3) {
										if(_g26.t._hx_index == 1) {
											var _g45 = _g23.t;
											var _g44 = _g23.p;
											var _g43 = _g23.e;
											if(_g43._hx_index == 0) {
												var _g46 = _g43.c;
												if(_g46._hx_index == 2) {
													if(_g46.v == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							default:
							}
						}
					}
				}
			}
			break;
		case 16:
			var _g2 = _g.index;
			var _g1 = _g.e;
			var _g5 = _g2.t;
			var _g4 = _g2.p;
			var _g3 = _g2.e;
			if(_g3._hx_index == 0) {
				var _g6 = _g3.c;
				if(_g6._hx_index == 2) {
					var _g7 = _g6.v;
					var ea = _g1;
					var eindex = _g2;
					return { e : hxsl_TExprDef.TArray(this.mapConsts(ea),eindex), t : e.t, p : e.p};
				} else {
					var ea1 = _g1;
					var eindex1 = _g2;
					var _g8 = ea1.t;
					if(_g8._hx_index == 15) {
						var _g21 = _g8.size;
						var t = _g8.t;
						var stride = this.varSize(t,hxsl_VecType.VFloat) >> 2;
						this.allocConst(stride,e.p);
					}
				}
			} else {
				var ea2 = _g1;
				var eindex2 = _g2;
				var _g9 = ea2.t;
				if(_g9._hx_index == 15) {
					var _g29 = _g9.size;
					var t1 = _g9.t;
					var stride1 = this.varSize(t1,hxsl_VecType.VFloat) >> 2;
					this.allocConst(stride1,e.p);
				}
			}
			break;
		default:
		}
		return hxsl_Tools.map(e,$bind(this,this.mapConsts));
	}
	,allocConst: function(v,p) {
		var index = this.consts.indexOf(v);
		if(index < 0) {
			index = this.consts.length;
			this.consts.push(v);
		}
		return { e : hxsl_TExprDef.TArray(this.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p};
	}
	,allocConsts: function(va,p) {
		var _gthis = this;
		var pad = va.length - 1 & 3;
		var index = -1;
		var _g = 0;
		var _g1 = this.consts.length - (va.length - 1);
		while(_g < _g1) {
			var i = _g++;
			if(i >> 2 != i + pad >> 2) {
				continue;
			}
			var found = true;
			var _g2 = 0;
			var _g11 = va.length;
			while(_g2 < _g11) {
				var j = _g2++;
				if(this.consts[i + j] != va[j]) {
					found = false;
					break;
				}
			}
			if(found) {
				index = i;
				break;
			}
		}
		if(index < 0) {
			while(this.consts.length >> 2 != this.consts.length + pad >> 2) this.consts.push(0);
			index = this.consts.length;
			var _g21 = 0;
			while(_g21 < va.length) {
				var v = va[_g21];
				++_g21;
				this.consts.push(v);
			}
		}
		switch(va.length) {
		case 1:
			return { e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p};
		case 2:
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec2), t : hxsl_Type.TVoid, p : p},[{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 1)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p}]), t : hxsl_Type.TVec(2,hxsl_VecType.VFloat), p : p};
		case 3:
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec3), t : hxsl_Type.TVoid, p : p},[{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 1)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 2)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p}]), t : hxsl_Type.TVec(3,hxsl_VecType.VFloat), p : p};
		case 4:
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec4), t : hxsl_Type.TVoid, p : p},[{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 1)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 3)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 4)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p}]), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : p};
		default:
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,access: function(a,t,pos,acc) {
		var _gthis = this;
		switch(t._hx_index) {
		case 6:
			var tmp = this.access(a,hxsl_Type.TMat3x4,pos,acc);
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat3), t : hxsl_Type.TFun([]), p : pos},[tmp]), t : hxsl_Type.TMat3, p : pos};
		case 7:
			var tmp1 = hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat4);
			var tmp2 = hxsl_Type.TFun([]);
			var tmp3;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a1.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var delta = acc.delta;
				var stride = acc.stride;
				var a2 = acc.a;
				var index = a2.pos >> 2;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a2.g), t : a2.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a2.t), p : pos};
				break;
			}
			var tmp4;
			switch(acc._hx_index) {
			case 0:
				var a3 = acc.a;
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a3.g), t : a3.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((a3.pos >> 2) + 1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a3.t), p : pos};
				break;
			case 1:
				var delta1 = acc.delta;
				var stride1 = acc.stride;
				var a4 = acc.a;
				var index1 = (a4.pos >> 2) + 1;
				var offset1 = index1 == 0 ? delta1 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta1,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a4.g), t : a4.g.type, p : pos},offset1), t : hxsl_Type.TVec(4,a4.t), p : pos};
				break;
			}
			var tmp5;
			switch(acc._hx_index) {
			case 0:
				var a5 = acc.a;
				tmp5 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a5.g), t : a5.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((a5.pos >> 2) + 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a5.t), p : pos};
				break;
			case 1:
				var delta2 = acc.delta;
				var stride2 = acc.stride;
				var a6 = acc.a;
				var index2 = (a6.pos >> 2) + 2;
				var offset2 = index2 == 0 ? delta2 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta2,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp5 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a6.g), t : a6.g.type, p : pos},offset2), t : hxsl_Type.TVec(4,a6.t), p : pos};
				break;
			}
			var tmp6;
			switch(acc._hx_index) {
			case 0:
				var a7 = acc.a;
				tmp6 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a7.g), t : a7.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((a7.pos >> 2) + 3)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a7.t), p : pos};
				break;
			case 1:
				var delta3 = acc.delta;
				var stride3 = acc.stride;
				var a8 = acc.a;
				var index3 = (a8.pos >> 2) + 3;
				var offset3 = index3 == 0 ? delta3 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta3,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index3)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp6 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a8.g), t : a8.g.type, p : pos},offset3), t : hxsl_Type.TVec(4,a8.t), p : pos};
				break;
			}
			return { e : hxsl_TExprDef.TCall({ e : tmp1, t : tmp2, p : pos},[tmp3,tmp4,tmp5,tmp6]), t : hxsl_Type.TMat4, p : pos};
		case 8:
			var tmp7 = hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat3x4);
			var tmp8 = hxsl_Type.TFun([]);
			var tmp9;
			switch(acc._hx_index) {
			case 0:
				var a9 = acc.a;
				tmp9 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a9.g), t : a9.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a9.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a9.t), p : pos};
				break;
			case 1:
				var delta4 = acc.delta;
				var stride4 = acc.stride;
				var a10 = acc.a;
				var index4 = a10.pos >> 2;
				var offset4 = index4 == 0 ? delta4 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta4,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index4)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp9 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a10.g), t : a10.g.type, p : pos},offset4), t : hxsl_Type.TVec(4,a10.t), p : pos};
				break;
			}
			var tmp10;
			switch(acc._hx_index) {
			case 0:
				var a11 = acc.a;
				tmp10 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a11.g), t : a11.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((a11.pos >> 2) + 1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a11.t), p : pos};
				break;
			case 1:
				var delta5 = acc.delta;
				var stride5 = acc.stride;
				var a12 = acc.a;
				var index5 = (a12.pos >> 2) + 1;
				var offset5 = index5 == 0 ? delta5 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta5,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index5)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp10 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a12.g), t : a12.g.type, p : pos},offset5), t : hxsl_Type.TVec(4,a12.t), p : pos};
				break;
			}
			var tmp11;
			switch(acc._hx_index) {
			case 0:
				var a13 = acc.a;
				tmp11 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a13.g), t : a13.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt((a13.pos >> 2) + 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a13.t), p : pos};
				break;
			case 1:
				var delta6 = acc.delta;
				var stride6 = acc.stride;
				var a14 = acc.a;
				var index6 = (a14.pos >> 2) + 2;
				var offset6 = index6 == 0 ? delta6 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta6,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index6)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp11 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a14.g), t : a14.g.type, p : pos},offset6), t : hxsl_Type.TVec(4,a14.t), p : pos};
				break;
			}
			return { e : hxsl_TExprDef.TCall({ e : tmp7, t : tmp8, p : pos},[tmp9,tmp10,tmp11]), t : hxsl_Type.TMat3x4, p : pos};
		case 15:
			var _g1 = t.size;
			if(_g1._hx_index == 0) {
				var t1 = t.t;
				var len = _g1.v;
				var stride7 = a.size / len | 0;
				var _g = [];
				var _g11 = 0;
				var _g2 = len;
				while(_g11 < _g2) {
					var i = _g11++;
					var a15 = new hxsl__$Flatten_Alloc(a.g,a.t,a.pos + stride7 * i,stride7);
					_g.push(this.access(a15,t1,pos,hxsl_ARead.AIndex(a15)));
				}
				var earr = _g;
				return { e : hxsl_TExprDef.TArrayDecl(earr), t : t1, p : pos};
			} else {
				if(hxsl_Tools.isSampler(t)) {
					var e;
					switch(acc._hx_index) {
					case 0:
						var a16 = acc.a;
						e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a16.g), t : a16.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a16.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a16.t), p : pos};
						break;
					case 1:
						var delta7 = acc.delta;
						var stride8 = acc.stride;
						var a17 = acc.a;
						var index7 = a17.pos >> 2;
						var offset7 = index7 == 0 ? delta7 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta7,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index7)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
						e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a17.g), t : a17.g.type, p : pos},offset7), t : hxsl_Type.TVec(4,a17.t), p : pos};
						break;
					}
					e.t = t;
					return e;
				}
				var size = this.varSize(t,a.t);
				if(size > 4) {
					return hxsl_Error.t("Access not supported for " + hxsl_Tools.toString(t),null);
				}
				var e1;
				switch(acc._hx_index) {
				case 0:
					var a18 = acc.a;
					e1 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a18.g), t : a18.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a18.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a18.t), p : pos};
					break;
				case 1:
					var delta8 = acc.delta;
					var stride9 = acc.stride;
					var a19 = acc.a;
					var index8 = a19.pos >> 2;
					var offset8 = index8 == 0 ? delta8 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta8,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index8)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
					e1 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a19.g), t : a19.g.type, p : pos},offset8), t : hxsl_Type.TVec(4,a19.t), p : pos};
					break;
				}
				if(size == 4) {
					if((a.pos & 3) != 0) {
						throw new js__$Boot_HaxeError("assert");
					}
				} else {
					var sw = [];
					var _g3 = 0;
					var _g12 = size;
					while(_g3 < _g12) {
						var i1 = _g3++;
						sw.push(hxsl_Tools.SWIZ[i1 + (a.pos & 3)]);
					}
					e1 = { e : hxsl_TExprDef.TSwiz(e1,sw), t : t, p : pos};
				}
				switch(t._hx_index) {
				case 1:
					e1.t = hxsl_Type.TFloat;
					e1 = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToInt), t : hxsl_Type.TFun([]), p : pos},[e1]), t : t, p : pos};
					break;
				case 5:
					if(t.t._hx_index == 0) {
						var size1 = t.size;
						e1.t = hxsl_Type.TVec(size1,hxsl_VecType.VFloat);
						e1 = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4][size1 - 2]), t : hxsl_Type.TFun([]), p : pos},[e1]), t : t, p : pos};
					}
					break;
				default:
				}
				return e1;
			}
			break;
		default:
			if(hxsl_Tools.isSampler(t)) {
				var e2;
				switch(acc._hx_index) {
				case 0:
					var a20 = acc.a;
					e2 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a20.g), t : a20.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a20.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a20.t), p : pos};
					break;
				case 1:
					var delta9 = acc.delta;
					var stride10 = acc.stride;
					var a21 = acc.a;
					var index9 = a21.pos >> 2;
					var offset9 = index9 == 0 ? delta9 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta9,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index9)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
					e2 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a21.g), t : a21.g.type, p : pos},offset9), t : hxsl_Type.TVec(4,a21.t), p : pos};
					break;
				}
				e2.t = t;
				return e2;
			}
			var size2 = this.varSize(t,a.t);
			if(size2 > 4) {
				return hxsl_Error.t("Access not supported for " + hxsl_Tools.toString(t),null);
			}
			var e3;
			switch(acc._hx_index) {
			case 0:
				var a22 = acc.a;
				e3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a22.g), t : a22.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(a22.pos >> 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a22.t), p : pos};
				break;
			case 1:
				var delta10 = acc.delta;
				var stride11 = acc.stride;
				var a23 = acc.a;
				var index10 = a23.pos >> 2;
				var offset10 = index10 == 0 ? delta10 : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta10,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index10)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				e3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a23.g), t : a23.g.type, p : pos},offset10), t : hxsl_Type.TVec(4,a23.t), p : pos};
				break;
			}
			if(size2 == 4) {
				if((a.pos & 3) != 0) {
					throw new js__$Boot_HaxeError("assert");
				}
			} else {
				var sw1 = [];
				var _g4 = 0;
				var _g13 = size2;
				while(_g4 < _g13) {
					var i2 = _g4++;
					sw1.push(hxsl_Tools.SWIZ[i2 + (a.pos & 3)]);
				}
				e3 = { e : hxsl_TExprDef.TSwiz(e3,sw1), t : t, p : pos};
			}
			switch(t._hx_index) {
			case 1:
				e3.t = hxsl_Type.TFloat;
				e3 = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToInt), t : hxsl_Type.TFun([]), p : pos},[e3]), t : t, p : pos};
				break;
			case 5:
				if(t.t._hx_index == 0) {
					var size3 = t.size;
					e3.t = hxsl_Type.TVec(size3,hxsl_VecType.VFloat);
					e3 = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4][size3 - 2]), t : hxsl_Type.TFun([]), p : pos},[e3]), t : t, p : pos};
				}
				break;
			default:
			}
			return e3;
		}
	}
	,optimize: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 8:
			var _g13 = _g.args;
			var _g12 = _g.e;
			var _g16 = _g12.t;
			var _g15 = _g12.p;
			var _g14 = _g12.e;
			if(_g14._hx_index == 2) {
				if(_g14.g._hx_index == 52) {
					if(_g13.length == 1) {
						var _g18 = _g13[0];
						var _g21 = _g18.t;
						var _g20 = _g18.p;
						var _g19 = _g18.e;
						if(_g19._hx_index == 8) {
							var _g22 = _g19.e;
							var _g26 = _g22.t;
							var _g25 = _g22.p;
							var _g24 = _g22.e;
							if(_g24._hx_index == 2) {
								if(_g24.g._hx_index == 51) {
									var args = _g19.args;
									var rem = 0;
									var size = 0;
									while(size < 4) {
										var t = args[args.length - 1 - rem].t;
										size += this.varSize(t,hxsl_VecType.VFloat);
										++rem;
									}
									if(size == 4) {
										var _g1 = 0;
										var _g11 = rem;
										while(_g1 < _g11) {
											var i = _g1++;
											args.pop();
										}
										var emat;
										var _g2 = e.e;
										if(_g2._hx_index == 8) {
											var _g4 = _g2.args;
											var e1 = _g2.e;
											emat = e1;
										} else {
											throw new js__$Boot_HaxeError("assert");
										}
										return { e : hxsl_TExprDef.TCall(emat,args), t : e.t, p : e.p};
									}
								}
							}
						}
					}
				}
			}
			break;
		case 16:
			var _g23 = _g.index;
			var _g17 = _g.e;
			var _g5 = _g17.t;
			var _g41 = _g17.p;
			var _g3 = _g17.e;
			if(_g3._hx_index == 17) {
				var _g9 = _g23.t;
				var _g8 = _g23.p;
				var _g7 = _g23.e;
				if(_g7._hx_index == 0) {
					var _g10 = _g7.c;
					if(_g10._hx_index == 2) {
						var el = _g3.el;
						var i1 = _g10.v;
						if(i1 >= 0 && i1 < el.length) {
							return el[i1];
						}
						hxsl_Error.t("Reading outside array bounds",e.p);
					}
				}
			}
			break;
		default:
		}
		return e;
	}
	,packTextures: function(name,vars,t) {
		var alloc = [];
		var g = { id : hxsl_Tools.allocVarId(), name : name, type : t, kind : hxsl_VarKind.Param};
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			if(v.type != t) {
				var tmp;
				if(t == hxsl_Type.TSampler2D) {
					var _g1 = v.type;
					if(_g1._hx_index == 17) {
						var _g11 = _g1.size;
						tmp = true;
					} else {
						tmp = false;
					}
				} else {
					tmp = false;
				}
				if(!tmp) {
					continue;
				}
			}
			var a = new hxsl__$Flatten_Alloc(g,null,alloc.length << 2,1);
			a.v = v;
			this.varMap.set(v,a);
			alloc.push(a);
		}
		g.type = hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(alloc.length));
		if(alloc.length > 0) {
			this.outVars.push(g);
			this.allocData.set(g,alloc);
		}
		return alloc;
	}
	,packBuffers: function(vars) {
		var alloc = [];
		var g = { id : hxsl_Tools.allocVarId(), name : "buffers", type : hxsl_Type.TVoid, kind : hxsl_VarKind.Param};
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			var _g1 = v.type;
			var tmp;
			if(_g1._hx_index == 16) {
				var _g2 = _g1.size;
				var _g11 = _g1.t;
				tmp = true;
			} else {
				tmp = false;
			}
			if(tmp) {
				var a = new hxsl__$Flatten_Alloc(g,null,alloc.length,1);
				a.v = v;
				alloc.push(a);
				this.outVars.push(v);
			}
		}
		g.type = hxsl_Type.TArray(hxsl_Type.TBuffer(hxsl_Type.TVoid,hxsl_SizeDecl.SConst(0)),hxsl_SizeDecl.SConst(alloc.length));
		this.allocData.set(g,alloc);
	}
	,pack: function(name,kind,vars,t) {
		var alloc = [];
		var apos = 0;
		var g = { id : hxsl_Tools.allocVarId(), name : name, type : hxsl_Type.TVec(0,t), kind : kind};
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			var tmp;
			if(!hxsl_Tools.isSampler(v.type)) {
				var _g1 = v.type;
				if(_g1._hx_index == 16) {
					var _g2 = _g1.size;
					var _g11 = _g1.t;
					tmp = true;
				} else {
					tmp = false;
				}
			} else {
				tmp = true;
			}
			if(tmp) {
				continue;
			}
			var size = this.varSize(v.type,t);
			var best = null;
			var _g3 = 0;
			while(_g3 < alloc.length) {
				var a = alloc[_g3];
				++_g3;
				if(a.v == null && a.size >= size && (best == null || best.size > a.size)) {
					best = a;
				}
			}
			if(best != null) {
				var free = best.size - size;
				if(free > 0) {
					var i = alloc.indexOf(best);
					var a1 = new hxsl__$Flatten_Alloc(g,t,best.pos + size,free);
					alloc.splice(i + 1,0,a1);
					best.size = size;
				}
				best.v = v;
				this.varMap.set(v,best);
			} else {
				var a2 = new hxsl__$Flatten_Alloc(g,t,apos,size);
				apos += size;
				a2.v = v;
				this.varMap.set(v,a2);
				alloc.push(a2);
				var pad = (4 - size % 4) % 4;
				if(pad > 0) {
					var a3 = new hxsl__$Flatten_Alloc(g,t,apos,pad);
					apos += pad;
					alloc.push(a3);
				}
			}
		}
		g.type = hxsl_Type.TArray(hxsl_Type.TVec(4,t),hxsl_SizeDecl.SConst(apos >> 2));
		if(apos > 0) {
			this.outVars.push(g);
			this.allocData.set(g,alloc);
		}
		return g;
	}
	,varSize: function(v,t) {
		switch(v._hx_index) {
		case 1:case 3:
			if(t == hxsl_VecType.VFloat) {
				return 1;
			} else {
				throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 5:
			var t2 = v.t;
			var n = v.size;
			if(t == t2) {
				return n;
			} else {
				throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 7:
			if(t == hxsl_VecType.VFloat) {
				return 16;
			} else {
				throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 6:case 8:
			if(t == hxsl_VecType.VFloat) {
				return 12;
			} else {
				throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 15:
			var _g3 = v.size;
			if(_g3._hx_index == 0) {
				var at = v.t;
				var n1 = _g3.v;
				return this.varSize(at,t) * n1;
			} else {
				throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		default:
			throw new js__$Boot_HaxeError(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
		}
	}
	,gatherVar: function(v) {
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v1 = vl[_g1];
				++_g1;
				this.gatherVar(v1);
			}
		} else {
			switch(v.kind._hx_index) {
			case 0:
				if(hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.PerObject)) {
					this.params.push(v);
				} else {
					this.globals.push(v);
				}
				break;
			case 2:
				this.params.push(v);
				break;
			default:
				this.outVars.push(v);
			}
		}
	}
	,__class__: hxsl_Flatten
};
var hxsl_Globals = function() {
	this.channels = [];
	this.map = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Globals"] = hxsl_Globals;
hxsl_Globals.__name__ = "hxsl.Globals";
hxsl_Globals.allocID = function(path) {
	if(hxsl_Globals.MAP == null) {
		hxsl_Globals.MAP = new haxe_ds_StringMap();
		hxsl_Globals.ALL = [];
	}
	var _this = hxsl_Globals.MAP;
	var id = __map_reserved[path] != null ? _this.getReserved(path) : _this.h[path];
	if(id == null) {
		id = hxsl_Globals.ALL.length;
		hxsl_Globals.ALL.push(path);
		var _this1 = hxsl_Globals.MAP;
		if(__map_reserved[path] != null) {
			_this1.setReserved(path,id);
		} else {
			_this1.h[path] = id;
		}
	}
	return id;
};
hxsl_Globals.prototype = {
	map: null
	,channels: null
	,maxChannels: null
	,set: function(path,v) {
		var this1 = this.map;
		var key = hxsl_Globals.allocID(path);
		this1.h[key] = v;
	}
	,allocChannelID: function(t) {
		var _g = 0;
		var _g1 = this.maxChannels;
		while(_g < _g1) {
			var i = _g++;
			if(this.channels[i] == t) {
				return i;
			}
		}
		if(this.maxChannels == 1 << hxsl_Tools.MAX_CHANNELS_BITS) {
			throw new js__$Boot_HaxeError("Too many unique channels");
		}
		var i1 = this.maxChannels++;
		this.channels[i1] = t;
		return i1;
	}
	,__class__: hxsl_Globals
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
		var intf = cc.__interfaces__;
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var hxsl_GlslOut = function() {
	this.outIndex = 0;
	this.uniformBuffer = 0;
	this.exprIds = 0;
	this.varNames = new haxe_ds_IntMap();
	this.allNames = new haxe_ds_StringMap();
};
$hxClasses["hxsl.GlslOut"] = hxsl_GlslOut;
hxsl_GlslOut.__name__ = "hxsl.GlslOut";
hxsl_GlslOut.prototype = {
	buf: null
	,exprIds: null
	,exprValues: null
	,locals: null
	,decls: null
	,isVertex: null
	,allNames: null
	,outIndexes: null
	,intelDriverFix: null
	,uniformBuffer: null
	,outIndex: null
	,varNames: null
	,glES: null
	,version: null
	,decl: function(s) {
		var _g = 0;
		var _g1 = this.decls;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			if(d == s) {
				return;
			}
		}
		if(HxOverrides.cca(s,0) == 35) {
			this.decls.unshift(s);
		} else {
			this.decls.push(s);
		}
	}
	,addType: function(t) {
		switch(t._hx_index) {
		case 0:
			this.buf.b += Std.string("void");
			break;
		case 1:
			this.buf.b += Std.string("int");
			break;
		case 2:
			this.buf.b += Std.string("bool");
			break;
		case 3:
			this.buf.b += Std.string("float");
			break;
		case 4:
			this.buf.b += Std.string("string");
			break;
		case 5:
			var k = t.t;
			var size = t.size;
			switch(k._hx_index) {
			case 0:
				this.buf.b += Std.string("i");
				break;
			case 1:
				break;
			case 2:
				this.buf.b += Std.string("b");
				break;
			}
			this.buf.b += Std.string("vec");
			this.buf.b += Std.string(size);
			break;
		case 6:
			this.buf.b += Std.string("mat3");
			break;
		case 7:
			this.buf.b += Std.string("mat4");
			break;
		case 8:
			this.decl(hxsl_GlslOut.MAT34);
			this.buf.b += Std.string("_mat3x4");
			break;
		case 9:
			var n = t.size;
			this.buf.b += Std.string("vec");
			this.buf.b += Std.string(n);
			break;
		case 10:
			this.buf.b += Std.string("sampler2D");
			break;
		case 11:
			this.buf.b += Std.string("sampler2DArray");
			if(this.glES != null) {
				this.decl("precision lowp sampler2DArray;");
			}
			break;
		case 12:
			this.buf.b += Std.string("samplerCube");
			break;
		case 13:
			var vl = t.vl;
			this.buf.b += Std.string("struct { ");
			var _g = 0;
			while(_g < vl.length) {
				var v = vl[_g];
				++_g;
				this.addVar(v);
				this.buf.b += Std.string(";");
			}
			this.buf.b += Std.string(" }");
			break;
		case 14:
			var _g7 = t.variants;
			this.buf.b += Std.string("function");
			break;
		case 15:
			var size1 = t.size;
			var t1 = t.t;
			this.addType(t1);
			this.buf.b += Std.string("[");
			switch(size1._hx_index) {
			case 0:
				var _g1 = size1.v;
				if(_g1 == 1) {
					if(this.intelDriverFix) {
						this.buf.b += Std.string(2);
					} else {
						var v1 = _g1;
						this.buf.b += Std.string(v1);
					}
				} else {
					var v2 = _g1;
					this.buf.b += Std.string(v2);
				}
				break;
			case 1:
				var v3 = size1.v;
				var v4 = this.varName(v3);
				this.buf.b += Std.string(v4);
				break;
			}
			this.buf.b += Std.string("]");
			break;
		case 16:
			var _g5 = t.size;
			var _g4 = t.t;
			throw new js__$Boot_HaxeError("assert");
		case 17:
			var n1 = t.size;
			this.buf.b += Std.string("channel" + n1);
			break;
		}
	}
	,addVar: function(v) {
		var _g = v.type;
		switch(_g._hx_index) {
		case 15:
			var size = _g.size;
			var t = _g.t;
			var old = v.type;
			v.type = t;
			this.addVar(v);
			v.type = old;
			this.buf.b += Std.string("[");
			switch(size._hx_index) {
			case 0:
				var _g1 = size.v;
				if(_g1 == 1) {
					if(this.intelDriverFix) {
						this.buf.b += Std.string(2);
					} else {
						var n = _g1;
						this.buf.b += Std.string(n);
					}
				} else {
					var n1 = _g1;
					this.buf.b += Std.string(n1);
				}
				break;
			case 1:
				var v1 = size.v;
				var v2 = this.varName(v1);
				this.buf.b += Std.string(v2);
				break;
			}
			this.buf.b += Std.string("]");
			break;
		case 16:
			var size1 = _g.size;
			var t1 = _g.t;
			this.buf.b += Std.string("uniform_buffer" + this.uniformBuffer++);
			this.buf.b += Std.string(" { ");
			v.type = hxsl_Type.TArray(t1,size1);
			this.addVar(v);
			v.type = hxsl_Type.TBuffer(t1,size1);
			this.buf.b += Std.string("; }");
			break;
		default:
			this.addType(v.type);
			this.buf.b += Std.string(" ");
			var v3 = this.varName(v);
			this.buf.b += Std.string(v3);
		}
	}
	,addValue: function(e,tabs) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 4:
			var el = _g.el;
			var name = "val" + this.exprIds++;
			var tmp = this.buf;
			this.buf = new StringBuf();
			this.addType(e.t);
			this.buf.b += Std.string(" ");
			this.buf.b += Std.string(name);
			this.buf.b += Std.string("(void)");
			var el2 = el.slice();
			var last = el2[el2.length - 1];
			el2[el2.length - 1] = { e : hxsl_TExprDef.TReturn(last), t : e.t, p : last.p};
			var e2 = { t : hxsl_Type.TVoid, e : hxsl_TExprDef.TBlock(el2), p : e.p};
			this.addExpr(e2,"");
			this.exprValues.push(this.buf.b);
			this.buf = tmp;
			this.buf.b += Std.string(name);
			this.buf.b += Std.string("()");
			break;
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var econd = _g.econd;
			this.buf.b += Std.string("( ");
			this.addValue(econd,tabs);
			this.buf.b += Std.string(" ) ? ");
			this.addValue(eif,tabs);
			this.buf.b += Std.string(" : ");
			this.addValue(eelse,tabs);
			break;
		case 20:
			var _g3 = _g.args;
			var _g2 = _g.m;
			var e1 = _g.e;
			this.addValue(e1,tabs);
			break;
		default:
			this.addExpr(e,tabs);
		}
	}
	,addBlock: function(e,tabs) {
		this.addExpr(e,tabs);
	}
	,getFunName: function(g,args,rt) {
		switch(g._hx_index) {
		case 20:
			if(rt == hxsl_Type.TInt && this.glES != null) {
				this.decl("int _imod( int x, int y ) { return int(mod(float(x),float(y))); }");
				return "_imod";
			}
			break;
		case 33:
			var _g = args[0].t;
			switch(_g._hx_index) {
			case 10:case 11:
				if(this.glES != null && this.glES <= 2) {
					return "texture2D";
				}
				break;
			case 12:
				if(this.glES != null && this.glES <= 2) {
					return "textureCube";
				}
				break;
			case 17:
				var _g1 = _g.size;
				if(this.glES != null && this.glES <= 2) {
					return "texture2D";
				}
				break;
			default:
			}
			break;
		case 34:
			var _g2 = args[0].t;
			switch(_g2._hx_index) {
			case 10:case 11:
				if(this.glES != null && this.glES <= 2) {
					this.decl("#extension GL_EXT_shader_texture_lod : enable");
					return "texture2DLodEXT";
				}
				break;
			case 12:
				if(this.glES != null && this.glES <= 2) {
					this.decl("#extension GL_EXT_shader_texture_lod : enable");
					return "textureCubeLodEXT";
				}
				break;
			case 17:
				var _g11 = _g2.size;
				if(this.glES != null && this.glES <= 2) {
					this.decl("#extension GL_EXT_shader_texture_lod : enable");
					return "texture2DLodEXT";
				}
				break;
			default:
			}
			break;
		case 35:case 36:
			return "texelFetch";
		case 50:
			if(args[0].t == hxsl_Type.TMat3x4) {
				this.decl(hxsl_GlslOut.MAT34);
				this.decl("mat3 _mat3( _mat3x4 v ) { return mat3(v.a.xyz,v.b.xyz,v.c.xyz); }");
				return "_mat3";
			}
			break;
		case 52:
			this.decl(hxsl_GlslOut.MAT34);
			if(args.length == 1) {
				this.decl("_mat3x4 mat_to_34( mat4 m ) { return _mat3x4(m[0],m[1],m[2]); }");
				return "mat_to_34";
			}
			break;
		case 54:
			this.decl("vec4 pack( float v ) { vec4 color = fract(v * vec4(1, 255, 255.*255., 255.*255.*255.)); return color - color.yzww * vec4(1. / 255., 1. / 255., 1. / 255., 0.); }");
			break;
		case 55:
			this.decl("float unpack( vec4 color ) { return dot(color,vec4(1., 1. / 255., 1. / (255. * 255.), 1. / (255. * 255. * 255.))); }");
			break;
		case 56:
			this.decl("vec4 packNormal( vec3 v ) { return vec4((v + vec3(1.)) * vec3(0.5),1.); }");
			break;
		case 57:
			this.decl("vec3 unpackNormal( vec4 v ) { return normalize((v.xyz - vec3(0.5)) * vec3(2.)); }");
			break;
		case 58:
			this.decl("vec2 screenToUv( vec2 v ) { return v * vec2(0.5,-0.5) + vec2(0.5,0.5); }");
			break;
		case 59:
			this.decl("vec2 uvToScreen( vec2 v ) { return v * vec2(2.,-2.) + vec2(-1., 1.); }");
			break;
		case 60:case 61:case 62:
			this.decl("#extension GL_OES_standard_derivatives:enable");
			break;
		default:
		}
		return hxsl_GlslOut.GLOBALS.get(g);
	}
	,addExpr: function(e,tabs) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			switch(c._hx_index) {
			case 0:
				this.buf.b += Std.string("null");
				break;
			case 1:
				var b = c.b;
				this.buf.b += Std.string(b);
				break;
			case 2:
				var v = c.v;
				this.buf.b += Std.string(v);
				break;
			case 3:
				var f = c.v;
				var str = "" + f;
				this.buf.b += Std.string(str);
				if(str.indexOf(".") == -1 && str.indexOf("e") == -1) {
					this.buf.b += Std.string(".");
				}
				break;
			case 4:
				var v1 = c.v;
				this.buf.b += Std.string("\"" + v1 + "\"");
				break;
			}
			break;
		case 1:
			var v2 = _g.v;
			var v3 = this.varName(v2);
			this.buf.b += Std.string(v3);
			break;
		case 2:
			var g = _g.g;
			var v4 = hxsl_GlslOut.GLOBALS.get(g);
			this.buf.b += Std.string(v4);
			break;
		case 3:
			var e1 = _g.e;
			this.buf.b += Std.string("(");
			this.addValue(e1,tabs);
			this.buf.b += Std.string(")");
			break;
		case 4:
			var el = _g.el;
			this.buf.b += Std.string("{\n");
			var t2 = tabs + "\t";
			var _g1 = 0;
			while(_g1 < el.length) {
				var e2 = el[_g1];
				++_g1;
				this.buf.b += Std.string(t2);
				this.addExpr(e2,t2);
				this.newLine(e2);
			}
			this.buf.b += Std.string(tabs);
			this.buf.b += Std.string("}");
			break;
		case 5:
			var e21 = _g.e2;
			var e11 = _g.e1;
			var op = _g.op;
			var _g2 = e21.t;
			var _g11 = e11.t;
			switch(op._hx_index) {
			case 1:
				if(_g11._hx_index == 5) {
					if(_g11.size == 3) {
						if(_g11.t._hx_index == 1) {
							if(_g2._hx_index == 8) {
								this.decl(hxsl_GlslOut.MAT34);
								this.decl("vec3 m3x4mult( vec3 v, _mat3x4 m) { vec4 ve = vec4(v,1.0); return vec3(dot(m.a,ve),dot(m.b,ve),dot(m.c,ve)); }");
								var tmp;
								if(op._hx_index == 20) {
									var _g3 = op.op;
									tmp = true;
								} else {
									tmp = false;
								}
								if(tmp) {
									this.addValue(e11,tabs);
									this.buf.b += Std.string(" = ");
								}
								this.buf.b += Std.string("m3x4mult(");
								this.addValue(e11,tabs);
								this.buf.b += Std.string(",");
								this.addValue(e21,tabs);
								this.buf.b += Std.string(")");
							} else {
								this.addValue(e11,tabs);
								this.buf.b += Std.string(" ");
								var v5 = hxsl_Printer.opStr(op);
								this.buf.b += Std.string(v5);
								this.buf.b += Std.string(" ");
								this.addValue(e21,tabs);
							}
						} else {
							this.addValue(e11,tabs);
							this.buf.b += Std.string(" ");
							var v6 = hxsl_Printer.opStr(op);
							this.buf.b += Std.string(v6);
							this.buf.b += Std.string(" ");
							this.addValue(e21,tabs);
						}
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v7 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v7);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v8 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v8);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			case 5:
				if(_g11._hx_index == 5) {
					var _g31 = _g11.t;
					if(_g2._hx_index == 5) {
						var _g5 = _g2.t;
						var _g4 = _g2.size;
						var n = _g11.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v9;
						switch(op._hx_index) {
						case 5:
							v9 = "equal";
							break;
						case 6:
							v9 = "notEqual";
							break;
						case 7:
							v9 = "greaterThan";
							break;
						case 8:
							v9 = "greaterThanEqual";
							break;
						case 9:
							v9 = "lessThan";
							break;
						case 10:
							v9 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v9);
						this.buf.b += Std.string("(");
						this.addValue(e11,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e21,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v10 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v10);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v11 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v11);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			case 6:
				if(_g11._hx_index == 5) {
					var _g17 = _g11.t;
					if(_g2._hx_index == 5) {
						var _g19 = _g2.t;
						var _g18 = _g2.size;
						var n1 = _g11.size;
						this.buf.b += Std.string("vec" + n1 + "(");
						var v12;
						switch(op._hx_index) {
						case 5:
							v12 = "equal";
							break;
						case 6:
							v12 = "notEqual";
							break;
						case 7:
							v12 = "greaterThan";
							break;
						case 8:
							v12 = "greaterThanEqual";
							break;
						case 9:
							v12 = "lessThan";
							break;
						case 10:
							v12 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v12);
						this.buf.b += Std.string("(");
						this.addValue(e11,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e21,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v13 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v13);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v14 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v14);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			case 7:
				if(_g11._hx_index == 5) {
					var _g24 = _g11.t;
					if(_g2._hx_index == 5) {
						var _g26 = _g2.t;
						var _g25 = _g2.size;
						var n2 = _g11.size;
						this.buf.b += Std.string("vec" + n2 + "(");
						var v15;
						switch(op._hx_index) {
						case 5:
							v15 = "equal";
							break;
						case 6:
							v15 = "notEqual";
							break;
						case 7:
							v15 = "greaterThan";
							break;
						case 8:
							v15 = "greaterThanEqual";
							break;
						case 9:
							v15 = "lessThan";
							break;
						case 10:
							v15 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v15);
						this.buf.b += Std.string("(");
						this.addValue(e11,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e21,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v16 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v16);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v17 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v17);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			case 8:
				if(_g11._hx_index == 5) {
					var _g7 = _g11.t;
					if(_g2._hx_index == 5) {
						var _g9 = _g2.t;
						var _g8 = _g2.size;
						var n3 = _g11.size;
						this.buf.b += Std.string("vec" + n3 + "(");
						var v18;
						switch(op._hx_index) {
						case 5:
							v18 = "equal";
							break;
						case 6:
							v18 = "notEqual";
							break;
						case 7:
							v18 = "greaterThan";
							break;
						case 8:
							v18 = "greaterThanEqual";
							break;
						case 9:
							v18 = "lessThan";
							break;
						case 10:
							v18 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v18);
						this.buf.b += Std.string("(");
						this.addValue(e11,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e21,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v19 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v19);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v20 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v20);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			case 9:
				if(_g11._hx_index == 5) {
					var _g111 = _g11.t;
					if(_g2._hx_index == 5) {
						var _g13 = _g2.t;
						var _g12 = _g2.size;
						var n4 = _g11.size;
						this.buf.b += Std.string("vec" + n4 + "(");
						var v21;
						switch(op._hx_index) {
						case 5:
							v21 = "equal";
							break;
						case 6:
							v21 = "notEqual";
							break;
						case 7:
							v21 = "greaterThan";
							break;
						case 8:
							v21 = "greaterThanEqual";
							break;
						case 9:
							v21 = "lessThan";
							break;
						case 10:
							v21 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v21);
						this.buf.b += Std.string("(");
						this.addValue(e11,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e21,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v22 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v22);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v23 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v23);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			case 10:
				if(_g11._hx_index == 5) {
					var _g28 = _g11.t;
					if(_g2._hx_index == 5) {
						var _g30 = _g2.t;
						var _g29 = _g2.size;
						var n5 = _g11.size;
						this.buf.b += Std.string("vec" + n5 + "(");
						var v24;
						switch(op._hx_index) {
						case 5:
							v24 = "equal";
							break;
						case 6:
							v24 = "notEqual";
							break;
						case 7:
							v24 = "greaterThan";
							break;
						case 8:
							v24 = "greaterThanEqual";
							break;
						case 9:
							v24 = "lessThan";
							break;
						case 10:
							v24 = "lessThanEqual";
							break;
						default:
							throw new js__$Boot_HaxeError("assert");
						}
						this.buf.b += Std.string(v24);
						this.buf.b += Std.string("(");
						this.addValue(e11,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e21,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v25 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v25);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v26 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v26);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			case 18:
				this.decl("int _ushr( int i, int j ) { return int(uint(i) >> uint(j)); }");
				this.buf.b += Std.string("_ushr(");
				this.addValue(e11,tabs);
				this.buf.b += Std.string(",");
				this.addValue(e21,tabs);
				this.buf.b += Std.string(")");
				break;
			case 19:
				if(e.t != hxsl_Type.TInt) {
					var tmp1;
					if(op._hx_index == 20) {
						var _g6 = op.op;
						tmp1 = true;
					} else {
						tmp1 = false;
					}
					if(tmp1) {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" = ");
					}
					this.addExpr({ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mod), t : hxsl_Type.TFun([]), p : e.p},[e11,e21]), t : e.t, p : e.p},tabs);
				} else {
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v27 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v27);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			case 20:
				switch(op.op._hx_index) {
				case 1:
					if(_g11._hx_index == 5) {
						if(_g11.size == 3) {
							if(_g11.t._hx_index == 1) {
								if(_g2._hx_index == 8) {
									this.decl(hxsl_GlslOut.MAT34);
									this.decl("vec3 m3x4mult( vec3 v, _mat3x4 m) { vec4 ve = vec4(v,1.0); return vec3(dot(m.a,ve),dot(m.b,ve),dot(m.c,ve)); }");
									var tmp2;
									if(op._hx_index == 20) {
										var _g10 = op.op;
										tmp2 = true;
									} else {
										tmp2 = false;
									}
									if(tmp2) {
										this.addValue(e11,tabs);
										this.buf.b += Std.string(" = ");
									}
									this.buf.b += Std.string("m3x4mult(");
									this.addValue(e11,tabs);
									this.buf.b += Std.string(",");
									this.addValue(e21,tabs);
									this.buf.b += Std.string(")");
								} else {
									this.addValue(e11,tabs);
									this.buf.b += Std.string(" ");
									var v28 = hxsl_Printer.opStr(op);
									this.buf.b += Std.string(v28);
									this.buf.b += Std.string(" ");
									this.addValue(e21,tabs);
								}
							} else {
								this.addValue(e11,tabs);
								this.buf.b += Std.string(" ");
								var v29 = hxsl_Printer.opStr(op);
								this.buf.b += Std.string(v29);
								this.buf.b += Std.string(" ");
								this.addValue(e21,tabs);
							}
						} else {
							this.addValue(e11,tabs);
							this.buf.b += Std.string(" ");
							var v30 = hxsl_Printer.opStr(op);
							this.buf.b += Std.string(v30);
							this.buf.b += Std.string(" ");
							this.addValue(e21,tabs);
						}
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v31 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v31);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
					break;
				case 19:
					if(e.t != hxsl_Type.TInt) {
						var tmp3;
						if(op._hx_index == 20) {
							var _g14 = op.op;
							tmp3 = true;
						} else {
							tmp3 = false;
						}
						if(tmp3) {
							this.addValue(e11,tabs);
							this.buf.b += Std.string(" = ");
						}
						this.addExpr({ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mod), t : hxsl_Type.TFun([]), p : e.p},[e11,e21]), t : e.t, p : e.p},tabs);
					} else {
						this.addValue(e11,tabs);
						this.buf.b += Std.string(" ");
						var v32 = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v32);
						this.buf.b += Std.string(" ");
						this.addValue(e21,tabs);
					}
					break;
				default:
					this.addValue(e11,tabs);
					this.buf.b += Std.string(" ");
					var v33 = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v33);
					this.buf.b += Std.string(" ");
					this.addValue(e21,tabs);
				}
				break;
			default:
				this.addValue(e11,tabs);
				this.buf.b += Std.string(" ");
				var v34 = hxsl_Printer.opStr(op);
				this.buf.b += Std.string(v34);
				this.buf.b += Std.string(" ");
				this.addValue(e21,tabs);
			}
			break;
		case 6:
			var e12 = _g.e1;
			var op1 = _g.op;
			var _this = this.buf;
			var _this1 = _this.b;
			var tmp4;
			switch(op1._hx_index) {
			case 0:
				tmp4 = "++";
				break;
			case 1:
				tmp4 = "--";
				break;
			case 2:
				tmp4 = "!";
				break;
			case 3:
				tmp4 = "-";
				break;
			case 4:
				tmp4 = "~";
				break;
			}
			_this.b = _this1 + Std.string(tmp4);
			this.addValue(e12,tabs);
			break;
		case 7:
			var init = _g.init;
			var v35 = _g.v;
			this.locals.h[v35.id] = v35;
			if(init != null) {
				var v36 = this.varName(v35);
				this.buf.b += Std.string(v36);
				this.buf.b += Std.string(" = ");
				this.addValue(init,tabs);
			} else {
				this.buf.b += Std.string("/*var*/");
			}
			break;
		case 8:
			var _g35 = _g.args;
			var _g34 = _g.e;
			var _g38 = _g34.t;
			var _g37 = _g34.p;
			var _g36 = _g34.e;
			if(_g36._hx_index == 2) {
				var _g39 = _g36.g;
				switch(_g39._hx_index) {
				case 35:
					var args = _g35;
					var g1 = _g39;
					var v37 = this.getFunName(g1,args,e.t);
					this.buf.b += Std.string(v37);
					this.buf.b += Std.string("(");
					var _g15 = 0;
					while(_g15 < args.length) {
						var e3 = args[_g15];
						++_g15;
						this.addValue(e3,tabs);
						this.buf.b += Std.string(", ");
					}
					this.buf.b += Std.string("0)");
					break;
				case 53:
					if(_g35.length == 1) {
						var e4 = _g35[0];
						this.buf.b += Std.string("clamp(");
						this.addValue(e4,tabs);
						this.buf.b += Std.string(", 0., 1.)");
					} else {
						var v38 = _g34;
						var args1 = _g35;
						var _g16 = v38.e;
						if(_g16._hx_index == 2) {
							var g2 = _g16.g;
							var v39 = this.getFunName(g2,args1,e.t);
							this.buf.b += Std.string(v39);
						} else {
							this.addValue(v38,tabs);
						}
						this.buf.b += Std.string("(");
						var first = true;
						var _g21 = 0;
						while(_g21 < args1.length) {
							var e5 = args1[_g21];
							++_g21;
							if(first) {
								first = false;
							} else {
								this.buf.b += Std.string(", ");
							}
							this.addValue(e5,tabs);
						}
						this.buf.b += Std.string(")");
					}
					break;
				default:
					var args2 = _g35;
					var v40 = _g34;
					var _g20 = v40.e;
					if(_g20._hx_index == 2) {
						var g3 = _g20.g;
						var v41 = this.getFunName(g3,args2,e.t);
						this.buf.b += Std.string(v41);
					} else {
						this.addValue(v40,tabs);
					}
					this.buf.b += Std.string("(");
					var first1 = true;
					var _g22 = 0;
					while(_g22 < args2.length) {
						var e6 = args2[_g22];
						++_g22;
						if(first1) {
							first1 = false;
						} else {
							this.buf.b += Std.string(", ");
						}
						this.addValue(e6,tabs);
					}
					this.buf.b += Std.string(")");
				}
			} else {
				var args3 = _g35;
				var v42 = _g34;
				var _g23 = v42.e;
				if(_g23._hx_index == 2) {
					var g4 = _g23.g;
					var v43 = this.getFunName(g4,args3,e.t);
					this.buf.b += Std.string(v43);
				} else {
					this.addValue(v42,tabs);
				}
				this.buf.b += Std.string("(");
				var first2 = true;
				var _g27 = 0;
				while(_g27 < args3.length) {
					var e7 = args3[_g27];
					++_g27;
					if(first2) {
						first2 = false;
					} else {
						this.buf.b += Std.string(", ");
					}
					this.addValue(e7,tabs);
				}
				this.buf.b += Std.string(")");
			}
			break;
		case 9:
			var regs = _g.regs;
			var e8 = _g.e;
			if(e8.t._hx_index == 3) {
				var _g32 = 0;
				while(_g32 < regs.length) {
					var r = regs[_g32];
					++_g32;
					if(r != hxsl_Component.X) {
						throw new js__$Boot_HaxeError("assert");
					}
				}
				switch(regs.length) {
				case 1:
					this.addValue(e8,tabs);
					break;
				case 2:
					this.decl("vec2 _vec2( float v ) { return vec2(v,v); }");
					this.buf.b += Std.string("_vec2(");
					this.addValue(e8,tabs);
					this.buf.b += Std.string(")");
					break;
				case 3:
					this.decl("vec3 _vec3( float v ) { return vec3(v,v,v); }");
					this.buf.b += Std.string("_vec3(");
					this.addValue(e8,tabs);
					this.buf.b += Std.string(")");
					break;
				case 4:
					this.decl("vec4 _vec4( float v ) { return vec4(v,v,v,v); }");
					this.buf.b += Std.string("_vec4(");
					this.addValue(e8,tabs);
					this.buf.b += Std.string(")");
					break;
				default:
					throw new js__$Boot_HaxeError("assert");
				}
			} else {
				this.addValue(e8,tabs);
				this.buf.b += Std.string(".");
				var _g33 = 0;
				while(_g33 < regs.length) {
					var r1 = regs[_g33];
					++_g33;
					var _this2 = this.buf;
					var _this3 = _this2.b;
					var tmp5;
					switch(r1._hx_index) {
					case 0:
						tmp5 = "x";
						break;
					case 1:
						tmp5 = "y";
						break;
					case 2:
						tmp5 = "z";
						break;
					case 3:
						tmp5 = "w";
						break;
					}
					_this2.b = _this3 + Std.string(tmp5);
				}
			}
			break;
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var econd = _g.econd;
			this.buf.b += Std.string("if( ");
			this.addValue(econd,tabs);
			this.buf.b += Std.string(") ");
			this.addExpr(eif,tabs);
			if(eelse != null) {
				if(!this.isBlock(eif)) {
					this.buf.b += Std.string(";");
				}
				this.buf.b += Std.string(" else ");
				this.addExpr(eelse,tabs);
			}
			break;
		case 11:
			this.buf.b += Std.string("discard");
			break;
		case 12:
			var e9 = _g.e;
			if(e9 == null) {
				this.buf.b += Std.string("return");
			} else {
				this.buf.b += Std.string("return ");
				this.addValue(e9,tabs);
			}
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v44 = _g.v;
			this.locals.h[v44.id] = v44;
			var _g40 = it.e;
			if(_g40._hx_index == 5) {
				if(_g40.op._hx_index == 21) {
					var e22 = _g40.e2;
					var e13 = _g40.e1;
					this.buf.b += Std.string("for(");
					this.buf.b += Std.string(v44.name + "=");
					this.addValue(e13,tabs);
					this.buf.b += Std.string(";" + v44.name + "<");
					this.addValue(e22,tabs);
					this.buf.b += Std.string(";" + v44.name + "++) ");
					this.addBlock(loop,tabs);
				} else {
					throw new js__$Boot_HaxeError("assert");
				}
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
			break;
		case 14:
			this.buf.b += Std.string("continue");
			break;
		case 15:
			this.buf.b += Std.string("break");
			break;
		case 16:
			var index = _g.index;
			var e10 = _g.e;
			this.addValue(e10,tabs);
			this.buf.b += Std.string("[");
			this.addValue(index,tabs);
			this.buf.b += Std.string("]");
			break;
		case 17:
			var el1 = _g.el;
			var _g41 = e.t;
			if(_g41._hx_index == 15) {
				var _g210 = _g41.size;
				var t = _g41.t;
				this.addType(t);
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
			this.buf.b += Std.string("[" + el1.length + "]");
			this.buf.b += Std.string("(");
			var first3 = true;
			var _g310 = 0;
			while(_g310 < el1.length) {
				var e14 = el1[_g310];
				++_g310;
				if(first3) {
					first3 = false;
				} else {
					this.buf.b += Std.string(", ");
				}
				this.addValue(e14,tabs);
			}
			this.buf.b += Std.string(")");
			break;
		case 18:
			var _g161 = _g.def;
			var _g151 = _g.cases;
			var _g141 = _g.e;
			this.buf.b += Std.string("switch(...)");
			break;
		case 19:
			var _g112 = _g.loop;
			var _g101 = _g.e;
			if(_g.normalWhile == false) {
				var e15 = _g101;
				var loop1 = _g112;
				var old = tabs;
				tabs += "\t";
				this.buf.b += Std.string("do ");
				this.addBlock(loop1,tabs);
				this.buf.b += Std.string(" while( ");
				this.addValue(e15,tabs);
				this.buf.b += Std.string(" )");
			} else {
				var e16 = _g101;
				var loop2 = _g112;
				this.buf.b += Std.string("while( ");
				this.addValue(e16,tabs);
				this.buf.b += Std.string(" ) ");
				this.addBlock(loop2,tabs);
			}
			break;
		case 20:
			var _g71 = _g.args;
			var _g61 = _g.m;
			var e17 = _g.e;
			this.addExpr(e17,tabs);
			break;
		}
	}
	,varName: function(v) {
		if(v.kind == hxsl_VarKind.Output) {
			if(this.isVertex) {
				return "gl_Position";
			}
			if(this.glES != null && this.glES <= 2) {
				if(this.outIndexes == null) {
					return "gl_FragColor";
				}
				return "gl_FragData[" + this.outIndexes.h[v.id] + "]";
			}
		}
		var n = this.varNames.h[v.id];
		if(n != null) {
			return n;
		}
		n = v.name;
		var _this = hxsl_GlslOut.KWDS;
		if(__map_reserved[n] != null ? _this.existsReserved(n) : _this.h.hasOwnProperty(n)) {
			n = "_" + n;
		}
		var _this1 = this.allNames;
		if(__map_reserved[n] != null ? _this1.existsReserved(n) : _this1.h.hasOwnProperty(n)) {
			var k = 2;
			n += "_";
			while(true) {
				var _this2 = this.allNames;
				var key = n + k;
				if(!(__map_reserved[key] != null ? _this2.existsReserved(key) : _this2.h.hasOwnProperty(key))) {
					break;
				}
				++k;
			}
			n += k;
		}
		this.varNames.h[v.id] = n;
		var value = v.id;
		var _this3 = this.allNames;
		if(__map_reserved[n] != null) {
			_this3.setReserved(n,value);
		} else {
			_this3.h[n] = value;
		}
		return n;
	}
	,newLine: function(e) {
		if(this.isBlock(e)) {
			this.buf.b += Std.string("\n");
		} else {
			this.buf.b += Std.string(";\n");
		}
	}
	,isBlock: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 4:
			var _g1 = _g.el;
			return true;
		case 13:
			var _g6 = _g.it;
			var _g5 = _g.v;
			var loop = _g.loop;
			return this.isBlock(loop);
		case 19:
			var _g2 = _g.e;
			if(_g.normalWhile == true) {
				var loop1 = _g.loop;
				return this.isBlock(loop1);
			} else {
				return false;
			}
			break;
		default:
			return false;
		}
	}
	,initVar: function(v) {
		switch(v.kind._hx_index) {
		case 0:case 2:
			var _g = v.type;
			var tmp;
			if(_g._hx_index == 16) {
				var _g2 = _g.size;
				var _g1 = _g.t;
				tmp = true;
			} else {
				tmp = false;
			}
			if(tmp) {
				this.buf.b += Std.string("layout(std140) ");
			}
			this.buf.b += Std.string("uniform ");
			break;
		case 1:
			this.buf.b += Std.string(this.glES != null && this.glES <= 2 ? "attribute " : "in ");
			break;
		case 3:
			this.buf.b += Std.string(this.glES != null && this.glES <= 2 ? "varying " : this.isVertex ? "out " : "in ");
			break;
		case 4:
			break;
		case 5:
			if(this.glES != null && this.glES <= 2) {
				this.outIndexes.h[v.id] = this.outIndex++;
				return;
			}
			if(this.isVertex) {
				return;
			}
			if(this.glES != null) {
				this.buf.b += Std.string("layout(location=" + this.outIndex++ + ") ");
			}
			this.buf.b += Std.string("out ");
			break;
		case 6:
			return;
		}
		if(v.qualifiers != null) {
			var _g11 = 0;
			var _g21 = v.qualifiers;
			while(_g11 < _g21.length) {
				var q = _g21[_g11];
				++_g11;
				if(q._hx_index == 6) {
					var p = q.p;
					switch(p._hx_index) {
					case 0:
						this.buf.b += Std.string("lowp ");
						break;
					case 1:
						this.buf.b += Std.string("mediump ");
						break;
					case 2:
						this.buf.b += Std.string("highp ");
						break;
					}
				}
			}
		}
		this.addVar(v);
		this.buf.b += Std.string(";\n");
	}
	,initVars: function(s) {
		this.outIndex = 0;
		this.uniformBuffer = 0;
		this.outIndexes = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.initVar(v);
		}
		this.buf.b += Std.string("\n");
		if(this.outIndex < 2) {
			this.outIndexes = null;
		} else if(!this.isVertex && (this.glES != null && this.glES <= 2)) {
			this.decl("#extension GL_EXT_draw_buffers : enable");
		}
	}
	,run: function(s) {
		this.locals = new haxe_ds_IntMap();
		this.decls = [];
		this.buf = new StringBuf();
		this.exprValues = [];
		this.decl("precision mediump float;");
		if(s.funs.length != 1) {
			throw new js__$Boot_HaxeError("assert");
		}
		var f = s.funs[0];
		this.isVertex = f.kind == hxsl_FunctionKind.Vertex;
		this.initVars(s);
		var tmp = this.buf;
		this.buf = new StringBuf();
		this.buf.b += Std.string("void main(void) {\n");
		var _g = f.expr.e;
		if(_g._hx_index == 4) {
			var el = _g.el;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e = el[_g1];
				++_g1;
				this.buf.b += Std.string("\t");
				this.addExpr(e,"\t");
				this.newLine(e);
			}
		} else {
			this.addExpr(f.expr,"");
		}
		this.buf.b += Std.string("}");
		this.exprValues.push(this.buf.b);
		this.buf = tmp;
		var locals = Lambda.array(this.locals);
		locals.sort(function(v1,v2) {
			return Reflect.compare(v1.name,v2.name);
		});
		var _g2 = 0;
		while(_g2 < locals.length) {
			var v = locals[_g2];
			++_g2;
			this.addVar(v);
			this.buf.b += Std.string(";\n");
		}
		this.buf.b += Std.string("\n");
		var _g3 = 0;
		var _g4 = this.exprValues;
		while(_g3 < _g4.length) {
			var e1 = _g4[_g3];
			++_g3;
			this.buf.b += Std.string(e1);
			this.buf.b += Std.string("\n\n");
		}
		if(this.glES != null) {
			this.decl("#version " + (this.version < 100 ? 100 : this.version) + (this.version > 150 ? " es" : ""));
		} else if(this.version != null) {
			this.decl("#version " + (this.version > 150 ? 150 : this.version));
		} else {
			this.decl("#version 130");
		}
		this.decls.push(this.buf.b);
		this.buf = null;
		return this.decls.join("\n");
	}
	,__class__: hxsl_GlslOut
};
var hxsl__$Linker_AllocatedVar = function() {
};
$hxClasses["hxsl._Linker.AllocatedVar"] = hxsl__$Linker_AllocatedVar;
hxsl__$Linker_AllocatedVar.__name__ = "hxsl._Linker.AllocatedVar";
hxsl__$Linker_AllocatedVar.prototype = {
	id: null
	,v: null
	,path: null
	,merged: null
	,kind: null
	,parent: null
	,instanceIndex: null
	,__class__: hxsl__$Linker_AllocatedVar
};
var hxsl__$Linker_ShaderInfos = function(n,v) {
	this.name = n;
	this.uid = hxsl__$Linker_ShaderInfos.UID++;
	this.vertex = v;
	this.processed = new haxe_ds_IntMap();
	this.usedFunctions = [];
	this.read = new haxe_ds_IntMap();
	this.write = new haxe_ds_IntMap();
};
$hxClasses["hxsl._Linker.ShaderInfos"] = hxsl__$Linker_ShaderInfos;
hxsl__$Linker_ShaderInfos.__name__ = "hxsl._Linker.ShaderInfos";
hxsl__$Linker_ShaderInfos.prototype = {
	uid: null
	,name: null
	,priority: null
	,body: null
	,usedFunctions: null
	,deps: null
	,read: null
	,write: null
	,processed: null
	,vertex: null
	,onStack: null
	,hasDiscard: null
	,marked: null
	,__class__: hxsl__$Linker_ShaderInfos
};
var hxsl_Linker = function(batchMode) {
	if(batchMode == null) {
		batchMode = false;
	}
	this.debugDepth = 0;
	this.batchMode = batchMode;
};
$hxClasses["hxsl.Linker"] = hxsl_Linker;
hxsl_Linker.__name__ = "hxsl.Linker";
hxsl_Linker.prototype = {
	allVars: null
	,varMap: null
	,curShader: null
	,shaders: null
	,varIdMap: null
	,locals: null
	,curInstance: null
	,batchMode: null
	,isBatchShader: null
	,debugDepth: null
	,error: function(msg,p) {
		return hxsl_Error.t(msg,p);
	}
	,mergeVar: function(path,v,v2,p) {
		switch(v.kind._hx_index) {
		case 0:case 1:case 3:case 4:case 5:
			break;
		case 2:case 6:
			throw new js__$Boot_HaxeError("assert");
		}
		if(v.kind != v2.kind && v.kind != hxsl_VarKind.Local && v2.kind != hxsl_VarKind.Local) {
			this.error("'" + path + "' kind does not match : " + Std.string(v.kind) + " should be " + Std.string(v2.kind),p);
		}
		var _g1 = v2.type;
		var _g2 = v.type;
		if(_g2._hx_index == 13) {
			if(_g1._hx_index == 13) {
				var fl1 = _g2.vl;
				var fl2 = _g1.vl;
				var _g11 = 0;
				while(_g11 < fl1.length) {
					var f1 = fl1[_g11];
					++_g11;
					var ft = null;
					var _g12 = 0;
					while(_g12 < fl2.length) {
						var f2 = fl2[_g12];
						++_g12;
						if(f1.name == f2.name) {
							ft = f2;
							break;
						}
					}
					if(ft == null) {
						fl2.push(this.allocVar(f1,p).v);
					} else {
						this.mergeVar(path + "." + ft.name,f1,ft,p);
					}
				}
			} else if(!Type.enumEq(v.type,v2.type)) {
				this.error("'" + path + "' type does not match : " + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type),p);
			}
		} else if(!Type.enumEq(v.type,v2.type)) {
			this.error("'" + path + "' type does not match : " + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type),p);
		}
	}
	,allocVar: function(v,p,path,parent) {
		var _gthis = this;
		if(v.parent != null && parent == null) {
			parent = this.allocVar(v.parent,p);
			var p1 = parent.v;
			path = p1.name;
			p1 = p1.parent;
			while(p1 != null) {
				path = p1.name + "." + path;
				p1 = p1.parent;
			}
		}
		var key = path == null ? v.name : path + "." + v.name;
		if(v.qualifiers != null) {
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				if(q._hx_index == 4) {
					var n = q.n;
					key = n;
				}
			}
		}
		var _this = this.varMap;
		var v2 = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		var vname = v.name;
		if(v2 != null) {
			var _g2 = 0;
			var _g11 = v2.merged;
			while(_g2 < _g11.length) {
				var vm = _g11[_g2];
				++_g2;
				if(vm == v) {
					return v2;
				}
			}
			var tmp;
			if(!(v.kind == hxsl_VarKind.Param && !hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Shared) && !_gthis.isBatchShader || v.kind == hxsl_VarKind.Function || v.kind == hxsl_VarKind.Var && hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Private))) {
				var v1 = v2.v;
				tmp = v1.kind == hxsl_VarKind.Param && !hxsl_Tools.hasQualifier(v1,hxsl_VarQualifier.Shared) && !_gthis.isBatchShader || v1.kind == hxsl_VarKind.Function || v1.kind == hxsl_VarKind.Var && hxsl_Tools.hasQualifier(v1,hxsl_VarQualifier.Private);
			} else {
				tmp = true;
			}
			if(tmp || v.kind == hxsl_VarKind.Param && v2.v.kind == hxsl_VarKind.Param) {
				var k = 2;
				while(true) {
					var _this1 = this.varMap;
					var key1 = key + k;
					var a = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
					if(a == null) {
						break;
					}
					var _g21 = 0;
					var _g3 = a.merged;
					while(_g21 < _g3.length) {
						var vm1 = _g3[_g21];
						++_g21;
						if(vm1 == v) {
							return a;
						}
					}
					++k;
				}
				vname += k;
				key += k;
			} else {
				v2.merged.push(v);
				this.mergeVar(key,v,v2.v,p);
				this.varIdMap.h[v.id] = v2.id;
				return v2;
			}
		}
		var vid = this.allVars.length + 1;
		var v21 = { id : vid, name : vname, type : v.type, kind : v.kind, qualifiers : v.qualifiers, parent : parent == null ? null : parent.v};
		var a1 = new hxsl__$Linker_AllocatedVar();
		a1.v = v21;
		a1.merged = [v];
		a1.path = key;
		a1.id = vid;
		a1.parent = parent;
		a1.instanceIndex = this.curInstance;
		this.allVars.push(a1);
		var _this2 = this.varMap;
		if(__map_reserved[key] != null) {
			_this2.setReserved(key,a1);
		} else {
			_this2.h[key] = a1;
		}
		var _g4 = v21.type;
		if(_g4._hx_index == 13) {
			var vl = _g4.vl;
			var _g5 = [];
			var _g12 = 0;
			while(_g12 < vl.length) {
				var v3 = vl[_g12];
				++_g12;
				_g5.push(this.allocVar(v3,p,key,a1).v);
			}
			v21.type = hxsl_Type.TStruct(_g5);
		}
		return a1;
	}
	,mapExprVar: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			if(!this.locals.h.hasOwnProperty(v.id)) {
				var v1 = this.allocVar(v,e.p);
				if(this.curShader != null && !this.curShader.write.h.hasOwnProperty(v1.id)) {
					this.curShader.read.h[v1.id] = v1;
					if(this.curShader.vertex == null && v1.v.kind == hxsl_VarKind.Var) {
						this.curShader.vertex = false;
					}
				}
				return { e : hxsl_TExprDef.TVar(v1.v), t : v1.v.type, p : e.p};
			}
			break;
		case 5:
			var e2 = _g.e2;
			var e1 = _g.e1;
			var op = _g.op;
			var _g1 = e1.e;
			switch(op._hx_index) {
			case 4:
				switch(_g1._hx_index) {
				case 1:
					var _g11 = _g1.v;
					var v2 = _g11;
					if(!this.locals.h.hasOwnProperty(v2.id)) {
						var e21 = this.mapExprVar(e2);
						var v3 = this.allocVar(v2,e1.p);
						if(this.curShader != null) {
							this.curShader.write.h[v3.id] = v3;
						}
						return { e : hxsl_TExprDef.TBinop(op,{ e : hxsl_TExprDef.TVar(v3.v), t : v3.v.type, p : e.p},e21), t : e.t, p : e.p};
					} else {
						var v4 = _g11;
						if(!this.locals.h.hasOwnProperty(v4.id)) {
							var e11 = this.mapExprVar(e1);
							var e22 = this.mapExprVar(e2);
							var v5 = this.allocVar(v4,e11.p);
							if(this.curShader != null) {
								this.curShader.write.h[v5.id] = v5;
							}
							return { e : hxsl_TExprDef.TBinop(op,e11,e22), t : e.t, p : e.p};
						}
					}
					break;
				case 9:
					var _g3 = _g1.regs;
					var _g2 = _g1.e;
					var _g6 = _g2.t;
					var _g5 = _g2.p;
					var _g4 = _g2.e;
					if(_g4._hx_index == 1) {
						var v6 = _g4.v;
						if(!this.locals.h.hasOwnProperty(v6.id)) {
							var e12 = this.mapExprVar(e1);
							var e23 = this.mapExprVar(e2);
							var v7 = this.allocVar(v6,e12.p);
							if(this.curShader != null) {
								this.curShader.write.h[v7.id] = v7;
							}
							return { e : hxsl_TExprDef.TBinop(op,e12,e23), t : e.t, p : e.p};
						}
					}
					break;
				default:
				}
				break;
			case 20:
				var _g8 = op.op;
				switch(_g1._hx_index) {
				case 1:
					var v8 = _g1.v;
					if(!this.locals.h.hasOwnProperty(v8.id)) {
						var e13 = this.mapExprVar(e1);
						var e24 = this.mapExprVar(e2);
						var v9 = this.allocVar(v8,e13.p);
						if(this.curShader != null) {
							this.curShader.write.h[v9.id] = v9;
						}
						return { e : hxsl_TExprDef.TBinop(op,e13,e24), t : e.t, p : e.p};
					}
					break;
				case 9:
					var _g111 = _g1.regs;
					var _g10 = _g1.e;
					var _g14 = _g10.t;
					var _g13 = _g10.p;
					var _g12 = _g10.e;
					if(_g12._hx_index == 1) {
						var v10 = _g12.v;
						if(!this.locals.h.hasOwnProperty(v10.id)) {
							var e14 = this.mapExprVar(e1);
							var e25 = this.mapExprVar(e2);
							var v11 = this.allocVar(v10,e14.p);
							if(this.curShader != null) {
								this.curShader.write.h[v11.id] = v11;
							}
							return { e : hxsl_TExprDef.TBinop(op,e14,e25), t : e.t, p : e.p};
						}
					}
					break;
				default:
				}
				break;
			default:
			}
			break;
		case 7:
			var _g61 = _g.init;
			var v12 = _g.v;
			this.locals.h[v12.id] = true;
			break;
		case 11:
			if(this.curShader != null) {
				this.curShader.vertex = false;
				this.curShader.hasDiscard = true;
			}
			break;
		case 13:
			var _g41 = _g.loop;
			var _g31 = _g.it;
			var v13 = _g.v;
			this.locals.h[v13.id] = true;
			break;
		default:
		}
		return hxsl_Tools.map(e,$bind(this,this.mapExprVar));
	}
	,addShader: function(name,vertex,e,p) {
		var s = new hxsl__$Linker_ShaderInfos(name,vertex);
		this.curShader = s;
		s.priority = p;
		s.body = this.mapExprVar(e);
		this.shaders.push(s);
		this.curShader = null;
		return s;
	}
	,sortByPriorityDesc: function(s1,s2) {
		if(s1.priority == s2.priority) {
			return s1.uid - s2.uid;
		}
		return s2.priority - s1.priority;
	}
	,buildDependency: function(s,v,isWritten) {
		var found = !isWritten;
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var parent = _g1[_g];
			++_g;
			if(parent == s) {
				found = true;
				continue;
			} else if(!found) {
				continue;
			}
			if(!parent.write.h.hasOwnProperty(v.id)) {
				continue;
			}
			if(s.vertex) {
				if(parent.vertex == false) {
					continue;
				}
				if(parent.vertex == null) {
					parent.vertex = true;
				}
			}
			s.deps.set(parent,true);
			this.debugDepth++;
			this.initDependencies(parent);
			this.debugDepth--;
			if(!parent.read.h.hasOwnProperty(v.id)) {
				return;
			}
		}
		if(v.v.kind == hxsl_VarKind.Var) {
			this.error("Variable " + v.path + " required by " + s.name + " is missing initializer",null);
		}
	}
	,initDependencies: function(s) {
		if(s.deps != null) {
			return;
		}
		s.deps = new haxe_ds_ObjectMap();
		var r = s.read.iterator();
		while(r.hasNext()) {
			var r1 = r.next();
			this.buildDependency(s,r1,s.write.h.hasOwnProperty(r1.id));
		}
		if(s.vertex == null) {
			var d = s.deps.keys();
			while(d.hasNext()) {
				var d1 = d.next();
				if(d1.vertex == false) {
					s.vertex = false;
					break;
				}
			}
		}
		if(s.vertex) {
			var d2 = s.deps.keys();
			while(d2.hasNext()) {
				var d3 = d2.next();
				if(d3.vertex == null) {
					d3.vertex = true;
				}
			}
		}
	}
	,collect: function(cur,out,vertex) {
		if(cur.onStack) {
			this.error("Loop in shader dependencies (" + cur.name + ")",null);
		}
		if(cur.marked == vertex) {
			return;
		}
		cur.marked = vertex;
		cur.onStack = true;
		var _g = [];
		var d = cur.deps.keys();
		while(d.hasNext()) {
			var d1 = d.next();
			_g.push(d1);
		}
		var deps = _g;
		deps.sort($bind(this,this.sortByPriorityDesc));
		var _g1 = 0;
		while(_g1 < deps.length) {
			var d2 = deps[_g1];
			++_g1;
			this.collect(d2,out,vertex);
		}
		if(cur.vertex == null) {
			cur.vertex = vertex;
		}
		if(cur.vertex == vertex) {
			out.push(cur);
		}
		cur.onStack = false;
	}
	,uniqueLocals: function(expr,locals) {
		var _g = expr.e;
		switch(_g._hx_index) {
		case 4:
			var el = _g.el;
			var _g1 = new haxe_ds_StringMap();
			var k = locals.keys();
			while(k.hasNext()) {
				var k1 = k.next();
				if(__map_reserved[k1] != null) {
					_g1.setReserved(k1,true);
				} else {
					_g1.h[k1] = true;
				}
			}
			var locals1 = _g1;
			var _g11 = 0;
			while(_g11 < el.length) {
				var e = el[_g11];
				++_g11;
				this.uniqueLocals(e,locals1);
			}
			break;
		case 7:
			var _g3 = _g.init;
			var v = _g.v;
			var key = v.name;
			if(__map_reserved[key] != null ? locals.existsReserved(key) : locals.h.hasOwnProperty(key)) {
				var k2 = 2;
				while(true) {
					var key1 = v.name + k2;
					if(!(__map_reserved[key1] != null ? locals.existsReserved(key1) : locals.h.hasOwnProperty(key1))) {
						break;
					}
					++k2;
				}
				v.name += k2;
			}
			var key2 = v.name;
			if(__map_reserved[key2] != null) {
				locals.setReserved(key2,true);
			} else {
				locals.h[key2] = true;
			}
			break;
		default:
			var f = $bind(this,this.uniqueLocals);
			var locals2 = locals;
			hxsl_Tools.iter(expr,function(expr1) {
				f(expr1,locals2);
			});
		}
	}
	,link: function(shadersData) {
		var _gthis = this;
		this.varMap = new haxe_ds_StringMap();
		this.varIdMap = new haxe_ds_IntMap();
		this.allVars = [];
		this.shaders = [];
		this.locals = new haxe_ds_IntMap();
		var dupShaders = new haxe_ds_ObjectMap();
		var _g = [];
		var _g1 = 0;
		while(_g1 < shadersData.length) {
			var s = shadersData[_g1];
			++_g1;
			var s1 = s;
			var sreal = s1;
			if(dupShaders.h.__keys__[s1.__id__] != null) {
				s1 = hxsl_Clone.shaderData(s1);
			}
			dupShaders.set(s1,sreal);
			_g.push(s1);
		}
		shadersData = _g;
		this.curInstance = 0;
		var outVars = [];
		var _g2 = 0;
		while(_g2 < shadersData.length) {
			var s2 = shadersData[_g2];
			++_g2;
			this.isBatchShader = this.batchMode && StringTools.startsWith(s2.name,"batchShader_");
			var _g21 = 0;
			var _g3 = s2.vars;
			while(_g21 < _g3.length) {
				var v = _g3[_g21];
				++_g21;
				var v2 = this.allocVar(v,null);
				if(this.isBatchShader && v2.v.kind == hxsl_VarKind.Param && !StringTools.startsWith(v2.path,"Batch_")) {
					v2.v.kind = hxsl_VarKind.Local;
				}
				if(v.kind == hxsl_VarKind.Output) {
					outVars.push(v);
				}
			}
			var _g4 = 0;
			var _g5 = s2.funs;
			while(_g4 < _g5.length) {
				var f = _g5[_g4];
				++_g4;
				var v1 = this.allocVar(f.ref,f.expr.p);
				v1.kind = f.kind;
			}
			this.curInstance++;
		}
		var priority = 0;
		var initPrio_init = [-3000];
		var initPrio_vert = [-2000];
		var initPrio_frag = [-1000];
		var _g31 = 0;
		while(_g31 < shadersData.length) {
			var s3 = shadersData[_g31];
			++_g31;
			var _g32 = 0;
			var _g41 = s3.funs;
			while(_g32 < _g41.length) {
				var f1 = _g41[_g32];
				++_g32;
				var v3 = this.allocVar(f1.ref,f1.expr.p);
				if(v3.kind == null) {
					throw new js__$Boot_HaxeError("assert");
				}
				switch(v3.kind._hx_index) {
				case 0:case 1:
					this.addShader(s3.name + "." + (v3.kind == hxsl_FunctionKind.Vertex ? "vertex" : "fragment"),v3.kind == hxsl_FunctionKind.Vertex,f1.expr,priority);
					break;
				case 2:
					var prio;
					var status;
					switch(f1.ref.name) {
					case "__init__fragment":
						prio = initPrio_frag;
						status = false;
						break;
					case "__init__vertex":
						prio = initPrio_vert;
						status = true;
						break;
					default:
						prio = initPrio_init;
						status = null;
					}
					var _g42 = f1.expr.e;
					if(_g42._hx_index == 4) {
						var el = _g42.el;
						var index = 0;
						var _g43 = 0;
						while(_g43 < el.length) {
							var e = el[_g43];
							++_g43;
							this.addShader(s3.name + "." + f1.ref.name + index++,status,e,prio[0]++);
						}
					} else {
						this.addShader(s3.name + "." + f1.ref.name,status,f1.expr,prio[0]++);
					}
					break;
				case 3:
					throw new js__$Boot_HaxeError("Unexpected helper function in linker " + v3.v.name);
				}
			}
			++priority;
		}
		this.shaders.sort($bind(this,this.sortByPriorityDesc));
		var entry = new hxsl__$Linker_ShaderInfos("<entry>",false);
		entry.deps = new haxe_ds_ObjectMap();
		var _g44 = 0;
		while(_g44 < outVars.length) {
			var v4 = outVars[_g44];
			++_g44;
			this.buildDependency(entry,this.allocVar(v4,null),false);
		}
		var _g51 = 0;
		var _g6 = this.shaders;
		while(_g51 < _g6.length) {
			var s4 = _g6[_g51];
			++_g51;
			if(s4.hasDiscard) {
				this.initDependencies(s4);
				entry.deps.set(s4,true);
			}
		}
		var _g7 = 0;
		var _g8 = this.shaders;
		while(_g7 < _g8.length) {
			var s5 = _g8[_g7];
			++_g7;
			if(s5.vertex != null) {
				continue;
			}
			var onlyParams = true;
			var r = s5.read.iterator();
			while(r.hasNext()) {
				var r1 = r.next();
				if(r1.v.kind != hxsl_VarKind.Param) {
					onlyParams = false;
					break;
				}
			}
			if(onlyParams) {
				s5.vertex = false;
			}
		}
		var v5 = [];
		var f2 = [];
		this.collect(entry,v5,true);
		this.collect(entry,f2,false);
		if(f2.pop() != entry) {
			throw new js__$Boot_HaxeError("assert");
		}
		var _g9 = 0;
		var _g10 = this.shaders;
		while(_g9 < _g10.length) {
			var s6 = _g10[_g9];
			++_g9;
			s6.marked = null;
		}
		var _g11 = 0;
		var _g12 = v5.concat(f2);
		while(_g11 < _g12.length) {
			var s7 = _g12[_g11];
			++_g11;
			var d = s7.deps.keys();
			while(d.hasNext()) {
				var d1 = d.next();
				if(d1.marked == null) {
					this.error(d1.name + " needed by " + s7.name + " is unreachable",null);
				}
			}
			s7.marked = true;
		}
		var outVars1 = [];
		var varMap_h = { };
		var addVar = null;
		addVar = function(v6) {
			if(varMap_h.hasOwnProperty(v6.id)) {
				return;
			}
			varMap_h[v6.id] = true;
			if(v6.v.parent != null) {
				addVar(v6.parent);
			} else {
				outVars1.push(v6.v);
			}
		};
		var _g13 = 0;
		var _g14 = v5.concat(f2);
		while(_g13 < _g14.length) {
			var s8 = _g14[_g13];
			++_g13;
			var v7 = s8.read.iterator();
			while(v7.hasNext()) {
				var v8 = v7.next();
				addVar(v8);
			}
			var v9 = s8.write.iterator();
			while(v9.hasNext()) {
				var v10 = v9.next();
				addVar(v10);
			}
		}
		var cleanVar = null;
		cleanVar = function(v11) {
			var _g15 = v11.type;
			if(_g15._hx_index == 13) {
				var vl = _g15.vl;
				if(v11.kind != hxsl_VarKind.Input) {
					var vout = [];
					var _g151 = 0;
					while(_g151 < vl.length) {
						var v12 = vl[_g151];
						++_g151;
						if(varMap_h.hasOwnProperty(v12.id)) {
							cleanVar(v12);
							vout.push(v12);
						}
					}
					v11.type = hxsl_Type.TStruct(vout);
				}
			}
		};
		var _g152 = 0;
		while(_g152 < outVars1.length) {
			var v13 = outVars1[_g152];
			++_g152;
			cleanVar(v13);
		}
		var build = function(kind,name,a) {
			var v14 = { id : hxsl_Tools.allocVarId(), name : name, type : hxsl_Type.TFun([{ ret : hxsl_Type.TVoid, args : []}]), kind : hxsl_VarKind.Function};
			outVars1.push(v14);
			var exprs = [];
			var _g16 = 0;
			while(_g16 < a.length) {
				var s9 = a[_g16];
				++_g16;
				var _g161 = s9.body.e;
				if(_g161._hx_index == 4) {
					var el1 = _g161.el;
					var _g162 = 0;
					while(_g162 < el1.length) {
						var e1 = el1[_g162];
						++_g162;
						exprs.push(e1);
					}
				} else {
					exprs.push(s9.body);
				}
			}
			var expr = { e : hxsl_TExprDef.TBlock(exprs), t : hxsl_Type.TVoid, p : exprs.length == 0 ? null : exprs[0].p};
			_gthis.uniqueLocals(expr,new haxe_ds_StringMap());
			return { kind : kind, ref : v14, ret : hxsl_Type.TVoid, args : [], expr : expr};
		};
		var funs = [build(hxsl_FunctionKind.Vertex,"vertex",v5),build(hxsl_FunctionKind.Fragment,"fragment",f2)];
		var s10 = dupShaders.keys();
		while(s10.hasNext()) {
			var s11 = s10.next();
			var sreal1 = dupShaders.h[s11.__id__];
			if(s11 == sreal1) {
				continue;
			}
			var _g163 = 0;
			var _g17 = s11.vars.length;
			while(_g163 < _g17) {
				var i = _g163++;
				this.allocVar(s11.vars[i],null).merged.unshift(sreal1.vars[i]);
			}
		}
		return { name : "out", vars : outVars1, funs : funs};
	}
	,__class__: hxsl_Linker
};
var hxsl_Output = $hxEnums["hxsl.Output"] = { __ename__ : true, __constructs__ : ["Const","Value","PackNormal","PackFloat","Vec2","Vec3","Vec4","Swiz"]
	,Const: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Value: ($_=function(v,size) { return {_hx_index:1,v:v,size:size,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["v","size"],$_)
	,PackNormal: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["v"],$_)
	,PackFloat: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Vec2: ($_=function(a) { return {_hx_index:4,a:a,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["a"],$_)
	,Vec3: ($_=function(a) { return {_hx_index:5,a:a,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["a"],$_)
	,Vec4: ($_=function(a) { return {_hx_index:6,a:a,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["a"],$_)
	,Swiz: ($_=function(a,swiz) { return {_hx_index:7,a:a,swiz:swiz,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["a","swiz"],$_)
};
hxsl_Output.__empty_constructs__ = [];
var hxsl_Printer = function(varId) {
	if(varId == null) {
		varId = false;
	}
	this.varId = varId;
};
$hxClasses["hxsl.Printer"] = hxsl_Printer;
hxsl_Printer.__name__ = "hxsl.Printer";
hxsl_Printer.opStr = function(op) {
	switch(op._hx_index) {
	case 0:
		return "+";
	case 1:
		return "*";
	case 2:
		return "/";
	case 3:
		return "-";
	case 4:
		return "=";
	case 5:
		return "==";
	case 6:
		return "!=";
	case 7:
		return ">";
	case 8:
		return ">=";
	case 9:
		return "<";
	case 10:
		return "<=";
	case 11:
		return "&";
	case 12:
		return "|";
	case 13:
		return "^";
	case 14:
		return "&&";
	case 15:
		return "||";
	case 16:
		return "<<";
	case 17:
		return ">>";
	case 18:
		return ">>>";
	case 19:
		return "%";
	case 20:
		var op1 = op.op;
		return hxsl_Printer.opStr(op1) + "=";
	case 21:
		return "...";
	case 22:
		return "=>";
	case 23:
		return " in ";
	}
};
hxsl_Printer.toString = function(e,varId) {
	if(varId == null) {
		varId = false;
	}
	return new hxsl_Printer(varId).exprString(e);
};
hxsl_Printer.shaderToString = function(s,varId) {
	if(varId == null) {
		varId = false;
	}
	return new hxsl_Printer(varId).shaderString(s);
};
hxsl_Printer.prototype = {
	buffer: null
	,varId: null
	,shaderString: function(s) {
		this.buffer = new StringBuf();
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.addVar(v,hxsl_VarKind.Var);
			this.buffer.b += Std.string(";\n");
		}
		if(s.vars.length > 0) {
			this.buffer.b += Std.string("\n");
		}
		var _g2 = 0;
		var _g3 = s.funs;
		while(_g2 < _g3.length) {
			var f = _g3[_g2];
			++_g2;
			this.addFun(f);
			this.buffer.b += Std.string("\n\n");
		}
		return this.buffer.b;
	}
	,exprString: function(e) {
		this.buffer = new StringBuf();
		this.addExpr(e,"");
		return this.buffer.b;
	}
	,addVar: function(v,defKind,tabs,parent) {
		if(tabs == null) {
			tabs = "";
		}
		if(v.qualifiers != null) {
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				var v1;
				switch(q._hx_index) {
				case 0:
					var max = q.max;
					v1 = "const" + (max == null ? "" : "(" + max + ")");
					break;
				case 1:
					v1 = "private";
					break;
				case 2:
					v1 = "nullable";
					break;
				case 3:
					v1 = "perObject";
					break;
				case 4:
					var n = q.n;
					v1 = "name('" + n + "')";
					break;
				case 5:
					v1 = "shared";
					break;
				case 6:
					var p = q.p;
					v1 = $hxEnums[p.__enum__].__constructs__[p._hx_index].toLowerCase() + "p";
					break;
				case 7:
					var max1 = q.max;
					var min = q.min;
					v1 = "range(" + min + "," + max1 + ")";
					break;
				case 8:
					v1 = "ignore";
					break;
				case 9:
					var n1 = q.v;
					v1 = "perInstance(" + n1 + ")";
					break;
				}
				this.buffer.b += Std.string("@" + v1 + " ");
			}
		}
		if(v.kind != defKind) {
			switch(v.kind._hx_index) {
			case 0:
				this.buffer.b += Std.string("@global ");
				break;
			case 1:
				this.buffer.b += Std.string("@input ");
				break;
			case 2:
				this.buffer.b += Std.string("@param ");
				break;
			case 3:
				this.buffer.b += Std.string("@var ");
				break;
			case 4:
				this.buffer.b += Std.string("@local ");
				break;
			case 5:
				this.buffer.b += Std.string("@output ");
				break;
			case 6:
				this.buffer.b += Std.string("@function ");
				break;
			}
		}
		this.buffer.b += Std.string("var ");
		if(v.parent == parent) {
			this.buffer.b += Std.string(v.name + (this.varId ? "@" + v.id : ""));
		} else {
			this.addVarName(v);
		}
		this.buffer.b += Std.string(" : ");
		var _g2 = v.type;
		if(_g2._hx_index == 13) {
			var vl = _g2.vl;
			this.buffer.b += Std.string("{");
			var first = true;
			var _g3 = 0;
			while(_g3 < vl.length) {
				var v2 = vl[_g3];
				++_g3;
				if(first) {
					first = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addVar(v2,v2.kind,tabs,v2);
			}
			this.buffer.b += Std.string("}");
		} else {
			var v3 = hxsl_Tools.toString(v.type);
			this.buffer.b += Std.string(v3);
		}
	}
	,addFun: function(f) {
		this.buffer.b += Std.string("function " + f.ref.name + "(");
		var first = true;
		var _g = 0;
		var _g1 = f.args;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(first) {
				this.buffer.b += Std.string(" ");
				first = false;
			} else {
				this.buffer.b += Std.string(", ");
			}
			this.addVar(a,hxsl_VarKind.Local);
		}
		if(f.args.length > 0) {
			this.buffer.b += Std.string(" ");
		}
		var v = ") : " + hxsl_Tools.toString(f.ret) + " ";
		this.buffer.b += Std.string(v);
		this.addExpr(f.expr,"");
	}
	,addVarName: function(v) {
		if(v.parent != null) {
			this.addVarName(v.parent);
			this.buffer.b += Std.string(".");
		}
		this.buffer.b += Std.string(v.name);
		if(this.varId) {
			this.buffer.b += Std.string("@" + v.id);
		}
	}
	,addConst: function(c) {
		var _this = this.buffer;
		var _this1 = _this.b;
		var tmp;
		switch(c._hx_index) {
		case 0:
			tmp = "null";
			break;
		case 1:
			var b = c.b;
			tmp = b;
			break;
		case 2:
			var i = c.v;
			tmp = i;
			break;
		case 3:
			var f = c.v;
			tmp = f;
			break;
		case 4:
			var s = c.v;
			tmp = "\"" + s + "\"";
			break;
		}
		_this.b = _this1 + Std.string(tmp);
	}
	,addExpr: function(e,tabs) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			this.addConst(c);
			break;
		case 1:
			var v = _g.v;
			this.addVarName(v);
			break;
		case 2:
			var g = _g.g;
			var v1 = hxsl_Tools2.toString(g);
			this.buffer.b += Std.string(v1);
			break;
		case 3:
			var e1 = _g.e;
			this.buffer.b += Std.string("(");
			this.addExpr(e1,tabs);
			this.buffer.b += Std.string(")");
			break;
		case 4:
			var el = _g.el;
			this.buffer.b += Std.string("{");
			tabs += "\t";
			var _g1 = 0;
			while(_g1 < el.length) {
				var e2 = el[_g1];
				++_g1;
				this.buffer.b += Std.string("\n" + tabs);
				this.addExpr(e2,tabs);
				this.buffer.b += Std.string(";");
			}
			tabs = HxOverrides.substr(tabs,1,null);
			if(el.length > 0) {
				this.buffer.b += Std.string("\n" + tabs);
			}
			this.buffer.b += Std.string("}");
			break;
		case 5:
			var e21 = _g.e2;
			var e11 = _g.e1;
			var op = _g.op;
			this.addExpr(e11,tabs);
			var v2 = " " + hxsl_Printer.opStr(op) + " ";
			this.buffer.b += Std.string(v2);
			this.addExpr(e21,tabs);
			break;
		case 6:
			var e3 = _g.e1;
			var op1 = _g.op;
			var _this = this.buffer;
			var _this1 = _this.b;
			var tmp;
			switch(op1._hx_index) {
			case 0:
				tmp = "++";
				break;
			case 1:
				tmp = "--";
				break;
			case 2:
				tmp = "!";
				break;
			case 3:
				tmp = "-";
				break;
			case 4:
				tmp = "~";
				break;
			}
			_this.b = _this1 + Std.string(tmp);
			this.addExpr(e3,tabs);
			break;
		case 7:
			var init = _g.init;
			var v3 = _g.v;
			this.addVar(v3,hxsl_VarKind.Local,tabs);
			if(init != null) {
				this.buffer.b += Std.string(" = ");
				this.addExpr(init,tabs);
			}
			break;
		case 8:
			var el1 = _g.args;
			var e4 = _g.e;
			this.addExpr(e4,tabs);
			this.buffer.b += Std.string("(");
			var first = true;
			var _g2 = 0;
			while(_g2 < el1.length) {
				var e5 = el1[_g2];
				++_g2;
				if(first) {
					first = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addExpr(e5,tabs);
			}
			this.buffer.b += Std.string(")");
			break;
		case 9:
			var regs = _g.regs;
			var e6 = _g.e;
			this.addExpr(e6,tabs);
			this.buffer.b += Std.string(".");
			var _g3 = 0;
			while(_g3 < regs.length) {
				var r = regs[_g3];
				++_g3;
				this.buffer.b += Std.string(hxsl_Printer.SWIZ[r._hx_index]);
			}
			break;
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var cond = _g.econd;
			this.buffer.b += Std.string("if( ");
			this.addExpr(cond,tabs);
			this.buffer.b += Std.string(" ) ");
			this.addExpr(eif,tabs);
			if(eelse != null) {
				this.buffer.b += Std.string(" else ");
				this.addExpr(eelse,tabs);
			}
			break;
		case 11:
			this.buffer.b += Std.string("discard");
			break;
		case 12:
			var e7 = _g.e;
			this.buffer.b += Std.string("return");
			if(e7 != null) {
				this.buffer.b += Std.string(" ");
				this.addExpr(e7,tabs);
			}
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v4 = _g.v;
			this.buffer.b += Std.string("for( ");
			this.addVarName(v4);
			this.buffer.b += Std.string(" in ");
			this.addExpr(it,tabs);
			this.buffer.b += Std.string(" ) ");
			this.addExpr(loop,tabs);
			break;
		case 14:
			this.buffer.b += Std.string("continue");
			break;
		case 15:
			this.buffer.b += Std.string("break");
			break;
		case 16:
			var e22 = _g.index;
			var e12 = _g.e;
			this.addExpr(e12,tabs);
			this.buffer.b += Std.string("[");
			this.addExpr(e22,tabs);
			this.buffer.b += Std.string("]");
			break;
		case 17:
			var el2 = _g.el;
			this.buffer.b += Std.string("[");
			var first1 = true;
			var _g4 = 0;
			while(_g4 < el2.length) {
				var e8 = el2[_g4];
				++_g4;
				if(first1) {
					first1 = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addExpr(e8,tabs);
			}
			this.buffer.b += Std.string("]");
			break;
		case 18:
			var def = _g.def;
			var cases = _g.cases;
			var e9 = _g.e;
			this.buffer.b += Std.string("switch( ");
			this.addExpr(e9,tabs);
			this.buffer.b += Std.string(") {");
			var old = tabs;
			var _g5 = 0;
			while(_g5 < cases.length) {
				var c1 = cases[_g5];
				++_g5;
				this.buffer.b += Std.string("\n" + tabs);
				this.buffer.b += Std.string("case ");
				var first2 = true;
				var _g6 = 0;
				var _g11 = c1.values;
				while(_g6 < _g11.length) {
					var v5 = _g11[_g6];
					++_g6;
					if(first2) {
						first2 = false;
					} else {
						this.buffer.b += Std.string(", ");
					}
					this.addExpr(v5,tabs);
				}
				tabs += "\t";
				this.buffer.b += Std.string(":\n" + tabs);
				this.addExpr(c1.expr,tabs);
				tabs = old;
			}
			if(def != null) {
				this.buffer.b += Std.string("\n" + tabs);
				tabs += "\t";
				this.buffer.b += Std.string("default:\n" + tabs);
				this.addExpr(def,tabs);
				tabs = old;
			}
			this.buffer.b += Std.string("\n" + tabs + "}");
			break;
		case 19:
			var _g111 = _g.loop;
			var _g10 = _g.e;
			if(_g.normalWhile == false) {
				var e10 = _g10;
				var loop1 = _g111;
				var old1 = tabs;
				tabs += "\t";
				this.buffer.b += Std.string("do {\n" + tabs);
				this.addExpr(loop1,tabs);
				tabs = old1;
				this.buffer.b += Std.string("\n" + tabs + "} while( ");
				this.addExpr(e10,tabs);
				this.buffer.b += Std.string(" )");
			} else {
				var e13 = _g10;
				var loop2 = _g111;
				this.buffer.b += Std.string("while( ");
				this.addExpr(e13,tabs);
				var old2 = tabs;
				tabs += "\t";
				this.buffer.b += Std.string(" ) {\n" + tabs);
				this.addExpr(loop2,tabs);
				tabs = old2;
				this.buffer.b += Std.string("\n" + tabs + "}");
			}
			break;
		case 20:
			var e14 = _g.e;
			var args = _g.args;
			var m = _g.m;
			this.buffer.b += Std.string(m);
			if(args.length > 0) {
				this.buffer.b += Std.string("(");
				var first3 = true;
				var _g7 = 0;
				while(_g7 < args.length) {
					var c2 = args[_g7];
					++_g7;
					if(first3) {
						first3 = false;
					} else {
						this.buffer.b += Std.string(", ");
					}
					this.addConst(c2);
				}
				this.buffer.b += Std.string(")");
			}
			this.buffer.b += Std.string(" ");
			this.addExpr(e14,tabs);
			break;
		}
	}
	,__class__: hxsl_Printer
};
var hxsl_AllocParam = function(name,pos,instance,index,type) {
	this.name = name;
	this.pos = pos;
	this.instance = instance;
	this.index = index;
	this.type = type;
};
$hxClasses["hxsl.AllocParam"] = hxsl_AllocParam;
hxsl_AllocParam.__name__ = "hxsl.AllocParam";
hxsl_AllocParam.prototype = {
	name: null
	,pos: null
	,instance: null
	,index: null
	,type: null
	,perObjectGlobal: null
	,next: null
	,__class__: hxsl_AllocParam
};
var hxsl_AllocGlobal = function(pos,path,type) {
	this.pos = pos;
	this.path = path;
	this.gid = hxsl_Globals.allocID(path);
	this.type = type;
};
$hxClasses["hxsl.AllocGlobal"] = hxsl_AllocGlobal;
hxsl_AllocGlobal.__name__ = "hxsl.AllocGlobal";
hxsl_AllocGlobal.prototype = {
	pos: null
	,gid: null
	,path: null
	,type: null
	,next: null
	,__class__: hxsl_AllocGlobal
};
var hxsl_RuntimeShaderData = function() {
};
$hxClasses["hxsl.RuntimeShaderData"] = hxsl_RuntimeShaderData;
hxsl_RuntimeShaderData.__name__ = "hxsl.RuntimeShaderData";
hxsl_RuntimeShaderData.prototype = {
	vertex: null
	,data: null
	,code: null
	,params: null
	,paramsSize: null
	,globals: null
	,globalsSize: null
	,textures: null
	,texturesCount: null
	,buffers: null
	,bufferCount: null
	,consts: null
	,__class__: hxsl_RuntimeShaderData
};
var hxsl_ShaderInstanceDesc = function(shader,bits) {
	this.shader = shader;
	this.bits = bits;
};
$hxClasses["hxsl.ShaderInstanceDesc"] = hxsl_ShaderInstanceDesc;
hxsl_ShaderInstanceDesc.__name__ = "hxsl.ShaderInstanceDesc";
hxsl_ShaderInstanceDesc.prototype = {
	shader: null
	,bits: null
	,index: null
	,__class__: hxsl_ShaderInstanceDesc
};
var hxsl_RuntimeShader = function() {
	this.id = hxsl_RuntimeShader.UID++;
};
$hxClasses["hxsl.RuntimeShader"] = hxsl_RuntimeShader;
hxsl_RuntimeShader.__name__ = "hxsl.RuntimeShader";
hxsl_RuntimeShader.prototype = {
	id: null
	,vertex: null
	,fragment: null
	,globals: null
	,signature: null
	,batchMode: null
	,spec: null
	,__class__: hxsl_RuntimeShader
};
var hxsl_Serializer = function() {
};
$hxClasses["hxsl.Serializer"] = hxsl_Serializer;
hxsl_Serializer.__name__ = "hxsl.Serializer";
hxsl_Serializer.prototype = {
	input: null
	,varMap: null
	,types: null
	,readVarInt: function() {
		var b = this.input.readByte();
		if(b < 128) {
			return b;
		}
		if(b == 255) {
			return this.input.readInt32();
		}
		return (b & 127) << 8 | this.input.readByte();
	}
	,readType: function() {
		switch(this.input.readByte()) {
		case 0:
			return hxsl_Type.TVoid;
		case 1:
			return hxsl_Type.TInt;
		case 2:
			return hxsl_Type.TBool;
		case 3:
			return hxsl_Type.TFloat;
		case 4:
			return hxsl_Type.TString;
		case 5:
			var bits = this.input.readByte();
			var v = hxsl_Serializer.TVECS.h[bits];
			if(v == null) {
				v = hxsl_Type.TVec(bits & 7,Type.createEnumIndex(hxsl_VecType,bits >> 3,null));
				hxsl_Serializer.TVECS.h[bits] = v;
			}
			return v;
		case 6:
			return hxsl_Type.TMat3;
		case 7:
			return hxsl_Type.TMat4;
		case 8:
			return hxsl_Type.TMat3x4;
		case 9:
			return hxsl_Type.TBytes(this.input.readInt32());
		case 10:
			return hxsl_Type.TSampler2D;
		case 11:
			return hxsl_Type.TSampler2DArray;
		case 12:
			return hxsl_Type.TSamplerCube;
		case 13:
			var id = this.readVarInt();
			var t = this.types[id];
			if(t != null) {
				return t;
			}
			var f = $bind(this,this.readVar);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			t = hxsl_Type.TStruct(_g);
			this.types[id] = t;
			return t;
		case 14:
			return hxsl_Type.TFun(null);
		case 15:
			var t1 = this.readType();
			var v1 = this.readVar();
			return hxsl_Type.TArray(t1,v1 == null ? hxsl_SizeDecl.SConst(this.readVarInt()) : hxsl_SizeDecl.SVar(v1));
		case 16:
			var t2 = this.readType();
			var v2 = this.readVar();
			return hxsl_Type.TBuffer(t2,v2 == null ? hxsl_SizeDecl.SConst(this.readVarInt()) : hxsl_SizeDecl.SVar(v2));
		case 17:
			return hxsl_Type.TChannel(this.input.readByte());
		default:
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,readString: function() {
		var len = this.readVarInt();
		var s = this.input.read(len).getString(0,len);
		return s;
	}
	,readConst: function() {
		switch(this.input.readByte()) {
		case 0:
			return hxsl_Const.CNull;
		case 1:
			return hxsl_Const.CBool(this.input.readByte() != 0);
		case 2:
			return hxsl_Const.CInt(this.input.readInt32());
		case 3:
			return hxsl_Const.CFloat(this.input.readDouble());
		case 4:
			return hxsl_Const.CString(this.readString());
		default:
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,readExpr: function() {
		var _gthis = this;
		var k = this.input.readByte();
		if(k-- == 0) {
			return null;
		}
		var e;
		switch(k) {
		case 0:
			e = hxsl_TExprDef.TConst(this.readConst());
			break;
		case 1:
			e = hxsl_TExprDef.TVar(this.readVar());
			break;
		case 2:
			e = hxsl_TExprDef.TGlobal(hxsl_Serializer.TGLOBALS[this.input.readByte()]);
			break;
		case 3:
			e = hxsl_TExprDef.TParenthesis(this.readExpr());
			break;
		case 4:
			var f = $bind(this,this.readExpr);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			e = hxsl_TExprDef.TBlock(_g);
			break;
		case 5:
			var op = this.input.readByte();
			e = hxsl_TExprDef.TBinop(op >= 128 ? haxe_macro_Binop.OpAssignOp(hxsl_Serializer.BOPS[op & 127]) : hxsl_Serializer.BOPS[op],this.readExpr(),this.readExpr());
			break;
		case 6:
			e = hxsl_TExprDef.TUnop(hxsl_Serializer.UNOPS[this.input.readByte()],this.readExpr());
			break;
		case 7:
			e = hxsl_TExprDef.TVarDecl(this.readVar(),this.readExpr());
			break;
		case 8:
			var e1 = this.readExpr();
			var f1 = $bind(this,this.readExpr);
			var _g3 = [];
			var _g11 = 0;
			var _g21 = this.readVarInt();
			while(_g11 < _g21) {
				var i1 = _g11++;
				_g3.push(f1());
			}
			e = hxsl_TExprDef.TCall(e1,_g3);
			break;
		case 9:
			var e2 = this.readExpr();
			var bits = this.input.readUInt16();
			var swiz = hxsl_Serializer.TSWIZ.h[bits];
			if(swiz == null) {
				var _g4 = [];
				var _g12 = 0;
				var _g22 = (bits & 3) + 1;
				while(_g12 < _g22) {
					var i2 = _g12++;
					_g4.push(hxsl_Serializer.REGS[bits >> i2 * 2 + 2 & 3]);
				}
				swiz = _g4;
				hxsl_Serializer.TSWIZ.h[bits] = swiz;
			}
			e = hxsl_TExprDef.TSwiz(e2,swiz);
			break;
		case 10:
			e = hxsl_TExprDef.TIf(this.readExpr(),this.readExpr(),this.readExpr());
			break;
		case 11:
			e = hxsl_TExprDef.TDiscard;
			break;
		case 12:
			e = hxsl_TExprDef.TReturn(this.readExpr());
			break;
		case 13:
			e = hxsl_TExprDef.TFor(this.readVar(),this.readExpr(),this.readExpr());
			break;
		case 14:
			e = hxsl_TExprDef.TContinue;
			break;
		case 15:
			e = hxsl_TExprDef.TBreak;
			break;
		case 16:
			e = hxsl_TExprDef.TArray(this.readExpr(),this.readExpr());
			break;
		case 17:
			var f2 = $bind(this,this.readExpr);
			var _g5 = [];
			var _g13 = 0;
			var _g23 = this.readVarInt();
			while(_g13 < _g23) {
				var i3 = _g13++;
				_g5.push(f2());
			}
			e = hxsl_TExprDef.TArrayDecl(_g5);
			break;
		case 18:
			var e3 = this.readExpr();
			var _g6 = [];
			var _g14 = 0;
			var _g24 = this.readVarInt();
			while(_g14 < _g24) {
				var i4 = _g14++;
				var f3 = $bind(_gthis,_gthis.readExpr);
				var _g7 = [];
				var _g15 = 0;
				var _g25 = _gthis.readVarInt();
				while(_g15 < _g25) {
					var i5 = _g15++;
					_g7.push(f3());
				}
				_g6.push({ values : _g7, expr : _gthis.readExpr()});
			}
			e = hxsl_TExprDef.TSwitch(e3,_g6,this.readExpr());
			break;
		case 19:
			e = hxsl_TExprDef.TWhile(this.readExpr(),this.readExpr(),this.input.readByte() != 0);
			break;
		case 20:
			var e4 = this.readString();
			var f4 = $bind(this,this.readConst);
			var _g8 = [];
			var _g16 = 0;
			var _g26 = this.readVarInt();
			while(_g16 < _g26) {
				var i6 = _g16++;
				_g8.push(f4());
			}
			e = hxsl_TExprDef.TMeta(e4,_g8,this.readExpr());
			break;
		default:
			throw new js__$Boot_HaxeError("assert");
		}
		return { e : e, t : this.readType(), p : null};
	}
	,readVar: function() {
		var id = this.readVarInt();
		if(id == 0) {
			return null;
		}
		var v = this.varMap.h[id];
		if(v != null) {
			return v;
		}
		v = { id : hxsl_Tools.allocVarId(), name : this.readString(), type : null, kind : null};
		this.varMap.h[id] = v;
		v.type = this.readType();
		v.kind = hxsl_Serializer.VKINDS[this.input.readByte()];
		v.parent = this.readVar();
		var nq = this.input.readByte();
		if(nq > 0) {
			v.qualifiers = [];
			var _g = 0;
			var _g1 = nq;
			while(_g < _g1) {
				var i = _g++;
				var qid = this.input.readByte();
				var q;
				switch(qid) {
				case 0:
					var n = this.input.readInt32();
					q = hxsl_VarQualifier.Const(n == 0 ? null : n);
					break;
				case 1:
					q = hxsl_VarQualifier.Private;
					break;
				case 2:
					q = hxsl_VarQualifier.Nullable;
					break;
				case 3:
					q = hxsl_VarQualifier.PerObject;
					break;
				case 4:
					q = hxsl_VarQualifier.Name(this.readString());
					break;
				case 5:
					q = hxsl_VarQualifier.Shared;
					break;
				case 6:
					q = hxsl_VarQualifier.Precision(hxsl_Serializer.PRECS[this.input.readByte()]);
					break;
				case 7:
					q = hxsl_VarQualifier.Range(this.input.readDouble(),this.input.readDouble());
					break;
				case 8:
					q = hxsl_VarQualifier.Ignore;
					break;
				case 9:
					q = hxsl_VarQualifier.PerInstance(this.input.readInt32());
					break;
				default:
					throw new js__$Boot_HaxeError("assert");
				}
				v.qualifiers.push(q);
			}
		}
		return v;
	}
	,readFun: function() {
		var tmp = hxsl_Serializer.FKIND[this.input.readByte()];
		var tmp1 = this.readVar();
		var f = $bind(this,this.readVar);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.readVarInt();
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(f());
		}
		return { kind : tmp, ref : tmp1, args : _g, ret : this.readType(), expr : this.readExpr()};
	}
	,unserialize: function(data) {
		this.input = new haxe_io_BytesInput(haxe_crypto_Base64.decode(data,false));
		if(this.input.readByte() != (hxsl_Serializer.SIGN & 255) || this.input.readByte() != (hxsl_Serializer.SIGN >> 8 & 255) || this.input.readByte() != (hxsl_Serializer.SIGN >> 16 & 255)) {
			throw new js__$Boot_HaxeError("Invalid HXSL data");
		}
		this.varMap = new haxe_ds_IntMap();
		this.types = [];
		var tmp = this.readString();
		var f = $bind(this,this.readVar);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.readVarInt();
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(f());
		}
		var tmp1 = _g;
		var f1 = $bind(this,this.readFun);
		var _g3 = [];
		var _g11 = 0;
		var _g21 = this.readVarInt();
		while(_g11 < _g21) {
			var i1 = _g11++;
			_g3.push(f1());
		}
		return { name : tmp, vars : tmp1, funs : _g3};
	}
	,__class__: hxsl_Serializer
};
var hxsl_ShaderList = function(s,n) {
	this.s = s;
	this.next = n;
};
$hxClasses["hxsl.ShaderList"] = hxsl_ShaderList;
hxsl_ShaderList.__name__ = "hxsl.ShaderList";
hxsl_ShaderList.addSort = function(s,shaders) {
	var prev = null;
	var hd = shaders;
	while(hd != null && hd.s.priority < s.priority) {
		prev = hd;
		hd = hd.next;
	}
	if(prev == null) {
		return new hxsl_ShaderList(s,shaders);
	}
	prev.next = new hxsl_ShaderList(s,prev.next);
	return shaders;
};
hxsl_ShaderList.prototype = {
	s: null
	,next: null
	,__class__: hxsl_ShaderList
};
var hxsl_ShaderInstance = function(shader) {
	this.id = hxsl_Tools.allocVarId();
	this.shader = shader;
	this.params = new haxe_ds_IntMap();
};
$hxClasses["hxsl.ShaderInstance"] = hxsl_ShaderInstance;
hxsl_ShaderInstance.__name__ = "hxsl.ShaderInstance";
hxsl_ShaderInstance.prototype = {
	id: null
	,shader: null
	,params: null
	,__class__: hxsl_ShaderInstance
};
var hxsl_ShaderGlobal = function(v,gid) {
	this.v = v;
	this.globalId = gid;
};
$hxClasses["hxsl.ShaderGlobal"] = hxsl_ShaderGlobal;
hxsl_ShaderGlobal.__name__ = "hxsl.ShaderGlobal";
hxsl_ShaderGlobal.prototype = {
	v: null
	,globalId: null
	,__class__: hxsl_ShaderGlobal
};
var hxsl_ShaderConst = function(v,pos,bits) {
	this.v = v;
	this.pos = pos;
	this.bits = bits;
};
$hxClasses["hxsl.ShaderConst"] = hxsl_ShaderConst;
hxsl_ShaderConst.__name__ = "hxsl.ShaderConst";
hxsl_ShaderConst.prototype = {
	v: null
	,pos: null
	,bits: null
	,globalId: null
	,next: null
	,__class__: hxsl_ShaderConst
};
var hxsl_SharedShader = function(src) {
	this.instanceCache = new haxe_ds_IntMap();
	this.consts = null;
	this.globals = [];
	if(src == "") {
		return;
	}
	this.data = new hxsl_Serializer().unserialize(src);
	this.initialize();
};
$hxClasses["hxsl.SharedShader"] = hxsl_SharedShader;
hxsl_SharedShader.__name__ = "hxsl.SharedShader";
hxsl_SharedShader.prototype = {
	data: null
	,globals: null
	,consts: null
	,instanceCache: null
	,paramsCount: null
	,initialize: function() {
		var _g = 0;
		var _g1 = this.data.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.browseVar(v);
		}
	}
	,makeInstance: function(constBits) {
		var $eval = new hxsl_Eval();
		var c = this.consts;
		while(c != null) {
			var c1 = c.v;
			var _g = c.v.type;
			var tmp;
			switch(_g._hx_index) {
			case 1:
				tmp = hxsl_Const.CInt(constBits >>> c.pos & (1 << c.bits) - 1);
				break;
			case 2:
				tmp = hxsl_Const.CBool((constBits >>> c.pos & 1) != 0);
				break;
			case 17:
				var _g1 = _g.size;
				tmp = hxsl_Const.CInt(constBits >>> c.pos & (1 << c.bits) - 1);
				break;
			default:
				throw new js__$Boot_HaxeError("assert");
			}
			$eval.setConstant(c1,tmp);
			c = c.next;
		}
		$eval.inlineCalls = true;
		$eval.unrollLoops = hxsl_SharedShader.UNROLL_LOOPS;
		var i = new hxsl_ShaderInstance($eval.eval(this.data));
		this.paramsCount = 0;
		var _g2 = 0;
		var _g11 = this.data.vars;
		while(_g2 < _g11.length) {
			var v = _g11[_g2];
			++_g2;
			this.addParam($eval,i,v);
		}
		this.instanceCache.h[constBits] = i;
		return i;
	}
	,addParam: function($eval,i,v) {
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v1 = vl[_g1];
				++_g1;
				this.addParam($eval,i,v1);
			}
		} else if(v.kind == hxsl_VarKind.Param) {
			i.params.h[$eval.varMap.h[v.__id__].id] = this.paramsCount;
			this.paramsCount++;
		}
	}
	,browseVar: function(v,path) {
		v.id = hxsl_Tools.allocVarId();
		if(path == null) {
			path = hxsl_Tools.getName(v);
		} else {
			path += "." + v.name;
		}
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g1 = 0;
			while(_g1 < vl.length) {
				var vs = vl[_g1];
				++_g1;
				this.browseVar(vs,path);
			}
		} else {
			var globalId = 0;
			if(v.kind == hxsl_VarKind.Global) {
				globalId = hxsl_Globals.allocID(path);
				this.globals.push(new hxsl_ShaderGlobal(v,globalId));
			}
			if(!hxsl_Tools.isConst(v)) {
				return;
			}
			var bits = hxsl_Tools.getConstBits(v);
			if(bits > 0) {
				var pos = this.consts == null ? 0 : this.consts.pos + this.consts.bits;
				var c = new hxsl_ShaderConst(v,pos,bits);
				c.globalId = globalId;
				c.next = this.consts;
				this.consts = c;
			}
		}
	}
	,__class__: hxsl_SharedShader
};
var hxsl__$Splitter_VarProps = function(v) {
	this.v = v;
	this.read = 0;
	this.write = 0;
};
$hxClasses["hxsl._Splitter.VarProps"] = hxsl__$Splitter_VarProps;
hxsl__$Splitter_VarProps.__name__ = "hxsl._Splitter.VarProps";
hxsl__$Splitter_VarProps.prototype = {
	v: null
	,read: null
	,write: null
	,local: null
	,requireInit: null
	,__class__: hxsl__$Splitter_VarProps
};
var hxsl_Splitter = function() {
};
$hxClasses["hxsl.Splitter"] = hxsl_Splitter;
hxsl_Splitter.__name__ = "hxsl.Splitter";
hxsl_Splitter.prototype = {
	vars: null
	,varNames: null
	,varMap: null
	,split: function(s) {
		var vfun = null;
		var vvars = new haxe_ds_IntMap();
		var ffun = null;
		var fvars = new haxe_ds_IntMap();
		this.varNames = new haxe_ds_StringMap();
		this.varMap = new haxe_ds_ObjectMap();
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			switch(f.kind._hx_index) {
			case 0:
				this.vars = vvars;
				vfun = f;
				this.checkExpr(f.expr);
				break;
			case 1:
				this.vars = fvars;
				ffun = f;
				this.checkExpr(f.expr);
				break;
			default:
				throw new js__$Boot_HaxeError("assert");
			}
		}
		vfun = { ret : vfun.ret, ref : vfun.ref, kind : vfun.kind, args : vfun.args, expr : this.mapVars(vfun.expr)};
		var _g2 = 0;
		var _g3 = Lambda.array(vvars);
		while(_g2 < _g3.length) {
			var inf = _g3[_g2];
			++_g2;
			var v = inf.v;
			switch(v.kind._hx_index) {
			case 3:case 4:
				v.kind = fvars.h.hasOwnProperty(v.id) ? hxsl_VarKind.Var : hxsl_VarKind.Local;
				break;
			default:
			}
			switch(v.kind._hx_index) {
			case 3:case 5:
				if(inf.read > 0 || inf.write > 1) {
					var nv = { id : hxsl_Tools.allocVarId(), name : v.name, kind : v.kind, type : v.type};
					this.vars = vvars;
					var ninf = this.get(nv);
					v.kind = hxsl_VarKind.Local;
					var p = vfun.expr.p;
					var e = { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(nv), t : nv.type, p : p},{ e : hxsl_TExprDef.TVar(v), t : v.type, p : p}), t : nv.type, p : p};
					this.addExpr(vfun,e);
					this.checkExpr(e);
					if(nv.kind == hxsl_VarKind.Var) {
						var old = fvars.h[v.id];
						this.varMap.set(v,nv);
						fvars.remove(v.id);
						var np = new hxsl__$Splitter_VarProps(nv);
						np.read = old.read;
						np.write = old.write;
						fvars.h[nv.id] = np;
					}
				}
				break;
			default:
			}
		}
		var finits = [];
		var todo = [];
		var inf1 = fvars.iterator();
		while(inf1.hasNext()) {
			var inf2 = inf1.next();
			var v1 = inf2.v;
			switch(v1.kind._hx_index) {
			case 1:
				var nv1 = { id : hxsl_Tools.allocVarId(), name : v1.name, kind : hxsl_VarKind.Var, type : v1.type};
				this.uniqueName(nv1);
				var i = vvars.h[v1.id];
				if(i == null) {
					i = new hxsl__$Splitter_VarProps(v1);
					vvars.h[v1.id] = i;
				}
				i.read++;
				var vp = new hxsl__$Splitter_VarProps(nv1);
				vp.write = 1;
				vvars.h[nv1.id] = vp;
				var fp = new hxsl__$Splitter_VarProps(nv1);
				fp.read = 1;
				todo.push(fp);
				this.addExpr(vfun,{ e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(nv1), t : v1.type, p : vfun.expr.p},{ e : hxsl_TExprDef.TVar(v1), t : v1.type, p : vfun.expr.p}), t : v1.type, p : vfun.expr.p});
				this.varMap.set(v1,nv1);
				inf2.local = true;
				break;
			case 3:
				if(inf2.write > 0) {
					var nv2 = { id : hxsl_Tools.allocVarId(), name : v1.name, kind : hxsl_VarKind.Local, type : v1.type};
					this.uniqueName(nv2);
					finits.push({ e : hxsl_TExprDef.TVarDecl(nv2,{ e : hxsl_TExprDef.TVar(v1), t : v1.type, p : ffun.expr.p}), t : hxsl_Type.TVoid, p : ffun.expr.p});
					this.varMap.set(v1,nv2);
				}
				break;
			default:
			}
		}
		var _g4 = 0;
		while(_g4 < todo.length) {
			var v2 = todo[_g4];
			++_g4;
			fvars.h[v2.v.id] = v2;
		}
		var v3 = vvars.iterator();
		while(v3.hasNext()) {
			var v4 = v3.next();
			this.checkVar(v4,true,vvars,vfun.expr.p);
		}
		var v5 = fvars.iterator();
		while(v5.hasNext()) {
			var v6 = v5.next();
			this.checkVar(v6,false,vvars,ffun.expr.p);
		}
		var v7 = this.varMap.keys();
		while(v7.hasNext()) {
			var v8 = v7.next();
			var v21 = this.varMap.h[this.varMap.h[v8.__id__].__id__];
			if(v21 != null) {
				this.varMap.set(v8,v21);
			}
		}
		ffun = { ret : ffun.ret, ref : ffun.ref, kind : ffun.kind, args : ffun.args, expr : this.mapVars(ffun.expr)};
		var _g5 = ffun.expr.e;
		if(_g5._hx_index == 4) {
			var el = _g5.el;
			var _g51 = 0;
			while(_g51 < finits.length) {
				var e1 = finits[_g51];
				++_g51;
				el.unshift(e1);
			}
		} else {
			finits.push(ffun.expr);
			ffun.expr = { e : hxsl_TExprDef.TBlock(finits), t : hxsl_Type.TVoid, p : ffun.expr.p};
		}
		var _g7 = [];
		var v9 = vvars.iterator();
		while(v9.hasNext()) {
			var v10 = v9.next();
			if(!v10.local) {
				_g7.push(v10.v);
			}
		}
		var vvars1 = _g7;
		var _g8 = [];
		var v11 = fvars.iterator();
		while(v11.hasNext()) {
			var v12 = v11.next();
			if(!v12.local) {
				_g8.push(v12.v);
			}
		}
		var fvars1 = _g8;
		vvars1.sort(function(v13,v22) {
			return v13.id - v22.id;
		});
		fvars1.sort(function(v14,v23) {
			return v14.id - v23.id;
		});
		return { vertex : { name : "vertex", vars : vvars1, funs : [vfun]}, fragment : { name : "fragment", vars : fvars1, funs : [ffun]}};
	}
	,addExpr: function(f,e) {
		var _g = f.expr.e;
		if(_g._hx_index == 4) {
			var el = _g.el;
			el.push(e);
		} else {
			f.expr = { e : hxsl_TExprDef.TBlock([f.expr,e]), t : hxsl_Type.TVoid, p : f.expr.p};
		}
	}
	,checkVar: function(v,vertex,vvars,p) {
		switch(v.v.kind._hx_index) {
		case 3:
			if(!vertex) {
				var i = vvars.h[v.v.id];
				if(i == null || i.write == 0) {
					throw new js__$Boot_HaxeError(new hxsl_Error("Varying " + v.v.name + " is not written by vertex shader",p));
				}
			}
			break;
		case 4:
			if(v.requireInit) {
				throw new js__$Boot_HaxeError(new hxsl_Error("Variable " + v.v.name + " is used without being initialized",p));
			}
			break;
		default:
		}
	}
	,mapVars: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			var v2 = this.varMap.h[v.__id__];
			if(v2 == null) {
				return e;
			} else {
				return { e : hxsl_TExprDef.TVar(v2), t : e.t, p : e.p};
			}
			break;
		case 7:
			var init = _g.init;
			var v1 = _g.v;
			var v21 = this.varMap.h[v1.__id__];
			if(v21 == null) {
				return hxsl_Tools.map(e,$bind(this,this.mapVars));
			} else {
				return { e : hxsl_TExprDef.TVarDecl(v21,this.mapVars(init)), t : e.t, p : e.p};
			}
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v3 = _g.v;
			var v22 = this.varMap.h[v3.__id__];
			if(v22 == null) {
				return hxsl_Tools.map(e,$bind(this,this.mapVars));
			} else {
				return { e : hxsl_TExprDef.TFor(v22,this.mapVars(it),this.mapVars(loop)), t : e.t, p : e.p};
			}
			break;
		default:
			return hxsl_Tools.map(e,$bind(this,this.mapVars));
		}
	}
	,get: function(v) {
		var i = this.vars.h[v.id];
		if(i == null) {
			var v2 = this.varMap.h[v.__id__];
			if(v2 != null) {
				return this.get(v2);
			}
			var oldName = v.name;
			this.uniqueName(v);
			if(v.kind == hxsl_VarKind.Local && oldName != v.name) {
				var nv = { id : hxsl_Tools.allocVarId(), name : v.name, kind : v.kind, type : v.type};
				this.varMap.set(v,nv);
				v.name = oldName;
				v = nv;
			}
			i = new hxsl__$Splitter_VarProps(v);
			this.vars.h[v.id] = i;
		}
		return i;
	}
	,uniqueName: function(v) {
		if(v.kind == hxsl_VarKind.Global || v.kind == hxsl_VarKind.Output || v.kind == hxsl_VarKind.Input) {
			return;
		}
		v.parent = null;
		var key = v.name;
		var _this = this.varNames;
		var n = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(n != null && n != v) {
			var prefix = v.name;
			while(HxOverrides.cca(prefix,prefix.length - 1) >= 48 && HxOverrides.cca(prefix,prefix.length - 1) <= 57) prefix = HxOverrides.substr(prefix,0,-1);
			var k = prefix == v.name ? 2 : Std.parseInt(HxOverrides.substr(v.name,prefix.length,null));
			while(true) {
				var _this1 = this.varNames;
				var key1 = prefix + k;
				if(!(__map_reserved[key1] != null ? _this1.existsReserved(key1) : _this1.h.hasOwnProperty(key1))) {
					break;
				}
				++k;
			}
			v.name = prefix + k;
		}
		var key2 = v.name;
		var _this2 = this.varNames;
		if(__map_reserved[key2] != null) {
			_this2.setReserved(key2,v);
		} else {
			_this2.h[key2] = v;
		}
	}
	,checkExpr: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			var inf = this.get(v);
			if(inf.write == 0) {
				inf.requireInit = true;
			}
			inf.read++;
			break;
		case 5:
			var _g9 = _g.e2;
			var _g8 = _g.e1;
			var _g7 = _g.op;
			switch(_g7._hx_index) {
			case 4:
				var _g12 = _g8.t;
				var _g11 = _g8.p;
				var _g10 = _g8.e;
				switch(_g10._hx_index) {
				case 1:
					var e1 = _g9;
					var v1 = _g10.v;
					var inf1 = this.get(v1);
					inf1.write++;
					this.checkExpr(e1);
					break;
				case 9:
					var _g15 = _g10.regs;
					var _g14 = _g10.e;
					var _g18 = _g14.t;
					var _g17 = _g14.p;
					var _g16 = _g14.e;
					if(_g16._hx_index == 1) {
						var e2 = _g9;
						var v2 = _g16.v;
						var inf2 = this.get(v2);
						inf2.write++;
						this.checkExpr(e2);
					} else {
						hxsl_Tools.iter(e,$bind(this,this.checkExpr));
					}
					break;
				default:
					hxsl_Tools.iter(e,$bind(this,this.checkExpr));
				}
				break;
			case 20:
				var _g20 = _g7.op;
				var _g23 = _g8.t;
				var _g22 = _g8.p;
				var _g21 = _g8.e;
				switch(_g21._hx_index) {
				case 1:
					var e3 = _g9;
					var v3 = _g21.v;
					var inf3 = this.get(v3);
					if(inf3.write == 0) {
						inf3.requireInit = true;
					}
					inf3.read++;
					inf3.write++;
					this.checkExpr(e3);
					break;
				case 9:
					var _g26 = _g21.regs;
					var _g25 = _g21.e;
					var _g29 = _g25.t;
					var _g28 = _g25.p;
					var _g27 = _g25.e;
					if(_g27._hx_index == 1) {
						var e4 = _g9;
						var v4 = _g27.v;
						var inf4 = this.get(v4);
						if(inf4.write == 0) {
							inf4.requireInit = true;
						}
						inf4.read++;
						inf4.write++;
						this.checkExpr(e4);
					} else {
						hxsl_Tools.iter(e,$bind(this,this.checkExpr));
					}
					break;
				default:
					hxsl_Tools.iter(e,$bind(this,this.checkExpr));
				}
				break;
			default:
				hxsl_Tools.iter(e,$bind(this,this.checkExpr));
			}
			break;
		case 7:
			var init = _g.init;
			var v5 = _g.v;
			var inf5 = this.get(v5);
			inf5.local = true;
			if(init != null) {
				this.checkExpr(init);
				inf5.write++;
			}
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v6 = _g.v;
			this.checkExpr(it);
			var inf6 = this.get(v6);
			inf6.local = true;
			inf6.write++;
			this.checkExpr(loop);
			break;
		default:
			hxsl_Tools.iter(e,$bind(this,this.checkExpr));
		}
	}
	,__class__: hxsl_Splitter
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = "js._Boot.HaxeError";
js__$Boot_HaxeError.wrap = function(val) {
	if(((val) instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = "js.html._CanvasElement.CanvasUtil";
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name1 = "experimental-webgl";
	var ctx1 = canvas.getContext(name1,attribs);
	if(ctx1 != null) {
		return ctx1;
	}
	return null;
};
Math.__name__ = "Math";
var ogmo_Entity = function(l,json) {
	this.nodes = [];
	this.layer = l;
	this.name = json.name;
	this.x = json.x;
	this.y = json.y;
	this.pxWid = json.width == null ? 0 : json.width;
	this.pxHei = json.height == null ? 0 : json.height;
	this.values = json.values == null ? { } : json.values;
	if(json.nodes != null) {
		var jsonNodes = json.nodes;
		var _g = 0;
		while(_g < jsonNodes.length) {
			var n = jsonNodes[_g];
			++_g;
			this.nodes.push(new ogmo_EntityNode(this,n.x,n.y));
		}
	}
	var jsonEnts = this.layer.level.project.json.entities;
	var _g1 = 0;
	while(_g1 < jsonEnts.length) {
		var e = jsonEnts[_g1];
		++_g1;
		if(e.name == this.name) {
			this.projectSettingsJson = e;
			break;
		}
	}
};
$hxClasses["ogmo.Entity"] = ogmo_Entity;
ogmo_Entity.__name__ = "ogmo.Entity";
ogmo_Entity.prototype = {
	layer: null
	,name: null
	,x: null
	,y: null
	,values: null
	,projectSettingsJson: null
	,pxWid: null
	,pxHei: null
	,nodes: null
	,gridWidOverride: null
	,gridHeiOverride: null
	,__class__: ogmo_Entity
};
var ogmo_EntityNode = function(e,x,y) {
	this.parent = e;
	this.x = x;
	this.y = y;
};
$hxClasses["ogmo.EntityNode"] = ogmo_EntityNode;
ogmo_EntityNode.__name__ = "ogmo.EntityNode";
ogmo_EntityNode.prototype = {
	parent: null
	,x: null
	,y: null
	,__class__: ogmo_EntityNode
};
var ogmo_LayerType = $hxEnums["ogmo.LayerType"] = { __ename__ : true, __constructs__ : ["TileLayer","EntityLayer","IntGridLayer"]
	,TileLayer: {_hx_index:0,__enum__:"ogmo.LayerType",toString:$estr}
	,EntityLayer: {_hx_index:1,__enum__:"ogmo.LayerType",toString:$estr}
	,IntGridLayer: {_hx_index:2,__enum__:"ogmo.LayerType",toString:$estr}
};
ogmo_LayerType.__empty_constructs__ = [ogmo_LayerType.TileLayer,ogmo_LayerType.EntityLayer,ogmo_LayerType.IntGridLayer];
var ogmo_Layer = function(l,json) {
	this.entitiesByName = new haxe_ds_StringMap();
	this.entities = [];
	this.intGridColors = new haxe_ds_IntMap();
	this.intGridIds = new haxe_ds_IntMap();
	this.tileIds = new haxe_ds_IntMap();
	this.level = l;
	this.name = json.name;
	this.offX = json.offsetX;
	this.offY = json.offsetY;
	this.gridWid = json.gridCellWidth;
	this.gridHei = json.gridCellHeight;
	this.tilesetLabel = json.tileset;
	if(json.data != null) {
		this.type = ogmo_LayerType.TileLayer;
		var a = json.data;
		var idx = 0;
		var _g = 0;
		while(_g < a.length) {
			var tid = a[_g];
			++_g;
			this.tileIds.h[idx++] = tid;
		}
	} else if(json.data2D != null) {
		this.type = ogmo_LayerType.TileLayer;
		var a1 = json.data2D;
		var idx1 = 0;
		var _g1 = 0;
		while(_g1 < a1.length) {
			var line = a1[_g1];
			++_g1;
			var _g2 = 0;
			while(_g2 < line.length) {
				var tid1 = line[_g2];
				++_g2;
				this.tileIds.h[idx1++] = tid1;
			}
		}
	} else if(json.dataCoords != null) {
		this.type = ogmo_LayerType.TileLayer;
		var a2 = json.dataCoords;
		var idx2 = 0;
		var _g3 = 0;
		while(_g3 < a2.length) {
			var c = a2[_g3];
			++_g3;
			if(c.length == 2) {
				var this1 = this.tileIds;
				var key = this.tilesetLabel;
				var _this = this.level.project.tilesets;
				var value = (__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]).coordId(c[0],c[1]);
				this1.h[idx2] = value;
			}
			++idx2;
		}
	} else if(json.dataCoords2D != null) {
		this.type = ogmo_LayerType.TileLayer;
		var a3 = json.dataCoords2D;
		var idx3 = 0;
		var _g4 = 0;
		while(_g4 < a3.length) {
			var line1 = a3[_g4];
			++_g4;
			var _g5 = 0;
			while(_g5 < line1.length) {
				var c1 = line1[_g5];
				++_g5;
				if(c1.length == 2) {
					var this2 = this.tileIds;
					var key1 = this.tilesetLabel;
					var _this1 = this.level.project.tilesets;
					var value1 = (__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]).coordId(c1[0],c1[1]);
					this2.h[idx3] = value1;
				}
				++idx3;
			}
		}
	} else if(json.entities != null) {
		this.type = ogmo_LayerType.EntityLayer;
		var jsonEntities = json.entities;
		var _g6 = 0;
		while(_g6 < jsonEntities.length) {
			var json1 = jsonEntities[_g6];
			++_g6;
			var e = new ogmo_Entity(this,json1);
			this.entities.push(e);
			var key2 = e.name;
			var _this2 = this.entitiesByName;
			if(!(__map_reserved[key2] != null ? _this2.existsReserved(key2) : _this2.h.hasOwnProperty(key2))) {
				var key3 = e.name;
				var _this3 = this.entitiesByName;
				var value2 = [e];
				if(__map_reserved[key3] != null) {
					_this3.setReserved(key3,value2);
				} else {
					_this3.h[key3] = value2;
				}
			} else {
				var key4 = e.name;
				var _this4 = this.entitiesByName;
				(__map_reserved[key4] != null ? _this4.getReserved(key4) : _this4.h[key4]).push(e);
			}
		}
	} else if(json.grid != null) {
		this.type = ogmo_LayerType.IntGridLayer;
		var jsonGrid = json.grid;
		var idx4 = 0;
		var _g7 = 0;
		while(_g7 < jsonGrid.length) {
			var tid2 = jsonGrid[_g7];
			++_g7;
			this.intGridIds.h[idx4++] = Std.parseInt(tid2);
		}
	} else {
		throw new js__$Boot_HaxeError("Unsupported layer format in: " + Std.string(json.name));
	}
	var layerDefs = this.level.project.json.layers;
	var _g8 = 0;
	while(_g8 < layerDefs.length) {
		var l1 = layerDefs[_g8];
		++_g8;
		if(l1.definition == "grid" && l1.name == this.name) {
			var _g9 = 0;
			var _g11 = Reflect.fields(l1.legend);
			while(_g9 < _g11.length) {
				var k = _g11[_g9];
				++_g9;
				var c2 = Reflect.field(l1.legend,k);
				this.intGridColors.h[Std.parseInt(k)] = Std.parseInt("0x" + HxOverrides.substr(HxOverrides.substr(c2,0,7),1,999));
			}
		}
	}
};
$hxClasses["ogmo.Layer"] = ogmo_Layer;
ogmo_Layer.__name__ = "ogmo.Layer";
ogmo_Layer.prototype = {
	level: null
	,name: null
	,type: null
	,gridWid: null
	,gridHei: null
	,offX: null
	,offY: null
	,tilesetLabel: null
	,tileIds: null
	,intGridIds: null
	,intGridColors: null
	,entities: null
	,entitiesByName: null
	,render: function(parent,alpha,blend) {
		if(alpha == null) {
			alpha = 1.0;
		}
		var wrapper = new h2d_Object(parent);
		wrapper.alpha = alpha;
		if(blend == null) {
			blend = h2d_BlendMode.Alpha;
		}
		switch(this.type._hx_index) {
		case 0:
			var key = this.tilesetLabel;
			var _this = this.level.project.tilesets;
			var tg = new h2d_TileGroup((__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]).tile,wrapper);
			tg.blendMode = blend;
			var _g = 0;
			var x = this.level.pxHei / this.gridHei;
			var _g1;
			if(x > .0) {
				var t = x + .5 | 0;
				_g1 = t < x ? t + 1 : t;
			} else if(x < .0) {
				var t1 = x - .5 | 0;
				_g1 = t1 < x ? t1 + 1 : t1;
			} else {
				_g1 = 0;
			}
			while(_g < _g1) {
				var cy = _g++;
				var _g2 = 0;
				var x1 = this.level.pxWid / this.gridWid;
				var _g11;
				if(x1 > .0) {
					var t2 = x1 + .5 | 0;
					_g11 = t2 < x1 ? t2 + 1 : t2;
				} else if(x1 < .0) {
					var t3 = x1 - .5 | 0;
					_g11 = t3 < x1 ? t3 + 1 : t3;
				} else {
					_g11 = 0;
				}
				while(_g2 < _g11) {
					var cx = _g2++;
					var tmp;
					var key1;
					var key2;
					var key3;
					if(cx >= 0) {
						var x2 = this.level.pxWid / this.gridWid;
						var key4;
						if(x2 > .0) {
							var t4 = x2 + .5 | 0;
							key4 = t4 < x2 ? t4 + 1 : t4;
						} else if(x2 < .0) {
							var t5 = x2 - .5 | 0;
							key4 = t5 < x2 ? t5 + 1 : t5;
						} else {
							key4 = 0;
						}
						key3 = cx < key4;
					} else {
						key3 = false;
					}
					if(key3 && cy >= 0) {
						var x3 = this.level.pxHei / this.gridHei;
						var key5;
						if(x3 > .0) {
							var t6 = x3 + .5 | 0;
							key5 = t6 < x3 ? t6 + 1 : t6;
						} else if(x3 < .0) {
							var t7 = x3 - .5 | 0;
							key5 = t7 < x3 ? t7 + 1 : t7;
						} else {
							key5 = 0;
						}
						key2 = cy < key5;
					} else {
						key2 = false;
					}
					if(key2) {
						var x4 = this.level.pxWid / this.gridWid;
						var key6;
						if(x4 > .0) {
							var t8 = x4 + .5 | 0;
							key6 = t8 < x4 ? t8 + 1 : t8;
						} else if(x4 < .0) {
							var t9 = x4 - .5 | 0;
							key6 = t9 < x4 ? t9 + 1 : t9;
						} else {
							key6 = 0;
						}
						key1 = cx + cy * key6;
					} else {
						key1 = 0;
					}
					if(!this.tileIds.h.hasOwnProperty(key1)) {
						tmp = -1;
					} else {
						var key7;
						var key8;
						var key9;
						if(cx >= 0) {
							var x5 = this.level.pxWid / this.gridWid;
							var key10;
							if(x5 > .0) {
								var t10 = x5 + .5 | 0;
								key10 = t10 < x5 ? t10 + 1 : t10;
							} else if(x5 < .0) {
								var t11 = x5 - .5 | 0;
								key10 = t11 < x5 ? t11 + 1 : t11;
							} else {
								key10 = 0;
							}
							key9 = cx < key10;
						} else {
							key9 = false;
						}
						if(key9 && cy >= 0) {
							var x6 = this.level.pxHei / this.gridHei;
							var key11;
							if(x6 > .0) {
								var t12 = x6 + .5 | 0;
								key11 = t12 < x6 ? t12 + 1 : t12;
							} else if(x6 < .0) {
								var t13 = x6 - .5 | 0;
								key11 = t13 < x6 ? t13 + 1 : t13;
							} else {
								key11 = 0;
							}
							key8 = cy < key11;
						} else {
							key8 = false;
						}
						if(key8) {
							var x7 = this.level.pxWid / this.gridWid;
							var key12;
							if(x7 > .0) {
								var t14 = x7 + .5 | 0;
								key12 = t14 < x7 ? t14 + 1 : t14;
							} else if(x7 < .0) {
								var t15 = x7 - .5 | 0;
								key12 = t15 < x7 ? t15 + 1 : t15;
							} else {
								key12 = 0;
							}
							key7 = cx + cy * key12;
						} else {
							key7 = 0;
						}
						tmp = this.tileIds.h[key7];
					}
					if(tmp < 0) {
						continue;
					}
					var x8 = cx * this.gridWid;
					var y = cy * this.gridHei;
					var key13 = this.tilesetLabel;
					var _this1 = this.level.project.tilesets;
					var _this2 = __map_reserved[key13] != null ? _this1.getReserved(key13) : _this1.h[key13];
					var id;
					var key14;
					var key15;
					var key16;
					if(cx >= 0) {
						var x9 = this.level.pxWid / this.gridWid;
						var key17;
						if(x9 > .0) {
							var t16 = x9 + .5 | 0;
							key17 = t16 < x9 ? t16 + 1 : t16;
						} else if(x9 < .0) {
							var t17 = x9 - .5 | 0;
							key17 = t17 < x9 ? t17 + 1 : t17;
						} else {
							key17 = 0;
						}
						key16 = cx < key17;
					} else {
						key16 = false;
					}
					if(key16 && cy >= 0) {
						var x10 = this.level.pxHei / this.gridHei;
						var key18;
						if(x10 > .0) {
							var t18 = x10 + .5 | 0;
							key18 = t18 < x10 ? t18 + 1 : t18;
						} else if(x10 < .0) {
							var t19 = x10 - .5 | 0;
							key18 = t19 < x10 ? t19 + 1 : t19;
						} else {
							key18 = 0;
						}
						key15 = cy < key18;
					} else {
						key15 = false;
					}
					if(key15) {
						var x11 = this.level.pxWid / this.gridWid;
						var key19;
						if(x11 > .0) {
							var t20 = x11 + .5 | 0;
							key19 = t20 < x11 ? t20 + 1 : t20;
						} else if(x11 < .0) {
							var t21 = x11 - .5 | 0;
							key19 = t21 < x11 ? t21 + 1 : t21;
						} else {
							key19 = 0;
						}
						key14 = cx + cy * key19;
					} else {
						key14 = 0;
					}
					if(!this.tileIds.h.hasOwnProperty(key14)) {
						id = -1;
					} else {
						var key20;
						var key21;
						var key22;
						if(cx >= 0) {
							var x12 = this.level.pxWid / this.gridWid;
							var key23;
							if(x12 > .0) {
								var t22 = x12 + .5 | 0;
								key23 = t22 < x12 ? t22 + 1 : t22;
							} else if(x12 < .0) {
								var t23 = x12 - .5 | 0;
								key23 = t23 < x12 ? t23 + 1 : t23;
							} else {
								key23 = 0;
							}
							key22 = cx < key23;
						} else {
							key22 = false;
						}
						if(key22 && cy >= 0) {
							var x13 = this.level.pxHei / this.gridHei;
							var key24;
							if(x13 > .0) {
								var t24 = x13 + .5 | 0;
								key24 = t24 < x13 ? t24 + 1 : t24;
							} else if(x13 < .0) {
								var t25 = x13 - .5 | 0;
								key24 = t25 < x13 ? t25 + 1 : t25;
							} else {
								key24 = 0;
							}
							key21 = cy < key24;
						} else {
							key21 = false;
						}
						if(key21) {
							var x14 = this.level.pxWid / this.gridWid;
							var key25;
							if(x14 > .0) {
								var t26 = x14 + .5 | 0;
								key25 = t26 < x14 ? t26 + 1 : t26;
							} else if(x14 < .0) {
								var t27 = x14 - .5 | 0;
								key25 = t27 < x14 ? t27 + 1 : t27;
							} else {
								key25 = 0;
							}
							key20 = cx + cy * key25;
						} else {
							key20 = 0;
						}
						id = this.tileIds.h[key20];
					}
					tg.content.add(x8,y,tg.curColor.x,tg.curColor.y,tg.curColor.z,tg.curColor.w,_this2.tiles.h[id]);
				}
			}
			break;
		case 1:
			var _g3 = 0;
			var _g12 = this.entities;
			while(_g3 < _g12.length) {
				var e = _g12[_g3];
				++_g3;
				var g = new h2d_Graphics(wrapper);
				g.posChanged = true;
				g.x = e.x;
				g.posChanged = true;
				g.y = e.y;
				g.lineStyle(1,Std.parseInt("0x" + HxOverrides.substr(e.projectSettingsJson.color.substr(0,7),1,999)),1);
				g.beginFill(Std.parseInt("0x" + HxOverrides.substr(e.projectSettingsJson.color.substr(0,7),1,999)),0.6);
				g.drawRect(0,0,e.pxWid,e.pxHei);
			}
			break;
		case 2:
			var _g4 = 0;
			var x15 = this.level.pxHei / this.gridHei;
			var _g13;
			if(x15 > .0) {
				var t28 = x15 + .5 | 0;
				_g13 = t28 < x15 ? t28 + 1 : t28;
			} else if(x15 < .0) {
				var t29 = x15 - .5 | 0;
				_g13 = t29 < x15 ? t29 + 1 : t29;
			} else {
				_g13 = 0;
			}
			while(_g4 < _g13) {
				var cy1 = _g4++;
				var _g5 = 0;
				var x16 = this.level.pxWid / this.gridWid;
				var _g14;
				if(x16 > .0) {
					var t30 = x16 + .5 | 0;
					_g14 = t30 < x16 ? t30 + 1 : t30;
				} else if(x16 < .0) {
					var t31 = x16 - .5 | 0;
					_g14 = t31 < x16 ? t31 + 1 : t31;
				} else {
					_g14 = 0;
				}
				while(_g5 < _g14) {
					var cx1 = _g5++;
					var tmp1;
					var tmp2;
					var tmp3;
					var tmp4;
					if(cx1 >= 0) {
						var x17 = this.level.pxWid / this.gridWid;
						var tmp5;
						if(x17 > .0) {
							var t32 = x17 + .5 | 0;
							tmp5 = t32 < x17 ? t32 + 1 : t32;
						} else if(x17 < .0) {
							var t33 = x17 - .5 | 0;
							tmp5 = t33 < x17 ? t33 + 1 : t33;
						} else {
							tmp5 = 0;
						}
						tmp4 = cx1 < tmp5;
					} else {
						tmp4 = false;
					}
					if(tmp4 && cy1 >= 0) {
						var x18 = this.level.pxHei / this.gridHei;
						var tmp6;
						if(x18 > .0) {
							var t34 = x18 + .5 | 0;
							tmp6 = t34 < x18 ? t34 + 1 : t34;
						} else if(x18 < .0) {
							var t35 = x18 - .5 | 0;
							tmp6 = t35 < x18 ? t35 + 1 : t35;
						} else {
							tmp6 = 0;
						}
						tmp3 = cy1 < tmp6;
					} else {
						tmp3 = false;
					}
					if(tmp3) {
						var key26;
						var key27;
						var key28;
						if(cx1 >= 0) {
							var x19 = this.level.pxWid / this.gridWid;
							var key29;
							if(x19 > .0) {
								var t36 = x19 + .5 | 0;
								key29 = t36 < x19 ? t36 + 1 : t36;
							} else if(x19 < .0) {
								var t37 = x19 - .5 | 0;
								key29 = t37 < x19 ? t37 + 1 : t37;
							} else {
								key29 = 0;
							}
							key28 = cx1 < key29;
						} else {
							key28 = false;
						}
						if(key28 && cy1 >= 0) {
							var x20 = this.level.pxHei / this.gridHei;
							var key30;
							if(x20 > .0) {
								var t38 = x20 + .5 | 0;
								key30 = t38 < x20 ? t38 + 1 : t38;
							} else if(x20 < .0) {
								var t39 = x20 - .5 | 0;
								key30 = t39 < x20 ? t39 + 1 : t39;
							} else {
								key30 = 0;
							}
							key27 = cy1 < key30;
						} else {
							key27 = false;
						}
						if(key27) {
							var x21 = this.level.pxWid / this.gridWid;
							var key31;
							if(x21 > .0) {
								var t40 = x21 + .5 | 0;
								key31 = t40 < x21 ? t40 + 1 : t40;
							} else if(x21 < .0) {
								var t41 = x21 - .5 | 0;
								key31 = t41 < x21 ? t41 + 1 : t41;
							} else {
								key31 = 0;
							}
							key26 = cx1 + cy1 * key31;
						} else {
							key26 = 0;
						}
						tmp2 = this.intGridIds.h.hasOwnProperty(key26);
					} else {
						tmp2 = false;
					}
					if(tmp2) {
						var key32;
						var key33;
						var key34;
						if(cx1 >= 0) {
							var x22 = this.level.pxWid / this.gridWid;
							var key35;
							if(x22 > .0) {
								var t42 = x22 + .5 | 0;
								key35 = t42 < x22 ? t42 + 1 : t42;
							} else if(x22 < .0) {
								var t43 = x22 - .5 | 0;
								key35 = t43 < x22 ? t43 + 1 : t43;
							} else {
								key35 = 0;
							}
							key34 = cx1 < key35;
						} else {
							key34 = false;
						}
						if(key34 && cy1 >= 0) {
							var x23 = this.level.pxHei / this.gridHei;
							var key36;
							if(x23 > .0) {
								var t44 = x23 + .5 | 0;
								key36 = t44 < x23 ? t44 + 1 : t44;
							} else if(x23 < .0) {
								var t45 = x23 - .5 | 0;
								key36 = t45 < x23 ? t45 + 1 : t45;
							} else {
								key36 = 0;
							}
							key33 = cy1 < key36;
						} else {
							key33 = false;
						}
						if(key33) {
							var x24 = this.level.pxWid / this.gridWid;
							var key37;
							if(x24 > .0) {
								var t46 = x24 + .5 | 0;
								key37 = t46 < x24 ? t46 + 1 : t46;
							} else if(x24 < .0) {
								var t47 = x24 - .5 | 0;
								key37 = t47 < x24 ? t47 + 1 : t47;
							} else {
								key37 = 0;
							}
							key32 = cx1 + cy1 * key37;
						} else {
							key32 = 0;
						}
						tmp1 = this.intGridIds.h[key32];
					} else {
						tmp1 = 0;
					}
					if(tmp1 <= 0) {
						continue;
					}
					var g1 = new h2d_Graphics(wrapper);
					var this1 = this.intGridColors;
					var key38;
					var key39;
					var key40;
					var key41;
					if(cx1 >= 0) {
						var x25 = this.level.pxWid / this.gridWid;
						var key42;
						if(x25 > .0) {
							var t48 = x25 + .5 | 0;
							key42 = t48 < x25 ? t48 + 1 : t48;
						} else if(x25 < .0) {
							var t49 = x25 - .5 | 0;
							key42 = t49 < x25 ? t49 + 1 : t49;
						} else {
							key42 = 0;
						}
						key41 = cx1 < key42;
					} else {
						key41 = false;
					}
					if(key41 && cy1 >= 0) {
						var x26 = this.level.pxHei / this.gridHei;
						var key43;
						if(x26 > .0) {
							var t50 = x26 + .5 | 0;
							key43 = t50 < x26 ? t50 + 1 : t50;
						} else if(x26 < .0) {
							var t51 = x26 - .5 | 0;
							key43 = t51 < x26 ? t51 + 1 : t51;
						} else {
							key43 = 0;
						}
						key40 = cy1 < key43;
					} else {
						key40 = false;
					}
					if(key40) {
						var key44;
						var key45;
						var key46;
						if(cx1 >= 0) {
							var x27 = this.level.pxWid / this.gridWid;
							var key47;
							if(x27 > .0) {
								var t52 = x27 + .5 | 0;
								key47 = t52 < x27 ? t52 + 1 : t52;
							} else if(x27 < .0) {
								var t53 = x27 - .5 | 0;
								key47 = t53 < x27 ? t53 + 1 : t53;
							} else {
								key47 = 0;
							}
							key46 = cx1 < key47;
						} else {
							key46 = false;
						}
						if(key46 && cy1 >= 0) {
							var x28 = this.level.pxHei / this.gridHei;
							var key48;
							if(x28 > .0) {
								var t54 = x28 + .5 | 0;
								key48 = t54 < x28 ? t54 + 1 : t54;
							} else if(x28 < .0) {
								var t55 = x28 - .5 | 0;
								key48 = t55 < x28 ? t55 + 1 : t55;
							} else {
								key48 = 0;
							}
							key45 = cy1 < key48;
						} else {
							key45 = false;
						}
						if(key45) {
							var x29 = this.level.pxWid / this.gridWid;
							var key49;
							if(x29 > .0) {
								var t56 = x29 + .5 | 0;
								key49 = t56 < x29 ? t56 + 1 : t56;
							} else if(x29 < .0) {
								var t57 = x29 - .5 | 0;
								key49 = t57 < x29 ? t57 + 1 : t57;
							} else {
								key49 = 0;
							}
							key44 = cx1 + cy1 * key49;
						} else {
							key44 = 0;
						}
						key39 = this.intGridIds.h.hasOwnProperty(key44);
					} else {
						key39 = false;
					}
					if(key39) {
						var key50;
						var key51;
						var key52;
						if(cx1 >= 0) {
							var x30 = this.level.pxWid / this.gridWid;
							var key53;
							if(x30 > .0) {
								var t58 = x30 + .5 | 0;
								key53 = t58 < x30 ? t58 + 1 : t58;
							} else if(x30 < .0) {
								var t59 = x30 - .5 | 0;
								key53 = t59 < x30 ? t59 + 1 : t59;
							} else {
								key53 = 0;
							}
							key52 = cx1 < key53;
						} else {
							key52 = false;
						}
						if(key52 && cy1 >= 0) {
							var x31 = this.level.pxHei / this.gridHei;
							var key54;
							if(x31 > .0) {
								var t60 = x31 + .5 | 0;
								key54 = t60 < x31 ? t60 + 1 : t60;
							} else if(x31 < .0) {
								var t61 = x31 - .5 | 0;
								key54 = t61 < x31 ? t61 + 1 : t61;
							} else {
								key54 = 0;
							}
							key51 = cy1 < key54;
						} else {
							key51 = false;
						}
						if(key51) {
							var x32 = this.level.pxWid / this.gridWid;
							var key55;
							if(x32 > .0) {
								var t62 = x32 + .5 | 0;
								key55 = t62 < x32 ? t62 + 1 : t62;
							} else if(x32 < .0) {
								var t63 = x32 - .5 | 0;
								key55 = t63 < x32 ? t63 + 1 : t63;
							} else {
								key55 = 0;
							}
							key50 = cx1 + cy1 * key55;
						} else {
							key50 = 0;
						}
						key38 = this.intGridIds.h[key50];
					} else {
						key38 = 0;
					}
					g1.beginFill(this1.h[key38],1);
					g1.drawRect(cx1 * this.gridWid,cy1 * this.gridHei,this.gridWid,this.gridHei);
				}
			}
			break;
		}
		return wrapper;
	}
	,__class__: ogmo_Layer
};
var ogmo_Level = function(p,file,json) {
	this.layersByName = new haxe_ds_StringMap();
	this.layersReversed = [];
	this.layers = [];
	this.project = p;
	this.name = file.entry.name;
	this.directory = file.entry.get_directory();
	this.pxWid = json.width;
	this.pxHei = json.height;
	this.offX = json.offsetX;
	this.offY = json.offsetY;
	this.values = json.values == null ? { } : json.values;
	var jsonLayers = json.layers;
	var _g = 0;
	while(_g < jsonLayers.length) {
		var json1 = jsonLayers[_g];
		++_g;
		var l = new ogmo_Layer(this,json1);
		this.layers.push(l);
		var key = l.name;
		var _this = this.layersByName;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,l);
		} else {
			_this.h[key] = l;
		}
	}
	this.layersReversed = this.layers.slice();
	this.layersReversed.reverse();
};
$hxClasses["ogmo.Level"] = ogmo_Level;
ogmo_Level.__name__ = "ogmo.Level";
ogmo_Level.prototype = {
	project: null
	,name: null
	,directory: null
	,layers: null
	,layersReversed: null
	,layersByName: null
	,pxWid: null
	,pxHei: null
	,offX: null
	,offY: null
	,values: null
	,__class__: ogmo_Level
};
var ogmo_Project = function(project,useEmbededImageData) {
	this.levels = [];
	this.tilesets = new haxe_ds_StringMap();
	this.fullPath = project.entry.get_path();
	var raw = project.entry.getText();
	this.json = JSON.parse(raw);
	this.res = hxd_res_Loader.currentInstance;
	this.project = project;
	if(this.json.tilesets != null) {
		var _g = 0;
		var _g1 = js_Boot.__cast(this.json.tilesets , Array);
		while(_g < _g1.length) {
			var jsonTileset = _g1[_g];
			++_g;
			if(useEmbededImageData) {
				var parts = jsonTileset.image.split(",");
				var r = new EReg("data:[a-z]+/([a-z0-9]+)","gi");
				r.match(parts[0]);
				var imageType = r.matched(1);
				if(imageType == "png") {
					var bytes = haxe_crypto_Base64.decode(parts[1]);
					var reader = new format_png_Reader(new haxe_io_BytesInput(bytes));
					var data = reader.read();
					var wid = 0;
					var hei = 0;
					var _g_head = data.h;
					while(_g_head != null) {
						var val = _g_head.item;
						_g_head = _g_head.next;
						var e = val;
						if(e._hx_index == 1) {
							var h = e.h;
							wid = h.width;
							hei = h.height;
						}
					}
					if(wid == 0 || hei == 0) {
						throw new js__$Boot_HaxeError("Missing width or height");
					}
					var pixels = hxd_Pixels.alloc(wid,hei,hxd_PixelFormat.BGRA);
					format_png_Tools.extract32(data,pixels.bytes);
					var t = new ogmo_Tileset(h2d_Tile.fromPixels(pixels),jsonTileset);
					var key = t.label;
					var _this = this.tilesets;
					if(__map_reserved[key] != null) {
						_this.setReserved(key,t);
					} else {
						_this.h[key] = t;
					}
				} else {
					throw new js__$Boot_HaxeError("Unsupported tileset image format: " + imageType);
				}
			} else {
				var res = hxd_res_Loader.currentInstance;
				var path = project.entry.get_directory() + "/" + StringTools.replace(jsonTileset.path,"\\","/");
				var img = res.load(path);
				var t1 = new ogmo_Tileset(img.toTile(),jsonTileset);
				var key1 = t1.label;
				var _this1 = this.tilesets;
				if(__map_reserved[key1] != null) {
					_this1.setReserved(key1,t1);
				} else {
					_this1.h[key1] = t1;
				}
			}
		}
	}
	var paths = this.json.levelPaths;
	var _g2 = 0;
	while(_g2 < paths.length) {
		var path1 = paths[_g2];
		++_g2;
		this.initLevelInDir(path1);
	}
};
$hxClasses["ogmo.Project"] = ogmo_Project;
ogmo_Project.__name__ = "ogmo.Project";
ogmo_Project.prototype = {
	json: null
	,fullPath: null
	,tilesets: null
	,levels: null
	,res: null
	,project: null
	,initLevelInDir: function(path) {
		var dir = this.res.load(this.project.entry.get_directory() + (path == "." ? "" : "/" + path));
		var _g2 = [];
		var _g3 = dir.entry.iterator();
		while(_g3.i < _g3.l) {
			var f = _g3.a[_g3.i++];
			_g2.push(new hxd_res_Any(dir.loader,f));
		}
		var _g_i = 0;
		var _g_a = _g2;
		var _g_l = _g_a.length;
		while(_g_i < _g_l) {
			var e = _g_a[_g_i++];
			if(e.entry.name.indexOf(".json") >= 0) {
				var raw = e.toText();
				this.levels.push(new ogmo_Level(this,e,JSON.parse(raw)));
			} else if(e.entry.get_isDirectory()) {
				this.initLevelInDir(e.entry.name);
			}
		}
	}
	,getLevelByName: function(n) {
		if(n.indexOf(".json") < 0) {
			n += ".json";
		}
		var _g = 0;
		var _g1 = this.levels;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l.name == n) {
				return l;
			}
		}
		return null;
	}
	,__class__: ogmo_Project
};
var ogmo_Tileset = function(t,json) {
	this.tiles = new haxe_ds_IntMap();
	this.tile = t;
	this.label = json.label;
	this.fullPath = json.path;
	this.tWid = json.tileWidth;
	this.tHei = json.tileHeight;
	var x = this.tile.width / this.tWid;
	var perLine;
	if(x > .0) {
		var t1 = x + .5 | 0;
		perLine = t1 < x ? t1 + 1 : t1;
	} else if(x < .0) {
		var t2 = x - .5 | 0;
		perLine = t2 < x ? t2 + 1 : t2;
	} else {
		perLine = 0;
	}
	var tx = 0;
	var ty = 0;
	var _g = 0;
	var x1 = this.tile.height / this.tHei;
	var _g1;
	if(x1 > .0) {
		var t3 = x1 + .5 | 0;
		_g1 = t3 < x1 ? t3 + 1 : t3;
	} else if(x1 < .0) {
		var t4 = x1 - .5 | 0;
		_g1 = t4 < x1 ? t4 + 1 : t4;
	} else {
		_g1 = 0;
	}
	while(_g < _g1) {
		var ty1 = _g++;
		var _g2 = 0;
		var _g11 = perLine;
		while(_g2 < _g11) {
			var tx1 = _g2++;
			var this1 = this.tiles;
			var value = this.tile.sub(tx1 * this.tWid,ty1 * this.tHei,this.tWid,this.tHei);
			this1.h[tx1 + ty1 * perLine] = value;
		}
	}
};
$hxClasses["ogmo.Tileset"] = ogmo_Tileset;
ogmo_Tileset.__name__ = "ogmo.Tileset";
ogmo_Tileset.prototype = {
	tile: null
	,label: null
	,fullPath: null
	,tWid: null
	,tHei: null
	,tiles: null
	,coordId: function(tx,ty) {
		var x = this.tile.width / this.tWid;
		var tmp;
		if(x > .0) {
			var t = x + .5 | 0;
			tmp = t < x ? t + 1 : t;
		} else if(x < .0) {
			var t1 = x - .5 | 0;
			tmp = t1 < x ? t1 + 1 : t1;
		} else {
			tmp = 0;
		}
		return tx + ty * tmp;
	}
	,__class__: ogmo_Tileset
};
var ui_Console = function(f,p) {
	h2d_Console.call(this,f,p);
	var _g = this;
	_g.posChanged = true;
	_g.scaleX *= 2;
	var _g1 = this;
	_g1.posChanged = true;
	_g1.scaleY *= 2;
	ui_Console.ME = this;
	h2d_Console.HIDE_LOG_TIMEOUT = 30;
	dn_Lib.redirectTracesToH2dConsole(this);
};
$hxClasses["ui.Console"] = ui_Console;
ui_Console.__name__ = "ui.Console";
ui_Console.__super__ = h2d_Console;
ui_Console.prototype = $extend(h2d_Console.prototype,{
	hasFlag: function(k) {
		return false;
	}
	,__class__: ui_Console
});
var ui_Window = function() {
	dn_Process.call(this,Main.ME);
	this.createRootInLayers(Boot.ME.s2d,Const.DP_UI);
	this.win = new h2d_Flow(this.root);
	this.win.set_backgroundTile(h2d_Tile.fromColor(16777215,32,32));
	this.win.set_borderWidth(7);
	this.win.set_borderHeight(7);
	this.win.set_layout(h2d_FlowLayout.Vertical);
	this.win.set_verticalSpacing(2);
	dn_Process.resizeAll();
};
$hxClasses["ui.Window"] = ui_Window;
ui_Window.__name__ = "ui.Window";
ui_Window.__super__ = dn_Process;
ui_Window.prototype = $extend(dn_Process.prototype,{
	win: null
	,onResize: function() {
		dn_Process.prototype.onResize.call(this);
		var _this = this.root;
		var v = Const.UI_SCALE;
		_this.posChanged = true;
		_this.scaleX = v;
		_this.posChanged = true;
		_this.scaleY = v;
		var x = (dn_Process.CUSTOM_STAGE_WIDTH > 0 ? dn_Process.CUSTOM_STAGE_WIDTH : hxd_Window.getInstance().get_width()) / Const.UI_SCALE;
		var w;
		if(x > .0) {
			var t = x + .5 | 0;
			w = t < x ? t + 1 : t;
		} else if(x < .0) {
			var t1 = x - .5 | 0;
			w = t1 < x ? t1 + 1 : t1;
		} else {
			w = 0;
		}
		var x1 = (dn_Process.CUSTOM_STAGE_HEIGHT > 0 ? dn_Process.CUSTOM_STAGE_HEIGHT : hxd_Window.getInstance().get_height()) / Const.UI_SCALE;
		var h;
		if(x1 > .0) {
			var t2 = x1 + .5 | 0;
			h = t2 < x1 ? t2 + 1 : t2;
		} else if(x1 < .0) {
			var t3 = x1 - .5 | 0;
			h = t3 < x1 ? t3 + 1 : t3;
		} else {
			h = 0;
		}
		var _this1 = this.win;
		var v1 = w * 0.5 - this.win.get_outerWidth() * 0.5 | 0;
		_this1.posChanged = true;
		_this1.x = v1;
		var _this2 = this.win;
		var v2 = h * 0.5 - this.win.get_outerHeight() * 0.5 | 0;
		_this2.posChanged = true;
		_this2.y = v2;
	}
	,onClose: function() {
	}
	,close: function() {
		if(!this.destroyed) {
			this.destroyed = true;
			this.onClose();
		}
	}
	,__class__: ui_Window
});
var ui_Modal = function() {
	ui_Window.call(this);
	ui_Modal.ALL.push(this);
	this.modalIdx = ui_Modal.COUNT++;
	if(this.modalIdx == 0) {
		Game.ME.pause();
	}
	this.ca = Main.ME.controller.createAccess("modal",true);
	this.mask = new h2d_Bitmap(h2d_Tile.fromColor(0,1,1,0.6),this.root);
	this.root.under(this.mask);
	dn_Process.resizeAll();
};
$hxClasses["ui.Modal"] = ui_Modal;
ui_Modal.__name__ = "ui.Modal";
ui_Modal.hasAny = function() {
	var _g = 0;
	var _g1 = ui_Modal.ALL;
	while(_g < _g1.length) {
		var e = _g1[_g];
		++_g;
		if(!e.destroyed) {
			return true;
		}
	}
	return false;
};
ui_Modal.__super__ = ui_Window;
ui_Modal.prototype = $extend(ui_Window.prototype,{
	ca: null
	,mask: null
	,modalIdx: null
	,onDispose: function() {
		ui_Window.prototype.onDispose.call(this);
		this.ca.dispose();
		HxOverrides.remove(ui_Modal.ALL,this);
		ui_Modal.COUNT--;
		if(!ui_Modal.hasAny()) {
			Game.ME.resume();
		}
	}
	,onResize: function() {
		ui_Window.prototype.onResize.call(this);
		if(this.mask != null) {
			var x = (dn_Process.CUSTOM_STAGE_WIDTH > 0 ? dn_Process.CUSTOM_STAGE_WIDTH : hxd_Window.getInstance().get_width()) / Const.UI_SCALE;
			var w;
			if(x > .0) {
				var t = x + .5 | 0;
				w = t < x ? t + 1 : t;
			} else if(x < .0) {
				var t1 = x - .5 | 0;
				w = t1 < x ? t1 + 1 : t1;
			} else {
				w = 0;
			}
			var x1 = (dn_Process.CUSTOM_STAGE_HEIGHT > 0 ? dn_Process.CUSTOM_STAGE_HEIGHT : hxd_Window.getInstance().get_height()) / Const.UI_SCALE;
			var h;
			if(x1 > .0) {
				var t2 = x1 + .5 | 0;
				h = t2 < x1 ? t2 + 1 : t2;
			} else if(x1 < .0) {
				var t3 = x1 - .5 | 0;
				h = t3 < x1 ? t3 + 1 : t3;
			} else {
				h = 0;
			}
			var _this = this.mask;
			_this.posChanged = true;
			_this.scaleX = w;
			var _this1 = this.mask;
			_this1.posChanged = true;
			_this1.scaleY = h;
		}
	}
	,postUpdate: function() {
		ui_Window.prototype.postUpdate.call(this);
		this.mask.set_visible(this.modalIdx == 0);
		this.win.alpha = this.modalIdx == ui_Modal.COUNT - 1 ? 1 : 0.6;
	}
	,update: function() {
		ui_Window.prototype.update.call(this);
		var tmp;
		var _this = this.ca;
		var k = 1;
		var tmp1;
		if(!(_this.manualLock || _this.parent.isLocked() || _this.parent.exclusiveId != null && _this.parent.exclusiveId != _this.id || Date.now() / 1000 < _this.parent.suspendTimer)) {
			var tmp2;
			var tmp3;
			var k1 = _this.parent.primary.h[k];
			if(!(k1 != null && !(_this.manualLock || _this.parent.isLocked() || _this.parent.exclusiveId != null && _this.parent.exclusiveId != _this.id || Date.now() / 1000 < _this.parent.suspendTimer) && hxd_Key.isPressed(k1))) {
				var k2 = _this.parent.secondary.h[k];
				tmp3 = k2 != null && !(_this.manualLock || _this.parent.isLocked() || _this.parent.exclusiveId != null && _this.parent.exclusiveId != _this.id || Date.now() / 1000 < _this.parent.suspendTimer) && hxd_Key.isPressed(k2);
			} else {
				tmp3 = true;
			}
			if(!tmp3) {
				var k3 = _this.parent.third.h[k];
				tmp2 = k3 != null && !(_this.manualLock || _this.parent.isLocked() || _this.parent.exclusiveId != null && _this.parent.exclusiveId != _this.id || Date.now() / 1000 < _this.parent.suspendTimer) && hxd_Key.isPressed(k3);
			} else {
				tmp2 = true;
			}
			tmp1 = tmp2 || _this.parent.gc.isPressed(k);
		} else {
			tmp1 = false;
		}
		if(!tmp1) {
			var _this1 = this.ca;
			tmp = !(_this1.manualLock || _this1.parent.isLocked() || _this1.parent.exclusiveId != null && _this1.parent.exclusiveId != _this1.id || Date.now() / 1000 < _this1.parent.suspendTimer) && hxd_Key.isPressed(27);
		} else {
			tmp = true;
		}
		if(tmp) {
			this.close();
		}
	}
	,__class__: ui_Modal
});
var ui_OptionsModal = function() {
	this.curIdx = 0;
	this.elements = [];
	var _gthis = this;
	ui_Modal.call(this);
	this.win.set_layout(h2d_FlowLayout.Horizontal);
	this.win.set_verticalAlign(h2d_FlowAlign.Top);
	this.list = new h2d_Flow(this.win);
	this.list.set_layout(h2d_FlowLayout.Vertical);
	this.cursor = new h2d_Bitmap(h2d_Tile.fromColor(0,1,1,0.25),this.list);
	this.list.getProperties(this.cursor).set_isAbsolute(true);
	var _g = 0;
	var _g1 = Type.getInstanceFields(Options);
	while(_g < _g1.length) {
		var k = [_g1[_g]];
		++_g;
		if(Type.typeof(Reflect.field(Main.ME.options,k[0])) == ValueType.TBool) {
			this.addOptionButton(this.list,k[0],Reflect.field(Main.ME.options,k[0]),(function(k1) {
				return function(v) {
					Main.ME.options[k1[0]] = v;
				};
			})(k));
		}
	}
	this.win.addSpacing(16);
	var help = new h2d_Flow(this.win);
	help.set_horizontalAlign(h2d_FlowAlign.Right);
	help.set_layout(h2d_FlowLayout.Vertical);
	help.set_paddingLeft(32);
	var h = "A - Toggle";
	var t = new h2d_Text(Assets.fontSmall,help);
	t.set_text(h);
	t.set_textColor(8355711);
	var h1 = "Y - Toggle all before";
	var t1 = new h2d_Text(Assets.fontSmall,help);
	t1.set_text(h1);
	t1.set_textColor(8355711);
	var h2 = "LB - Disable all";
	var t2 = new h2d_Text(Assets.fontSmall,help);
	t2.set_text(h2);
	t2.set_textColor(8355711);
	var h3 = "RB - Enable all";
	var t3 = new h2d_Text(Assets.fontSmall,help);
	t3.set_text(h3);
	t3.set_textColor(8355711);
	dn_Process.resizeAll();
};
$hxClasses["ui.OptionsModal"] = ui_OptionsModal;
ui_OptionsModal.__name__ = "ui.OptionsModal";
ui_OptionsModal.__super__ = ui_Modal;
ui_OptionsModal.prototype = $extend(ui_Modal.prototype,{
	elements: null
	,cursor: null
	,list: null
	,curIdx: null
	,addOptionButton: function(p,label,curValue,cb) {
		var line = new h2d_Flow(p);
		line.set_layout(h2d_FlowLayout.Horizontal);
		line.set_horizontalSpacing(6);
		line.set_verticalAlign(h2d_FlowAlign.Middle);
		line.set_padding(2);
		var icon = new h2d_Graphics(line);
		var tf = new h2d_Text(Assets.fontSmall,line);
		tf.set_text(label);
		tf.set_textColor(0);
		line.getProperties(tf).offsetY = -3;
		var setter = function(v) {
			curValue = v;
			cb(v);
			icon.clear();
			icon.lineStyle(1,0,v ? 1 : 0.5);
			icon.drawRect(0,0,10,10);
			if(v) {
				icon.beginFill(0,1);
				icon.lineStyle(0);
				icon.drawRect(2,2,6,6);
				icon.endFill();
			}
			tf.alpha = v ? 1 : 0.5;
		};
		setter(curValue);
		this.elements.push({ f : line, toggle : function() {
			setter(!curValue);
		}, setter : setter, getter : function() {
			return curValue;
		}});
	}
	,update: function() {
		ui_Modal.prototype.update.call(this);
		var current = this.elements[this.curIdx];
		var _this = this.cursor;
		_this.posChanged = true;
		_this.y = current.f.y;
		var _this1 = this.cursor;
		var v = this.list.get_outerWidth();
		_this1.posChanged = true;
		_this1.scaleX = v;
		var _this2 = this.cursor;
		var v1 = current.f.get_outerHeight();
		_this2.posChanged = true;
		_this2.scaleY = v1;
		var _this3 = this.ca;
		var k = 20;
		var tmp;
		if(!(_this3.manualLock || _this3.parent.isLocked() || _this3.parent.exclusiveId != null && _this3.parent.exclusiveId != _this3.id || Date.now() / 1000 < _this3.parent.suspendTimer)) {
			var tmp1;
			var tmp2;
			var k1 = _this3.parent.primary.h[k];
			if(!(k1 != null && !(_this3.manualLock || _this3.parent.isLocked() || _this3.parent.exclusiveId != null && _this3.parent.exclusiveId != _this3.id || Date.now() / 1000 < _this3.parent.suspendTimer) && hxd_Key.isDown(k1))) {
				var k2 = _this3.parent.secondary.h[k];
				tmp2 = k2 != null && !(_this3.manualLock || _this3.parent.isLocked() || _this3.parent.exclusiveId != null && _this3.parent.exclusiveId != _this3.id || Date.now() / 1000 < _this3.parent.suspendTimer) && hxd_Key.isDown(k2);
			} else {
				tmp2 = true;
			}
			if(!tmp2) {
				var k3 = _this3.parent.third.h[k];
				tmp1 = k3 != null && !(_this3.manualLock || _this3.parent.isLocked() || _this3.parent.exclusiveId != null && _this3.parent.exclusiveId != _this3.id || Date.now() / 1000 < _this3.parent.suspendTimer) && hxd_Key.isDown(k3);
			} else {
				tmp1 = true;
			}
			if(!tmp1) {
				var _this4 = _this3.parent.gc;
				tmp = _this4.device != null && _this4.toggles[k] > 0;
			} else {
				tmp = true;
			}
		} else {
			tmp = false;
		}
		if(tmp && !this.cd.fastCheck.h.hasOwnProperty(46137344)) {
			var x = this.curIdx + 1;
			var y = this.elements.length - 1;
			this.curIdx = x < y ? x : y;
			var _this5 = this.cd;
			var _this6 = this.cd;
			var _this7 = this.cd;
			var frames = Const.INFINITE * this.cd.baseFps;
			var s;
			if(_this7.fastCheck.h.hasOwnProperty(50331648)) {
				s = true;
			} else {
				var frames1 = frames;
				var onComplete = null;
				frames1 = Math.floor(frames1 * 1000) / 1000;
				var cur = _this7._getCdObject(50331648);
				if(!(cur != null && frames1 < cur.frames && false)) {
					if(frames1 <= 0) {
						if(cur != null) {
							HxOverrides.remove(_this7.cdList,cur);
							cur.frames = 0;
							cur.cb = null;
							_this7.fastCheck.remove(cur.k);
						}
					} else {
						_this7.fastCheck.h[50331648] = true;
						if(cur != null) {
							cur.frames = frames1;
						} else {
							_this7.cdList.push(new dn__$Cooldown_CdInst(50331648,frames1));
						}
					}
					if(onComplete != null) {
						if(frames1 <= 0) {
							onComplete();
						} else {
							var cd = _this7._getCdObject(50331648);
							if(cd == null) {
								throw new js__$Boot_HaxeError("cannot bind onComplete(" + 50331648 + "): cooldown " + 50331648 + " isn't running");
							}
							cd.cb = onComplete;
						}
					}
				}
				s = false;
			}
			var frames2 = (!s ? 0.20 : 0.07) * _this6.baseFps;
			var allowLower = true;
			var onComplete1 = null;
			if(allowLower == null) {
				allowLower = true;
			}
			frames2 = Math.floor(frames2 * 1000) / 1000;
			var cur1 = _this5._getCdObject(46137344);
			if(!(cur1 != null && frames2 < cur1.frames && !allowLower)) {
				if(frames2 <= 0) {
					if(cur1 != null) {
						HxOverrides.remove(_this5.cdList,cur1);
						cur1.frames = 0;
						cur1.cb = null;
						_this5.fastCheck.remove(cur1.k);
					}
				} else {
					_this5.fastCheck.h[46137344] = true;
					if(cur1 != null) {
						cur1.frames = frames2;
					} else {
						_this5.cdList.push(new dn__$Cooldown_CdInst(46137344,frames2));
					}
				}
				if(onComplete1 != null) {
					if(frames2 <= 0) {
						onComplete1();
					} else {
						var cd1 = _this5._getCdObject(46137344);
						if(cd1 == null) {
							throw new js__$Boot_HaxeError("cannot bind onComplete(" + 46137344 + "): cooldown " + 46137344 + " isn't running");
						}
						cd1.cb = onComplete1;
					}
				}
			}
		}
		var _this8 = this.ca;
		var k4 = 21;
		var tmp3;
		if(!(_this8.manualLock || _this8.parent.isLocked() || _this8.parent.exclusiveId != null && _this8.parent.exclusiveId != _this8.id || Date.now() / 1000 < _this8.parent.suspendTimer)) {
			var tmp4;
			var tmp5;
			var k5 = _this8.parent.primary.h[k4];
			if(!(k5 != null && !(_this8.manualLock || _this8.parent.isLocked() || _this8.parent.exclusiveId != null && _this8.parent.exclusiveId != _this8.id || Date.now() / 1000 < _this8.parent.suspendTimer) && hxd_Key.isDown(k5))) {
				var k6 = _this8.parent.secondary.h[k4];
				tmp5 = k6 != null && !(_this8.manualLock || _this8.parent.isLocked() || _this8.parent.exclusiveId != null && _this8.parent.exclusiveId != _this8.id || Date.now() / 1000 < _this8.parent.suspendTimer) && hxd_Key.isDown(k6);
			} else {
				tmp5 = true;
			}
			if(!tmp5) {
				var k7 = _this8.parent.third.h[k4];
				tmp4 = k7 != null && !(_this8.manualLock || _this8.parent.isLocked() || _this8.parent.exclusiveId != null && _this8.parent.exclusiveId != _this8.id || Date.now() / 1000 < _this8.parent.suspendTimer) && hxd_Key.isDown(k7);
			} else {
				tmp4 = true;
			}
			if(!tmp4) {
				var _this9 = _this8.parent.gc;
				tmp3 = _this9.device != null && _this9.toggles[k4] > 0;
			} else {
				tmp3 = true;
			}
		} else {
			tmp3 = false;
		}
		if(tmp3 && !this.cd.fastCheck.h.hasOwnProperty(46137344)) {
			var x1 = this.curIdx - 1;
			this.curIdx = x1 > 0 ? x1 : 0;
			var _this10 = this.cd;
			var _this11 = this.cd;
			var _this12 = this.cd;
			var frames3 = Const.INFINITE * this.cd.baseFps;
			var s1;
			if(_this12.fastCheck.h.hasOwnProperty(50331648)) {
				s1 = true;
			} else {
				var frames4 = frames3;
				var onComplete2 = null;
				frames4 = Math.floor(frames4 * 1000) / 1000;
				var cur2 = _this12._getCdObject(50331648);
				if(!(cur2 != null && frames4 < cur2.frames && false)) {
					if(frames4 <= 0) {
						if(cur2 != null) {
							HxOverrides.remove(_this12.cdList,cur2);
							cur2.frames = 0;
							cur2.cb = null;
							_this12.fastCheck.remove(cur2.k);
						}
					} else {
						_this12.fastCheck.h[50331648] = true;
						if(cur2 != null) {
							cur2.frames = frames4;
						} else {
							_this12.cdList.push(new dn__$Cooldown_CdInst(50331648,frames4));
						}
					}
					if(onComplete2 != null) {
						if(frames4 <= 0) {
							onComplete2();
						} else {
							var cd2 = _this12._getCdObject(50331648);
							if(cd2 == null) {
								throw new js__$Boot_HaxeError("cannot bind onComplete(" + 50331648 + "): cooldown " + 50331648 + " isn't running");
							}
							cd2.cb = onComplete2;
						}
					}
				}
				s1 = false;
			}
			var frames5 = (!s1 ? 0.20 : 0.07) * _this11.baseFps;
			var allowLower1 = true;
			var onComplete3 = null;
			if(allowLower1 == null) {
				allowLower1 = true;
			}
			frames5 = Math.floor(frames5 * 1000) / 1000;
			var cur3 = _this10._getCdObject(46137344);
			if(!(cur3 != null && frames5 < cur3.frames && !allowLower1)) {
				if(frames5 <= 0) {
					if(cur3 != null) {
						HxOverrides.remove(_this10.cdList,cur3);
						cur3.frames = 0;
						cur3.cb = null;
						_this10.fastCheck.remove(cur3.k);
					}
				} else {
					_this10.fastCheck.h[46137344] = true;
					if(cur3 != null) {
						cur3.frames = frames5;
					} else {
						_this10.cdList.push(new dn__$Cooldown_CdInst(46137344,frames5));
					}
				}
				if(onComplete3 != null) {
					if(frames5 <= 0) {
						onComplete3();
					} else {
						var cd3 = _this10._getCdObject(46137344);
						if(cd3 == null) {
							throw new js__$Boot_HaxeError("cannot bind onComplete(" + 46137344 + "): cooldown " + 46137344 + " isn't running");
						}
						cd3.cb = onComplete3;
					}
				}
			}
		}
		var tmp6;
		var _this13 = this.ca;
		var k8 = 20;
		var tmp7;
		if(!(_this13.manualLock || _this13.parent.isLocked() || _this13.parent.exclusiveId != null && _this13.parent.exclusiveId != _this13.id || Date.now() / 1000 < _this13.parent.suspendTimer)) {
			var tmp8;
			var tmp9;
			var k9 = _this13.parent.primary.h[k8];
			if(!(k9 != null && !(_this13.manualLock || _this13.parent.isLocked() || _this13.parent.exclusiveId != null && _this13.parent.exclusiveId != _this13.id || Date.now() / 1000 < _this13.parent.suspendTimer) && hxd_Key.isDown(k9))) {
				var k10 = _this13.parent.secondary.h[k8];
				tmp9 = k10 != null && !(_this13.manualLock || _this13.parent.isLocked() || _this13.parent.exclusiveId != null && _this13.parent.exclusiveId != _this13.id || Date.now() / 1000 < _this13.parent.suspendTimer) && hxd_Key.isDown(k10);
			} else {
				tmp9 = true;
			}
			if(!tmp9) {
				var k11 = _this13.parent.third.h[k8];
				tmp8 = k11 != null && !(_this13.manualLock || _this13.parent.isLocked() || _this13.parent.exclusiveId != null && _this13.parent.exclusiveId != _this13.id || Date.now() / 1000 < _this13.parent.suspendTimer) && hxd_Key.isDown(k11);
			} else {
				tmp8 = true;
			}
			if(!tmp8) {
				var _this14 = _this13.parent.gc;
				tmp7 = _this14.device != null && _this14.toggles[k8] > 0;
			} else {
				tmp7 = true;
			}
		} else {
			tmp7 = false;
		}
		if(!tmp7) {
			var _this15 = this.ca;
			var k12 = 21;
			var tmp10;
			if(!(_this15.manualLock || _this15.parent.isLocked() || _this15.parent.exclusiveId != null && _this15.parent.exclusiveId != _this15.id || Date.now() / 1000 < _this15.parent.suspendTimer)) {
				var tmp11;
				var tmp12;
				var k13 = _this15.parent.primary.h[k12];
				if(!(k13 != null && !(_this15.manualLock || _this15.parent.isLocked() || _this15.parent.exclusiveId != null && _this15.parent.exclusiveId != _this15.id || Date.now() / 1000 < _this15.parent.suspendTimer) && hxd_Key.isDown(k13))) {
					var k14 = _this15.parent.secondary.h[k12];
					tmp12 = k14 != null && !(_this15.manualLock || _this15.parent.isLocked() || _this15.parent.exclusiveId != null && _this15.parent.exclusiveId != _this15.id || Date.now() / 1000 < _this15.parent.suspendTimer) && hxd_Key.isDown(k14);
				} else {
					tmp12 = true;
				}
				if(!tmp12) {
					var k15 = _this15.parent.third.h[k12];
					tmp11 = k15 != null && !(_this15.manualLock || _this15.parent.isLocked() || _this15.parent.exclusiveId != null && _this15.parent.exclusiveId != _this15.id || Date.now() / 1000 < _this15.parent.suspendTimer) && hxd_Key.isDown(k15);
				} else {
					tmp11 = true;
				}
				if(!tmp11) {
					var _this16 = _this15.parent.gc;
					tmp10 = _this16.device != null && _this16.toggles[k12] > 0;
				} else {
					tmp10 = true;
				}
			} else {
				tmp10 = false;
			}
			tmp6 = !tmp10;
		} else {
			tmp6 = false;
		}
		if(tmp6) {
			var _this17 = this.cd;
			var _g = 0;
			var _g1 = _this17.cdList;
			while(_g < _g1.length) {
				var cd4 = _g1[_g];
				++_g;
				if(cd4.k == 50331648) {
					HxOverrides.remove(_this17.cdList,cd4);
					cd4.frames = 0;
					cd4.cb = null;
					_this17.fastCheck.remove(cd4.k);
					break;
				}
			}
		}
		var _this18 = this.ca;
		var k16 = 3;
		var tmp13;
		if(!(_this18.manualLock || _this18.parent.isLocked() || _this18.parent.exclusiveId != null && _this18.parent.exclusiveId != _this18.id || Date.now() / 1000 < _this18.parent.suspendTimer)) {
			var tmp14;
			var tmp15;
			var k17 = _this18.parent.primary.h[k16];
			if(!(k17 != null && !(_this18.manualLock || _this18.parent.isLocked() || _this18.parent.exclusiveId != null && _this18.parent.exclusiveId != _this18.id || Date.now() / 1000 < _this18.parent.suspendTimer) && hxd_Key.isPressed(k17))) {
				var k18 = _this18.parent.secondary.h[k16];
				tmp15 = k18 != null && !(_this18.manualLock || _this18.parent.isLocked() || _this18.parent.exclusiveId != null && _this18.parent.exclusiveId != _this18.id || Date.now() / 1000 < _this18.parent.suspendTimer) && hxd_Key.isPressed(k18);
			} else {
				tmp15 = true;
			}
			if(!tmp15) {
				var k19 = _this18.parent.third.h[k16];
				tmp14 = k19 != null && !(_this18.manualLock || _this18.parent.isLocked() || _this18.parent.exclusiveId != null && _this18.parent.exclusiveId != _this18.id || Date.now() / 1000 < _this18.parent.suspendTimer) && hxd_Key.isPressed(k19);
			} else {
				tmp14 = true;
			}
			tmp13 = tmp14 || _this18.parent.gc.isPressed(k16);
		} else {
			tmp13 = false;
		}
		if(tmp13) {
			var curValue = current.getter();
			var _g2 = 0;
			var _g11 = this.elements;
			while(_g2 < _g11.length) {
				var e = _g11[_g2];
				++_g2;
				e.setter(false);
			}
			var _g21 = 0;
			var _g3 = this.elements;
			while(_g21 < _g3.length) {
				var e1 = _g3[_g21];
				++_g21;
				e1.setter(!curValue);
				if(e1 == current) {
					break;
				}
			}
			Main.ME.startGame();
		}
		var _this19 = this.ca;
		var k20 = 8;
		var tmp16;
		if(!(_this19.manualLock || _this19.parent.isLocked() || _this19.parent.exclusiveId != null && _this19.parent.exclusiveId != _this19.id || Date.now() / 1000 < _this19.parent.suspendTimer)) {
			var tmp17;
			var tmp18;
			var k21 = _this19.parent.primary.h[k20];
			if(!(k21 != null && !(_this19.manualLock || _this19.parent.isLocked() || _this19.parent.exclusiveId != null && _this19.parent.exclusiveId != _this19.id || Date.now() / 1000 < _this19.parent.suspendTimer) && hxd_Key.isPressed(k21))) {
				var k22 = _this19.parent.secondary.h[k20];
				tmp18 = k22 != null && !(_this19.manualLock || _this19.parent.isLocked() || _this19.parent.exclusiveId != null && _this19.parent.exclusiveId != _this19.id || Date.now() / 1000 < _this19.parent.suspendTimer) && hxd_Key.isPressed(k22);
			} else {
				tmp18 = true;
			}
			if(!tmp18) {
				var k23 = _this19.parent.third.h[k20];
				tmp17 = k23 != null && !(_this19.manualLock || _this19.parent.isLocked() || _this19.parent.exclusiveId != null && _this19.parent.exclusiveId != _this19.id || Date.now() / 1000 < _this19.parent.suspendTimer) && hxd_Key.isPressed(k23);
			} else {
				tmp17 = true;
			}
			tmp16 = tmp17 || _this19.parent.gc.isPressed(k20);
		} else {
			tmp16 = false;
		}
		if(tmp16) {
			var _g4 = 0;
			var _g12 = this.elements;
			while(_g4 < _g12.length) {
				var e2 = _g12[_g4];
				++_g4;
				e2.setter(false);
			}
			Main.ME.startGame();
		}
		var _this20 = this.ca;
		var k24 = 9;
		var tmp19;
		if(!(_this20.manualLock || _this20.parent.isLocked() || _this20.parent.exclusiveId != null && _this20.parent.exclusiveId != _this20.id || Date.now() / 1000 < _this20.parent.suspendTimer)) {
			var tmp20;
			var tmp21;
			var k25 = _this20.parent.primary.h[k24];
			if(!(k25 != null && !(_this20.manualLock || _this20.parent.isLocked() || _this20.parent.exclusiveId != null && _this20.parent.exclusiveId != _this20.id || Date.now() / 1000 < _this20.parent.suspendTimer) && hxd_Key.isPressed(k25))) {
				var k26 = _this20.parent.secondary.h[k24];
				tmp21 = k26 != null && !(_this20.manualLock || _this20.parent.isLocked() || _this20.parent.exclusiveId != null && _this20.parent.exclusiveId != _this20.id || Date.now() / 1000 < _this20.parent.suspendTimer) && hxd_Key.isPressed(k26);
			} else {
				tmp21 = true;
			}
			if(!tmp21) {
				var k27 = _this20.parent.third.h[k24];
				tmp20 = k27 != null && !(_this20.manualLock || _this20.parent.isLocked() || _this20.parent.exclusiveId != null && _this20.parent.exclusiveId != _this20.id || Date.now() / 1000 < _this20.parent.suspendTimer) && hxd_Key.isPressed(k27);
			} else {
				tmp20 = true;
			}
			tmp19 = tmp20 || _this20.parent.gc.isPressed(k24);
		} else {
			tmp19 = false;
		}
		if(tmp19) {
			var _g5 = 0;
			var _g13 = this.elements;
			while(_g5 < _g13.length) {
				var e3 = _g13[_g5];
				++_g5;
				e3.setter(true);
			}
			Main.ME.startGame();
		}
		var tmp22;
		var _this21 = this.ca;
		var k28 = 2;
		var tmp23;
		if(!(_this21.manualLock || _this21.parent.isLocked() || _this21.parent.exclusiveId != null && _this21.parent.exclusiveId != _this21.id || Date.now() / 1000 < _this21.parent.suspendTimer)) {
			var tmp24;
			var tmp25;
			var k29 = _this21.parent.primary.h[k28];
			if(!(k29 != null && !(_this21.manualLock || _this21.parent.isLocked() || _this21.parent.exclusiveId != null && _this21.parent.exclusiveId != _this21.id || Date.now() / 1000 < _this21.parent.suspendTimer) && hxd_Key.isPressed(k29))) {
				var k30 = _this21.parent.secondary.h[k28];
				tmp25 = k30 != null && !(_this21.manualLock || _this21.parent.isLocked() || _this21.parent.exclusiveId != null && _this21.parent.exclusiveId != _this21.id || Date.now() / 1000 < _this21.parent.suspendTimer) && hxd_Key.isPressed(k30);
			} else {
				tmp25 = true;
			}
			if(!tmp25) {
				var k31 = _this21.parent.third.h[k28];
				tmp24 = k31 != null && !(_this21.manualLock || _this21.parent.isLocked() || _this21.parent.exclusiveId != null && _this21.parent.exclusiveId != _this21.id || Date.now() / 1000 < _this21.parent.suspendTimer) && hxd_Key.isPressed(k31);
			} else {
				tmp24 = true;
			}
			tmp23 = tmp24 || _this21.parent.gc.isPressed(k28);
		} else {
			tmp23 = false;
		}
		if(!tmp23) {
			var _this22 = this.ca;
			var k32 = 0;
			if(!(_this22.manualLock || _this22.parent.isLocked() || _this22.parent.exclusiveId != null && _this22.parent.exclusiveId != _this22.id || Date.now() / 1000 < _this22.parent.suspendTimer)) {
				var tmp26;
				var tmp27;
				var k33 = _this22.parent.primary.h[k32];
				if(!(k33 != null && !(_this22.manualLock || _this22.parent.isLocked() || _this22.parent.exclusiveId != null && _this22.parent.exclusiveId != _this22.id || Date.now() / 1000 < _this22.parent.suspendTimer) && hxd_Key.isPressed(k33))) {
					var k34 = _this22.parent.secondary.h[k32];
					tmp27 = k34 != null && !(_this22.manualLock || _this22.parent.isLocked() || _this22.parent.exclusiveId != null && _this22.parent.exclusiveId != _this22.id || Date.now() / 1000 < _this22.parent.suspendTimer) && hxd_Key.isPressed(k34);
				} else {
					tmp27 = true;
				}
				if(!tmp27) {
					var k35 = _this22.parent.third.h[k32];
					tmp26 = k35 != null && !(_this22.manualLock || _this22.parent.isLocked() || _this22.parent.exclusiveId != null && _this22.parent.exclusiveId != _this22.id || Date.now() / 1000 < _this22.parent.suspendTimer) && hxd_Key.isPressed(k35);
				} else {
					tmp26 = true;
				}
				tmp22 = tmp26 || _this22.parent.gc.isPressed(k32);
			} else {
				tmp22 = false;
			}
		} else {
			tmp22 = true;
		}
		if(tmp22) {
			current.toggle();
			Main.ME.startGame();
		}
	}
	,__class__: ui_OptionsModal
});
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_Resource.content = [{ name : "R_map_tilesets_inca_back_png", data : ""},{ name : "R_lang_sourceTexts_pot", data : "bXNnaWQgIiINCm1zZ3N0ciAiIg0KIkNvbnRlbnQtVHlwZTogdGV4dC9wbGFpbjsgY2hhcnNldD1VVEYtOFxuIg0KIkNvbnRlbnQtVHJhbnNmZXItRW5jb2Rpbmc6IDhiaXRcbiINCiJNSU1FLVZlcnNpb246IDEuMFxuIg0KDQojOiBzcmMvR2FtZS5oeDozMA0KbXNnaWQgIkdhbWUgaXMgcmVhZHkuIg0KbXNnc3RyICIiDQoNCiM6IHNyYy9HYW1lLmh4OjY5DQptc2dpZCAiUHJlc3MgRVNDQVBFIGFnYWluIHRvIGV4aXQuIg0KbXNnc3RyICIiDQoNCg0K"},{ name : "R_fonts_minecraftiaOutline_fnt", data : "QkZOVAABCwBNaW5lY3JhZnRpYQYAFgBtaW5lY3JhZnRpYU91dGxpbmUucG5nDAAKAD8AAABAAAAA3wABAAgACQD//wIABgAAAAAAwAAAALYAIQAHAAwA/////wUAAAAAACAAAAABAAgAAgACAP//CQAEAAAAAABgAAAA4wAMAAQABQD//wIAAgAAAAAA4AAAAK8AMwAHAAkA//8CAAUAAAAAAFAAAABnAAwABwAJAP//AgAFAAAAAADQAAAALwAzAAgACQD+/wIABQAAAAAAMAAAAGkAAQAHAAkA//8CAAUAAAAAALAAAABBACQABQAFAP//AgADAAAAAABwAAAAYAAYAAcACAD//wQABQAAAAAA8AAAACUAQAAHAAoA//8BAAUAAAAAAEgAAAApAAwABwAJAP//AgAFAAAAAADIAAAA9gAhAAcADAD/////BQAAAAAAKAAAADQAAQAGAAkA//8CAAQAAAAAAKgAAAABACQABwADAP//AgAFAAAAAABoAAAAKAAWAAcACQD//wIABQAAAAAA6AAAAO8AMwAHAAkA//8CAAUAAAAAAFgAAACnAAwABwAJAP//AgAFAAAAAADYAAAAcAAzAAcACQD//wIABQAAAAAAOAAAAKkAAQAHAAkA//8CAAUAAAAAALgAAAB9ACcABQAGAP//BQADAAAAAAB4AAAAngAYAAcABwD//wQABQAAAAAAeAEAAKQAPwAHAAsA//8AAAUAAAAAAPgAAABmAEMABwAHAP//BAAFAAAAAABEAAAACQAMAAcACQD//wIABQAAAAAAxAAAANYAIgAHAAsA//8AAAUAAAAAACQAAAAXAAEABwAJAP//AgAFAAAAAACkAAAA5QAXAAYABwD//wMABAAAAAAAZAAAAAkAFgAHAAkA//8CAAUAAAAAAOQAAADPADMABwAJAP//AgAFAAAAAABUAAAAhwAMAAcACQD//wIABQAAAAAA1AAAAFAAMAAHAAwA/////wUAAAAAADQAAACJAAEABwAJAP//AgAFAAAAAAC0AAAAXgAkAAQABQD//wIAAgAAAAAAdAAAAIAAFgAFAAkA//8CAAMAAAAAAPQAAABFAEEABwAJAP//AgAFAAAAAABMAAAARwAMAAcACQD//wIABQAAAAAAzAAAABkAMgAEAAoA//8BAAIAAAAAACwAAABRAAYAAwAFAP//BwABAAAAAACsAAAAIAAoAAcABQD//wYABQAAAAAAbAAAAEMAFgAEAAkA//8CAAIAAAAAAOwAAAARAEAABAAKAP//AQACAAAAAABcAAAAxQAMAAcACQD//wIABQAAAAAA3AAAAJAAMQAHAAsA//8AAAUAAAAAADwAAADBAAEABgAJAP//AgAEAAAAAAC8AAAAlgAkAAcACQD//wIABQAAAAAAfAAAAL0AFgADAAkA//8CAAEAAAAAAPwAAACGAEEABwAJAP//AgAFAAAAAABCAAAA8AABAAcACQD//wIABQAAAAAAwgAAAMYAIQAHAAwA/////wUAAAAAACIAAAAIAAEABgAFAP//AgAEAAAAAACiAAAA1QAWAAcACQD//wIABQAAAAAAYgAAAPAADAAHAAkA//8CAAUAAAAAAOIAAAC/ADMABwAJAP//AgAFAAAAAABSAAAAdwAMAAcACQD//wIABQAAAAAA0gAAAEAAMAAHAAwA/////wUAAAAAADIAAAB5AAEABwAJAP//AgAFAAAAAACyAAAAUAAkAAYABwD//wIABAAAAAAAcgAAAHAAGAAHAAcA//8EAAUAAAAAAPIAAAA1AEEABwAJAP//AgAFAAAAAABKAAAANwAMAAcACQD//wIABQAAAAAAygAAAAkAMAAHAAwA/////wUAAAAAACoAAABCAAMABgAFAP//BAAEAAAAAACqAAAAEgAkAAUABQD//wIAAwAAAAAAagAAADQAFgAHAAoA//8CAAUAAAAAAOoAAAABAEEABwAJAP//AgAFAAAAAABaAAAAtwAMAAcACQD//wIABQAAAAAA2gAAAIAAMQAHAAsA//8AAAUAAAAAADoAAAC5AAIAAwAIAP//AwABAAAAAAC6AAAAiAAkAAUABQD//wIAAwAAAAAAegAAAK4AGAAHAAcA//8EAAUAAAAAAPoAAAB2AEEABwAJAP//AgAFAAAAAABGAAAAGQAMAAcACQD//wIABQAAAAAAxgAAAOYAJAAHAAkA//8CAAUAAAAAACYAAAAnAAEABwAJAP//AgAFAAAAAACmAAAA9AAWAAMACQD//wIAAQAAAAAAZgAAABkAFgAGAAkA//8CAAQAAAAAAOYAAADfADUABwAHAP//BAAFAAAAAABWAAAAlwAMAAcACQD//wIABQAAAAAA1gAAAGAAMQAHAAsA//8AAAUAAAAAADYAAACZAAEABwAJAP//AgAFAAAAAAC2AAAAbQAkAAoACQD//wIACAAAAAAAdgAAAI4AGAAHAAcA//8EAAUAAAAAAPYAAABVAEEABwAJAP//AgAFAAAAAABOAAAAVwAMAAcACQD//wIABQAAAAAAzgAAACMAMgAFAAoA//8BAAMAAAAAAC4AAABdAAYAAwAEAP//BwABAAAAAACuAAAAMAAkAAgABwD//wIABgAAAAAAbgAAAFAAGAAHAAcA//8EAAUAAAAAAO4AAAAbAD8AAwALAP//AAABAAAAAABeAAAA0wAMAAcABQD//wIABQAAAAAA3gAAAKAAMwAGAAkA//8CAAQAAAAAAD4AAADQAAEABgAJAP//AgAEAAAAAAC+AAAApgAkAAcACQD//wIABQAAAAAAfgAAAMgAFgAIAAQA//8CAAYAAAAAAP4AAACWAEIABQAJAP//AwADAAAAAABBAAAA6AABAAcACQD//wIABQAAAAAAwQAAAL4AIQAHAAwA/////wUAAAAAACEAAAAEAAEAAwAJAP//AgABAAAAAAChAAAA0QAXAAMACAD//wMAAQAAAAAAYQAAAOgADgAHAAcA//8EAAUAAAAAAOEAAAC3ADMABwAJAP//AgAFAAAAAABRAAAAbwAMAAcACQD//wIABQAAAAAA0QAAADgAMQAHAAsA//8AAAUAAAAAADEAAABxAAEABwAJAP//AgAFAAAAAACxAAAARwAkAAgACQD//wIABgAAAAAAcQAAAGgAGAAHAAgA//8EAAUAAAAAAPEAAAAtAEEABwAJAP//AgAFAAAAAABJAAAAMQAMAAUACQD//wIAAwAAAAAAyQAAAAEAMAAHAAwA/////wUAAAAAACkAAAA7AAEABgAJAP//AgAEAAAAAACpAAAACQAmAAgABwD//wQABgAAAAAAaQAAADAAFgADAAkA//8CAAEAAAAAAOkAAAD3ADMABwAJAP//AgAFAAAAAABZAAAArwAMAAcACQD//wIABQAAAAAA2QAAAHgAMQAHAAsA//8AAAUAAAAAADkAAACxAAEABwAJAP//AgAFAAAAAAC5AAAAgwAkAAQABQD//wIAAgAAAAAAeQAAAKYAGAAHAAgA//8EAAUAAAAAAPkAAABuAEEABwAJAP//AgAFAAAAAABFAAAAEQAMAAcACQD//wIABQAAAAAAxQAAAN4AIgAHAAsA//8AAAUAAAAAACUAAAAfAAEABwAJAP//AgAFAAAAAAClAAAA7AAWAAcACQD//wIABQAAAAAAZQAAABEAGAAHAAcA//8EAAUAAAAAAOUAAADXADMABwAJAP//AgAFAAAAAABVAAAAjwAMAAcACQD//wIABQAAAAAA1QAAAFgAMQAHAAsA//8AAAUAAAAAADUAAACRAAEABwAJAP//AgAFAAAAAAC1AAAAYwAkAAkACAD//wIABwAAAAAAdQAAAIYAGAAHAAcA//8EAAUAAAAAAPUAAABNAEEABwAJAP//AgAFAAAAAABNAAAATwAMAAcACQD//wIABQAAAAAAzQAAAB4AMgAEAAoAAAABAAMAAAAAAC0AAABVAAQABwADAP//BQAFAAAAAACtAAAAKAAmAAcAAwD//wQABQAAAAAAbQAAAEgAGAAHAAcA//8EAAUAAAAAAO0AAAAWAEAABAAKAP//AQACAAAAAABdAAAAzQAMAAUACQD//wIAAwAAAAAA3QAAAJgAMQAHAAsA//8AAAUAAAAAAD0AAADIAAMABwAGAP//BAAFAAAAAAC9AAAAngAkAAcACQD//wIABQAAAAAAfQAAAMEAFgAGAAkA//8CAAQAAAAAAP0AAACOAEEABwAKAP//AgAFAAAAAABDAAAAAQAMAAcACQD//wIABQAAAAAAwwAAAM4AIgAHAAsA//8AAAUAAAAAACMAAAAPAAEABwAJAP//AgAFAAAAAACjAAAA3QAWAAcACQD//wIABQAAAAAAYwAAAAEAGAAHAAcA//8EAAUAAAAAAOMAAADHADMABwAJAP//AgAFAAAAAABTAAAAfwAMAAcACQD//wIABQAAAAAA0wAAAEgAMAAHAAwA/////wUAAAAAADMAAACBAAEABwAJAP//AgAFAAAAAACzAAAAVwAkAAYABwD//wIABAAAAAAAcwAAAHgAGAAHAAcA//8EAAUAAAAAAPMAAAA9AEEABwAJAP//AgAFAAAAAABLAAAAPwAMAAcACQD//wIABQAAAAAAywAAABEAMQAHAAsA//8AAAUAAAAAACsAAABJAAIABwAHAP//AwAFAAAAAACrAAAAGAAmAAcABwD//wQABQAAAAAAawAAADwAFgAGAAkA//8CAAQAAAAAAOsAAAAJAEEABwAJAP//AgAFAAAAAABbAAAAvwAMAAUACQD//wIAAwAAAAAA2wAAAIgAMQAHAAsA//8AAAUAAAAAADsAAAC9AAIAAwAJAP//AwABAAAAAAC7AAAAjgAmAAcABwD//wQABQAAAAAAewAAALYAFgAGAAkA//8CAAQAAAAAAPsAAAB+AEEABwAJAP//AgAFAAAAAABHAAAAIQAMAAcACQD//wIABQAAAAAAxwAAAO4AJAAHAAsA//8CAAUAAAAAACcAAAAvAAEABAAFAP//AgACAAAAAACnAAAA+AAWAAYACQD//wIABAAAAAAAZwAAACAAGAAHAAgA//8EAAUAAAAAAOcAAADnADQABwAKAP//AwAFAAAAAABXAAAAnwAMAAcACQD//wIABQAAAAAA1wAAAGgANAAHAAcA//8DAAUAAAAAADcAAAChAAEABwAJAP//AgAFAAAAAAC3AAAAeAAoAAQAAwD//wYAAgAAAAAAdwAAAJYAGAAHAAcA//8EAAUAAAAAAPcAAABdAEEACAAJAP//AgAGAAAAAABPAAAAXwAMAAcACQD//wIABQAAAAAAzwAAACkAMwAFAAkA//8CAAMAAAAAAC8AAABhAAEABwAJAP//AgAFAAAAAACvAAAAOQAkAAcAAwD//wIABQAAAAAAbwAAAFgAGAAHAAcA//8EAAUAAAAAAO8AAAAfAD8ABQALAP//AAADAAAAAABfAAAA2wASAAcAAwD//wgABQAAAAAA3wAAAKcAMwAHAAkA//8CAAUAAAAAAD8AAADXAAEABwAJAP//AgAFAAAAAAC/AAAArgAkAAcACQD//wIABQAAAAAA/wAAAJwAQQAHAAoA//8CAAUAAAAAAAAAAAA"},{ name : "R_props_json", data : "ew0KCSJmcy5jb252ZXJ0IiA6IHsNCgkJIndhdiIgOiAibXAzIg0KCX0NCn0NCg"},{ name : "R_fonts_barlow_condensed_regular_12_fnt", data : ""},{ name : "R_fonts_barlow_condensed_regular_32_fnt", data : ""},{ name : "R_fonts_barlow_condensed_regular_17_png", data : ""},{ name : "R_fonts_barlow_condensed_regular_17_fnt", data : ""},{ name : "R_map_tilesets_inca_back2_png", data : "iVBORw0KGgoAAAANSUhEUgAAAKAAAADgCAIAAAAL9foWAAAALHRFWHRDcmVhdGlvbiBUaW1lAHPhYiAzMSBtYXIgMjAxOCAyMDowNjowNiArMDEwMNjTO3cAAAAHdElNRQfiAx8SBhZlrkj5AAAACXBIWXMAAAsSAAALEgHS3X78AAAABGdBTUEAALGPC/xhBQAAEy9JREFUeNrtXUmy7EoN9f9RU0bAgIABBFuA/S8A9gATggmM/gbwC110VepSys5pV55470aVS5bTqWzV5U+//cOfj43n4nX+/9Vvfv/rP/2uO+v//uPfv/znXxP4//Gvfwne8s+//X0ofRbAf2j9/IxfunN3vvblH2SOZIPoJ7xCBfPXuGdA95rD/2TudwLZ4PrSZyFrY1D9/NyXKeM+DqP53x1YPy/rh2qcM0rkwYP4w6xG4c+g7fRZjJvRVbzkJbUE54vR6+xr6v1b3jDC328BKn2q2UXqxxrS29tHFi/1KisHVJmcJFSyCNT3pLerNR7nj5UbmdhOYqBvqX1WtrP8IxbGFXi1s6gD6wfFoXJO269oo2qHRj4+2QSYi6yzQPDPvz9IZtXR+Y92Mmj12PaBoEW0qbG3y1gtn3uSZWeNjvB6cHa/WIHz5U/5oVxh6qIMT4IK/tgmIjVLG1BKEmfBkJ6NyZQPKByuGrEvG6KhFmgdHaQHYw/IShd6Vbw2q0dOdqM1B2fL0x2KgKFF03atDlxBMgmUWfG1r5q3KuD04GtR2CZZ2yE6TTL6SF2olOyKJPAbkP9o2cN8bo6EiluACP9p8LZJ2SVlkH7EPrhYmycBnS+LD6L0Vvmt1s/eke6JV9kHM1C7EFZQiw2kbl1mPS7YV7JdqlcXvHZPrAiYLXwcYcBPjH6D4drKUQTMWi79qn6uaOl1ncPqB6PttdbFU3LBIffC+VgRcPXYiyN5BCAVmMZw+0sHf/gJ5zl/IBlkMHdKDsg+d/4cPMpcWAGsrAppjXZYuC/KQ3QcqRsj/hI4x19YQXeHvoquG/FSAmZTuPpE+AkpI6Waaa+NP+tCjY0+B59Fz679YOMYlDHbJuJd7KF19QLFsP4W78o+K1IzFW/RC3oPzr5ttmpo2z+leN4OCyVpx2WUwcKgBhjXaPTz8a6jYDTd9djXGobNRVa8O1Y0fBWnUPFfCx/qniBdFeRnSf8keJqsoIyzlaIqUtQHxVUuFKA5gn5DPwPkZ0nzJHRYRY+jr5u9qP6h4nOR//y9bAu4gEePUaP5S/tr9nOE/42wkKJjYwS+evDd/dS7218n2HeLXqRd8NOOLnw29hD9cGwBPxw/5uDR9tTF+TueN7cov8//Rw8eHf+6+Rf5jzB3As+BAeAsfndl/lAdVIMxofzFK12Y7/jgKP9BAuj+CMaEa7JG21NvF19L0cU3yJdi4yMk82h8MKAYJdwYHwx2aOcNL9cDdxdAx0eozHW3WfUB6EADv7KvwdL7APtVYy8ZHYTeVwC9HmExf1nU7AGRwqXmRSYGqHFqWlYJghht0ugogC6PcJj3XGTV+bvQu6QFWtIsgpTA6sa2LuG7F2uy0DcIIsHp5+Pdu+racqqYED/djg7xwSlrOQP1n1L/Hm0uQXSUq/AkLCKbb2s+WnuwFdgSvLdY470cvsah6Nd9LS4boiGzR7FNwK5pcYcpVZArSPeIDNH+KNSYC4f2TtVDdp18RKlaWkS6hyNgmZtBHSor9sEwF6o85SPiEXyXg2kIFkHCq1K9Tn1ZgpOltfNRbw/GJSyCbGaECeiZZScoAGsoU9dTdA6GyIPq4o1WYtNoq3VknEvCMnS0VAVwlzlYRs0vImNPF60qnxmqF1lIWZTfaLeHdliT1woybt0mNaYtX6EKGuFMTCssGi7OdHcMHvZHr8BT6ZsuQb2AMTq7eo7El0cbMB2Nu8hmaOWOjr6Me9s7/NNDNNsUtdRgfP+z4Ehel85gPv9Qpjv6FTUP0nCbEoO0MagEdVjQIywbUN+Lv6foYCky/K91xWLoos2Ytt+tuHFoygeV/wWLrGLW0JV1k43tryjj7vy5gEc3/wj/ZTUbXUZ+R8Yj+O/YpCg6zuuWYmQE/+/44KELkwfw785waHww8t/xwQ/HHqIfji3gh2PHBz+c/44Pfjj/G8cHO183f2R41/jgjSBmqyrvHn98O/4X6KLpaQ30xSJfI0NZ0afMIWjhrwY3N/JXS+4szST/a7ZJ2E7Z4aKsfPRX+JA9Pc96bYugjj9Ey1H7qfVeEf7WmXAoUcsh4rwi+V+2D7YU7mobP4mz/gV1Mq7mX3y7FH8qPLW/ShlbLtnX+GTR4jqn1MCxOkfevsTo5e1FghR/dbRsOX3n+P/Y7ozG8CslU3G9PRibHjvH17pe5E/7Fpxgy253CKrLz0CNH9ny06He90vEXx22swXsrCGtXpVq/ivYs3vxD9aA/+vWRT8cN7YHM3vq5q/y3/bgh2MP0Q/HFvDDse3Bw/lTPatUZI4u/7YHP5z/QHuw8/XT+EM+asdAPq78L3qpl8f5UllIumN0stO+eNNkTciHvLg9NXi8/bhox+H24An5kBtT+RZpZsaajk6VmEXImjQnH3IF/7NUxXjzdcbGReDFB2eRar91bejyLuJgzbbV4XhZemNQAOPiB+fMwTcCF/Do+Ndj/Bp7Zi8fEcrct/xvAh4d/3rc317L0L0xdS//t4D7xqeuPFk2oloGlwz+o84PlvGvN7WnzsG2B1+JQYlu5+TP3QJ+OLY9+OHY9uCH89/24Ifz3/bgh/N/U3T00sv4J6Y/gL9FgNWqbnmLtyMTurqOm0dVSq6qXF9B4ZewfT4rdiYnHvWUK7XFyajAiEkRVQh4LBzlxspAeapmwMvig+sQPH+3mn9R2WRF+aGVAhNfn1fkm4I8IiotJl2n3vx2c010YbU9uDtlBVhAH9Y7diBa3ZRMnqdd96wUz8tS+t/dKhdPS98+a8hnxXleI+Ch0h3ddM7KxXVQsaKx/6kjdt2zUjwvEPCtfS5hSFTPy8QrbFJkC6X4+XDOs+KHWc0W8ITD10eXX1aoFabNNjzB14dee4RzoyNPdeh6MdZDa+cZ/K0pQL1eN1/UBb+rGBgf/CR78H35b3Phw7HNhQ/HlUfbWShqX6vn2uy9FfR9X7YdPwQcdAaOb/7YC2fpi6EV7EDU4EqEHaY6iD77vsVEVwiaNitO/2JVVix9/J2pvTNFX4HivbIAzi2SWHbl9kA9VoBsUB3NkSnTfyL9W/hoqnDxBlFB77+SCuQvn2W9mlokpx6k/lm1AEIBrO2yMwo6Ome/POwKpa+fgx2ZqXWUpT/yWhFqOMOLfTWXlH9xnFQF4x9Uj1oO9St7WYue8m9aZKmKN8frXZWxP3JI+4wKiDqUiwlgnjoDt0jMtBB+2djJnWAEdOjjnh4y7wdIF1SbyhA9B0zGvTSLc/wUsLvQwbP46OCai+ZLdk4AZYDmiL1Zts5rjA10DTwBFUl8rV8pK/wMeii/H/tbleJGxppuQV9Ns5Kycl6zD7aSG1uo2yzCvi4YKIVFsrqLk3Je/YkmuFblJx+E7YDOr9K1g9UJmzJw4oAPFwiYjj/jhlZqySlOq0y61noQk1fTGoc2FFzh++VRayM4wdPKpMxnC5g126KMs7ohljw/7ndxxCLwKo43lvmirVcGn73jfcRyth4WWbdVdLBSfGJfxqkM4PQl8VnWTO8YcJzuju2GaqCcQqrmemdEYT/5Y4860sA4j69WL2B/aadun1L08XkXJi2Vv7/jzL6y6iXpvFSq9bPjR4qv4Cyw9fODiyVInXebPR+3cT6eENjPKlqO1az8qSKpHb3L+97bHpwKsZ0TjzvzQRHcW8AbRaxoD05htH331vTHmvbgouEMCwxHjlm6T1UvLelx+h9B79cn0kfMnRY9C4hiRdXtwdKQPtMe3GI/rjjiChbh0t7n0MvqCnoo+CWJvymd49XlNL6OZw9mV1i64+IrWfR+66kDNXpbNiWrxumxg87rYL/BlJnsKyuPrGt2UVVV4q9FYzAz8ssaBvx8DMihBHD0NVZdNz5LWu6KAbvZQOz4mXhw3iIrj3pRErCLLQLSF1nAMa6jpwi6nmCh4+4KKiX0HmpUoJUOn2UPY/ZjVM379BHpAiUrqnpRAg26RyByMKgx7bCKlnEydCUSobeQMjelHPDUVRLAOv40qGCyOMiLbLtMtZ50xnFeuViBh6/Jyqq3EP7AFakOxioSs2VJC3qqfDXaBKn8nEFS1c0FR1R5UY7efq0WwbxHAPo2yVoHtUwGvudb9TrLqgtmBpDGWmZ+cc7phlUYqw2HPrgtZHfRyYJ64ViVw/ouW1cjh69FFhwLgv+wBPSKL116owo2hxXpWZVlnTLpXZZNBneWrEjsTenqlBIEa8YqnmXwB8nRvyr/8+1oS8JYYeZF1MFcyB6P76z2raGnYDIPNPryKj1udaipPDJlWF8RkW2SqrKuCDf10bqKzmrOpLu2j5R1XdXmyH2qHBvplAT0Ef7+oFJ0z5BPsQ5Gb0EfXXTFDBoPdI+QOQODvM7sx0XPRZW/3/Ii2yTagysGNmk/Bg7oVwQX61fR2R2OpKf8Wwz+WeLR9MFtUjzbWUt5KnvwaIN/KnVBcBifRp/tLUPLs+3BD8cOAH84cvmiR9h3N/1Q+kS+6Gx+42n0QXwm/bfB318HSTPcvehl+Pbd6YNmlbdVtLUOtKJUaUQzvWLpg5iNmuo6LP7oPkH/OvRqeay689e98fJby1qr/A69ej3r8n2oHh2HERngAFU/qbmB2nAi9BFAaa3yRDRTKffb7uWX5ZFvJxExpf+s/qCa2BxGVME94ji/IlgywWB5su87Gszkw2w/deCKDhx20A7j30/pixPJBGTLk33focj24AgUTVb2nXFedNT0M5EtzzoyHrGuNg+I9hNvIphLXzCF0zjUlWcRGWd7cITe1GTR+cmioavQ4JEiQ9FSnsj7jsaIOdhTVQb7ohX3aIHZ6bojW57s+44rPzi9yH8tPL+H6GqLVfBGSe/fyHJQ0L8WslZbiUgeliPchrA88m/F0+voX0HqiH33QvpsS/8c+mgAeKN9dyj9mkrgRei3PfjhWC4+WPVBdGiy9CtorGZCMTb4/u4VCbLlLf71jY74imyAL85ZQABwkT8Cm0UnntiKA1ajdyTnFZRlN8IPAVuO/IcdseLbIzvG+0rIeO0NB5N8sixvDXo9ovS+9alplyA9ROOHlMcFpVfPC5JJppwEYJ+2UGrB2xAdnN4iZFQMMj+lvJ6aWe9+culMfK+inVw7LHNrkPVeDa2ALwHTOFTVx8o/aWBjWXz5RbPwOrYXwhy3vRJ3OdevrpCn4VsXXTxKPHUWlZP0ykoY1rIP9lfXXRL53BSvg9S4dZQ4i4Q/XDGzlNx1yO6Di8GfHy1grAX8zLatVvWxrGO0BfhZ0PzrGx3xJWAIRmZbUhqhLPe1+CFi2lNDga3rRylzvhy6/Qy+n7xv/toHs9xBKGl5MTvwWmkoiukpHHzseFuB1jxZt8AnN4hF44MrksZeXeRF4Rn8rYktFZ+698HXwhSwf4BiPJ9z3T5YbQHFrGNWBspPNi/yIVo9uSmbYPLQNs3xzxZAY6oamkCE0tdw7770+GBAx1gjNU+mc51lB2Wlsp6iZjD/cPPimzWJ/pB1MZdQzYWWGdERg2VtZNjztwo+REcm15TZeMQ+WFV0zKmv2+GHgB2PDop1KnFvouII7YPnV9AvpaPQgyWEJLufPHov5/hOgavibO6A4ElQn4ClBYwISnrLVWJdAdNtEj3FXLUHyyu0KayzepiPRQWs5lJ2jkoBWKquT+7WiwpYhW+v/OSVlINFrUk+9j44jm/Hd/VsDRgq4VyZdczDnzzkZvEduiJPhKNfUcZD+wqdd8GZN9iqFknRtSDePDpoliiW85OKtr0DMXc7/CzjHBdJoHdfFOZgq2bbA/3it9P25J/bmbr+ISivoi2n4sZ+TLe28lfVXIjJ6Jx9sDxY6sPjiSu3SXjQXpHSWp3F00IgZep8Ubz3w1dkrftgR6MEcydqGVnClEjyFAZnH+z4UX9g4hWKPvtg6Fs0/xur7hZPHYmswD65E3cQMDrRgaM8hiIyAv9zCp8ssCxah2hngMXBGXdfMFrCjsvSG1OGVo4ASoOtxHcDLdI8FU0CpnYeOdVZh+aCjGledof5dotsRM852IKVyeWw7bu06WwtRwuaBIwHYTsEjnj8vnto4odp/gNH2mq0DtHVRjp/8qaPwPQg9FAm/0CkDUTnfTBC9s44JV4HWSIBdus9N8fRJGDUE7HDvRiZzABxEGlJZRNLHIDd1Lq+4eAtEZq/YZUVCuMk7WHqoolpJYuHUFpzsDM3b1jQc3QEo0WOqsNKoB1UzMHW9Q0H6Ux3FLidRTIW36fmhWaqLktIcg72r2+oaMp0R09NkIeC+rmgnet7Du6IdKY7yYJZGgDyRFrprbHn4AlIZ7rDmgU3qOqK3nPwHNRkusOKZlnQpLAdS/6eg+cgnelOVROCdJnzBnWRZMnV/COP9hzcEV+6aNT8SWGoGdkpqAc1y1bHPhzEmnTsffAU1GS6o32I7oukexvdR7HPh32Wq7Vb23b+CqQz3VlDNF3yUNsAElifrbFBHfad6xsq0gdjSVCXnYPsqVSVpKoBlbpoWp7i9Q0H6VNXmDwcX0ZJoH52pGXtlbc1KY7Kg7EAE7zJraCjHYwURNqjYw+P90LlwVgbd8Htzw/eI4qP/wF2Zr9xDuookAAAAABJRU5ErkJggg"},{ name : "R_lang_en_po", data : "bXNnaWQgIiINCm1zZ3N0ciAiIg0KIlByb2plY3QtSWQtVmVyc2lvbjogXG4iDQoiUE9ULUNyZWF0aW9uLURhdGU6IFxuIg0KIlBPLVJldmlzaW9uLURhdGU6IDIwMTktMTAtMjkgMTU6MTcrMDEwMFxuIg0KIkxhc3QtVHJhbnNsYXRvcjogXG4iDQoiTGFuZ3VhZ2UtVGVhbTogXG4iDQoiTGFuZ3VhZ2U6IGVuXG4iDQoiTUlNRS1WZXJzaW9uOiAxLjBcbiINCiJDb250ZW50LVR5cGU6IHRleHQvcGxhaW47IGNoYXJzZXQ9VVRGLThcbiINCiJDb250ZW50LVRyYW5zZmVyLUVuY29kaW5nOiA4Yml0XG4iDQoiWC1HZW5lcmF0b3I6IFBvZWRpdCAyLjIuNFxuIg0KIlgtUG9lZGl0LUJhc2VwYXRoOiAuXG4iDQoiUGx1cmFsLUZvcm1zOiBucGx1cmFscz0yOyBwbHVyYWw9KG4gIT0gMSk7XG4iDQoNCiM6IHNyYy9HYW1lLmh4OjE5DQptc2dpZCAiR2FtZSBpcyByZWFkeS4iDQptc2dzdHIgIiINCg0KIzogc3JjL0dhbWUuaHg6NTcNCm1zZ2lkICJQcmVzcyBFU0NBUEUgYWdhaW4gdG8gZXhpdC4iDQptc2dzdHIgIiINCg"},{ name : "R_fonts_barlow_condensed_regular_12_png", data : ""},{ name : "R_map_feel_ogmo", data : ""},{ name : "R_fonts_minecraftiaOutline_png", data : ""},{ name : "R_atlas_tiles_atlas", data : "DQp0aWxlcy5wbmcNCnNpemU6IDY0LDY0DQpmb3JtYXQ6IFJHQkE4ODg4DQpmaWx0ZXI6IExpbmVhcixMaW5lYXINCnJlcGVhdDogbm9uZQ0KZW1wdHkNCiAgcm90YXRlOiBmYWxzZQ0KICB4eTogMTgsIDYxDQogIHNpemU6IDEsIDENCiAgb3JpZzogMSwgMQ0KICBvZmZzZXQ6IDAsIDANCiAgaW5kZXg6IC0xDQpmeENhcnRyaWRnZTANCiAgcm90YXRlOiBmYWxzZQ0KICB4eTogNTksIDENCiAgc2l6ZTogNCwgMw0KICBvcmlnOiA0LCAzDQogIG9mZnNldDogMCwgMA0KICBpbmRleDogLTENCmZ4Q2lyY2xlDQogIHJvdGF0ZTogZmFsc2UNCiAgeHk6IDEsIDQ2DQogIHNpemU6IDE2LCAxNg0KICBvcmlnOiAxNiwgMTYNCiAgb2Zmc2V0OiAwLCAwDQogIGluZGV4OiAtMQ0KZnhEb3QNCiAgcm90YXRlOiBmYWxzZQ0KICB4eTogNTksIDUNCiAgc2l6ZTogMywgMw0KICBvcmlnOiAzLCAzDQogIG9mZnNldDogMCwgMA0KICBpbmRleDogLTENCmZ4TGluZQ0KICByb3RhdGU6IGZhbHNlDQogIHh5OiAyNSwgNTQNCiAgc2l6ZTogMzMsIDMNCiAgb3JpZzogMzMsIDMNCiAgb2Zmc2V0OiAwLCAwDQogIGluZGV4OiAtMQ0KZnhMaW5lRGlyMA0KICByb3RhdGU6IGZhbHNlDQogIHh5OiAyNSwgNTgNCiAgc2l6ZTogMzMsIDMNCiAgb3JpZzogMzMsIDMNCiAgb2Zmc2V0OiAwLCAwDQogIGluZGV4OiAtMQ0KZnhTaG9vdDANCiAgcm90YXRlOiBmYWxzZQ0KICB4eTogMTgsIDQ2DQogIHNpemU6IDI1LCA3DQogIG9yaWc6IDI1LCA3DQogIG9mZnNldDogMCwgMA0KICBpbmRleDogLTENCmZ4U21hbGxDaXJjbGUNCiAgcm90YXRlOiBmYWxzZQ0KICB4eTogMTgsIDU0DQogIHNpemU6IDYsIDYNCiAgb3JpZzogNiwgNg0KICBvZmZzZXQ6IDAsIDANCiAgaW5kZXg6IC0xDQpmeFNtb2tlMA0KICByb3RhdGU6IGZhbHNlDQogIHh5OiAxLCAxDQogIHNpemU6IDQ0LCA0NA0KICBvcmlnOiA0NCwgNDQNCiAgb2Zmc2V0OiAwLCAwDQogIGluZGV4OiAtMQ0KcGl4ZWwNCiAgcm90YXRlOiBmYWxzZQ0KICB4eTogMjAsIDYxDQogIHNpemU6IDEsIDENCiAgb3JpZzogMSwgMQ0KICBvZmZzZXQ6IDAsIDANCiAgaW5kZXg6IC0xDQo"},{ name : "R_atlas_tiles_png", data : "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAMAAACdt4HslJSUmioqIzMzMzMzPi7hbaAAAA+HRSTlMAAf8CAwQFCAoNDgsGCQ8UFxYVEhARGR8kJiUnIx0HHDI4Oz45NTArGxMeNEJNWlxWUkhBPFNlcX59c2dhTkA3Oj8uDClEdIWRl5SGfHdpYFVeX0wzIY+bnp2Qjot/eXiAcE8vGIifoqShpaupoJWKY2Sco6y0vMLEyMe7molQGlGBk5m2y9PU19jV0MOxjXtZVG3BzNvf4t3azb61poduRWuCp87g3tnJxbdqV0dKW8/h3LhidZLW5ebp6K89KoTj5+vwmKq59bPR5OrsXSx6ssDuWCJy72xmMTbt8/FvLa2/8sYg9EZJjHbSyrquqGhLlih/////fzfuu9UAAAAJcEhZcwAACxMAAAsTAQCanBgAAAZBSURBVFjDY2CgFWBmYWVlYWFmxKPk85cvWEQZQXoYWdg5ODk5eNnZ8Bnx5SvTF0x72eR4WNl4nEU0BQSFuZy5ednwuOHbt+/o1rPycPPxOTtzCYrVy8uLCQgKiXKyMRPtbUZGFl5OIQ1ZeQ1ZmSsyUlIyV67IPJHX5MHpBil0A1jk+ARkJZ327XORlpI+d+6ck5qaqpOMJgcLDv1MaCbwcHDVSzipKqooqrmoK9y6dUtx74JnOoqSghw4QhJNPxtnipaTw4J1traGwTpr63TXrX2uW2dat1bRRZCXkYgQ4BENVTNumDhhfZDfVp/zV82vW98oXD9Bb0Kdq6oUvxwR+jVdHG0LEyctnL91/5G5uXkx82LjzP0Kg/TXfFC+KcvJRiD8WeX4pFwD/HwaExbVbks7euLC0QjPJg/3lwutbwSZLrCX0pTD6wlmNl4+LRM9t1SPpuioyJxV5T0XV805mp7rGeMzye+93gfHc4LszHjt5xWV1zZ1C4ssam5qLpm8ZMnJk0tWbn6Qk9s8L3brfBvTZyHizqz4HMDOJyapY+YenhZRVLO4rLu9vauz42Tlw1UluZ4vvH0SbT6oyPDhCwQWDn5xBV1zj4j04oycsg3bt3d0TF22bHlXz8XeyOa8/MbEiY6f8AYCK6eAhKKehWdkRknL5CUzZ86YunzTqZ3Tu6ZUrFocURQeHT/BzkkQX0SycQlKKulbenlmlFZM6Zq2cemyA9NPbdy0fHvl7KORnkV5Fut11ATY8RnAKSilbGDlHZVZ1to+c+n0pdNPndl5YNPy7g09J3I9mz/GBroqiOHOUgyMbNxC0iqG1hbRmeVtU6dtnLFp2o7Tuzdu6uzoXvFmbnP4xwSbdaryPDjjkZGZhUNQStXIxicmq7x92tJNMzs3LT2488DGGVNnvip/m5bWnPDeVlsDT0JgZOUWlFAz1veNzq7omL4MaPPUjUt3HNgxfdq0Gd170tOaLAttVeWdmfFFo4CMuoqtX3ROZeeMqVNnzli2bMa0UweXntp4oP3Yu/DUrYXP1eRF8QQCA4+wrLSanX9sTlXXTGAgHpi2fMbUAzuBvjiw/HF206Lrejpq4kL4sjSriJikmn1AXHp5d/vyjTsOTl+29NSuXWfOHNwx49Vbr/P+unuTJerx+oFTSELNwTA+t7pnVtfGnQd3nNqx+9Ltw0+vHZr+6q37dQNjlfvS8pwseHITO5+GmmNgQmRJ7+wp03YdOnT69KHDdx4df7RrxooIt8DnSjfvS9XjK54ZmXk1JZWDLPJqIuas2LR79+4zl65dunvn8JmlS1r6VteZ3HRyeSLEwYInEBiZ5QScghPzo7zmruxaeuDgzkuHr505tHvG6znp8eufqaqrX6kXZWfBXyVwySgH+tb2Na9q7Vo+den0XTsObGp/vCfcfbWuopP0FQ1NTh4CFQy7fEhSgVX/vNzNK6cs6d6+fPuGxy3p216YXzY+JxVar8nFQaBUZGATknY09Pebv6hoT8ux6smTqy8Atc+zLDC6JS2bIijsTMgBDMzO8sk6dRMKV1tGRWal13g1xSw6/9JqS4OS+hNhURFOORaC5TqLs3iIXfCEwoVb3eft94nbem+htVmgqaNTqLAzLzsPMxFVCwufhLZJ8Jot1tbz568G1ipn1xgG73XREnJmYyZGOygYNEOTHdYGG5oanA3Uv3zZ1tVBTUJMk4uV+FaNnLC4tJrDXjsd17VGRq57FSRkhUQ42BiJNoCBhVc0RVZS3UkNVLXfd5HlF3FmZyVBP6iG4hIWqpeV1ZDXqBcU5WDnIaF5Amkh8XBw8olqagoLizjzyrGykKYdXL7KgUwANpPY2dhYWRgZSAaMLGzs3Fyc3OyszIxkaIcUsWxycmwsDBQARmLTzeACTGCAIrT3MQ+J2pGMSJK7bqrwhJF0/RAT6nYttYq/yaf5jI10/SAT8iCMWCYDA3v762oCyQJO3E7OPGI8xBpgf/h45eJJBVfI8QDUE3Gney74N3CQbwAD7+VYRhlnCgwgIwmgGECaKZgGQEgeccfYWCbsIDbWUZwHpwEk+wSbAygygIEo/Tx4kjIsENk4OISEtLS01PfuVd+7Bgh8LlzwuQBVKM6DLzMR00PCl52ZhlRRBABsivq3nvUDLwAAAABJRU5ErkJggg"},{ name : "R_map_level_json", data : ""},{ name : "R_fonts_barlow_condensed_regular_32_png", data : ""},{ name : "R_map_tilesets_inca_front_png", data : "iVBORw0KGgoAAAANSUhEUgAAAKAAAADgCAIAAAAL9foWAAAALHRFWHRDcmVhdGlvbiBUaW1lAHPhYiAzMSBtYXIgMjAxOCAyMDowNDozNCArMDEwMMU2/YAAAAAHdElNRQfiAx8SBSCBOY6jAAAACXBIWXMAAAsSAAALEgHS3X78AAAABGdBTUEAALGPC/xhBQAAQw5JREFUeNrtfQGMVsd17sCu2Y238HvX7IJrbEHACzFyXgKp7bgQy2mqJxMaPytPT46qWH3uc9I+WUqsNkllRZZrVVGdvsqOZLW1rdLKVWRUPauxi0FPr3KFQTbYZnGCcOD3wvLwEmCBXf6lS/fHRbxv5rv33HNn5t7/34XFht3Rcrn//Oeef+6cOWfOmTPnzKz7lt9+8uy/z7/2UzPXq/I667a5N33vaysqHXOW9XYYY+bdcP3o0VO4GlVY02Q9PuLaXx2rjZ37i1f34f6y4ScYAeRBDf/cG8dw/+0vLWwIj7Jr9wjgR0+fvqL7p3XeddcdH6njBwDUUenEd7zqgpqx2gixhN/esGJZCGyqY0BrW3y58GswwqBGrrXdI4THuB6sL6l0HCmH79t62HbW6dNXev+04t9H167YO2yMfaXDprRgUPAGD/cumlsdPLOgsw33uLIeDeUNvqoOJffN43flMH8IqOTneC9XD//JevdHw9ebV3/uNTJtz2HWAMyYEUit2sip6tkzgGc9OwIFb6Hht+2/gN7/JPSPvLV+NV10z3j4WzGiPSwaUbQG92gxUPBN2HqN3f5A2nrB37DpmqJAqzELWNZBAX7dfqGZ9PWmPtTUyJHDtZqpdC8YG/XaTCQK3nLwp3/9hsvTP1Eq6pFd1Idez3j4WzGiLdKRUyuXzuEshZ/smTtv6MwoIXivrie8mu0HargaY3sENQ/d3c0HiUHwmy5b+eMth29dsCDfwnpwg+LYdOiCqk++Xb+qzcNf6by+uP3jX/9CRXqHHNlVqYDGlaVtGl5wCjzuAX/Z+of4PTppuVVE6ejIE/wJB6OPjDnCAfWjhxfbvrjhFkpzN2l3PbNx+O/+8itWuLtp/MUtlQfvbUG9TO+c2x97YZS/J+/v4Qd1H3/0FhPMJUf39euPMiHhF5NJxf0EmhHFL++GjysW3UQqpshGHfwJUhEAoC6+rY2NCrzl6ZRa5AbAG8XBun/QD2yYevGsf9gP6J8fPLpcw1Abatg/IY1NMENFaezVCP5Wj8P4ht/6yS+Fz9AXdy0dx3Wbm+SIa7gG3uoimIxWjk22gHgOmqMefr6th5/9u3b5LHmHHysAKeTdKH6v/pGHetKBeJ71pPr8M6OAJ0XBwXxfB9zD0SO/RTwnr/v3sH8wFqGjmrxQxVuwXvoHH6GHm1RKH3/9mJ5xivpH86KmdBGNi6gu+C0HW+z5UYDOVRzgSwO+D8FwZX/hCp4QDhCJKvj1T+DB7z6gub/FUWJcWiyMLmMCAMDvfnc8il+3H/CkgTHtup7WoeZgjEsAgxLsTYd/VB4hB4f4cf/yu4ng5bj0KCG9B5GOd4GUhuQHpUv6x6NQqDd5tORNwxl6NucwE8zSkDAQwk4O+7/qRmiNvfPUE7cDBtSyPJFKHq9PiT/8iSef/gB/z24YSolhaAuu/nwnifTAn2wnDACIn78bxa+Rk5PwJ7KXbabtn8zBDh49Tj4jVTS8cXN2FD/u8aCWKJr20j8cygCj/AAHl/RPkWQWeM+OKBkHOQIbyodAJkDCbH79GHtWWiwwHKGUVwSTmoimkHKwLiQqxofg58qDrD+wdwDQ23NOfpHXKH79u9CBYeTgT+DJtXkOTuZCgIEdcWW9xg8OLuoflDcPtAueaP8QP8D0eCrqn/LZ18RsRY/2UXq3FlEeBIC1kEqbcZGNaoR2ofX91TYMTMcrkDl2hFY6clpiSQHOTS+9AxEHonYdaPcsfY4ATPzAD4BNfZgg29zvtkXxs20U7JD58ha1MSMykxwsczDqn318tUk1RA0fxa8/YuRRpeqvZjLZ6x9YSin+Fs4C0N1K+ieqM5fTuAhS8CcEphbHxlHXABOk2tOHwzWr/d+1tFu/A8Dw7YatJ8TG4L38Bu4xyWv8mndRoLst6010afRIR2W5yWvXkPzu/w6OBpmD+a2HvzY2gJt/3dyv6SHCMMbBoyXw0fbzW4p0DE1Ne1JU6ygAw9Dc+NO9sspB3aqof6CCyJxazrvhjBCOD8GfEJhaHCd/jE2T2C1W+4fVJLxlUrvlHmUv0R6gtfDYC4fQnnCEai2aawi8mr7M9v3BE2/r4WwB+rRlbLY5KRjl4IFDBwc8dkjtTrFHNQfvG+SojduvIXvp/oEwl3p5lrOs5mC0VtvB8lsl/eMJiXJ+DcncgIPJAdLXYh0JXU1qz4H2sijPueeRJ3fhDQHP3uHvFXEA9edwTbW8cAxBlw45mBwpeo3ce9RFJTkY1A1WJ3KQYdH9I8LZs301VdKZwirzbx64SXjgmY0ZPUIJ5NlI0Rm3SGcO4RMOFj2CKynG8e6SxZ++5uw+Y+byYcgxqCG4gaVbcz4WKod27nT2H6g7v+0E4VMtox39aJSeUms7J+aBFlxNFtgY6768UD7idwX/0LWfev/4cfGRyQrR/LRef0u7M3rVkNLysH/EFeHd694Xye8GVl2DFfWPXskq0pi0jeT9osfl0j+zuXqnfxuDbmXXEWpYRk2ZIoXQBeRs6tgWfuGowIuMIjcIfm0gpsv6tlL/6Xfz/rwBofFrD6gAlHhJNR72bwgvLQ/7h/zKpWbcR20YTRW8sn6kqH9MaB0Ua8sioj26Ch7B32qCsknNfF2VTNvCM5v6jHcPqm/Y+qHMYdKa0KZU5kSXm8ZyK8yqFNXDPjZR/N/+0kKazsatcSaUU75S7xpijn4LLekvXj0dAqcLXnPQBt6n83d4pcyvQTJr+R/tH69EJXO4hmVi9rHG72vRXHGE7KVblOvAshpcUHr4H+QSFRCxC7OxmWqJUoOZDLIdcyrmp6ee3v/gvS2QBBhMnPvRAPQdYKANCGSGLY8f0hvPagNaKF10jdJYrlzb0i4p3T/5tegeNzJuKb1y3HTxBYv6R8/BpkBz9u6LIDX+1gS70+K4lgZJgs7iC1Cf4rUhZ+DxoTOwlbu9ESr4deHKNuYnIAck+sK6rfvqbsWjyzmx3yaMQKKPxA7W+BN/avVITa/9Bt7GIs+M9gfLiDHO40b56fUPJ9QcHve7FS5Qu3sTXImzpH88b1JUz/KU5yL+znEw10I5Qq0Xc+jCyXq3tffdEHZO8iGHZ0jhHPKu89v2Wv/20JyeuUn7pPWCX2vpWpJwFSxVqoc1k8nLyORNOzhdV/Hw5/zBQmOMV+oH4cqf0JW9r5+iKJK1aN0/nHdDTgq7XktUYhYpHe2fqLZcskIZ0lhqMg4Wfyo5DCIInejWhDsaGjNiOxmzkLqY02C7NYzgX7SQozhp5Yat1h+3YlG2VCK/JTdc0Cdkz9wLwsF6sd7zB6c+gDm0Pp1HGffJvGhKC21Waynk/cFe/0DYkFlpTRhljxVh1jhL+ifkxehuiOhgKvI3ZP5gjiD2Nea/3p5zvYswsZ3SrrHQ48EbbhAhk6VjLeMwk87BJvXhcy2FZdur45iZIKghltcun8VKuoe9NRbIaq5A6bHsSQi0n9KJ65H6Xvt9wyKQtLNJLe0Plv4RRYzWRPqU9kCb8IfwLDm4qH/oty6Zd8u9RkWllXuUHAHmUImAEewogSae8WgZroZr6gIJbC/OMUbtWEhFXFIwYp7ZmC1a2fXIvrobRv33rFtG6nI5EJXaMQzITX3DXEM2+R0RA4cOrkx2ethZXFakMVJj96cK7lucVpz4iYWDvf4xjpdxH3r+lUbSonVy8RNzrb6of6LUNcGc4o2bIqrndnSES2UgGGmMCaxkgGje9QpXUgS/LHRY+e+0ZXIYJQRtRJPa3BTmgLy1b4GGDNeiiV/Wlk1qd25+/Rharu9Jg/Deg8/h/9VRcrDXP+zTTS+94/dvqGEVcEXYPxDRRZxaUhNaTXKTrGSRA/RSYvrRdfhQrTpUN2Ul4V1dRfJoDtNmEujkRPGo21OR9Ob2A+P400hWLOompJPtGaQ0UuPXL+bWXjIfl9zzp8P7PEy7br/sydL9Iys/HJeil0WvJr8DsKR/uNGgiJZFuzhCSkvJrUULh+H3Xtv5lplQOX7cq8C7UceRtVa9WE+lyRvL4SIw6LRhq6+2cLYzqV4j+OUN82svje8NvZZ9so6db/+vjtJS0v3z4y3NbP4tK9H+KeLgcrntDQW54UpL4k2iFsfnv/2lheFOz6imrn+Dj+hvtVaZaKGurF8FRqkUYQtqKtqL5+4hBhJ71MNPnPS/ytqL3MvUaNx+QvdxtYpp0P7jc9H2X4b+KZfPocuoVrBlh37JbA72sGv/pdfWqBYtj3g/JnOM3tExUW+290N6E7mHn0/pVX6/cDnCrUtkVzyVElWI4f6fE8U/pf0T1ZhC4uVHvDH5ad7Dn8zB9F+GPlS9gupZe6EP1ZUEg5GNiSn+TX0mxeOv2eZ/94Qe4wH+OTC0hs5gPh4X/OAAaNFNt/9E0P4T+QmCs+O41/6p7p9LhN94+Fturiz4tdZW1na0tUW9pGPn6vgDzP87ffraa64hFtRoGD4rkAQYOfNvbe3tU43/mv/46Ipu/5Tit9GF0CMY0yFXQoT1+ltdPBhWluCZavwXeRX85S28Ivqn5YtLVpz96D9u7OrU1/MtrV5N+K2+ejCYV8rxTDX+i7wK/vIWXhH9k8UHr7r7ZnPpCj1uOr52qvFPOr72kSd3MSYDRu0Dv7vy44pvvoSdY5yqtffYvM1vv53FB5tY7KkUWZDTMKwMn0J9v4tP1fG1U41/0vG1Jt1wz28vf3zzYH3JYN2s7DrCZtC3fTFXDH1Qlz9np/ckvvYi4l/D5UwuYXI+mGr8Fx9f+8qO62CrDNfqy3r7Zel0quN3nSs2c6HuHb7RVC2NSeZJX0nd+W0nHH4z24vOk/twY6a2vXT8a3Sxmr0DDrv8+AW5540pd8V4q61h/K4lwKTwh34aoELv0+Ok94ihHsOrfC9K+ZXUxbsI/tYwvpY/pvWxBmXPiN6x9v17k7nW86deRHztCW0L6vjaMH43ujo2IY9bdK2bDh8QAIJ0ovi9fRoQyFzZoIdG40+G0dbD0FdKds4UXYW6Gn/r/CACHxSKKkR9Ww//eMth+fZfN/eDWt/+0kL6+NKaf6+p+FcdIS8Mka4m+oWeuxWL7C5ik48MVgAmir9hfG3ISTn5EURPxeJ3LdheY/nYI3MzNOaNUBeF21o9/BxGpLGZFO96+FvFG8Ny64IF/IG1X/tP7GLWb3v156i/dUH9zQPta79m+90K+mtruK5OvZ6sqaj4V4mvlcJ6Lih6y6q4oWcQyL2IkrA3i+J38W3ozAjLjx5evGt3NiPoftHt1PG7ngyP7qEp9/xo6nJbaxF+TeNmCrrLo67gj8cH4weWuT0V4rLmDMTtANxuAXQ9TspT43c7+fz412h8LXGme2sMIRmKSb8vAICByR5EYnPXixcfXBS/e8dtn4tTJas5rSfOaPwjS9Y/CoayuoTG8rGIuuX4hcZgs4bU3fTSOyF15dtsDvZkixfEbozVM+2Ok5FT/dVx16Dz3MAl75Dupu8WPHoOFvwQKZXqmOytCaNO+qvWNetFl9MfzD1Z5fizHmd97KqpYvIc7OHJ8Oe5XNO4ZCb2qCsRqg3x8ydq6Z6Ckuu2/ReWLL6+CH9hfLDJez/YArvjxO1fJIDwq67ReKLxtXpzudB4U1+dcbS8pxnnjQBo1DKeSvB7NNbXqKQ1eV6P9EPKYd6zIEC5N8zktSp5F48GRfhNfhYrwi8YovgL44P9kdJ5Y0K/LEqnnRzMbZG4v+O2JdyTRQzl8bV8Fq1JcznQg5u7MnpRoj2t7bQ/ya1hiuNrpdfQX9+8v8WkQWBoJ0R3MxxciD+QBJ6sDmmgJbPX+83gb86jWi/BH4kPzr15et17LOFgzMHcX2iNrWqVkXqk/c497+leLoou5JzN+Be2JnTiSi9jXpfYaljGXZVu2VVZFF+rftEWRn2FnKo5IDpKgva7fR0phiiNPflM6mohpGnQEL/u/yItXe6L8M+WsWNiKmtmy7vfIwcn6oN7BFPI+8eP848foxyg8S/r7cANGJeZPYSiFRV/Jr+LtjJViOy3KsfvvQKng2y8K04tMpPK8GMYae532Kzt5GS1yUtUO4MWU7cZ/Ln+D/Dr9pfgn521tWAsg2/0O+sYAuhBsIM3/vka/n39CxWrE+Zn6BA/1TdcJbMHC6ZeSFGoDGLnOM28Bgtv8+vJ8gvn4HL8HsFCuW1iRc/BcfwaZzBr0srQOvPAoYNR6no5uUrwexQ1ea3IK0X4Z4ueop/ER+YxwbU6NAdXNFe0aIEEvaENkUtwxVsBoJJmIZG1CA8/9SlcN/X52w25p45XADuZXIFBhTbwarL42kL8mlomL5bCuVbTXvdpBL9+Nqa1ic5FyQwM3lZ4ib7hfUP8xsStbaNklZrL4vhbvfhUu6Pl0MFwgBAacvir6RzMMQJcLjbykDN7zuv34RwQxL/Wdb4c3dd6DHJ3O7WqaFxCMf54CWnv7aJCvZ4v4vgLrerkPh2yuQ7U76Vp0BB/bvzl52C98O79ioc/Eh+sI+T1ldHvWotGjc50xxGw3txcK41/xYQqUZovbjkv24x1L0CT4v46zsHzbkgiDxhEWmsmvjZv+eD67OOrVVZE43G8J9Unht89CyHHLjIqgsbErBdPljbT/iILO6Suhz+nRZOuerX55XcNZtZ71tnVY65Fm7zcEN0qGwH5+FQPP4vSbOfRi2nS3B20jvqrmeSx6x7pDkjAF+H342vz3MANl0UTGHtT57qK4Pfsq/zqBOAxxL00El7ve9eG+D3qhvcCXII/Fx/M9SPMJWvdSMdccvLsW4P1zxGUa9Fq7LTjTRz5lwnZMAJ0/KsXX6vblKadtfRjDWNW9dhkBADt7LXLUy3aSe8Qvx9fGwT8mGIlpZyDo6tgmrqwFbmkjA4R541O/uL1u0eDMvxNxAebQMPS97NVfHAm8Y/u67dRsKmuiHt+DDPxUcniH1QnCRQjdvprQ/yyEikBidJ0EJX7n2ULtFrfNloKefij1JUFV028Ig7WNZH43VLqek450lv4OOTaZvCHHJyNyLy2UYI/Fx/sfOxzTBZ+0y68pT96RcXqtHvxr158reCnNkdtWWVcE7EmQUrjOq9F2u62KH6Jr9U80YxnSfo0Wp+1P1hp0tQNU8DwRvPxRPEzpDFK43CYFuFv1fG1Lkq/bkx8XdojsEiD2tgsGVNe/KuOkBf84UoWKP3IQ1lC38cfvcWlVj7k7ed2a9GykpXLyK7ja3VPydpkdDW/mZLFTzeibsjHHo0nin/nnvdeawK/yZvUXpkt8bW53imOGtKeH6NkpljG2kqWHRcaP1eyZC2aV8zfu3ZngbY6gk9+BRKbK1kefr045a1YhVevFK17mHz8boI/T10hj756xZPVlx9/q8TXip/VSbb3nKKfsOy2/RdEorqVB/vbKxbNU9+OOvjcUNLxtRo/OZjR+2lkWItHUZOG9wvJd+1OOLgoflei8zieTHMlGopfU/G1Wfy0Gjfsfd3L0vset4WyWibLKcKf63+JTUpGkItgH9rznp42aACghhJJ8gAyM6B8q+3gML5W8JuUzyxF06gviaYF/bg2KQAmjTnTTS+I303ia/XImGjRrkwvfpfLzkW9r3u8SG57NLg8+LOFDvaOWLRSv2P/fk0n3OgMgGIH64GGuZY75SS+VvBDEmzbX3JyRY0SIow543+M3w3xaw7ur6a5jPJMGTeQ8ksHciPxtUnj1Uan8pR6pliispe4hEk+mQr8kkw1Hh/8/XtvdruRdV7sm0M/s6aZSQPdtRVUFF/70N3dAF67nPipb3c7PN0ptnHmLU7rPfzjRfhNsUWhVwZCszJ8pAi/7n0xfL1+1xkxPQB+S9JOHX6TBtQTf8uqGxbPnWMD1ua1neWr/tqnErauf3Sef7zXNfwTil4/r619Tov0Dq6HT5mOtrbBU6du7Oq8PPh7fq0e5VFi9j4KfqLFtSF+j7euveaasx/9BwOBUM97VuLKP1YCWG744Ni5OpBfHvytE4+vnVh86mXAb6Yyvpb4RafVDMQbrWToyUsXj8O0LJ1q/DY+eKrja6+C+F2p1LwiNw0LnxJuEz67DPjj8cFTHV87E7972fDPmurzg0WGRBdsy58yKoImChN+O4Pfw98KS2Mq41+tGTPV+Zxn8Jfgn/Lzg83U53OewV+Cv6nzg6M7+XSJxr/68bVTls95Bn8J/kh8cO2i419NPr7W2+emc/zR++u12Nux4LU7yQKt4oNn8Jfg988PbhDf0ET8q9TLWqve0cHTW/Jl3DRdeubOWb9qrudNupz400OT9N7pT3T7/fODQxqbicS/SonF1yZ7sv7uL79ydF//Yy8c4o1xs/gPnnib5/QYp6Bt6qvzqAY+AuAfPbwYYE89vb8on7Pg55kTgsdDa1wkYxHAmwfaG+LX8Bu2Jq/D0BgJbi56r2bwM0uxFEEOex19su3Vn/MtdM5tAQvxz87ia1NaRmkWjXwyBfLZqPyiGj/BSF25wR+7gyeBUN3Q39KTSDBvV7eO8Bf8Hh7vYznAJPCznehZSZT63//oX4reqxn8GBPQUvEs/4S6jz96Cz4CCUYM6BcFC/HPLj+/tojG0pqSvfaag8NBg+4g5dAUcQYzzJz38i2BCa93U9vk6ypHh8av8YQfSwAmh9/jJDY4+l5N4n/y6Q+oD2vq0hDiAa2QUqBxCBbiL4wPNk3obybmifPw6B0LUiiFbF9sPZFIsL7EVFhmTrNf7Gu4HVu4Wfu1JBP8mwesq8DzB3v4PTzex0YA7RPFb/JCVaaVgvdqjF9o/N0HuoS6RplARPiQO/dCg8mzGv+s37zptjW9vahduXC0EosMiMbGhFaTNwI4T9CX/NU7voh3uGvpOJUUvb9EVv95YKTUy8ewnniYICCKP5p+vvnSEL8H722X8fwZHjBPhWqy/Xhxin1vC4DuDQ0WbX8usqGEX0viU6OQ+s31CNUHt+sSJHDWH1d7hx94+aKbxn99Hn/u4yXFf8slwi9Zr3tK21/WP7ksO1FLK9xHr+1jE0QSC6TecyT4L10+5xn8TeG/5PmiE0hTli96SvI5z+CP4r8a8kXP4P/E5Yu+0v3NVxD+GX9wU/inusz4gz82fyrzUU8af8N81FPdPzP+4Ab42T+Twx8lhlHGzGVo/xT6gyUf8hXtT71Y/O6RNONOXcKu8Pjl8ZdndrDkyi1anzIFJfQ32Pepn5J8yDo+uOYyb3hnvjX0dzZ3vu+U4EcfefjdEXx04RU68r7+hYpesfe4hb1PY3Kq+yfzB09dPuQryB+8YlE3l/oEv8lnKOCbMtmp9Ft4Xf350/359Qcp4Vr9ZfMHJ/mQPRqbifiDS/Mhx/2d0aLTRBs1mbkkLA38qXphVsijEzI3+vEjGj852ATTE1E98pBERx7ZsOfEHY2RJ/0ZOz/4SEqkec0giRY5PVXan+NgAjXMlVvkTSrPh6yPZ/3bv9oumGXmaFjuWbdsuPZBeL6vxi/ZxpXm2aLWcnGfWucFGml/1eIR/GLNeyOb3RWGMkeL5y+qqTxc0f6ZdJEMCNJ+lS9aRR9jMOrHSuJTdemZe9Co+FeW0N9J7iw/ljhaoJ8Xne8r+Jm/JynseiGAR4liwmTxwb8qzMNVnKaJ6U9zqKLJBcK16BJFp8kS9k92fvDUxb+G77buywu9Gm1Pe54TE9hmJf7U5pNyRAvdkRq/Jk90P5MIMJ3GvuQnvG+L/MEXU3T7s/ODeTMV8a96/KLy2Q1DsVYNqWt4k3vEO9/X44/oHCz3TfTPkfD8YFPAXtx71LCEJNRCzuufi/Rne/2j8mRNWfzr5fTXFpz40XOR+JlBICSbN5jCUpL55fL0TzYHe7wrsYseOfWNF+2vm04aXwX+1BCNSxHRkj+Durzk/PaeDL9M/uCpjn+9cv2pJuXCRanaYLMBqRQRvnYdbGnytil6Zarb32qCTDM6HUeTQzQcBCaf5y3a7iD/mZFknkXw+kcvG37m9d6WdFJ9IgQYzROgrjGLhJjS9s/4gz+J8ceX0h/8mzfdZgqMn6nwB8/gv8z4Wy/+/N1yf7CZ2vN3Z/A3wD/l/uAZ/B8v/ssYHzyDfyrxe8CCP/MHF/iqJlBEn1y/qi08f/eqwd9js5PPWv35Ts06R/f163O3H7y3Jfj2HBMnGxf/GMXPG3Ceczmbot/SvyiRIoSspId1CP5cfLAJ1vkmV2pj9ic9bwnxX0xJU55WSvA344s0gTvS5D2SJfjRgO8+YM85ddbwO/Sro2fXf+M31q8wxp0TCeoad2akfIsriLT68+aZjaa8/cYd20kq8Fg477dYQpxuZJzQjJ6LbPDOVLj4Uh4fPFEC5P3BDfBPzhfJ4o4nGCrBjx5n2mNuk0P/4iNIcnxk++//zzUg82oXfPbYC4dApLXLR2U3HZ/C4/hq5cJKSftZ9g1+6M7A9X9LPno48XMn6929ZlxT12gO5vm7l6r0BOfvavyT9geL16EI/6R9kSxOhRkqbz84CX3K3OXsXxAYnYuXAo2FuqSEBsM9iNRM/0gJfwvXIpwslTQzO/HHzw++hCXEfzH+YM+tFMU/pe13c+HbYB16BZ58+gOBdJsMjQm2ZBCSi8zu8UNNtr/kt0pwenhy8cFT0UFR/BfpDy7HP1GxPKH2Y2Z96onbwazsbvBQSDNNoe8+0E/I3p5zTz2xBo830z8sBb9lGuLUxZpJl9zhrPccefgviT+4BL9RU5QuRQPIxMZQCX6r6bz0DkWxkIE3zM5h1KSIrzArP/VEBonHUV/pGI/i9zIgbNtfi/6Wh1OdpS6NN4I/Fx98Mdu9IhQLDhK4JN7scvwFo8cUDyATHUMl7Ue/b3vibQ3AGfcH+Urjzhx6+Y/+RWPQRkqIn7T5+hcqe91ZnNHfMlbNjuNcuXC0prYhReKD07PHbPGcyeWhE17prybd4flrrxb8PSn+rjz+lhj+xc3jFzLL6X+yVcHEfP4B2pzj0o8Ptv5Im3dhOO+BkrNtWD+cjw/2XWZ67ET8tTP4y/Gn3/bYJZFD6tnhpD7Df6hJ/DPxwVc5/o/HHzyD/7Lht/5gTAPefgC99S62/9nXxUIpIYWbEJrHf/BXR//sG58V35lRsynvoaA+dHf3qrtvZgydcQsg1IFl/Us+qvNkTzGZFFQYaKHyc/xWq9B8SlKL8fTN5vFPtH+41By+afSjrGQ1D2+VLOb+4xm9RYXQz71x7NYFCzxdxgtglXq+MPBHDzLSugNrAP/jLYcxAG3OsKpbt0vPTeIeM3n2zQPty3otflgdSxZ/2jhrgR4brtSvWWrTUbm1lMw/Ux08g9FzfKQdJJHzbfWJTBLNh6f4FeEFv2r+4eAmwX/n8uUT6p9t++dVOsY2pYtTruj77OP6VUlIGeA3pNt1ZYZWgyn5CmQFfCtbhvdZHXgWpdBxgRe2XL9gwSs7rlvZdZjxrKLO6avJ8jLaQvgI3nxsAeAlFqjW5p9zoz+6ldvTNXeMV5c9HNUu7rv22GOPHwhGko4uOVnvtiepql1wnq+NR/h48LA1vZPYXtxyXum6tsYdvZm8+9q0J7WLV8sJ3G9+fbtJFCK7BCYbZj0DnTVcnkyloIXnBmF+9dQTt2PUPvn0B0RCOUf4xB98fGQfmrVr9zthgkLhDImXNQwQ3T2w2jUi3GagqSvwi9oGShbLCK/jRELfnyy+u5WBlnT82jYcf/2YHD/sRdayxp2LOSfrOLfnVMaE13iJ8BR4qK+4eeTJXfxFMJMx7Vak/eSXnGIgyQXeHgzlMlYKWj5FYcNj90ASt7Rp95Dz54SKmNS+f69t1ab8ErTgCeG3vfpzAsial8AnZhJoLCdoe+Fl/AibvatiRvfvN+7cX9vFnUuMo3GJW9To4CrAu3hwk99JihuB93Ji8OxQ06jgVdFZC8ZGmSYO/I3xShoDM8x/ulk0PMlgG5ZKfnl3jgYtM4SlZKHmzQP2I35OzkvWBZ3JhIZRv9nRfadBGMl46BXQ5pUdn17W6zSpvrr7eF1/NeLo4+mshBdPFOEfe+E9AWvV0XMhdYXGGLA8cRtcv0Q27HcuqVSPkO/lEU1dk+pyAg8+1r+iqWvyHMxhwWNnxT+jS8UdQOduu3gyeFel/a6l4+idXbsTGQspCvNfnzrs7rs4ZBc4vyzuIT+YyZGCqndREt4j8EYdk8wmuRqLc1Nf3VE9cv6nUXzMkGKwL2jgWDnp9iF7Xms3z+w0bjozmXAe5kcpFNGAJ2kB9g//dP6b90OYWY5fdbfhx/vuXCwivXVeevYf3VXhLu2aOtNesqNmoYhd8Y3dPDcW7Cv4Qxrr0UB44eBKekqsqI7lhVF1jrpWM6iovKN5mNyQ5dYWrhxxGYinItbGKhAAJ+u+3gvJvHf4ej0jQpEBta45u6/SMZeHtZIB8LuggcfH+PjiSEU1rF0bEczuSQH+5NPJL/LjwKHkozZGeHjnwKF639Y2yYONj6NHu+StrYhGn6axN1lCcC2fde8Ih+mQG+8RkorwaD0USw9+sJ7QmNTV8GLnebECUaJG/YMMO/CyXuugSq/Qa8l5l6focp7zzjsVAnRVkunfuEXg2tio2xY/pzpUl9N4UbPszg637JUU8DGAudODBQPxzQPnhbpoofgqotI7r2Tp9lQ29SXnbPOGkHzlhIOT2NG2wvCKWnr8N3rfm3WiEZVCNhOTurjuHKy5DponQRVRDqYyhZ8QjdH7ldB7oScacCc3N8lRx+mbZ68J4SzpWfER9tX2A+jEigdv0nPJvRnR7oHqvJ6Uk90mHDF4EFfOLLhiCjCmMxlMI+f7q+PDtbpJz0xH94KuoA3kwcquLDM9lFNKdf3KHLXiPQwLUXFWyo54r3SM19KTN6JBrpyDhU46atZ7RKhr0i0p3tnWaCV0P95ER4PHwf+6ub9h3K1Qi4+Aui9uG4BVatK4dx2hwz7F9cF7O/qrhvYlqOs04fHkXIv9OTUe1P3WT36J8b2yqw1d78aQ7TEQ4JlDlhgkWNbszuuhDYBN0d06zz94d1PfsOgEerRRzWaWad7s3WH0hC3wTvnoov/KpEH30ucYcGJ9ZfHB4OCSLBwJhzktWlMr+oj8HucYDS9xOLKvn1zocbCUZgJwOZ+hAY88dDOHAnkX1CXbYTgza4LXp7hygt+xfz+Aq0OZDExPG88VtBlINmzNBcjLEpXGbyXwFlhcGG3t7hWSt5C89ct6W0BF9IBe4fqD35v/N39/Eny5fpU1eyyD7jiJSije4VtDYDDnuGfFAP8zG7Oh5p8fbPLc453NLRHv/BYsOFybJ7sDw0VNneHFpLzLe4HX84rCn3O1FhU86x6/yajYS2YiOvirgZ7l81CDxu/YP7B2+QrhYOog+Lhhq/0V5oHQXqAFnbPwFOHR5v5qt36KG1TB9LhSsHOjpOZgSe7u9s8m6e1BCUcAi4QaOHoAvwudDsDukf6BQ8PbXj2y6m6rFcO6hdIE6mpVMYW3vfTmAfDMWH/157pPIN7B9EN7Ekspd8R7SFfJwcTX0HYwI06j1JWlV0HeJLzm4PKT2mU+ZtIFvBXdbcTPJUPcv/xucg/yixKEUY8us5ufB9vdC7bT8OWb9i5qU6qZxU9uq7nTrT1xxRyFoK7GL6N536AxdnX6UPq+h+RbEsnXop1k3rD1hE5E8czGeA/s3PMeOg1v7W0cQCV174TAFKH0R2ovFXMApCev2yaRw7g6qPN4RNOy6G2htabh56nz2sMwXBOcKSDFLS0lHee+Ss4QV1fjcbCkHMNVL0rLiqOG51jRBYR/+d24rCZyngNkUrHJUcXhZZy2r6cDp+jNSl+tW5Dofc56Z7weagXwSSY2602iYhyNMfViT5mzQud4CIuOH58cvLRHtyHsyhIXTVHhXDul8Gj/mt5eL+Q6WtB+kTTyRh6MfvfQw98MfOYPZm2R37HIE9lMmSL8F9OkT1SZ6ItMCH7C/mDWfHLgS/y7Rf7gifqPr1x4SOnEH0y1raSIP3ii/uNLDv/Ik7vuuO1z9915mv7jwfrn8EryPnoFqsgfbCboP54EvO53zMF9Ww+jh7XTkO5FgXdH9uni7/6ENk74vcduuicfGmIdZYN700CCpD3oQAYYpv7gzf16n0C4c2Dz63YnJ9eiJ+Q/ngp4rnABjOuso0db8LgLbMkaD3pw1Hqr2fTvGrs0n4zpdUdPPfCnb23+m/Uy1PCyEngh8MZtHcF976IxrqhwVwl9o1xgEXjZUMCW7B2+cVlaafLLf4Lf8y57vmdtKaHmZ3vU+jzv0xrOgN937ofEH2wdkyMngKLqqCimka4x+fzJnv84LNp/7MEzlTTeRyhBxVXDVzqOFPmnjTMB+6tHBB59sW3jcKXjcC09WGrlwlEMYXSozqis/bvH3XvRbsa36263Bz0KfMKReXhQ99kNQ/jp++6ESTO86u5b9EdjsohT2bvDYlMLj9hFD68y5592nCr+ZljY4ml2lli7W/+qCzy+8s74fGXHdX/we/PJLbhf1nsa8D1z51g72Kp8lW76zmRYWbr6NTWZ2z3/sSYtKQH4xH8cwFtHzbEMHtQFu4AJNLzJK/3eShnX3RK73I1oLjWIP3j15+3ooU+Q/mBcq0MXhAPINwJv6gmPFvmPCQ9Il4q3g5X6Y1iUM3tUV5pEAo1q/Lzhop5b5xmQNX+8+HCtzoURDU+xJze1kfNjtRYu5BlznXB8K3fh8IPwbqLlL5ylFzpMXn9j73un5sFO+N7XVvCeK18F8DXa74TX/maBL9nRwaUuwtNfyzU19g6mZ5HJ4g+uLG1jNAfheeVBcxjsD/zp2w/e+0VT7D/m2hOYFeRE36HZ/dXP6o/rV31WwbeBq5xm0OIYeo6uNEn64Tm6PeR7WPNvHjDfvL9l9Gin3ajljr5F5wT4Lby3iEvXqsdvmT/YpKtXejtSWCMrTeI/7nGH2lLNMXbZZTlFrviPG8KT9h68Hu+qnBYvE9OSyeiEHIMMIHXRUzJxFPmD6eq5a6mRkxLkoEp3TOjBEH5TX23IyVgarzZcX33U8MCw9+9Pqr0o7UNnTuwd/pxX6a18UYDjlWXnqFR6+I2zJv75r38HvPutn/xSKvkKePfBeva+CQejf/edGdeZaHFVuetRc0E4WPuPgYUiQrtgxVveDDy9wnxbgZdgWbddIdGcveEJVNr75Kh1WuZ11lP+h/7gzW+/vfltg6nXHWc6hJsfvpR4Ztbd3h6Fd1/ZqZrL46yRSg2/c897JihhpbfMLqOZTkaujxat5ECAsxuzDBAjpzYdoqytL1mcgCUcvGTxpxe1DdyzLkulnWrRi7VePVhfwpUa7T9OV8mNya+lJagcRxL+zdR+8OC1M1XgZZNRNOO2eCMA3+WOTuUOOuHdWnpMaG9P4hkEf3O5lOMaVEmTtVv8P3zpF1qL1p5dwOMj4J3a3CNq859947Nai9bNY+Jo+cilSjGTpJK/InxJ2QPBsLKrLdWoh+kJljz3Ut4/fvyxF7IMECjbq1X5FnRdeXeyfmnt4IFDB6/psam0qc3KvGtNF6VXDwwd5Lqj9h8LndIl3Dnc2WTSOVjg8QImyYCRg0/ny3kaXoe7c1133g0tWZZtJ6K1f1oWkHVxe8oXAj+TXTyz0U8uCjUYZHMy+Rf86PSmMecXyvzH6G40GxQq16IFvhkzyfXPBTXi7RDhIfEbtn749bFzL7s9dc9sHE49zW3eWjo3QUC2sfKrd3wR0u6BP9m+8c/X/MM/YUAcIXziD+auRHnzRItWmh51er0ni/5jJnFU65+JzSP+Y4HftXvUwdc9eHK8By+FTOk7HhwHixYNGLafOjCZmL5S7pAllwivsENBhpS6iZilVsw52PMfm0Bt9j5q+CbNJIHn9h3tjtTygxlbNH7Az9/6qVxue9fDfVstl7v6G+XUgFx8cDNatMn7j9PdJBnHccmCPvwSeIzNLIVMukdA+YMTEV2SwV3g2UHcO7drd+Z72bX7HCQQXoE6MP21TlDfZNRMASJh+gDBwLs8qvuB/7Nf/MepP9jORCVatPY3szQ0kzz8FFQm3SAm9xByO/b/IvRny4QYTpEi4Qz9wbLNrESLJgH0GjfRbXY9GG5RM+I/LoDvqnTbhRQlWj14E8u4LYen4AU0B4N4DO8Mo/PE4yn+XYwDDK80XPPgwCFYa78Yrlmvjtl6wvMfU9+BELbu1GIt2vMHN2MmCX7MrwB4eXBUW4ZyH8UPqtF9iZuUB2rW/ez8ylDa71raDXjLwSIS8zqzr0Vz35rMkSKZpQeDWNVaI3juBhmPwkMicAgHhSPMcqqeg50Fye1zmT+4Otjeu8h69Y05Vx08JzsuaHHKsAN8amUW+o9T+G7tfy2Cb9JM0hzv8HcbE93E6ONHYeiDUdN8+mw3ncECn+zoKEqVLIUqKDnYy28s8GHu4snBG7d9zhkwJSWJtFCh03W5SWHsblbuX5eiQ63TUi/5mYnCm3Qzsy7eLouLxL+pLwSoF91Mxh/8SYOfKSXlivcHz8CXw084PnjS8JKyJLqV7mLwx047i59I8uMth6cb/ITjgyfv3/18Z0elM5rS7CLxm9TxZwvNZTGaVfAg/cdXB3wzhfBZfLBbtv5lEfR/ua3T8+9+cuCNs+hyPvCgPP+dz0A3uWrgN/50b2LQlgwInh8s8cHGvIVe472n8j3+qF2W8/y7Ai+Oa+OS6+H6wO+ujMIncc3OCwYhzHU44zZXROHX9PbC8qH9wysPzvTg6a81ZqSoPT9Tux1C+PB93z9+PApf1H5Iwih8UfuL4L96xxdZr49LNWqdWcP/7I2qKS4YEKbPSrhWrYtiULhV+9OvmE/rd2YWUM9fK/DrvtzBiDaXxLitBJ7+gCWLkwBn3qCmCJ6P7B22+xOS645kX7HJ+5tpiRW1xyS7Joaj8OH7FsEXtb8IvrD9W+LwcrDvsjvxQ0fcm7YA//ZqHB5U1Hut5R7CT+BnZ/7adPUEcN+8v4WBUCxjtZGIf9ckMVuAB4uTV1hZBC9NMUmQ3SnWFMFLzEu2GjdyStZsBR4vw1WqovaYdNeHB1/0vkXwRe0vgi9pfxQeXG4XSYZvfHHLedy/suM6/NFVFYWPUtdr/2zlr7X2ONe9+rYe9t6ZIbx5/64xqdENeIhlTCSSlTwK35+Py3Zbq8bK8bMfw3fQ8DqstKg9VN09+JL3jcKXtD8KX9L+KDxk+H13ngYfP3hvC/5wg4/czheFD9GG7Zntnd6p3xnY+c6i+mr/rrwD15MBL0mCS+C9gc+aInjpGrkn4T14ky9he4wkAQrgo+9bAh9tfxF8UfuL4MG7ZFlwMG7kYxE8GZ3w+l7DzxZ/bfjOzn9i35lL5J5/l8CY52woretTwNNBVATPt3WBsx16DBbBk0WEUeTqwWvDOtoejugofPR9i+CL2l8EX9T+IniwLP7AssK+moNDeELiDzf6XsPPlvFV8s4YeBK/q+FlnoPiStnIPi2CZ4/wXrNCCbw8JVplCC8iq6g9rAzhi963BD7a/ob4vfYXwYNlOQ17fFwEXyKiBX62KTg2Wb+zifhrsyLznPRpEbzoR95NOX5RTIya9jS8V6LtMfkMBQ3fNwpf0v4S/NH2R+E5+5J3yYucksvbE1WyBD6LD4bOrWUXo1z0wpPnrxX4e9ZNDP7xR5N5dNXdDeFtgqBVd9uPay3+lrUWfn4IP7/N0iZcK3h/S/Y6IbzYu1LEQo3C22+35NDamy2F8K/tfOs193G7NVkPu3teG+A3KX5T2v4MPg+s4bP44Gc2Gp2jOJqLWPt3PznwGLy9i+Y+71Qqb7lbDyCZw6YVfBrZMJX+3amGt3kVR069eeC8m5jPu8eHKcM9Bp2G8FeDP3gGvgQ+8Qfr8Hsdcm+CyHyJmYlGmwtvhWH5TZZnH19NLXHlH/9jEcze//XfDDXe51/78Kd/OCF488QTk2jVlVusN+nrX6hAv+NpNNFDEE269/G5N47JdtSo409iUoxL5Ui9lPHHEixLP6VxG4u8etFjudXo4S9Eknm+8O6/cLeejuYrT6HlwU+rYgnMtNqDO4zNMLj7HX3uEOk6WF9izHVcjod9Vh08tqBzpDwz2fGR+sl6NzcY2GUHdXaqxAF49TaslKlpU+p668MsD5uvxHKllpUpOhTtiijJcRBDLiePcR0KStP2cia2NbxAWsrbRGi7eGI5ydQEyW8YASxzvj400ZV2XW8kNoJ7648mbgzJbe0lhp93/y1PPv3B2uVtDAdlfXTfri52eWvogpl+RUQ0Dwyz07KT0tbWXCuJMe/s2rXbnmcqm3UZSRCmNhJSdeXPv5I06h4l8vU5ESohUty8Ls+u+7KJwpeXicJfNcUSmGej7T12vtJ5vZbSIp+dYWoPIhaFixu1i5ACm6eyg+TbDySnK3MLdKzeFiYDXrv83DPZMQZzUuZz4sFl7FzQNsBKwpdzsM1v2zkwfTlYk40p2bft1+c82KlXq8QAK9eQveUIDa+/KqqnGHghf4CbLi8u/23NkQ2nWIza6cvBnFabOEp8HjOI6jDFkqKNK29FUL6K1tugrkaJZdNTzC8IfDkHa/jpVuxKFk/KMU0cJQ4aT8IObn4joHEit9ZEincP/tIeKXs1FcvB0WPLTfwo8dGJ2sHaCDbKDtZGsMnbwcLBRXawyStNzaSSnr4imv81f5Q4o4ZWLsxl6A6zRosd7Bm7JrWDw/qLsYPLRXQ0PHyaFEvgSRwlzsQaKxdGMh3pczZMxAg2tIN1qqKLt4PLV6nwLeaa6TsHG7cXYtt+9FGyvz5Vtd4madHdsllCF5dnKjmQxjsgR5tJ+iwxzWpB/YwdfOmL5eBN7hzxv/2r7Y7G2blZIrRBXQDos+KFfkna66Tk0g9IEWPX5O3goN4W2rW9PWcmZAcDvuQlNfx0K8ladDNnxVO7FtJGTWF9NDGLZzSL1l1Ub6bADr7m7L7jZ8305WDYo+8fN8+98c/ed2GNKc7rXQQTbovht0X1E7Vrm4FPc21OVw72EuxLBKpRp//yRvzEEzpveEKlSbtWOLgZ+DTf6XTlYF1AOUnLYg/vCOTwRON3vb18Jj2AKFov+RfJoyV2sFcmCj99So7ApCtZUNugpDRpbyYYT7z59WPQe73sx8al2wnrgZ9mz6a++oc//UOjYpzTLJKJHSzuP8nAKXbzyq4jXIrhs4+bnFk13YolsM+1e96TntqZ15hI+wmdNwx716VOSlYfnWi1aWOK6k3CjnUm5rayNz3rd5k57QaEJZgz27KVLAwIsZuZu6qWmlgMYJnWZpIU0pUUlf3Wxnljdrp9yOIx9Hz11HH0yczZecOuyPp2b0/u58N6zqn2CL8/fv6+5bf3zJ3DJMHV1/e577Nc7BreuOAiWbGy6and3tuhM+Pf2/yPP/qv3zJn933cXf3xlFYe1zb/zKhw7cAht3fHjffQrvXOWVLfjKtreja324kPVlaQOTs4rKfIvcbR45X9bwt2EJtoXWYk44lok8QxJAhf2f+81+xpvaPDhoq4NFiaa406JREciZ4FWE+tBnVa9i2X4OWcjTl4EnZw1OzRxAZHYo7QInrJ4hsf+9/Pm+IyI6IzrmXRUS66gGbvq4xlJftyeXLwRO3gZtyFtqltbbKSBfhrSiWwhp9uxRJY945wbUnRtEzi3YKcZFIzuXRlkN4v/u5vD9aXDBw6GNo5oV3rTcws1KtB3XQtfRpzMMWjBM/rBKlyFip6aqAUl3CzKaVrNEmdfpYlPSana+3yQkpHi9DVHQvUgtfatv+DZh68KksrT1ONii+XC6IsYWQYLSk1JVQsf1aUJi6VgFlBp3tsNvCM0iV2sNB19GgnjSVuW5jWSla0lBztahR5SDB+lCVPWbDUNJZTKnHVgt171qR28Mo//kdnJs3rtV7FhNKrYQrfX2gHO2IndKUhDt3twZ/+379Y96XjdlqfriKaHZqQIT2kSYoLxz7tgUkh2YQ23tXjV2+lOvoslSa6n0VzFkqb1B+cIUmVMjmejXTVWndRRuvpUHIc7HFtR6Wz0nk+rc820mrN2a5Vcekj9UMIwUAS74wEXV/0bJj/wOQpXR2yLQnt4Gc2Dg+dGdd01WVai2jxp3ILnCPqKO+ZhqKj4p+hm5wpl0pdFrqYZNulBhawzLFf/GyJ+4/0C+3g3p4z39v8Rsl7Tms7mOuFdPu7yiUm9fmvXGjrcb92+SzJQx2aSSzkV49rCSNg8q2u1M/Ou2H9JOzghu85rTlYNj/TOwRyyr2LTRpZ/43fII1B7PQcqAaFWXB4NWofiFSGX+kyUTu4oT942gYYJnOw3S+3e2S9O3XQBovuHuA9t72N1UZAWo4DlB88mpPY+kxmkx5TnN4sTwF65OxiVD719P6nnridXz27wTzyUPKt3tApdvCSxd8qX4ac2RddUlrLv7ZhW22R5Q0eUCy+I2Mzxhp18FO/B09Hk7ib5rfV//avTuAeosIljOnZ9urPCenZwcYK5EwCY/b17GCT6hD4KhwHNI5rY+UrNFdzmV3yHRkONI5qtr2L5kqI8LLeDg0j9XIVQwVX/H107Qo+bqzZsxDP2gRjY+fofnBK0znYwS+/W4PkEIULQvu+O0/D3tWVso/6m/e3WLdgvoC6qMe30za2pZCDU0l70gRmkkl5NztbtnD5uq6yv2QS8v3jbw1Q2e6rv3/8+PPf+Qx3gJi80uTZPADgPpBocZT2V8fA7hDyZkZESwFdeewUJ0WmjYxysHH2K3Om9FfHmEsZJP/Rw4uZdQ160M/2jGy0C0wtjEfa+OdrCPz+FsOFJ96zuEEzXvRbKDCEQjtY76N+4V0/D4tT0L4ynfdFJyKaTEaulUyCcl+ybEkigZY6hQpu5Eg6AdD3dpFL1bNIQoiiY+ON42nQDATThnL5PmrUp/HB07EkBKbFIoouCznYxLJrSoFoBZEwp+K6Zmn7Hbd9jlvjHkqPNxWAontZ7iCxrYhuIqBb5lTuiy6HpxLwcXf1x1MSEW05eOEsj7q8cTRu8R5jn4I2z71xzFW8lS5g2XQAmJhX3X3zKihQR5PErMYceS2JZeoeHjq4YtFNx0csi8uxyamCPb7uDzax5ra5N8Hmhgi55uy+F7dZNZgHYZs0VQh+BTAr/+1W8+vG/t1eMDkbcx//u8WY9WvMNCu5OVjmXZmDZTkiWkAnmLAUtpv66pLHnny/8ad7BZLn1Rq1APLIoyvxYO+i5HTl0B/AM5n3Dvs/Orn8atO25EQ0uZbzLkO5i6grUjScSrVeZkOE692wiJgdlSU5biF9kKcieuUb//lengxuVGjoz44NcOuWzikwU8pLTkQb1++1kfOL0lz4RRxMEb29Wl25cCHtWgpnk3LwvBt6jDkG4kHTfvDez3AE6H1Yu3bPSh/0D7cHdZmVG9O5pOhCuavjesiMRAdU9TOlpBTawSWKlUzPa3p7n0tO70nm4OQs6M7ruarlnf4rRU/euIfCtffYPGFlUtelVD8PhXl915EfvmRdETxd2Z7nfKAd9Uvc2bofdwd+0kuOwJqocgqek6hd3mOS1E5MW2hVLlQEcrUH1AUN5rclcptHsD//nYUSqy/wuAHkPet6Vtv7bp1zPT1JKkvAwF29Un/NdN3LPqHiO/z1UjBvSpQs8BwXMUCDVe4QkLuWJuEFQl3j7B983Pw6bi3XOoWrfVlvMgdvrx5+xPTIShbKD1/6hZuDT/dXjdtkn8zB/2Pzvkfv/K2wfqaUlIzAg/UlqbegHfeVanZUAPMY6kL2hQQmYTCVYkDw6LadB97zJLOo0Jizn//OZza/fgw18uCtCw5604Geg4dr2VwL6kbrZ0pJsQQGOYfOvDe0572dUj344WsqZfRzb9j7JYu/KJqUiGiZSu+78zMNFyiYjh4W0cljRs/B8264JU3EYSNfiubgovqZUlIsgXe6VLONMt1dIJj+Chwpc7BxTmXIz2/eb0+3lfnVOP8x9TLKc4pieRDzLm60HVw0BxfVz5SS0krLsvlMd3pKhhat7WBvol258BwzJjmv/pAzb66zf9caUz8VGtBS9BxslB1cVD9TSorl4AllumONLP/KVLpha86c/dHDLZtfz1am5red+NnOXJJLZUC/Z7XrJA2DFdFFdnBR/UwpKRPOdAed69kNlllBj32DJ7ZXuUn2veghDcxc+uDRlvCHeTo7HuRWWdnsYWbm4EtabCK05jPdnTz7SxASc+rRfXY21WvRkqjfqEVEe0yxOktM76gVfzDmYHDwgs6RmTl4KkrCwc1nupOTa53O3C5T6XBNb96wANsPjHM+xs2ape3yeHLsYH4O1p6GIju4qH6mlBTrbGCmO0fjC5TV/A43rAkz3YmZJG5dvROWAOBvOht4w3rxJmnfMIuI6LwdXIvOwQ2Tks8UlslkusMcSOruG/zwkYe4ZeeIO5W8bcPWD92WHW6dPGG37KTm0PaqFsuj96xLHtzp3JTaIS9zLVRuUFEWnIvqZ0pJSTLdDZ351LYgqmfbE1mNsAv4z23Gs2te1I9E0uotO7ihWI5u2dH34G+90cCouXa4ZrcGCCGL6mdKSUky3UF1YjIb7oIOD+UwMf8rHUG0dqqD++jtcS56mwechBQAY96S+5Nns/t9B2Bf9XhzMG8gk/VBwkX1M6Wk6GN1WlyYaLaYtX6FXcZabStb3HJ05eV3c5Em4GDUuMJFLruQyaSHm+x+2BGozTCHnPJsv+L9+8ffMm7bjQsqfGtNb280ebxx7qO95sbm62dKWJJjdUx6/pmt23Gy6GAsr/zzX/+OaRC60qkAbpcbo5zKhOFSpZfp1KaUqB4Jf7eofqaEJcl0R9Iq+WyTdSwzpymljfOug8zgTnqKqEVD81IHnmXJ+RuGrrCkWfIyYB0zzlKU7KeofqZ4RaILBxxdfWeDSGlQetHyWe+7LTeokXgvUhfTrc5zE56IZoJseKaJsxa4n775+pkSlkkeLxuV2NHzdRp+5ZWJ6sZ7/uj3P+4+/ESX/w8b0hWKEYCfcAAAAABJRU5ErkJggg"},{ name : "R_lang_en_mo", data : "3hIElQAAAAABAAAAHAAAACQAAAADAAAALAAAAAAAAAA4AAAAIAEAADkAAAABAAAAAAAAAAAAAAAAUHJvamVjdC1JZC1WZXJzaW9uOiAKUE8tUmV2aXNpb24tRGF0ZTogMjAxOS0xMC0yOSAxNToxNyswMTAwCkxhc3QtVHJhbnNsYXRvcjogCkxhbmd1YWdlLVRlYW06IApMYW5ndWFnZTogZW4KTUlNRS1WZXJzaW9uOiAxLjAKQ29udGVudC1UeXBlOiB0ZXh0L3BsYWluOyBjaGFyc2V0PVVURi04CkNvbnRlbnQtVHJhbnNmZXItRW5jb2Rpbmc6IDhiaXQKWC1HZW5lcmF0b3I6IFBvZWRpdCAyLjIuNApYLVBvZWRpdC1CYXNlcGF0aDogLgpQbHVyYWwtRm9ybXM6IG5wbHVyYWxzPTI7IHBsdXJhbD0obiAhPSAxKTsKAA"}];
haxe_ds_ObjectMap.count = 0;
var __map_reserved = {};
haxe_MainLoop.add(hxd_System.updateCursor,-1);
js_Boot.__toStr = ({ }).toString;
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
Assets.initDone = false;
dn_Process.CUSTOM_STAGE_WIDTH = -1;
dn_Process.CUSTOM_STAGE_HEIGHT = -1;
dn_Process.UNIQ_ID = 0;
dn_Process.ROOTS = [];
Const.FPS = 60;
Const.AUTO_SCALE_TARGET_WID = 320;
Const.AUTO_SCALE_TARGET_HEI = -1;
Const.SCALE = 1.0;
Const.UI_SCALE = 1.0;
Const.GRID = 16;
Const.BG_COLOR = 1383459;
Const._uniq = 0;
Const.INFINITE = 999999;
Const._inc = 0;
Const.DP_BG = Const._inc++;
Const.DP_FX_BG = Const._inc++;
Const.DP_MAIN = Const._inc++;
Const.DP_FX_FRONT = Const._inc++;
Const.DP_UI = Const._inc++;
Entity.ALL = [];
Entity.GC = [];
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
dn_Cooldown.__meta__ = { obj : { indexes : ["firstImpact","keepBlink","emitterLife","emitterTick","shaking","lock","gunRecoil","gunHolding","airControl","extraJumping","shootLock","autoFireLock","autoFireFirst"]}};
dn_Tweenie.DEFAULT_DURATION = 1000.0;
dn_heaps_Controller.UNIQ_ID = 0;
dn_heaps_Controller.LONG_PRESS = 0.35;
dn_heaps_Controller.SHORT_PRESS = 0.17;
dn_heaps_Controller.ALL = [];
hxd_Pad.CONFIG_JS_STD = { A : 0, B : 1, X : 2, Y : 3, LB : 4, RB : 5, LT : 6, RT : 7, back : 8, start : 9, analogClick : 10, ranalogClick : 11, dpadUp : 12, dpadDown : 13, dpadLeft : 14, dpadRight : 15, analogX : 17, analogY : 18, ranalogX : 19, ranalogY : 20, names : ["A","B","X","Y","LB","RB","LT","RT","Select","Start","LCLK","RCLK","DUp","DDown","DLeft","DRight","LX","LY","RX","RY"]};
hxd_Pad.CONFIG_JS_DS4 = { A : 0, B : 1, X : 2, Y : 3, LB : 4, RB : 5, LT : 6, RT : 7, back : 8, start : 9, analogClick : 10, ranalogClick : 11, dpadUp : 12, dpadDown : 13, dpadLeft : 14, dpadRight : 15, analogX : 18, analogY : 19, ranalogX : 20, ranalogY : 21, names : ["A","B","X","Y","LB","RB","LT","RT","Select","Start","LCLK","RCLK","DUp","DDown","DLeft","DRight","LX","LY","RX","RY"]};
hxd_Pad.CONFIG_JS_DS4_FF = { A : 1, B : 2, X : 0, Y : 3, LB : 4, RB : 5, LT : 6, RT : 7, back : 8, start : 9, analogClick : 10, ranalogClick : 11, dpadUp : 9000, dpadDown : 9000, dpadLeft : 9000, dpadRight : 9000, analogX : 18, analogY : 19, ranalogX : 20, ranalogY : 23, names : ["A","B","X","Y","LB","RB","LT","RT","Select","Start","LCLK","RCLK","DUp","DDown","DLeft","DRight","LX","LY","RX","RY"]};
hxd_Pad.DEFAULT_CONFIG = hxd_Pad.CONFIG_JS_STD;
hxd_Pad.initDone = false;
hxd_Pad.pads = new haxe_ds_IntMap();
dn_heaps_GamePad.ALL = [];
dn_heaps_GamePad.MAPPING = [hxd_Pad.DEFAULT_CONFIG.A,hxd_Pad.DEFAULT_CONFIG.B,hxd_Pad.DEFAULT_CONFIG.X,hxd_Pad.DEFAULT_CONFIG.Y,hxd_Pad.DEFAULT_CONFIG.back,hxd_Pad.DEFAULT_CONFIG.start,hxd_Pad.DEFAULT_CONFIG.LT,hxd_Pad.DEFAULT_CONFIG.RT,hxd_Pad.DEFAULT_CONFIG.LB,hxd_Pad.DEFAULT_CONFIG.RB,hxd_Pad.DEFAULT_CONFIG.analogClick,hxd_Pad.DEFAULT_CONFIG.ranalogClick,hxd_Pad.DEFAULT_CONFIG.dpadUp,hxd_Pad.DEFAULT_CONFIG.dpadDown,hxd_Pad.DEFAULT_CONFIG.dpadLeft,hxd_Pad.DEFAULT_CONFIG.dpadRight,hxd_Pad.DEFAULT_CONFIG.analogX,hxd_Pad.DEFAULT_CONFIG.analogX,hxd_Pad.DEFAULT_CONFIG.analogX,hxd_Pad.DEFAULT_CONFIG.analogY,hxd_Pad.DEFAULT_CONFIG.analogY,hxd_Pad.DEFAULT_CONFIG.analogY,hxd_Pad.DEFAULT_CONFIG.ranalogX,hxd_Pad.DEFAULT_CONFIG.ranalogX,hxd_Pad.DEFAULT_CONFIG.ranalogX,hxd_Pad.DEFAULT_CONFIG.ranalogY,hxd_Pad.DEFAULT_CONFIG.ranalogY,hxd_Pad.DEFAULT_CONFIG.ranalogY];
dn_heaps_assets_Atlas.CACHE_ANIMS = [];
dn_heaps_slib_SpriteLib.TMOD = NaN;
en_Bullet.ALL = [];
en_Mob.ALL = [];
h2d_Console.HIDE_LOG_TIMEOUT = 3.;
h2d_HtmlText.REG_SPACES = new EReg("[\r\n\t ]+","g");
h3d_Buffer.GUID = 0;
h3d_Engine.SOFTWARE_DRIVER = false;
h3d_Engine.ANTIALIASING = 0;
h3d_impl_InputNames.UID = 0;
h3d_impl_InputNames.CACHE = new haxe_ds_StringMap();
h3d_impl_GlDriver.ALLOW_WEBGL2 = true;
h3d_impl_GlDriver.outOfMemoryCheck = false;
h3d_impl_GlDriver.TFILTERS = [[[9728,9728],[9729,9729]],[[9728,9984],[9729,9985]],[[9728,9986],[9729,9987]]];
h3d_impl_GlDriver.TWRAP = [33071,10497];
h3d_impl_GlDriver.FACES = [0,1028,1029,1032];
h3d_impl_GlDriver.BLEND = [1,0,770,768,772,774,771,769,773,775,32769,32771,32770,32772,776];
h3d_impl_GlDriver.COMPARE = [519,512,514,517,516,518,513,515];
h3d_impl_GlDriver.STENCIL_OP = [7680,0,7681,7682,34055,7683,34056,5386];
h3d_impl_GlDriver.OP = [32774,32778,32779,32775,32776];
h3d_impl_GlDriver.CUBE_FACES = [34069,34070,34071,34072,34073,34074];
h3d_impl_GlDriver.CBUFFERS = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1 = 0;
		while(_g1 < 32) {
			var i = _g1++;
			var _g11 = [];
			var _g2 = 0;
			var _g3 = i;
			while(_g2 < _g3) {
				var k = _g2++;
				_g11.push(36064 + k);
			}
			_g.push(_g11);
		}
	}
	$r = _g;
	return $r;
}(this));
h3d_impl_MemoryManager.ALL_FLAGS = h3d_BufferFlag.__empty_constructs__.slice();
h3d_mat_Defaults.defaultKillAlphaThreshold = 0.5;
h3d_mat_Defaults.loadingTextureColor = -65281;
h3d_mat_MaterialSetup.current = new h3d_mat_MaterialSetup("Default");
h3d_mat_Texture.UID = 0;
h3d_mat_Texture.PREVENT_AUTO_DISPOSE = 2147483647;
h3d_mat_Texture.nativeFormat = hxd_PixelFormat.RGBA;
h3d_pass_Blur.__meta__ = { obj : { ignore : ["shader"]}};
h3d_shader_ScreenShader.SRC = "HXSLF2gzZC5zaGFkZXIuU2NyZWVuU2hhZGVyBwEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACghfX2luaXRfXw4GAAALBnZlcnRleA4GAAACAgoAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAALAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAA";
h3d_pass__$Border_BorderShader.SRC = "HXSLHWgzZC5wYXNzLl9Cb3JkZXIuQm9yZGVyU2hhZGVyCQEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgVjb2xvcgUMAgAACwhfX2luaXRfXw4GAAAMBnZlcnRleA4GAAANCGZyYWdtZW50DgYAAAMCCwAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAAwAAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ0AAAUBBgQCCAUMAgoFDAUMAA";
h3d_pass_ColorMatrixShader.SRC = "HXSLGmgzZC5wYXNzLkNvbG9yTWF0cml4U2hhZGVyFQEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgd0ZXh0dXJlCgIAAAsGbWF0cml4BwIAAAwIdXNlQWxwaGECAgABAAAAAAANB3VzZU1hc2sCAgABAAAAAAAOCm1hc2tJbnZlcnQCAgABAAAAAAAPD2hhc1NlY29uZE1hdHJpeAICAAEAAAAAABAHbWF0cml4MgcCAAARBG1hc2sKAgAAEghtYXNrTWF0QQULAgAAEwhtYXNrTWF0QgULAgAAFAltYXNrUG93ZXIDAgAAFQttYXNrQ2hhbm5lbAUMAgAAFghfX2luaXRfXw4GAAAXBnZlcnRleA4GAAAYBWFwcGx5DgYAABkIZnJhZ21lbnQOBgAABAIWAAAFAgYEAgcFDAIIBQwFDAYEAgkFCgIDBQoFCgAAFwAABQEGBAIGBQwJAyoOBAoCAgUKAAADBgEKAgIFCgQAAwIEAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBQwFDAADGAIaBWNvbG9yBQwEAAAbA21hdAcEAAAFDAUBDQsCDAIGAQIaBQwCGwcFDAYBCQMqDgIKAhoFDJIABQsBAwAAAAAAAPA/AwUMAhsHBQwFDAAAARkAAAUBCwINAgUFCBwFY29sb3IFDAQAAAkDIQ4CAgoKAgMFCgUMAAgdAnV2BQsEAAAJAykOAgIDBQoBAwAAAAAAAPA/AwULAAgeAWsDBAAACQMIDgIJAx0OAgkDIQ4CAhEKCQMoDgIJAx0OAgIdBQsCEgULAwkDHQ4CAh0FCwITBQsDBQoFDAIVBQwDAhQDAwAIHwZjb2xvcjIFDAQAAAsCDwIJAhgOAgIcBQwCEAcFDAIcBQwFDAAGBAIHBQwLAg4CCQMYDgMCHwUMCQIYDgICHAUMAgsHBQwCHgMFDAkDGA4DCQIYDgICHAUMAgsHBQwCHwUMAh4DBQwFDAUMAAYEAgcFDAkCGA4CCQMhDgICCgoCAwUKBQwCCwcFDAUMAAA";
h3d_pass__$Copy_CopyShader.SRC = "HXSLGWgzZC5wYXNzLl9Db3B5LkNvcHlTaGFkZXIJAQVpbnB1dA0BAgIIcG9zaXRpb24FCgEBAAMCdXYFCgEBAAEAAAQFZmxpcFkDAgAABQZvdXRwdXQNAgIGCHBvc2l0aW9uBQwEBQAHBWNvbG9yBQwEBQAEAAAICnBpeGVsQ29sb3IFDAQAAAkMY2FsY3VsYXRlZFVWBQoEAAAKB3RleHR1cmUKAgAACwhfX2luaXRfXw4GAAAMBnZlcnRleA4GAAANCGZyYWdtZW50DgYAAAMCCwAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAAwAAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ0AAAUBBgQCCAUMCQMhDgICCgoCCQUKBQwFDAA";
h3d_pass__$CubeCopy_CubeCopyShader.SRC = "HXSLIWgzZC5wYXNzLl9DdWJlQ29weS5DdWJlQ29weVNoYWRlcgoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoHdGV4dHVyZQwCAAALA21hdAYCAAAMCF9faW5pdF9fDgYAAA0GdmVydGV4DgYAAA4IZnJhZ21lbnQOBgAAAwIMAAAFAgYEAgcFDAIIBQwFDAYEAgkFCgIDBQoFCgAADQAABQEGBAIGBQwJAyoOBAoCAgUKAAADBgEKAgIFCgQAAwIEAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBQwFDAABDgAABQIIDwJ1dgUKBAAABgMGAQIJBQoBAwAAAAAAAABAAwUKAQMAAAAAAADwPwMFCgAGBAIIBQwJAyEOAgIKDAkDHw4BBgEJAykOAgIPBQoBAwAAAAAAAPA/AwULAgsGBQsFCwUMBQwA";
h3d_pass_Default.__meta__ = { fields : { cameraView : { global : ["camera.view"]}, cameraNear : { global : ["camera.zNear"]}, cameraFar : { global : ["camera.zFar"]}, cameraProj : { global : ["camera.proj"]}, cameraPos : { global : ["camera.position"]}, cameraProjDiag : { global : ["camera.projDiag"]}, cameraProjFlip : { global : ["camera.projFlip"]}, cameraViewProj : { global : ["camera.viewProj"]}, cameraInverseViewProj : { global : ["camera.inverseViewProj"]}, globalTime : { global : ["global.time"]}, pixelSize : { global : ["global.pixelSize"]}, globalModelView : { global : ["global.modelView"]}, globalModelViewInverse : { global : ["global.modelViewInverse"]}}};
h3d_pass__$HardwarePick_FixedColor.SRC = "HXSLIWgzZC5wYXNzLl9IYXJkd2FyZVBpY2suRml4ZWRDb2xvcgUBB2NvbG9ySUQFDAIAAAIIdmlld3BvcnQFDAIAAAMGb3V0cHV0DQECBAhwb3NpdGlvbgUMBAMABQdjb2xvcklEBQwEAwAEAAAGBnZlcnRleA4GAAAHCGZyYWdtZW50DgYAAAIABgAABQEGBAIEBQwGAQQGAAIEBQwGAQkDKg4DCgICBQwRAAUKAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwUMCgIEBQwMAAMFDAUMBQwJAyoOAwoCAgUMOQAFCgEDAAAAAAAA8D8DAQMAAAAAAADwPwMFDAUMBQwAAQcAAAUBBgQCBQUMAgEFDAUMAA";
h3d_pass_ShaderManager.STRICT = true;
h3d_shader_AmbientLight.SRC = "HXSLF2gzZC5zaGFkZXIuQW1iaWVudExpZ2h0CgEGZ2xvYmFsDQECAgxhbWJpZW50TGlnaHQFCwABAAMQcGVyUGl4ZWxMaWdodGluZwIAAQEAAAAAAAAAAAQKcGl4ZWxDb2xvcgUMBAAABQ9saWdodFBpeGVsQ29sb3IFCwQAAAYKbGlnaHRDb2xvcgULBAAABwhhZGRpdGl2ZQICAAEAAAAAAAgIX19pbml0X18OBgAACRBfX2luaXRfX2ZyYWdtZW50DgYAAAoJY2FsY0xpZ2h0DgYAAAsGdmVydGV4DgYAAAwIZnJhZ21lbnQOBgAABQIIAAAFAQYEAgYFCwsCBwICAgULCQMpDgEBAwAAAAAAAAAAAwULBQsFCwACCQAABQEGBAIFBQsLAgcCAgIFCwkDKQ4BAQMAAAAAAAAAAAMFCwULBQsAAwoBDQpsaWdodENvbG9yBQsEAAAFCwUBDQsCBwICDQULBAYAAgIFCwYBCQMWDgIEBgMBAwAAAAAAAPA/AwICBQsFCwULAQMAAAAAAAAAAAMFCwINBQsFCwULBQsFCwAAAAsAAAUBCwcCAgMCAgaBCgIEBQySAAULCQIKDgECBgULBQsFCwAAAAEMAAAFAQsCAwIGgQoCBAUMkgAFCwkCCg4BAgUFCwULBQsAAAA";
h3d_shader_Base2d.SRC = "HXSLEWgzZC5zaGFkZXIuQmFzZTJkGgEFaW5wdXQNAQMCCHBvc2l0aW9uBQoBAQADAnV2BQoBAQAEBWNvbG9yBQwBAQABAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgEdGltZQMAAAAJBnpWYWx1ZQMCAAAKB3RleHR1cmUKAgAACw5zcHJpdGVQb3NpdGlvbgUMBAAADBBhYnNvbHV0ZVBvc2l0aW9uBQwEAAANCnBpeGVsQ29sb3IFDAQAAA4MdGV4dHVyZUNvbG9yBQwEAAAPDGNhbGN1bGF0ZWRVVgUKAwAAEAppc1JlbGF0aXZlAgIAAQAAAAAAEQVjb2xvcgUMAgAAEg9hYnNvbHV0ZU1hdHJpeEEFCwIAABMPYWJzb2x1dGVNYXRyaXhCBQsCAAAUDWZpbHRlck1hdHJpeEEFCwIAABUNZmlsdGVyTWF0cml4QgULAgAAFghoYXNVVlBvcwICAAEAAAAAABcFdXZQb3MFDAIAABgJa2lsbEFscGhhAgIAAQAAAAAAGQpwaXhlbEFsaWduAgIAAQAAAAAAGhBoYWxmUGl4ZWxJbnZlcnNlBQoCAAAbCHZpZXdwb3J0BQwCAAAcDm91dHB1dFBvc2l0aW9uBQwEAAAdCF9faW5pdF9fDgYAAB4GdmVydGV4DgYAAB8IZnJhZ21lbnQOBgAAAwIdAAAFBgYEAgsFDAkDKg4DAgIFCgIJAwEDAAAAAAAA8D8DBQwFDAsCEAIFAwYECgIMBQwAAAMJAx0OAgkDKQ4CCgILBQwRAAUKAQMAAAAAAADwPwMFCwISBQsDAwYECgIMBQwEAAMJAx0OAgkDKQ4CCgILBQwRAAUKAQMAAAAAAADwPwMFCwITBQsDAwYECgIMBQw5AAUKCgILBQw5AAUKBQoABgQCDAUMAgsFDAUMAAYEAg8FCgsCFgIGAAYBAgMFCgoCFwUMOQAFCgUKCgIXBQwRAAUKBQoCAwUKBQoFCgYEAg0FDAsCEAIGAQIRBQwCBAUMBQwCBAUMBQwFDAYEAg4FDAkDIQ4CAgoKAg8FCgUMBQwGgQINBQwCDgUMBQwAAB4AAAUFCCADdG1wBQsEAAAJAykOAgoCDAUMEQAFCgEDAAAAAAAA8D8DBQsABgQCHAUMCQMqDgMJAx0OAgIgBQsCFAULAwkDHQ4CAiAFCwIVBQsDCgIMBQw5AAUKBQwFDAYECgIcBQwRAAUKBgEEBgAKAhwFDBEABQoKAhsFDBEABQoFCgUKCgIbBQw5AAUKBQoFCgsCGQIGgwoCHAUMEQAFCgIaBQoFCgAABgQCBgUMAhwFDAUMAAEfAAAFAgsGDgIYAgYJCgINBQwMAAMBA/yp8dJNYlA/AwICDAAAAAYEAgcFDAINBQwFDAA";
h3d_shader_BaseMesh.SRC = "HXSLE2gzZC5zaGFkZXIuQmFzZU1lc2gXAQZjYW1lcmENAQoCBHZpZXcHAAEAAwRwcm9qBwABAAQIcG9zaXRpb24FCwABAAUIcHJvakZsaXADAAEABghwcm9qRGlhZwULAAEABwh2aWV3UHJvagcAAQAID2ludmVyc2VWaWV3UHJvagcAAQAJBXpOZWFyAwABAAoEekZhcgMAAQALA2RpcgULAwEAAAAADAZnbG9iYWwNAgQNBHRpbWUDAAwADglwaXhlbFNpemUFCgAMAA8JbW9kZWxWaWV3BwAMAQMQEG1vZGVsVmlld0ludmVyc2UHAAwBAwAAABEFaW5wdXQNAwISCHBvc2l0aW9uBQsBEQATBm5vcm1hbAULAREAAQAAFAZvdXRwdXQNBAUVCHBvc2l0aW9uBQwEFAAWBWNvbG9yBQwEFAAXBWRlcHRoAwQUABgGbm9ybWFsBQsEFAAZCXdvcmxkRGlzdAMEFAAEAAAaEHJlbGF0aXZlUG9zaXRpb24FCwQAABsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAHBhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAB0RdHJhbnNmb3JtZWROb3JtYWwFCwQAAB4RcHJvamVjdGVkUG9zaXRpb24FDAQAAB8KcGl4ZWxDb2xvcgUMBAAAIAVkZXB0aAMEAAAhCHNjcmVlblVWBQoEAAAiCXNwZWNQb3dlcgMEAAAjCXNwZWNDb2xvcgULBAAAJAl3b3JsZERpc3QDBAAAJQVjb2xvcgUMAgAAJg1zcGVjdWxhclBvd2VyAwIAAQcAAAAAAAAAAAAAAAAAAFlAJw5zcGVjdWxhckFtb3VudAMCAAEHAAAAAAAAAAAAAAAAAAAkQCgNc3BlY3VsYXJDb2xvcgULAgAAKQhfX2luaXRfXw4GAAAqEF9faW5pdF9fZnJhZ21lbnQOBgAAKwZ2ZXJ0ZXgOBgAALAhmcmFnbWVudA4GAAAEAikAAAULBgQCGgULAhIFCwULBgQCGwULBgECGgULCQM0DgECDwcIBQsFCwYEAh4FDAYBCQMqDgICGwULAQMAAAAAAADwPwMFDAIHBwUMBQwGBAIdBQsJAx8OAQQGAQITBQsJAzIOAQIPBwYFCwULBQsFCwYEAgsFCwkDHw4BBAYDAgQFCwIbBQsFCwULBQsFCwYEAh8FDAIlBQwFDAYEAiIDAiYDAwYEAiMFCwYBAigFCwInAwULBQsGBAIhBQoJAzoOAQYCCgIeBQwRAAUKCgIeBQwMAAMFCgUKBQoGBAIgAwYCCgIeBQwIAAMKAh4FDAwAAwMDBgQCJAMGAgkDGw4BBgMCGwULAgQFCwULAwIKAwMDAAIqAAAFBQYEAh0FCwkDHw4BAh0FCwULBQsGBAIhBQoJAzoOAQYCCgIeBQwRAAUKCgIeBQwMAAMFCgUKBQoGBAIgAwYCCgIeBQwIAAMKAh4FDAwAAwMDBgQCIgMCJgMDBgQCIwULBgECKAULAicDBQsFCwAAKwAABQIGBAIVBQwGAQIeBQwJAyoOBAEDAAAAAAAA8D8DAgUDAQMAAAAAAADwPwMBAwAAAAAAAPA/AwUMBQwFDAYEAhwFCwIbBQsFCwABLAAABQQGBAIWBQwCHwUMBQwGBAIXAwIgAwMGBAIYBQsCHQULBQsGBAIZAwIkAwMA";
h3d_shader_Blur.SRC = "HXSLD2gzZC5zaGFkZXIuQmx1choBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoVY2FtZXJhSW52ZXJzZVZpZXdQcm9qBwIAAAsHdGV4dHVyZQoCAAAMDGRlcHRoVGV4dHVyZQoCAAANB1F1YWxpdHkBAgABAAAAAAAOB2lzRGVwdGgCAgABAAAAAAAPBnZhbHVlcw8DDQIAABAHb2Zmc2V0cw8DDQIAABEFcGl4ZWwFCgIAABINaGFzRml4ZWRDb2xvcgICAAEAAAAAABMQc21vb3RoRml4ZWRDb2xvcgICAAEAAAAAABQKZml4ZWRDb2xvcgUMAgAAFRBpc0RlcHRoRGVwZW5kYW50AgIAAQAAAAAAFgloYXNOb3JtYWwCAgABAAAAAAAXDW5vcm1hbFRleHR1cmUKAgAAGAZpc0N1YmUCAgABAAAAAAAZC2N1YmVUZXh0dXJlDAIAABoHY3ViZURpcgYCAAAbCF9faW5pdF9fDgYAABwGdmVydGV4DgYAAB0IZnJhZ21lbnQOBgAAHgtnZXRQb3NpdGlvbg4GAAAEAhsAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAcAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEdAAAFAgsCFQIFBggfBHBjdXIFCwQAAAkCHg4BAgMFCgULAAggBGNjdXIFDAQAAAkDIQ4CAgsKAgMFCgUMAAghBWNvbG9yBQwEAAAJAyoOBAEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwEDAAAAAAAAAAADBQwACCIEbmN1cgULBAAACQM5DgEJAyEOAgIXCgIDBQoFDAULABUGdW5yb2xsAA4jAWkBBAAABhUGAAcDAg0BAQECAQAAAAEBAg0BDwEAAAUICCQCdXYFCgQAAAYAAgMFCgYBAhEFChECEA8DDQsGCQIjAQECAAAAAAECBwMCIwEBAiMBAQMFCgUKAAglAWMFDAQAAAkDIQ4CAgsKAiQFCgUMAAgmAXAFCwQAAAkCHg4BAiQFCgULAAgnAWQDBAAACQMdDgIEBgMCJgULAh8FCwULBQsGAwImBQsCHwULBQsDAAgoAW4FCwQAAAkDOQ4BCQMhDgICFwoCJAUKBQwFCwAGBAIlBQwJAxgOAwIgBQwCJQUMCQMdDgICIgULAigFCwMFDAUMBgQCJQUMCQMYDgMCJQUMAiAFDAkDFQ4CBAYBCQMWDgIEBgMCJwMBA/yp8dJNYlA/AwMDAQMAAAAAAAAAAAMDAQMAAAAAAGr4QAMDAwEDAAAAAAAA8D8DAwUMBQwGgAIhBQwGAQIlBQwRAg8PAw0LBgkCIwEBAgAAAAABAgcDAiMBAQIjAQEDBQwFDAAAAAYEAggFDAIhBQwFDAALAg4CBQMIKQN2YWwDBAAAAQMAAAAAAAAAAAMAFQZ1bnJvbGwADioBaQEEAAAGFQYABwMCDQEBAQIBAAAAAQECDQEPAQAABQELAhgCBoACKQMGAQkDNw4BCQMhDgICGQwGAQkDKQ4CBgMGAQQGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIqAQECAAAAAAECBwMCKgEBAioBAQMFCgkDJg4BAioBAwUKBQoFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAQMAAAAAAADwPwMFCwIaBgULBQwDEQIPDwMNCwYJAioBAQIAAAAAAQIHAwIqAQECKgEBAwMDBoACKQMGAQkDNw4BCQMhDgICCwoGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIqAQECAAAAAAECBwMCKgEBAioBAQMFCgkDJg4BAioBAwUKBQoFDAMRAg8PAw0LBgkCKgEBAgAAAAABAgcDAioBAQIqAQEDAwMAAAAABgQCCAUMCQM2DgEJAxUOAgIpAwEDyxpQyv//7z8DAwUMBQwABQMIKwVjb2xvcgUMBAAACQMqDgQBAwAAAAAAAAAAAwEDAAAAAAAAAAADAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwUMABUGdW5yb2xsAA4sAWkBBAAABhUGAAcDAg0BAQECAQAAAAEBAg0BDwEAAAUBCwIYAgaAAisFDAYBCQMhDgICGQwGAQkDKQ4CBgMGAQQGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFCgkDJg4BAiwBAwUKBQoFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAQMAAAAAAADwPwMFCwIaBgULBQwRAg8PAw0LBgkCLAEBAgAAAAABAgcDAiwBAQIsAQEDBQwFDAaAAisFDAYBCQMhDgICCwoGAAIDBQoGAQYBAhEFChECEA8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFCgkDJg4BAiwBAwUKBQoFDBECDw8DDQsGCQIsAQECAAAAAAECBwMCLAEBAiwBAQMFDAUMAAAAAAYEAggFDAIrBQwFDAAAAAsCEgIFAgsCEwIGgQoCCAUMDAADCgIUBQwMAAMDBgQKAggFDAwAAwYBCgIUBQwMAAMJAyYOAQYHCgIIBQwMAAMBAwAAAAAAAAAAAwIDAwMABgQKAggFDJIABQsGAQoCFAUMkgAFCwoCCAUMDAADBQsFCwAAAAADHgEtAnV2BQoEAAAFCwUECC4FZGVwdGgDBAAACQM3DgEJAyEOAgIMCgItBQoFDAMACC8EdGVtcAUMBAAABgEJAyoOAwkDOw4BAi0FCgUKAi4DAQMAAAAAAADwPwMFDAIKBwUMAAgwCG9yaWdpbldTBQsEAAAGAgoCLwUMkgAFCwoCLwUMDAADBQsADQIwBQsAAA";
h3d_shader_ColorAdd.SRC = "HXSLE2gzZC5zaGFkZXIuQ29sb3JBZGQDAQpwaXhlbENvbG9yBQwEAAACBWNvbG9yBQsCAAADCGZyYWdtZW50DgYAAAEBAwAABQEGgAoCAQUMkgAFCwICBQsFCwA";
h3d_shader_ColorKey.SRC = "HXSLE2gzZC5zaGFkZXIuQ29sb3JLZXkDAQhjb2xvcktleQUMAgAAAgx0ZXh0dXJlQ29sb3IFDAQAAAMIZnJhZ21lbnQOBgAAAQEDAAAFAggEBWNkaWZmBQwEAAAGAwICBQwCAQUMBQwACwYJCQMdDgICBAUMAgQFDAMBA/Fo44i1+OQ+AwIMAAAAAA";
h3d_shader_ColorMatrix.SRC = "HXSLFmgzZC5zaGFkZXIuQ29sb3JNYXRyaXgDAQpwaXhlbENvbG9yBQwEAAACBm1hdHJpeAcCAAADCGZyYWdtZW50DgYAAAEBAwAABQEGBAIBBQwJAyoOAgoEBgEJAyoOAgoCAQUMkgAFCwEDAAAAAAAA8D8DBQwCAgcFDAUMkgAFCwoEBgECAQUMAgIHBQwFDAwAAwUMBQwA";
h3d_shader_DirShadow.SRC = "HXSLFGgzZC5zaGFkZXIuRGlyU2hhZG93EQEGZW5hYmxlAgIAAQAAAAAAAgdVU0VfRVNNAgIAAQAAAAAAAwtzaGFkb3dQb3dlcgMCAAAEB1VTRV9QQ0YCAgABAAAAAAAFCnBjZlF1YWxpdHkBAgABAAAAAAAGCHBjZlNjYWxlAwIAAAcJc2hhZG93UmVzBQoCAAAICXNoYWRvd01hcBEBAgAACQpzaGFkb3dQcm9qCAIAAAoKc2hhZG93QmlhcwMCAAALE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAwGc2hhZG93AwQAAA0OcG9pc3NvbkRpc2tMb3cPBQwABAIAAA4PcG9pc3NvbkRpc2tIaWdoDwUMAAwCAAAPE3BvaXNzb25EaXNrVmVyeUhpZ2gPBQwAQAIAABAEcmFuZA4GAAARCGZyYWdtZW50DgYAAAIDEAESAXYDBAAAAwUCCBMCZHADBAAACQMdDgIJAyoOAQISAwUMCQMqDgQBA18pyxDH+ilAAwED9P3UeOmOU0ADAQOiRbbz/ZRGQAMBA1CNl24Sq1dAAwUMAwANCQMTDgEGAQkDAg4BAhMDAwEDUPwYc9Fd5UADAwMAAAERAAAFAQsCAQIFAQsCBAIFBwYEAgwDAQMAAAAAAADwPwMDCBQJdGV4ZWxTaXplBQoEAAAGAgEDAAAAAAAA8D8DAgcFCgUKAAgVCXNoYWRvd1BvcwULBAAABgECCwULAgkIBQsACBYIc2hhZG93VXYFCgQAAAkDOg4BCgIVBQsRAAUKBQoACBcEek1heAMEAAAJAzUOAQoCFQULCAADAwAIGANyb3QDBAAABgEGAQkCEA4BBgAGAAoCCwULAAADCgILBQsEAAMDCgILBQsIAAMDAwEDH4XrUbgeCUADAwEDAAAAAAAAAEADAwATBAIFAQEDAQECAQAAAAEFAggZDnNhbXBsZVN0cmVuZ3RoAwQAAAYCAQMAAAAAAADwPwMBAwAAAAAAABBAAwMADhoBaQEEAAAGFQECAAAAAAEBAgQAAAABDwEAAAUECBsGb2Zmc2V0BQoEAAAGAQYBChECDQ8FDAAEAhoBBQwRAAUKAhQFCgUKAgYDBQoABgQCGwUKCQMoDgIGAwYBCQMDDgECGAMDCgIbBQoAAAMDBgEJAwIOAQIYAwMKAhsFCgQAAwMDBgAGAQkDAw4BAhgDAwoCGwUKBAADAwYBCQMCDgECGAMDCgIbBQoAAAMDAwUKBQoIHAVkZXB0aAMEAAAJAz8OAgIIEQEGAAIWBQoCGwUKBQoDAAsGBwYDAhcDAgoDAwIcAwIGgwIMAwIZAwMAAAAAAAEBAgIAAAABBQIIHQ5zYW1wbGVTdHJlbmd0aAMEAAAGAgEDAAAAAAAA8D8DAQMAAAAAAAAoQAMDAA4eAWkBBAAABhUBAgAAAAABAQIMAAAAAQ8BAAAFBAgfBm9mZnNldAUKBAAABgEGAQoRAg4PBQwADAIeAQUMEQAFCgIUBQoFCgIGAwUKAAYEAh8FCgkDKA4CBgMGAQkDAw4BAhgDAwoCHwUKAAADAwYBCQMCDgECGAMDCgIfBQoEAAMDAwYABgEJAwMOAQIYAwMKAh8FCgQAAwMGAQkDAg4BAhgDAwoCHwUKAAADAwMFCgUKCCAFZGVwdGgDBAAACQM/DgICCBEBBgACFgUKAh8FCgUKAwALBgcGAwIXAwIKAwMCIAMCBoMCDAMCHQMDAAAAAAABAQIDAAAAAQUCCCEOc2FtcGxlU3RyZW5ndGgDBAAABgIBAwAAAAAAAPA/AwEDAAAAAAAAUEADAwAOIgFpAQQAAAYVAQIAAAAAAQECQAAAAAEPAQAABQQIIwZvZmZzZXQFCgQAAAYBBgEKEQIPDwUMAEACIgEFDBEABQoCFAUKBQoCBgMFCgAGBAIjBQoJAygOAgYDBgEJAwMOAQIYAwMKAiMFCgAAAwMGAQkDAg4BAhgDAwoCIwUKBAADAwMGAAYBCQMDDgECGAMDCgIjBQoEAAMDBgEJAwIOAQIYAwMKAiMFCgAAAwMDBQoFCggkBWRlcHRoAwQAAAkDPw4CAggRAQYAAhYFCgIjBQoFCgMACwYHBgMCFwMCCgMDAiQDAgaDAgwDAiEDAwAAAAAAAAAACwICAgUFCCUJc2hhZG93UG9zBQsEAAAGAQILBQsCCQgFCwAIJgVkZXB0aAMEAAAJAz8OAgIIEQEJAzoOAQoCJQULEQAFCgUKAwAIJwR6TWF4AwQAAAkDNQ4BCgIlBQsIAAMDAAgoBWRlbHRhAwQAAAYDCQMVDgIEBgACJgMCCgMDAwInAwMCJwMDAAYEAgwDCQM1DgEJAwkOAQYBAgMDAigDAwMDAwAFBAgpCXNoYWRvd1BvcwULBAAABgECCwULAgkIBQsACCoIc2hhZG93VXYFCgQAAAkDOg4BCgIpBQsRAAUKBQoACCsFZGVwdGgDBAAACQM/DgICCBEBCgIqBQoRAAUKAwAGBAIMAwsGBwYDCgIpBQsIAAMCCgMDAisDAgEDAAAAAAAAAAADAQMAAAAAAADwPwMDAwAAAAAAAAA";
h3d_shader_LineShader.SRC = "HXSLFWgzZC5zaGFkZXIuTGluZVNoYWRlcgwBBmNhbWVyYQ0BAwIEdmlldwcAAQADBHByb2oHAAEABAh2aWV3UHJvagcAAQAAAAAFBmdsb2JhbA0CAgYJcGl4ZWxTaXplBQoABQAHCW1vZGVsVmlldwcABQEDAAAACAVpbnB1dA0DAwkIcG9zaXRpb24FCwEIAAoGbm9ybWFsBQsBCAALAnV2BQoBCAABAAAMBm91dHB1dA0EAQ0IcG9zaXRpb24FDAQMAAQAAA4RdHJhbnNmb3JtZWROb3JtYWwFCwQAAA8TdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAEBFwcm9qZWN0ZWRQb3NpdGlvbgUMBAAAEQtsZW5ndGhTY2FsZQMCAAASBXdpZHRoAwIAABMEcGRpcgUMBAAAFAhfX2luaXRfXw4GAAAVBnZlcnRleA4GAAACAhQAAAUBBQUIFgNkaXIFCwQAAAYBAgoFCwkDMg4BAgcHBgULAAYEAhMFDAYBCQMqDgIGAQIWBQsJAzIOAQICBwYFCwEDAAAAAAAA8D8DBQwCAwcFDAUMBoEKAhMFDBEABQoGAgEDAAAAAAAA8D8DCQMNDgEGAAYBCgITBQwAAAMKAhMFDAAAAwMGAQoCEwUMBAADCgITBQwEAAMDAwMDBQoGgAIPBQsGAQYBAhYFCwoCCwUKAAADBQsCEQMFCwULBgQCDgULCQMfDgECFgULBQsFCwAAABUAAAUBBoAKAhAFDBEABQoGAQYBBgEGAQQGAQoCEwUMBQAFCgkDKA4CAQMAAAAAAADwPwMBAwAAAAAAAPC/AwUKBQoFCgQGAwoCCwUKBAADAQMAAAAAAADgPwMDAwUKCgIQBQwIAAMFCgIGBQoFCgISAwUKBQoA";
h3d_shader_MinMaxShader.SRC = "HXSLF2gzZC5zaGFkZXIuTWluTWF4U2hhZGVyCwEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgR0ZXhBCgIAAAsEdGV4QgoCAAAMBWlzTWF4AgIAAQAAAAAADQhfX2luaXRfXw4GAAAOBnZlcnRleA4GAAAPCGZyYWdtZW50DgYAAAMCDQAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAA4AAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ8AAAUDCBABYQUMBAAACQMhDgICCgoCCQUKBQwACBEBYgUMBAAACQMhDgICCwoCCQUKBQwABgQCCAUMCwIMAgkDFg4CAhAFDAIRBQwFDAkDFQ4CAhAFDAIRBQwFDAUMBQwA";
h3d_shader_CubeMinMaxShader.SRC = "HXSLG2gzZC5zaGFkZXIuQ3ViZU1pbk1heFNoYWRlcgwBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoEdGV4QQwCAAALBHRleEIMAgAADAVpc01heAICAAEAAAAAAA0DbWF0BgIAAA4IX19pbml0X18OBgAADwZ2ZXJ0ZXgOBgAAEAhmcmFnbWVudA4GAAADAg4AAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAPAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEQAAAFBQgRAnV2BQoEAAAGAwYBAgkFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAAgSA2RpcgULBAAABgEJAykOAgIRBQoBAwAAAAAAAPA/AwULAg0GBQsACBMBYQUMBAAACQMhDgICCgwCEgULBQwACBQBYgUMBAAACQMhDgICCwwCEgULBQwABgQCCAUMCwIMAgkDFg4CAhMFDAIUBQwFDAkDFQ4CAhMFDAIUBQwFDAUMBQwA";
h3d_shader_NormalMap.SRC = "HXSLFGgzZC5zaGFkZXIuTm9ybWFsTWFwCgEGY2FtZXJhDQECAghwb3NpdGlvbgULAAEAAwNkaXIFCwMBAAAAAAQGZ2xvYmFsDQIBBQltb2RlbFZpZXcHAAQBAwAAAAYFaW5wdXQNAwIHBm5vcm1hbAULAQYACAd0YW5nZW50BQsBBgABAAAJB3RleHR1cmUKAgAACgxjYWxjdWxhdGVkVVYFCgQAAAsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAADBF0cmFuc2Zvcm1lZE5vcm1hbAULBAAADRJ0cmFuc2Zvcm1lZFRhbmdlbnQFDAMAAA4OX19pbml0X192ZXJ0ZXgOBgAADwhmcmFnbWVudA4GAAACAg4AAAUBBgQCDQUMCQMqDgIGAQIIBQsJAzIOAQIFBwYFCwsGBwkDHQ4CAggFCwIIBQsDAQMAAAAAAADgPwMCAQMAAAAAAADwPwMBAwAAAAAAAPC/AwMFDAUMAAEPAAAFBQgQAW4FCwQAAAIMBQsACBECbmYFCwQAAAkDOQ4BCQMhDgICCQoCCgUKBQwFCwAIEgR0YW5YBQsEAAAJAx8OAQoCDQUMkgAFCwULAAgTBHRhblkFCwQAAAYBCQMeDgICEAULAhIFCwULBwMKAg0FDAwAAwMFCwAGBAIMBQsJAx8OAQQGAAYABgEKAhEFCwAAAwISBQsFCwYBCgIRBQsEAAMCEwULBQsFCwYBCgIRBQsIAAMCEAULBQsFCwULBQsFCwA";
h3d_shader_Shadow.SRC = "HXSLEWgzZC5zaGFkZXIuU2hhZG93BgEGc2hhZG93DQEFAgNtYXARAQABAAMEcHJvaggAAQAEBWNvbG9yBQsAAQAFBXBvd2VyAwABAAYEYmlhcwMAAQAAAAAHCnBpeGVsQ29sb3IFDAQAAAgTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAACRhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAoJc2hhZG93UG9zBQsDAAEBCwhmcmFnbWVudA4GAAABAQsAAAUGCAwJc2hhZG93UG9zBQsEAAAGAQIJBQsCAwgFCwAIDQVkZXB0aAMEAAAJAz8OAgICEQEJAzoOAQoCDAULEQAFCgUKAwAIDgR6TWF4AwQAAAkDNQ4BCgIMBQsIAAMDAAgPBWRlbHRhAwQAAAYDCQMVDgIEBgACDQMCBgMDAwIOAwMCDgMDAAgQBXNoYWRlAwQAAAkDNQ4BCQMJDgEGAQIFAwIPAwMDAwAGgQoCBwUMkgAFCwYABgEEBgMBAwAAAAAAAPA/AwIQAwMDCgIEBQuSAAULBQsCEAMFCwULAA";
h3d_shader_SignedDistanceField.SRC = "HXSLHmgzZC5zaGFkZXIuU2lnbmVkRGlzdGFuY2VGaWVsZA4BBWlucHV0DQEDAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEABAVjb2xvcgUMAQEAAQAABQZvdXRwdXQNAgIGCHBvc2l0aW9uBQwEBQAHBWNvbG9yBQwEBQAEAAAIBHRpbWUDAAAACQ5zcHJpdGVQb3NpdGlvbgUMBAAAChBhYnNvbHV0ZVBvc2l0aW9uBQwEAAALCnBpeGVsQ29sb3IFDAQAAAwMdGV4dHVyZUNvbG9yBQwEAAANDGNhbGN1bGF0ZWRVVgUKAwAADg5vdXRwdXRQb3NpdGlvbgUMBAAADwdjaGFubmVsAQIAAQAAAAAAEAthbHBoYUN1dG9mZgMCAAARCXNtb290aGluZwMCAAASBm1lZGlhbg4GAAATCGZyYWdtZW50DgYAAAIDEgMUAXIDBAAAFQFnAwQAABYBYgMEAAADBQENCQMWDgIJAxUOAgIUAwIVAwMJAxUOAgkDFg4CAhQDAhUDAwIWAwMDAAABEwAABQQIFw10ZXh0dXJlU2FtcGxlBQwEAAACDAUMAAgYCGRpc3RhbmNlAwQAAAAABgQCGAMLBgUCDwEBAgAAAAABAgoCFwUMAAADCwYFAg8BAQIBAAAAAQIKAhcFDAQAAwsGBQIPAQECAgAAAAECCgIXBQwIAAMLBgUCDwEBAgMAAAABAgoCFwUMDAADCQISDgMKAhcFDAAAAwoCFwUMBAADCgIXBQwIAAMDAwMDAwMGBAIMBQwJAyoOBAEDAAAAAAAA8D8DAQMAAAAAAADwPwMBAwAAAAAAAPA/AwkDGg4DBgMCEAMCEQMDBgACEAMCEQMDAhgDAwUMBQwA";
h3d_shader_SkinBase.SRC = "HXSLE2gzZC5zaGFkZXIuU2tpbkJhc2UFARByZWxhdGl2ZVBvc2l0aW9uBQsEAAACE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAMRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAQITWF4Qm9uZXMBAgABAAAAAAAFDWJvbmVzTWF0cml4ZXMPCAQCAAEIAA";
h3d_shader_Skin.SRC = "HXSLD2gzZC5zaGFkZXIuU2tpbggBEHJlbGF0aXZlUG9zaXRpb24FCwQAAAITdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAAxF0cmFuc2Zvcm1lZE5vcm1hbAULBAAABAhNYXhCb25lcwECAAEAAAAAAAUNYm9uZXNNYXRyaXhlcw8IBAIAAQgGBWlucHV0DQEEBwhwb3NpdGlvbgULAQYACAZub3JtYWwFCwEGAAkHd2VpZ2h0cwULAQYACgdpbmRleGVzCQQAAAABBgABAAALEnRyYW5zZm9ybWVkVGFuZ2VudAUMBAAADAZ2ZXJ0ZXgOBgAAAQAMAAAFAgYEAgIFCwYABgAGAQQGAQIBBQsRAgUPCAQKAgoJBAAAAAAAAQgFCwULCgIJBQsAAAMFCwYBBAYBAgEFCxECBQ8IBAoCCgkEAAAABAABCAULBQsKAgkFCwQAAwULBQsGAQQGAQIBBQsRAgUPCAQKAgoJBAAAAAgAAQgFCwULCgIJBQsIAAMFCwULBQsGBAIDBQsJAx8OAQYABgAGAQQGAQIIBQsJAzIOARECBQ8IBAoCCgkEAAAAAAABCAYFCwULCgIJBQsAAAMFCwYBBAYBAggFCwkDMg4BEQIFDwgECgIKCQQAAAAEAAEIBgULBQsKAgkFCwQAAwULBQsGAQQGAQIIBQsJAzIOARECBQ8IBAoCCgkEAAAACAABCAYFCwULCgIJBQsIAAMFCwULBQsFCwA";
h3d_shader_SkinTangent.SRC = "HXSLFmgzZC5zaGFkZXIuU2tpblRhbmdlbnQIARByZWxhdGl2ZVBvc2l0aW9uBQsEAAACE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAMRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAQITWF4Qm9uZXMBAgABAAAAAAAFDWJvbmVzTWF0cml4ZXMPCAQCAAEIBgVpbnB1dA0BBQcIcG9zaXRpb24FCwEGAAgGbm9ybWFsBQsBBgAJB3RhbmdlbnQFCwEGAAoHd2VpZ2h0cwULAQYACwdpbmRleGVzCQQAAAABBgABAAAMEnRyYW5zZm9ybWVkVGFuZ2VudAUMBAAADQZ2ZXJ0ZXgOBgAAAQANAAAFAwYEAgIFCwYABgAGAQQGAQIBBQsRAgUPCAQKAgsJBAAAAAAAAQgFCwULCgIKBQsAAAMFCwYBBAYBAgEFCxECBQ8IBAoCCwkEAAAABAABCAULBQsKAgoFCwQAAwULBQsGAQQGAQIBBQsRAgUPCAQKAgsJBAAAAAgAAQgFCwULCgIKBQsIAAMFCwULBQsGBAIDBQsJAx8OAQYABgAGAQQGAQIIBQsJAzIOARECBQ8IBAoCCwkEAAAAAAABCAYFCwULCgIKBQsAAAMFCwYBBAYBAggFCwkDMg4BEQIFDwgECgILCQQAAAAEAAEIBgULBQsKAgoFCwQAAwULBQsGAQQGAQIIBQsJAzIOARECBQ8IBAoCCwkEAAAACAABCAYFCwULCgIKBQsIAAMFCwULBQsFCwYEAgwFDAkDKg4CCQMfDgEGAAYABgEEBgEKAgkFC5IABQsJAzIOARECBQ8IBAoCCwkEAAAAAAABCAYFCwULCgIKBQsAAAMFCwYBBAYBCgIJBQuSAAULCQMyDgERAgUPCAQKAgsJBAAAAAQAAQgGBQsFCwoCCgULBAADBQsFCwYBBAYBCgIJBQuSAAULCQMyDgERAgUPCAQKAgsJBAAAAAgAAQgGBQsFCwoCCgULCAADBQsFCwULCgIMBQwMAAMFDAUMAA";
h3d_shader_SpecularTexture.SRC = "HXSLGmgzZC5zaGFkZXIuU3BlY3VsYXJUZXh0dXJlBAEHdGV4dHVyZQoCAAACDGNhbGN1bGF0ZWRVVgUKBAAAAwlzcGVjQ29sb3IFCwQAAAQIZnJhZ21lbnQOBgAAAQEEAAAFAQaBAgMFCwoJAyEOAgIBCgICBQoFDJIABQsFCwA";
h3d_shader_Texture.SRC = "HXSLEmgzZC5zaGFkZXIuVGV4dHVyZQsBBWlucHV0DQEBAgJ1dgUKAQEAAQAAAwhhZGRpdGl2ZQICAAEAAAAAAAQJa2lsbEFscGhhAgIAAQAAAAAABQ1zcGVjdWxhckFscGhhAgIAAQAAAAAABhJraWxsQWxwaGFUaHJlc2hvbGQDAgABBwAAAAAAAAAAAAAAAAAA8D8HB3RleHR1cmUKAgAACAxjYWxjdWxhdGVkVVYFCgQAAAkKcGl4ZWxDb2xvcgUMBAAACglzcGVjQ29sb3IFCwQAAAsGdmVydGV4DgYAAAwIZnJhZ21lbnQOBgAAAgALAAAFAQYEAggFCgICBQoFCgABDAAABQQIDQFjBQwEAAAJAyEOAgIHCgIIBQoFDAALBg4CBAIGCQYDCgINBQwMAAMCBgMDAQMAAAAAAAAAAAMCAgwAAAALAgMCBoACCQUMAg0FDAUMBoECCQUMAg0FDAUMAAsCBQIGgQIKBQsKAg0FDP4ABQsFCwAAAA";
h3d_shader_UVDelta.SRC = "HXSLEmgzZC5zaGFkZXIuVVZEZWx0YQQBB3V2RGVsdGEFCgIAAAIHdXZTY2FsZQUKAgAAAwxjYWxjdWxhdGVkVVYFCgQAAAQGdmVydGV4DgYAAAEABAAABQEGBAIDBQoGAAYBAgMFCgICBQoFCgIBBQoFCgUKAA";
h3d_shader_VertexColorAlpha.SRC = "HXSLG2gzZC5zaGFkZXIuVmVydGV4Q29sb3JBbHBoYQQBBWlucHV0DQEBAgVjb2xvcgUMAQEAAQAAAwpwaXhlbENvbG9yBQwEAAAECGFkZGl0aXZlAgIAAQAAAAAABQhmcmFnbWVudA4GAAABAQUAAAUBCwIEAgaAAgMFDAICBQwFDAaBAgMFDAICBQwFDAAA";
h3d_shader_VolumeDecal.SRC = "HXSLFmgzZC5zaGFkZXIuVm9sdW1lRGVjYWwYAQZjYW1lcmENAQoCBHZpZXcHAAEAAwRwcm9qBwABAAQIcG9zaXRpb24FCwABAAUIcHJvakZsaXADAAEABghwcm9qRGlhZwULAAEABwh2aWV3UHJvagcAAQAID2ludmVyc2VWaWV3UHJvagcAAQAJBXpOZWFyAwABAAoEekZhcgMAAQALA2RpcgULAwEAAAAADAZnbG9iYWwNAgQNBHRpbWUDAAwADglwaXhlbFNpemUFCgAMAA8JbW9kZWxWaWV3BwAMAQMQEG1vZGVsVmlld0ludmVyc2UHAAwBAwAAABEFaW5wdXQNAwISCHBvc2l0aW9uBQsBEQATBm5vcm1hbAULAREAAQAAFAZvdXRwdXQNBAUVCHBvc2l0aW9uBQwEFAAWBWNvbG9yBQwEFAAXBWRlcHRoAwQUABgGbm9ybWFsBQsEFAAZCXdvcmxkRGlzdAMEFAAEAAAaEHJlbGF0aXZlUG9zaXRpb24FCwQAABsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAHBhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAB0RdHJhbnNmb3JtZWROb3JtYWwFCwQAAB4RcHJvamVjdGVkUG9zaXRpb24FDAQAAB8KcGl4ZWxDb2xvcgUMBAAAIAVkZXB0aAMEAAAhCHNjcmVlblVWBQoEAAAiCXNwZWNQb3dlcgMEAAAjCXNwZWNDb2xvcgULBAAAJAl3b3JsZERpc3QDBAAAJQhkZXB0aE1hcBEBAAAAJgVzY2FsZQUKAgAAJwZub3JtYWwFCwIAACgHdGFuZ2VudAULAgAAKQppc0NlbnRlcmVkAgIAAQAAAAAAKgxjYWxjdWxhdGVkVVYFCgQAACsSdHJhbnNmb3JtZWRUYW5nZW50BQwEAAAsDl9faW5pdF9fdmVydGV4DgYAAC0IZnJhZ21lbnQOBgAAAgIsAAAFAgYEAh0FCwkDHw4BBAYBAicFCwkDMg4BAg8HBgULBQsFCwULBgQCKwUMCQMqDgIJAx8OAQQGAQIoBQsJAzIOAQIPBwYFCwULBQsBAwAAAAAAAPA/AwUMBQwAAS0AAAUJCC4GbWF0cml4BwQAAAYBAggHAhAHBwAILwlzY3JlZW5Qb3MFCgQAAAYCCgIeBQwRAAUKCgIeBQwMAAMFCgAIMANydXYFDAQAAAkDKg4DAi8FCgkDPw4CAiURAQkDOg4BAi8FCgUKAwEDAAAAAAAA8D8DBQwACDEEd3BvcwUMBAAABgECMAUMAi4HBQwACDIEcHBvcwUMBAAABgECMAUMAggHBQwABgQCHAULBgIKAjIFDJIABQsKAjIFDAwAAwULBQsGBAIqBQoGAQImBQoEBgIKAjEFDBEABQoKAjEFDAwAAwUKBQoFCgUKCwIpAgaAAioFCgEDAAAAAAAA4D8DBQoAAAsGCQkDFQ4CCQMVDgIKAioFCgAAAwoCKgUKBAADAwkDFQ4CBgMBAwAAAAAAAPA/AwoCKgUKAAADAwYDAQMAAAAAAADwPwMKAioFCgQAAwMDAwEDAAAAAAAAAAADAgwAAAAA";
haxe_EntryPoint.pending = [];
haxe_EntryPoint.threadCount = 0;
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved["lt"] != null) {
		h.setReserved("lt","<");
	} else {
		h.h["lt"] = "<";
	}
	if(__map_reserved["gt"] != null) {
		h.setReserved("gt",">");
	} else {
		h.h["gt"] = ">";
	}
	if(__map_reserved["amp"] != null) {
		h.setReserved("amp","&");
	} else {
		h.h["amp"] = "&";
	}
	if(__map_reserved["quot"] != null) {
		h.setReserved("quot","\"");
	} else {
		h.h["quot"] = "\"";
	}
	if(__map_reserved["apos"] != null) {
		h.setReserved("apos","'");
	} else {
		h.h["apos"] = "'";
	}
	$r = h;
	return $r;
}(this));
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
hxd_Key.initDone = false;
hxd_Key.keyPressed = [];
hxd_Key.ALLOW_KEY_REPEAT = false;
hxd_Timer.wantedFPS = 60.;
hxd_Timer.maxDeltaTime = 0.5;
hxd_Timer.smoothFactor = 0.95;
hxd_Timer.lastTimeStamp = Date.now() / 1000;
hxd_Timer.elapsedTime = 0.;
hxd_Timer.frameCount = 0;
hxd_Timer.dt = 1 / hxd_Timer.wantedFPS;
hxd_Timer.currentDT = 1 / hxd_Timer.wantedFPS;
hxd_System.setCursor = hxd_System.setNativeCursor;
hxd_System.loopInit = false;
hxd_fs_EmbedFileSystem.invalidChars = new EReg("[^A-Za-z0-9_]","g");
hxd_res_Resource.LIVE_UPDATE = false;
hxd_res_Image.ALLOW_NPOT = true;
hxd_res_Image.DEFAULT_FILTER = h3d_mat_Filter.Linear;
hxd_res_Image.DEFAULT_ASYNC = false;
hxd_res_Image.ENABLE_AUTO_WATCH = true;
hxsl_Tools.UID = 0;
hxsl_Tools.SWIZ = hxsl_Component.__empty_constructs__.slice();
hxsl_Tools.MAX_CHANNELS_BITS = 3;
hxsl_BatchShader.SRC = "HXSLEGh4c2wuQmF0Y2hTaGFkZXICAQtCYXRjaF9Db3VudAECAAEAAAABAAIMQmF0Y2hfQnVmZmVyEAUMAQIAAAA";
hxsl_GlslOut.KWD_LIST = ["input","output","discard","dvec2","dvec3","dvec4","hvec2","hvec3","hvec4","fvec2","fvec3","fvec4","int","float","bool","long","short","double","half","fixed","unsigned","superp","lowp","mediump","highp","precision","invariant","discard","struct","asm","union","template","this","packed","goto","sizeof","namespace","noline","volatile","external","flat","input","output","out","attribute","const","uniform","varying","inout","void"];
hxsl_GlslOut.KWDS = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var _g1 = 0;
		var _g2 = hxsl_GlslOut.KWD_LIST;
		while(_g1 < _g2.length) {
			var k = _g2[_g1];
			++_g1;
			if(__map_reserved[k] != null) {
				_g.setReserved(k,true);
			} else {
				_g.h[k] = true;
			}
		}
	}
	$r = _g;
	return $r;
}(this));
hxsl_GlslOut.GLOBALS = (function($this) {
	var $r;
	var m = new haxe_ds_EnumValueMap();
	{
		var _g = 0;
		var _g1 = hxsl_TGlobal.__empty_constructs__.slice();
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			var n = "" + Std.string(g);
			n = n.charAt(0).toLowerCase() + HxOverrides.substr(n,1,null);
			m.set(g,n);
		}
	}
	m.set(hxsl_TGlobal.ToInt,"int");
	m.set(hxsl_TGlobal.ToFloat,"float");
	m.set(hxsl_TGlobal.ToBool,"bool");
	m.set(hxsl_TGlobal.LReflect,"reflect");
	m.set(hxsl_TGlobal.Mat3x4,"_mat3x4");
	m.set(hxsl_TGlobal.VertexID,"gl_VertexID");
	m.set(hxsl_TGlobal.InstanceID,"gl_InstanceID");
	m.set(hxsl_TGlobal.IVec2,"ivec2");
	m.set(hxsl_TGlobal.IVec3,"ivec3");
	m.set(hxsl_TGlobal.IVec4,"ivec4");
	m.set(hxsl_TGlobal.BVec2,"bvec2");
	m.set(hxsl_TGlobal.BVec3,"bvec3");
	m.set(hxsl_TGlobal.BVec4,"bvec4");
	{
		var g1 = m.iterator();
		while(g1.hasNext()) {
			var g2 = g1.next();
			var _this = hxsl_GlslOut.KWDS;
			if(__map_reserved[g2] != null) {
				_this.setReserved(g2,true);
			} else {
				_this.h[g2] = true;
			}
		}
	}
	$r = m;
	return $r;
}(this));
hxsl_GlslOut.MAT34 = "struct _mat3x4 { vec4 a; vec4 b; vec4 c; };";
hxsl__$Linker_ShaderInfos.UID = 0;
hxsl_Printer.SWIZ = ["x","y","z","w"];
hxsl_RuntimeShader.UID = 0;
hxsl_Serializer.TVECS = new haxe_ds_IntMap();
hxsl_Serializer.BOPS = (function($this) {
	var $r;
	var ops = haxe_macro_Binop.__empty_constructs__.slice();
	ops.splice(haxe_macro_Binop.OpAssignOp(null)._hx_index,0,null);
	$r = ops;
	return $r;
}(this));
hxsl_Serializer.UNOPS = haxe_macro_Unop.__empty_constructs__.slice();
hxsl_Serializer.TGLOBALS = hxsl_TGlobal.__empty_constructs__.slice();
hxsl_Serializer.TSWIZ = new haxe_ds_IntMap();
hxsl_Serializer.REGS = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
hxsl_Serializer.VKINDS = hxsl_VarKind.__empty_constructs__.slice();
hxsl_Serializer.PRECS = hxsl_Prec.__empty_constructs__.slice();
hxsl_Serializer.FKIND = hxsl_FunctionKind.__empty_constructs__.slice();
hxsl_Serializer.SIGN = 9139229;
hxsl_SharedShader.UNROLL_LOOPS = false;
ui_Modal.ALL = [];
ui_Modal.COUNT = 0;
{
	Boot.main();
	haxe_EntryPoint.run();
}
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
